<?php
/**
 * @file
 * Code for the Git book: Read the Docs.
 */

// parsedown global variables
define('PARSEDOWN_URL', 'https://github.com/erusev/parsedown');
/**
 * Impliments hook_libraries_info
 *
 * Defines the parsedown library as well as loading the php files.
 */
function git_book_gb_libraries_info() {
  $libraries['parsedown'] = array(
    'name' => 'Parsedown',
    'vendor url' => PARSEDOWN_URL,
    'download url' => PARSEDOWN_URL,
    // manually setting the version because the library handles versioning
    // via git tags.
    'version' => '0.x',
    'files' => array(
      'php' => array(
        'Parsedown.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_git_book_parser().
 */
function git_book_gb_git_book_parser() {
  $parser['gb'] = array(
    'name'   => t('Parse Git Book'),
    'init'   => '_git_book_gb_summary', // when node is inserted
    'parser' => 'git_book_gb_git_book_parse', // reading from directory
    'path'   => 'git_book_gb_construct_path', // where to put
  );

  return $parser;
}

/**
 * Callback for git_book_gb_git_book_parser to build SUMMARY.md
 */
function _git_book_gb_summary($path, $node, $pages = array()) {
  $gitbook = array(
    'site_name' => $node->title,
    'theme' => 'gitbook',
    'site_author' => $GLOBALS['user']->name,
    'repo_name' => $node->title,
    'pages' => $pages,
  );
  // something here?
}

/**
 * Callback to modify path for git_book_gb_git_book_parser.
 */
function git_book_gb_construct_path($path, $node) {
  return '';
}


/**
 * Callback to parse git_book_gb_git_book_parser.
 */
function git_book_gb_git_book_parse($path, $node) {
	// Get the contents of what is in the summary file in repo.
  $summary = file_get_contents($path . '/SUMMARY.md');
  libraries_load('parsedown');
  // Use the Parsedown library to parse the file.
  $Parsedown = new Parsedown();
  // Create a variable with the text from that file in HTML.
  $data = $Parsedown->text($summary);

  // Create a dom document so we can scrape the HTML for what we need
  $doc = new DOMDocument;
  $doc->loadHTML($data);
  $doc->preserveWhiteSpace = false;

  $data= preg_replace('/^<!DOCTYPE.+?>/', '', str_replace( array('<html>', '</html>', '<body>', '</body>', '<h1>Summary', '</h1>'), array('', '', '', '', '', ''), $doc->saveHTML()));

  //// strip white space and end lines
	$data = trim(str_replace(array('  ', "\r\n", "\r", "\n", '<ul>', '</ul>', '<li>', '</li>'), array('', '', '', '', '<children>', '</children>', '<nodes>', '</nodes>'), $data));

	//// preg match li's that have nested structure to make them valid XML
	$data = preg_replace('/<nodes>([^<>]*)<children>/s', '<nodes><title>${1}</title><link>null</link><children>', $data);
	//// match links and convert to easier to parse format for XML walk
	$data = preg_replace('/<a href="(.*?)">(.*?)<\/a>/s', '<title>${2}</title><link>${1}</link>', $data);
	//// make empty bottom title items without children to match our previous method
	$data = preg_replace('/<nodes>([^<>]*)<\/nodes>/s', '<nodes><title>${1}</title><link>null</link></nodes>', $data);
	//// cheat to make this xml
	$xml = simplexml_load_string($data, 'SimpleXMLElement');
	//// cheat to convert simpleXML object into a nested array
	$ary = json_decode(json_encode((array) simplexml_load_string($data)), 1);

  //Pass off the collected data to the parse function.
  _git_book_gb_parse($ary, $path, $node);

  return $ary;
}

/**
 * Parse a Git Book style repo
 * @param  array  &$gb       level of the structure
 * @param  string  $path     path to the docs folder
 * @param  object  $parent   parent node
 */
function _git_book_gb_parse(&$gb, $path, $parent, $weight = -15) {

  foreach ($gb as $nodes) {
    if (array_key_exists('title', $nodes) && array_key_exists('link', $nodes)) {
      $body = '';

      // ensure this file exists
      if (file_exists($path . DIRECTORY_SEPARATOR .$nodes['link'])) {
       $body = file_get_contents($path . DIRECTORY_SEPARATOR .$nodes['link']);
      }

      $new_parent = _git_book_make_node($nodes['title'], $body, $parent, ++$weight);
    }
    foreach ($nodes as $node) {
      if (!is_array($node)) {
        continue;
      }
      elseif (array_key_exists('title', $node) && array_key_exists('link', $node)) {

        $body = '';

        // ensure this file exists
        if (file_exists($path . DIRECTORY_SEPARATOR .$node['link'])) {
          $body = file_get_contents($path . DIRECTORY_SEPARATOR .$node['link']);
        }

        $new_parent = _git_book_make_node($node['title'], $body, $parent, ++$weight);

        if (array_key_exists('children', $node) && is_array($node['children'])) {
          _git_book_gb_parse($node['children'], $path, $new_parent);
        }
      }
    }
  }
}
