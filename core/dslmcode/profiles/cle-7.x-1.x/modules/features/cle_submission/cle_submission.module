<?php
/**
 * @file
 * Code for the CLE Submission feature.
 */

include_once 'cle_submission.features.inc';


/**
 * Impliments hook_menu()
 */
function cle_submission_menu() {
  $items['cle/submission/clone/%node/%node'] = array(
    'page callback' => 'cle_submission_clone_page_callback',
    'page arguments' => array(3, 4),
    'access callback' => cle_submission_clone_access_callback,
    'access arguments' => array(3),
  );
  return $items;
}

/**
 * Page Callback for cle/submission/clone/%node/%node
 */
function cle_submission_clone_page_callback($submission, $assignment) {
  // create a clone
  $new_submission = replicate_entity('node', $submission);
  $ns_wrapper = entity_metadata_wrapper('node', $new_submission);
  // set the assignment to the new child assignment
  $ns_wrapper->field_assignment->set($assignment->nid);
  // set the submission state back to submission_in_progress
  $ns_wrapper->field_submission_state->set('submission_in_progress');
  $ns_wrapper->save();

  drupal_goto($ns_wrapper->url->value());
}

function cle_submission_clone_access_callback($submission) {
  global $user;
  $access = FALSE;

  // if the user has content admin rights then grant access and leave
  if (user_access('administer cle content', $account)) {
    return TRUE;
  }

  // if the user is the author of the original submission
  if ($submission->uid == $user->uid) {
    $access = TRUE;
  }

  return $access;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cle_submission_form_cle_submission_node_form_alter(&$form, &$form_state, $form_id) {
  // add custom validation callback
  $form['#validate'][] = 'cle_submission_form_cle_submission_node_form_validate';

  // ensure this isn't loaded in an ajax callback
  if (arg(0) != 'system') {
    // make sure that its not set to the needs work state
    // if it is then we need to allow anyone to see it so they could change it
    // back to ready for review but not the "in progress" since this is just
    // for a one time fix
    if (isset($form['field_submission_state']['und']['#default_value'][0]) && $form['field_submission_state']['und']['#default_value'][0] == 'submission_needs_work') {
      unset($form['field_submission_state']['und']['#options']['submission_in_progress']);
    }
    else {
      // only cle content admins can set the following states
      if (!user_access('administer cle content')) {
        unset($form['field_submission_state']['und']['#options']['submission_needs_work']);
        unset($form['field_submission_state']['und']['#options']['submission_complete']);
      }
    }
    // try to pull from the default being set
    if (isset($form['field_assignment']['und']['#default_value'][0])) {
      $assignment = node_load($form['field_assignment']['und']['#default_value'][0]);
    }
    else {
      $assignment = FALSE;
    }

    if ($assignment) {
      // make sure that the assignment is open for the submission for the
      // current user
      $assignment_is_open = _cle_assignment_is_submittable($assignment);
      if (!$assignment_is_open) {
        drupal_set_message(t('This assignment is not open for submissions.'), 'error');
        drupal_access_denied();
        exit();
      }

      // bring in styling and hide fields
      $path = drupal_get_path('module', 'cle_submission') . '/';
      drupal_add_css($path . 'css/submission_form.css');
      // fields that we allow to be optionally hidden
      $hidden = array('field_images', 'field_video', 'body', 'field_links', 'field_files');
      // remove things we should allow to display
      foreach ($assignment->field_media_requirements['und'] as $field) {
        unset($hidden[array_search($field['value'], $hidden)]);
      }
      // hide things that shouldn't be visible based on requirements of assignment
      foreach ($hidden as $hide) {
        $form[$hide]['#access'] = FALSE;
        $tmpgroup = str_replace('field_', 'group_', $hide);
        // hide / remove the grouping item if it exist
        if (isset($form['#groups'][$tmpgroup])) {
          unset($form['#group_children'][$tmpgroup]);
        }
        // hide the items that live in groups as well to prevent an error downstream
        if (isset($form['#groups'][$tmpgroup])) {
          unset($form['#group_children'][$hide]);
        }
      }
    }
  }
}

/**
 * cle_submission_form_cle_submission_node_form submit handler.
 */
function cle_submission_form_cle_submission_node_form_validate($form, &$form_state) {
  // find the assignment id
  $assignment_id = (isset($form_state['values']['field_assignment']['und'][0]['target_id']) ? $form_state['values']['field_assignment']['und'][0]['target_id'] : NULL);
  // see if the assignment is open for the current user
  $assignment_is_open = _cle_assignment_is_submittable($assignment_id);
  // if it is not open then we need to prevent the from from being submitted
  if (!$assignment_is_open) {
    form_set_error('', t('This assignment is not open for submissions.'));
  }
}

/**
 * Implements hook_page_build().
 */
function cle_submission_page_build(&$page) {
  $file = FALSE;
  $path = drupal_get_path('module', 'cle_submission') . '/';
  $node = menu_get_object();

  if ($node) {
    if ($node->type == 'cle_submission') {
      // add custom css
      $file = 'submission';
      drupal_add_css($path . 'css/' . $file . '.css');
    }
  }
  else {
    // add special js handling to the submissions overview
    switch (arg(2)) {
      case 'assignments':
      case 'assignments-list':
        $file = 'assignment_listing';
        drupal_add_js($path . 'js/' . $file . '.js');
        drupal_add_css($path . 'css/' . $file . '.css');
      break;
    }
  }

  if ($node && $node->type == 'cle_assignment' && arg(2) != 'edit') {
    $assignment_submitable = _cle_assignment_is_submittable($node->nid);
    if ($assignment_submitable) {
      $submissions = _cle_submission_user_submitted_assignment($node->nid);
      $output = '';
      if ($submissions) {
        $output .= '<h3>' . t('My Submissions') . '</h3>';
        $output .= '<ul class="collection">';
        foreach ($submissions as $submission) {
          $output .= l($submission->title, 'node/' . $submission->nid, array('attributes' => array('class' => array('collection-item'))));
        }
        $output .= '</ul>';
      }
      if (empty($output)) {
        $url_query = array();
        // add field_assignment
        $url_query['field_assignment'] = $node->nid;
        $output .= l(t('Submit assignment'),'node/add/cle-submission',
          array(
            'query' => $url_query,
            'attributes' => array('class' => array('cle__submission-link', 'waves-effect waves-light btn-large')),
          )
        );

        // add submission copy if turned on
        if (isset($node->field_parent_assignment_ref['und'][0]['target_id']) && $node->field_submission_copy['und'][0]['value']) {
          $parent_assignment_submission = _cle_submission_user_submitted_assignment($node->field_parent_assignment_ref['und'][0]['target_id']);
          $parent_assignment_submission = array_shift($parent_assignment_submission);
          $url_query = array();
          $output .= l(t('Clone submission: !title', array('!title' => $parent_assignment_submission->title)),'cle/submission/clone/'. $parent_assignment_submission->nid .'/'. $node->nid,
            array(
              'attributes' => array('class' => array('cle__submission-link', 'waves-effect waves-light btn-large')),
            )
          );
        }
      }
      $page['content']['assignment_submission'] = array(
        '#markup' => $output,
        '#weight' => 100,
      );
    }
  }

}

/**
 * Implements hook_node_access().
 */
function cle_submission_node_access($node, $op, $account) {
  // allow for privacy value on the assignment to dictate who can see this
  if (!_cis_connector_role_groupings(array('teacher', 'staff', 'webservice'), $account) && $op == 'view' && $node->type == 'cle_submission' && $node->uid != $account->uid) {
    // see if this assignment is private
    $assignment = node_load($node->field_assignment['und'][0]['target_id']);
    // boolean for visibility
    if (!$assignment->field_visibility['und'][0]['value']) {
      // if it's a hidden assignment, the last check is admin member
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Helper function to find it a user has submitted an assignement.
 * @return true will return list of submission ids, false will return false.
 */
function _cle_submission_user_submitted_assignment($assignment_id, $user = NULL) {
  if (!$user) {
    global $user;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'cle_submission');
  $query->propertyCondition('uid', $user->uid);
  $query->fieldCondition('field_assignment', 'target_id', $assignment_id, '=');
  $result = $query->execute();

  if (isset($result['node'])) {
    $submission_ids = array_keys($result['node']);
    $submissions_obj = entity_load('node', $submission_ids);
    return $submissions_obj;
  }
  else {
    return FALSE;
  }
}
