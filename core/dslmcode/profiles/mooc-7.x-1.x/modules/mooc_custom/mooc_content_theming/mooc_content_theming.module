<?php
/**
 * @file
 * Code for the MOOC content theming feature.
 */

include_once 'mooc_content_theming.features.inc';

/**
 * Implements hook_block_info().
 */
function mooc_content_theming_block_info() {
  $blocks['mooc_content_theming_banner'] = array(
    'info' => t('MOOC content banner'),
    'cache' => DRUPAL_CACHE_PER_PAGE
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mooc_content_theming_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'mooc_content_theming_banner':
      $block['subject'] = '<none>';
      $block['content'] = _mooc_content_theming_banner_block();
    break;
  }
  return $block;
}

/**
 * Callback for the banner block.
 */
function _mooc_content_theming_banner_block() {
  // try to get node from active menu item
  $node = menu_get_object();
  if (isset($node->book)) {
    // easiest use-case, this has a banner image
    if (isset($node->field_mooc_image) && !empty($node->field_mooc_image)) {
      $image_uri = $node->field_mooc_image['und'][0]['uri'];
      // fallbacks for missing alt info
      if (isset($node->field_mooc_image['und'][0]['alt']) && !empty($node->field_mooc_image['und'][0]['alt'])) {
        $alt = $node->field_mooc_image['und'][0]['alt'];
      }
      else {
        $alt = t('@title banner', array('@title' => $node->title));
      }
      // fallbacks for missing title info
      if (isset($node->field_mooc_image['und'][0]['title']) && !empty($node->field_mooc_image['und'][0]['title'])) {
        $title = $node->field_mooc_image['und'][0]['title'];
        $cite = "<cite class=\"mooc-logo-title image__cite\">$title</cite>";
      }
      else {
        $title = $node->title;
        $cite = '';
      }
      // build the image
      $image = theme('image', array(
        'path' => $image_uri,
        'alt' => strip_tags($alt),
        'title' => strip_tags($title),
        'attributes' => array(
          'class' => array('logo', 'mooc-banner-image'),
        ),
      ));
      // return with correct title / alt wrapper
      return "<div class=\"mooc-banner-image-wrapper\">$image $cite</div>";
    }
    else {
      // spider back up through parents til we find a match
      $plid = $node->book['plid'];
      while ($plid != 0) {
        $pmenu = book_link_load($plid);
        $parent = node_load($pmenu['nid']);
        // check that it has the image field set
        if (empty($parent->field_mooc_image)) {
          // keep going
          $plid = $parent->book['plid'];
        }
        else {
          $image_uri = $parent->field_mooc_image['und'][0]['uri'];
          // fallbacks for missing alt info
          if (isset($parent->field_mooc_image['und'][0]['alt']) && !empty($parent->field_mooc_image['und'][0]['alt'])) {
            $alt = $parent->field_mooc_image['und'][0]['alt'];
          }
          else {
            $alt = t('@title banner', array('@title' => $parent->title));
          }
          // fallbacks for missing title info
          if (isset($parent->field_mooc_image['und'][0]['title']) && !empty($parent->field_mooc_image['und'][0]['title'])) {
            $title = $parent->field_mooc_image['und'][0]['title'];
            $cite = "<cite class=\"mooc-logo-title image__cite\">$title</cite>";
          }
          else {
            $title = $parent->title;
            $cite = '';
          }
          // build the image
          $image = theme('image', array(
            'path' => $image_uri,
            'alt' => strip_tags($alt),
            'title' => strip_tags($title),
            'attributes' => array(
              'class' => array('logo', 'mooc-banner-image'),
            ),
          ));
          // return with correct title / alt wrapper
          return "<div class=\"mooc-banner-image-wrapper\">$image $cite</div>";
        }
      }
    }
  }
  return NULL;
}

/**
 * Implements hook_foundation_access_ux_menu_item_icon_alter().
 */
function mooc_content_theming_foundation_access_ux_menu_item_icon_alter(&$icon, $node) {
  // passthrough, hidden takes priority
  if (isset($node->hidden) && $node->hidden) {
    $icon = 'hidden';
  }
  // see if we have a instructionally significant icon
  elseif (isset($node->field_instructional_significance['und'][0]['value'])) {
    $icon = $node->field_instructional_significance['und'][0]['value'];
  }
  // see if we have a container type
  elseif ($node->type == 'mooc_container') {
    $icon = 'content';
  }
  // see if we have a container type
  elseif ($node->type == 'mooc_topic') {
    $icon = 'content';
  }
}

/**
 * Implements hook_foundation_access_colors_alter().
 */
function mooc_content_theming_foundation_access_colors_alter(&$color, $current) {
  $node = menu_get_object('node');
  // allow pages to pass their styling down
  if (isset($node) && $node->type == 'page' && isset($node->{'field_fa_' . $current . '_color'})) {
    if (!empty($node->{'field_fa_' . $current . '_color'})) {
      $color = $node->{'field_fa_' . $current . '_color'}[LANGUAGE_NONE][0]['jquery_colorpicker'];
    }
    elseif (isset($node->book)) {
      // spider back up through parents til we find a match
      $plid = $node->book['plid'];
      while ($plid != 0) {
        $pmenu = book_link_load($plid);
        $parent = node_load($pmenu['nid']);
        // check that it has the image field set
        if (empty($parent->{'field_fa_' . $current . '_color'})) {
          // keep going
          $plid = $parent->book['plid'];
        }
        else {
          // use this one, we always use the closest parent we find
          $color = $parent->{'field_fa_' . $current . '_color'}[LANGUAGE_NONE][0]['jquery_colorpicker'];
          $plid = 0;
        }
      }
    }
  }
}

