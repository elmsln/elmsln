<?php
/**
 * @file
 * Code for the CLE Assignment feature.
 */
// default assignment color for new ones
define('CLE_ASSIGNMENT_DEFAULT_COLOR', 'aac');

include_once 'cle_assignment.features.inc';

/**
 * Implements hook_menu().
 */
function cle_assignment_menu() {
  $items = array();
  $items['api/v1/cle/assignments'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', NULL, NULL),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/create'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', NULL, 4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/fields'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', NULL, 4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/%'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', 4, 'query'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/%/fields'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', 4, 5),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/%/update'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', 4, 'update'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/%/delete'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', 4, 'delete'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_elmsln_jsapi_info().
 */
function cle_assignment_elmsln_jsapi_info() {
  // assignment api router
  $items['assignment'] = array(
    'type'   => 'node',
    'bundle' => 'cle_assignment',
    'modify' => '_cle_assignment_v1_assignment_modify',
    'list'   => '_cle_assignment_v1_get_assignments',
    'output' => '_cle_assignment_v1_assignment_output',
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cle_assignment_form_cle_assignment_node_form_alter(&$form, &$form_state, $form_id) {
  unset($form['body']['und'][0]['summary']);
}

/**
 * Implements hook_page_build().
 */
function cle_assignment_page_build(&$page) {
  if (arg(0) == 'node' && arg(2) == 'assignment_bulk') {
    $file = 'assignment_bulk';
    $path = drupal_get_path('module', 'cle_assignment') . '/';
    drupal_add_js($path . 'js/' . $file . '.js');
    drupal_add_css($path . 'css/' . $file . '.css');
  }
}

/**
 * Implements hook_node_presave().
 */
function cle_assignment_node_presave($node) {
  if ($node->type == 'cle_assignment') {
    // make sure that an assignment doesn't list itself as a dependency.
    if (isset($node->field_assignment_dependencies['und'][0]['target_id']) && isset($node->nid)) {
      if ($node->field_assignment_dependencies['und'][0]['target_id'] == $node->nid) {
        $message = t('An assignment can not list itself as a dependency.');
        watchdog('cle_assignment_presave', $message, array('nid' => $node->nid), WATCHDOG_ERROR);
        throw new Exception($message);
      }
    }
    // if we have a critique method chosen then we need to ensure we have a
    // parent submission
    if ($node->field_critique_method[LANGUAGE_NONE][0]['value'] != 'none') {
      if (!isset($node->field_assignment_dependencies['und'][0]['target_id']) || !$node->field_assignment_dependencies['und'][0]['target_id']) {
        $message = t('An critique assignment must have an assignment dependency.');
        watchdog('cle_assignment_presave', $message, array('nid' => $node->nid), WATCHDOG_ERROR);
        throw new Exception($message);
      }
    }
  }
}

/**
 * ELMSLN JSapi callback for creating an assignment.
 * @todo  make this use the full POST data sanitized and in params.
 */
function _cle_assignment_v1_assignment_modify($node, $params = NULL) {
  if (!isset($node->nid)) {
    $detail = t('Assignment created');
  }
  else {
    $detail = t('Assignment updated');
  }
  // loop through supported parameters and set them for create or update
  foreach ($params as $key => $value) {
    // fields we support in a POST
    switch ($key) {
      case 'uid':
      case 'uuid':
      case 'title':
      case 'status':
        $node->{$key} = $value;
      break;
      case 'body':
        $node->field_assignment_description[LANGUAGE_NONE][0] = $value;
      break;
      case 'archived':
        $node->field_cle_archived['und'][0]['value'] = $value;
      break;
      case 'section':
        if (!is_null($value)) {
          $node->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $value;
        }
      break;
      case 'allowLateSubmissions':
        $node->field_assignment_late_submission[LANGUAGE_NONE][0]['value'] = (int)$value;
      break;
      case 'color':
        $node->field_assignment_color[LANGUAGE_NONE][0]['jquery_colorpicker'] = $value;
      break;
      case 'image':
        if (!is_null($value)) {
          $node->field_assignment_image[LANGUAGE_NONE][0]['target_id'] = $value;
        }
      break;
      case 'type':
        $node->field_assignment_privacy_setting[LANGUAGE_NONE][0]['value'] = $value;
      break;
      case 'startDate':
        if (!is_null($value)) {
          $node->field_assignment_due_date[LANGUAGE_NONE][0]['value'] = $value;
        }
      break;
      case 'endDate':
        if (!is_null($value)) {
          $node->field_assignment_due_date[LANGUAGE_NONE][0]['value2'] = $value;
        }
      break;
      case 'commentStyle':
        $node->field_assignment_feedback[LANGUAGE_NONE][0]['value'] = $value;
      break;
      case 'project':
        if (!is_null($value)) {
          $node->field_assignment_project[LANGUAGE_NONE][0]['target_id'] = $value;
        }
      break;
      case 'hierarchy':
        foreach ($value as $key2 => $value2) {
          switch ($key2) {
            case 'dependencies':
              $node->field_assignment_dependencies[LANGUAGE_NONE] = array();
              foreach ($value2 as $item) {
                if (!is_null($item)) {
                  $node->field_assignment_dependencies[LANGUAGE_NONE][] = array('target_id' => $item);
                }
              }
            break;
            case 'project':
              if (!is_null($value2)) {
                $node->field_assignment_project[LANGUAGE_NONE][0]['target_id'] = $value2;
              }
            break;
          }
        }
      break;
      case 'evidence':
        foreach ($value as $key2 => $value2) {
          switch ($key2) {
            case 'competencies':
              $node->field_elmsln_competencies[LANGUAGE_NONE] = array();
              foreach ($value2 as $item) {
                $node->field_elmsln_competencies[LANGUAGE_NONE][] = array('value' => $item);
              }
            break;
            // critique or artifact based evidence method
            case 'assets':
              $node->$node->field_assignment_evidence[LANGUAGE_NONE][0]['value'] = $value2;
            break;
            // ridiculous looking but allows normalized UI based definition of requirements
            // to complete an assignment
            case 'artifacts':
              $node->field_assignment_artifacts[LANGUAGE_NONE] = array();
              foreach ($key2 as $item) {
                switch ($item) {
                  case 'body':
                    $node->field_assignment_artifacts[LANGUAGE_NONE][] = array('value' => 'field_submission_text');
                  break;
                  case 'images':
                  case 'video':
                  case 'files':
                  case 'links':
                    $node->field_assignment_artifacts[LANGUAGE_NONE][] = array('value' => 'field_' . $item);
                  break;
                }
              }
            break;
            case 'critique':
              foreach ($value2 as $key3 => $value3) {
                switch ($key3) {
                  case 'method':
                    $node->field_critique_method[LANGUAGE_NONE][0]['value'] = $value3;
                  break;
                  case 'outline':
                    $node->field_critique_outline[LANGUAGE_NONE][0]['value'] = $value3;
                  break;
                  case 'public':
                    $node->field_critique_privacy[LANGUAGE_NONE][0]['value'] = $value3;
                  break;
                }
              }
            break;
          }
        }
      break;
    }
  }
  // account for artifacts not being set
  // @todo this may come from the UI at some point
  if (!isset($node->field_assignment_artifacts) || empty($node->field_assignment_artifacts)) {
    $node->field_assignment_artifacts[LANGUAGE_NONE] = array(
        array('value' => 'field_submission_text'),
        array('value' => 'field_images'),
        array('value' => 'field_video'),
        array('value' => 'field_files'),
        array('value' => 'field_links'),
    );
  }
  // account for due date not having an end date
  if (!is_null($node->field_assignment_due_date[LANGUAGE_NONE][0]['value']) && is_null($node->field_assignment_due_date[LANGUAGE_NONE][0]['value2'])) {
    $node->field_assignment_due_date[LANGUAGE_NONE][0]['value2'] = $node->field_assignment_due_date[LANGUAGE_NONE][0]['value'];
  }
  // ensure we don't have anonymous creation since it's not possible
  if (!isset($node->uid) || $node->uid == 0) {
    $node->uid = $GLOBALS['user']->uid;
  }
  node_save($node);
  // output the newly created node
  $vars = array(
    'status' => '200',
    'detail' => $detail,
    'node' => (array) $node,
  );
  return $vars;
}

/**
 * Helper function that prepares an assignment for api output.
 */
function _cle_assignment_v1_assignment_output($node, $app_route = '') {
  global $base_url;
  $account = $GLOBALS['user'];
  // get an array of formatted dates
  $dates = _elmsln_api_format_date_field($node->field_assignment_due_date[LANGUAGE_NONE][0]);
  // set color
  $color = '#ffffff';
  // account for color field so it's a color on output if set
  if (isset($node->field_assignment_color[LANGUAGE_NONE][0]['jquery_colorpicker'])) {
    $color = '#' . $node->field_assignment_color[LANGUAGE_NONE][0]['jquery_colorpicker'];
  }
  // see if this allows late submissions
  $allowLate = (bool)$node->field_assignment_late_submission[LANGUAGE_NONE][0]['value'];
  // calculate if this is on time / can be active for submissions
  // as well as providing a rationale behind this response
  // this helps in both debugging and messages to the end user
  // so logic all stays server side
  $time = REQUEST_TIME;
  $rationale = array();
  // see if this has a due date and if it is after as a result
  if (isset($node->field_assignment_due_date[LANGUAGE_NONE][0]['value'])) {
    // time is greater than the due date, meaning its late
    // see if it's allowed to be late though
    if ($time > $node->field_assignment_due_date['und'][0]['value2'] && $allowLate) {
      $submissionActive = 1;
      $rationale['text'] = t('The assignment was due @date, but late submissions are accepted.', array('@date' => date('M d, Y - h:iA', $node->field_assignment_due_date['und'][0]['value2'])));
      $rationale['code'] = 'date-late';
      $rationale['data'] = array($node->field_assignment_due_date['und'][0]['value2']);
    }
    // time is greater than the due date and they can't submit
    else if ($time > $node->field_assignment_due_date['und'][0]['value2'] && !$allowLate) {
      $submissionActive = 0;
      $rationale['text'] = t('The assignment was due @date and submissions are now closed.', array('@date' => date('M d, Y - h:iA', $node->field_assignment_due_date['und'][0]['value2'])));
      $rationale['code'] = 'date-closed';
      $rationale['data'] = array($node->field_assignment_due_date['und'][0]['value2']);
    }
    // time greater than 1st date (within it starting) and less than 2nd (due date)
    else if ($time > $node->field_assignment_due_date['und'][0]['value'] && $time < $node->field_assignment_due_date['und'][0]['value2']) {
      $submissionActive = 1;
      $rationale['text'] = t('Assignment submissions opened @date1 and are due by @date2.', array('@date1' => date('M d, Y - h:iA', $node->field_assignment_due_date['und'][0]['value']), '@date2' => date('M d, Y - h:iA', $node->field_assignment_due_date['und'][0]['value2'])));
      $rationale['code'] = 'date-open';
      $rationale['data'] = array($node->field_assignment_due_date['und'][0]['value'], $node->field_assignment_due_date['und'][0]['value2']);

    }
    // time is less than the start of the date range meaning it hasn't opened yet
    else if ($time < $node->field_assignment_due_date['und'][0]['value'] && $node->field_assignment_due_date['und'][0]['value'] != $node->field_assignment_due_date['und'][0]['value2'] && !is_null($node->field_assignment_due_date['und'][0]['value2'])) {
      $submissionActive = 0;
      $rationale['text'] = t('Assignment submissions are currently closed. This assignment will open @date1 and is due by @date2.', array('@date1' => date('M d, Y - h:iA', $node->field_assignment_due_date['und'][0]['value']), '@date2' => date('M d, Y - h:iA', $node->field_assignment_due_date['und'][0]['value2'])));
      $rationale['code'] = 'date-closed';
      $rationale['data'] = array($node->field_assignment_due_date['und'][0]['value'], $node->field_assignment_due_date['und'][0]['value2']);
    }
    // time is before the due date, we're good.
    else if ($time < $node->field_assignment_due_date['und'][0]['value']) {
      $submissionActive = 1;
      $rationale['text'] = t('The assignment is accepting submissions and is due @date.', array('@date' => date('M d, Y - h:iA', $node->field_assignment_due_date['und'][0]['value'])));
      $rationale['code'] = 'date-open';
      $rationale['data'] = array($node->field_assignment_due_date['und'][0]['value']);
    }
  }
  else {
    $submissionActive = 1;
    $rationale['text'] = t('The assignment is open for submission, there is no due date.');
    $rationale['code'] = 'date-none';
  }
  // support for assignment dependencies
  if (isset($node->field_assignment_dependencies[LANGUAGE_NONE][0])) {
    // loop through dependencies and check if they have been met
    foreach ($node->field_assignment_dependencies[LANGUAGE_NONE] as $item) {
      $assignment = node_load($item['target_id']);
      $tmp = _cle_submission_submission_status($assignment);
      if (empty($tmp['complete']['submissions'])) {
        $submissionActive = 0;
        $rationale['text'] = t('This assignment won\'t open until dependencies have been met.');
        $rationale['code'] = 'dependencies-unmet';
        $rationale['data'][] = $assignment->nid;
      }
    }
  }
  // account for admin / staff / teacher roles which can submit things
  // regardless of due date stuff
  if (_cis_connector_role_groupings(array('staff', 'teacher')) && $submissionActive == 0) {
    $submissionActive = 1;
    $rationale['text'] .= ' ' . t('<em>Your privileges allow you to submit this regardless.</em>');
  }
  // calculate metadata to act on this
  $metadata = array(
    'rationale' => $rationale,
    'submissionActive' => $submissionActive,
    'relatedSubmissions' => _cle_submission_submission_status($node),
    'canUpdate' => 0,
    'canDelete' => 0,
    'afterDueDate' => 0,
    'canCritique' => 0,
  );
  // see the operations they can perform here
  if (entity_access('update', 'node', $node, $account)) {
    $metadata['canUpdate'] = 1;
  }
  if (entity_access('delete', 'node', $node, $account)) {
    $metadata['canDelete'] = 1;
  }
  // see if this has a due date and if it is after as a result
  if (isset($node->field_assignment_due_date['und'][0]['value'])) {
    // check for due date 2
    if (isset($node->field_assignment_due_date['und'][0]['value2'])) {
      if (time() > $node->field_assignment_due_date['und'][0]['value2']) {
        $metadata['afterDueDate'] = 1;
      }
    }
    else {
      if (time() > $node->field_assignment_due_date['und'][0]['value']) {
        $metadata['afterDueDate'] = 1;
      }
    }
  }

  // this will be our json formatted output
  $return = array(
    'id' => (int)$node->nid,
    'uid' => (int)$node->uid,
    'uuid' => $node->uuid,
    'title' => $node->title,
    'status' => (int)$node->status,
    'created' => Date('c', $node->created),
    'body' => ($node->field_assignment_description[LANGUAGE_NONE][0]['safe_value'] ? $node->field_assignment_description[LANGUAGE_NONE][0]['safe_value'] : $node->field_assignment_description[LANGUAGE_NONE][0]['value']),
    'allowLateSubmissions' => (int)$node->field_assignment_late_submission[LANGUAGE_NONE][0]['value'],
    'color' => $color,
    'image' => (isset($node->field_assignment_image[LANGUAGE_NONE][0]) ? _elmsln_api_v1_file_output($node->field_assignment_image[LANGUAGE_NONE][0]) : array()),
    'type' => $node->field_assignment_privacy_setting[LANGUAGE_NONE][0]['value'],
    'startDate' => $dates[0],
    'endDate' => $dates[1],
    'commentStyle' => $node->field_assignment_feedback[LANGUAGE_NONE][0]['value'],
    'archived' => (int)$node->field_cle_archived['und'][0]['value'],
    'hierarchy' => array(
      'dependencies' => _elmsln_api_multifield_clean($node, 'field_assignment_dependencies', 'target_id', TRUE),
      'project' => (int)$node->field_assignment_project[LANGUAGE_NONE][0]['target_id'],
    ),
    'evidence' => array(
      'competencies' => $node->field_elmsln_competencies[LANGUAGE_NONE],
      'assets' => $node->field_assignment_evidence[LANGUAGE_NONE][0]['value'],
      'artifacts' => _elmsln_api_multifield_clean($node, 'field_assignment_artifacts', 'value'),
      'critique' => array(
        'method' => $node->field_critique_method[LANGUAGE_NONE][0]['value'],
        'outline' => $node->field_critique_outline[LANGUAGE_NONE][0]['value'],
        'public' => (bool)$node->field_critique_privacy[LANGUAGE_NONE][0]['value'],
      ),
    ),
    'metadata' => $metadata,
    'links' => array(
      'self' => $base_url . '/api/v1/cle/assignments/' . $node->nid,
      'url' => $base_url . '/cle/app/assignments/' . $node->nid,
      'direct' => $base_url . '/node/' . $node->nid,
      'delete' => $base_url . '/node/' . $node->nid . '/delete?destination=' . $app_route,
      'update' => $base_url . '/node/' . $node->nid . '/edit?destination=' . $app_route,
    ),
  );
  // developer support
  if (module_exists('devel') && user_access('access devel information')) {
    $return['links']['devel'] = $base_url . '/node/' . $node->nid .'/devel';
  }

  return $return;
}

/**
 * @todo
 * Get all of the assignments for the current user
 * - Make sure that they are seeing assignments for their current section
 */
function _cle_assignment_v1_get_assignments($type, $filter = array()) {
  $items = array();
  $section_id = _cis_connector_section_context();
  $section = _cis_section_load_section_by_id($section_id);
  $field_conditions = array(
    'og_group_ref' => array('target_id', $section, '='),
  );
  $property_conditions = array('status' => array(NODE_PUBLISHED, '='));
  if (isset($filter['assignment'])) {
    $property_conditions['nid'] = array($filter['assignment'], '=');
  }
  $orderby = array('property' => array('title'));
  $items = _cis_connector_assemble_entity_list('node', 'cle_assignment', 'nid', '_entity', $field_conditions, $property_conditions, $orderby);
  return $items;
}
