<?php
/**
 * @file
 * Modifications to specific distributions during integration with a service instance.
 */

/**
 * Implements hook_cis_service_instance_TOOL_options_alter().
 */
function cis_distro_integrations_cis_service_instance_courses_options_alter(&$options, $course, $service) {
  // revert the mooc ux defaults, they struggle to automatically
  $options['fr'][] = 'mooc_ux_defaults';
  $options['fr'][] = 'mooc_cis_ux';
  // mooc should have some accessibility tests to play with OOTB
  $options['en'][] = 'textbook_wcag20aa';
}

/**
 * Implements hook_cis_service_instance_TOOL_options_alter().
 */
function cis_distro_integrations_cis_service_instance_studio_options_alter(&$options, $course, $service) {
  // CLE should default to our latest version as 1.x is legacy
  $options['field_distribution'] = 'cle__2';
}

/**
 * Implements hook_cis_service_instance_TOOL_job_file_alter().
 */
function cis_distro_integrations_cis_service_instance_courses_job_file_alter(&$content, $course, $service, $service_instance) {
  // only apply default content import for course based service
  if ($service->field_machine_name[LANGUAGE_NONE][0]['value'] == CIS_HELPER_COURSE_SERVICE && !empty($service_instance->field_service_data[LANGUAGE_NONE][0]['value'])) {
    $path = $service_instance->field_service_data[LANGUAGE_NONE][0]['value'];
    // see if we have a .git url
    if (valid_url($path) && strpos($path, '.git') !== FALSE) {
      $content .= 'drush en git_book,git_book_gb,mooc_markdown' . "\n";
      $content .= 'drush cc drush' . "\n";
      // @todo support other formats in the future
      $content .= 'drush git-book-create ' . $path . " gb master\n";
    }
    else {
      // allow for on creation population of materials which are local to the file system
      $content .= 'drush feeds-import feeds_node_helper_book_import --file=' . $path . "\n";
      // since this imports a book of content that has UUIDs we need to forcibly rebuild
      $content .= 'drush uuid-recreate' . "\n";
    }
  }
}

/**
 * Implements hook_cis_service_instance_TOOL_job_file_alter().
 */
function cis_distro_integrations_cis_service_instance_innovate_job_file_alter(&$content, $course, $service, $service_instance) {
  global $user;
  // make the requestor an admin
  $content .= 'drush urol administrator ' . $user->name . "\n";
}

/**
 * Implements hook_cis_service_instance_TOOL_options_alter().
 */
function cis_distro_integrations_cis_service_instance_blog_options_alter(&$options, $course, $service) {
  // establish foundation access as the base theme
  $options['cook'][] = 'foundation_access_dep --mlt-fa_sub=editorial_foundation_access';
  // recipe that can chain to hook editorial up to elmsln
  $options['cook'][] = 'elmsln_editorial';
  // revert these features that always need reverted
  $options['fr'][] = 'cis_service_lti';
  $options['fr'][] = 'cis_section';
  $options['fr'][] = 'cis_service_connection_ux';
}

/**
 * Implements hook_cis_service_instance_TOOL_options_alter().
 */
function cis_distro_integrations_cis_service_instance_discuss_options_alter(&$options, $course, $service) {
  // establish foundation access as the base theme
  $options['cook'][] = 'foundation_access_dep --mlt-fa_sub=discuss_foundation_access';
  // recipe that can chain to hook discuss up to elmsln
  $options['cook'][] = 'elmsln_discuss';
  // revert these features that always need reverted
  $options['fr'][] = 'cis_service_lti';
  $options['fr'][] = 'cis_section';
  $options['fr'][] = 'cis_service_connection_ux';
}
