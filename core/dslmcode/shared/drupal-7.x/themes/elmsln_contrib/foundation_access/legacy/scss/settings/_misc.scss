/*
 * This is for Utility sass mixins and functions
 */

@mixin margin-fixer() {
  > *:first-of-type {
    margin-top: 0;
  }
  > *:last-of-type {
    margin-bottom: 0;
  }
}

@mixin owl($spacing: NULL) {
  > * + * {
    @if $spacing == NULL {
      margin-top: 1rem;
    }
    @else {
      margin-top: $spacing;
    }
  }
}

@mixin full-width {
  margin-left: calc(-50vw + 50%);
  margin-right: calc(-50vw + 50%);
}

@mixin element-invisible {
  position: absolute !important;
  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
}

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}


// Rem fallback from Hugo http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px : (); /* 3 */
  $rem: (); /* 3 */

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);    /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" {  /* 7 */
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" { /* 7 */
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {     /* 8 */
    #{$property}: $px;  /* 9 */
  } @else {
    #{$property}: $px;  /* 9 */
    #{$property}: $rem; /* 9 */
  }
}

// Horizontal, vertical or absolute centering of element within its parent
// If specified, this mixin will use negative margins based on element's
// dimensions. Else, it will rely on CSS transforms which have a lesser
// browser support but are more flexible as they are dimension-agnostic.
//
// @author Hugo Giraudel
//
// @param {Length | null} $width [null] - Element width
// @param {Length | null} $height [null] - Element height
//
@mixin center($width: null, $height: null) {
  position: absolute;
  top: 50%;
  left: 50%;

  @if not $width and not $height {
    transform: translate(-50%, -50%);
  } @else if $width and $height {
    width: $width;
    height: $height;
    margin: -($width / 2) #{0 0} -($height / 2);
  } @else if not $height {
    width: $width;
    margin-left: -($width / 2);
    transform: translateY(-50%);
  } @else {
    height: $height;
    margin-top: -($height / 2);
    transform: translateX(-50%);
  }
}
