<?php

/**
 * Implements hook_permission().
 */
function view_mode_tab_permission() {
  return array(
    'access view mode tab' => array(
      'title' => t('Access view mode tab'),
      'description' => t('Access the view mode tab.'),
    ),
    'administer view mode tab' => array(
      'title' => t('Administer view mode tab'),
      'description' => t('Administer the view mode tab.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function view_mode_tab_menu() {
  $items = array();

  $items['node/%node/view_modes'] = array(
    'title' => 'View Modes',
    'page callback' => '_view_mode_tab_load',
    'page arguments' => array(1),
    'access callback' => 'view_mode_tab_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'view_mode_tab.inc',
    'weight' => 100,
  );

  $items['admin/config/media/view_mode_tab'] = array(
    'title' => 'View Mode Tab',
    'description' => t('Settings for view mode tab'),
    'access arguments' => array('administer view mode tab'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('view_mode_tab_admin_config_form'),
    'file' => 'view_mode_tab.admin.inc',
  );

  return $items;
}

function view_mode_tab_page_access($node) {
  return node_access('view', $node) && user_access('access view mode tab');
}

/**
 * Implements hook_theme().
 */
function view_mode_tab_theme($existing, $type, $theme, $path) {
  return array(
    'view_mode_tab_display' => array(
      'variables' => array(
        'view_modes' => array(),
      ),
      'template' => 'view_mode_tab_display',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function view_mode_tab_form_node_type_form_alter(&$form, &$form_state) {
  $entity_info = entity_get_info();
  $view_modes = array();
  $type = $form['#node_type']->type;

  if (!empty($entity_info['node']['view modes'])) {
    $view_modes = array_keys($entity_info['node']['view modes']);
  }

  $form['view_mode_tab'] = array(
    '#type' => 'fieldset',
    '#title' => 'View Mode Tab',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('view-mode-tab-node-type-settings-form'),
    ),
    '#description' => t('Show these view modes in the View Mode Tab'),
  );

  $view_mode_tab_settings = variable_get('view_mode_tab_settings__' . $type, array());
  $enable_viewmode_default = variable_get('view_mode_enable_by_default', TRUE);

  foreach ($view_modes as $view_mode) {
    $form['view_mode_tab']['view_mode_tab_settings__' . $type . '__' . $view_mode] = array(
      '#type' => 'checkbox',
      '#title' => $view_mode,
      '#default_value' => (isset($view_mode_tab_settings[$view_mode])) ? $view_mode_tab_settings[$view_mode] : $enable_viewmode_default,
    );
  }

  $form['#submit'][] = 'view_mode_tab_node_type_form_submit';
}

/**
 * Save the View Mode Tab settings.
 */
function view_mode_tab_node_type_form_submit($form, &$form_state) {
  $entity_info = entity_get_info();
  $type = $form_state['values']['type'];
  $settings = array();
  $view_modes = array();
  if (!empty($entity_info['node']['view modes'])) {
    $view_modes = array_keys($entity_info['node']['view modes']);
  }

  foreach ($view_modes as $view_mode) {
    if (isset($form_state['values']['view_mode_tab_settings__' . $type . '__' . $view_mode]) && $form_state['values']['view_mode_tab_settings__' . $type . '__' . $view_mode] === 0) {
      $settings[$view_mode] = 0;
    }
    else {
      $settings[$view_mode] = 1;
    }
  }

  variable_set('view_mode_tab_settings__' . $type, $settings);
}
