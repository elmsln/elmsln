<?php
/**
 * @file
 * Support for walking down and spidering child nodes in book outines.
 * This helps us gain cached data about what all the children in a book's
 * reading time is. This is great for overview pages and self-updating!
 */

/**
 * Implements hook_read_time_evaluate_alter().
 */
function read_time_book_read_time_evaluate_alter(&$read_time, $node, $field_data) {
  // check for book and book association which would be awesome
  // if we could store it for those using outlines of content
  if (isset($node->book) && $node->book['has_children']) {
    $keys = array();
    // only build query below the current page
    for ($i=$node->book['depth']; $i<10; $i++) {
      $keys[] = 'p' . $i;
    }
    // get any children immediately below the current item
    $query = db_select('menu_links', 'ml')
              ->fields('ml', array('link_path'))
              ->condition('mlid', $node->book['mlid'], '<>');
    $db_or = db_or();
    // form the db_or query
    foreach ($keys as $key) {
      $db_or->condition($key, $node->book['mlid'],'=');
    }
    $results = $query->condition($db_or)
          ->orderBy('weight', 'ASC')
          ->execute()
          ->fetchAll();
    // convert menu ids into node ids
    $nids = array();
    foreach ($results as $result) {
      $nids[] = str_replace('node/', '', $result->link_path);
    }
    if (!empty($nids)) {
      $read_time['metadata']['children'] = array();
      // load these nodes
      $nodes = node_load_multiple($nids);
      foreach ($nodes as $cnode) {
        // audio duration
        if (!isset($read_time['metadata']['children']['audio_duration'])) {
          $read_time['metadata']['children']['audio_duration'] = 0;
        }
        if (isset($cnode->read_time['metadata']['audio']['duration'])) {
          $read_time['metadata']['children']['audio_duration'] += $cnode->read_time['metadata']['audio']['duration'];
        }
        // video duration
        if (!isset($read_time['metadata']['children']['video_duration'])) {
          $read_time['metadata']['children']['video_duration'] = 0;
        }
        if (isset($cnode->read_time['metadata']['video']['duration'])) {
          $read_time['metadata']['children']['video_duration'] += $cnode->read_time['metadata']['video']['duration'];
        }
        // sum up the rest of the metadata stuff
        foreach ($read_time as $key => $value) {
          if ($key != 'metadata') {
            if (!isset($read_time['metadata']['children'][$key])) {
              $read_time['metadata']['children'][$key] = 0;
            }
            if (isset($cnode->read_time[$key])) {
              $read_time['metadata']['children'][$key] += $cnode->read_time[$key];
            }
          }
          else {
            foreach ($read_time['metadata'] as $meta => $data) {
              // children handled above
              if ($meta != 'children') {
                if (isset($cnode->read_time[$key]) && isset($cnode->read_time[$key][$meta]) && is_numeric($cnode->read_time[$key][$meta])) {
                  $read_time['metadata'][$key][$meta] += $cnode->read_time[$key][$meta];
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function read_time_book_node_insert($node) {
  // rebuild if we have to / should; this is an intensive operation
  if (isset($node->book) && isset($node->book['depth']) && variable_get('read_time_node_view_' . $node->type, TRUE) && !isset($node->_block_read_time_update)) {
    // rebuild everyone above here
    for ($i = $node->book['depth']; $i>0; $i--) {
      if ($node->book['p' . $i] != 0 && $node->book['p' . $i] != $node->book['mlid']) {
        $item = menu_link_load($node->book['p' . $i]);
        if (!empty($item)) {
          $nid = str_replace('node/', '', $item['link_path']);
          $num_deleted = db_delete('read_time')
            ->condition('nid', $nid)
            ->execute();
        }
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function read_time_book_node_update($node) {
  // rebuild if we have to / should; this is an intensive operation
  if (isset($node->book) && variable_get('read_time_node_view_' . $node->type, TRUE) && isset($node->read_time_changed) && $node->read_time_changed && !isset($node->_block_read_time_update)) {
    // rebuild everyone above here
    for ($i = $node->book['depth']; $i>0; $i--) {
      if ($node->book['p' . $i] != 0 && $node->book['p' . $i] != $node->book['mlid']) {
        $item = menu_link_load($node->book['p' . $i]);
        if (!empty($item)) {
          $nid = str_replace('node/', '', $item['link_path']);
          $num_deleted = db_delete('read_time')
            ->condition('nid', $nid)
            ->execute();
        }
      }
    }
  }
}
