<?php
/**
 * @file
 * A light-weight, customizable voice commander module using the annyang JS library.
 */

/**
 * Min plugin version of annyang plugin which voicecommander module support.
 */
define('VOICECOMMANDER_MIN_PLUGIN_VERSION', '1.5.0');

/**
 * URL to annyang plugin archive.
 */
define('VOICECOMMANDER_ANNYANG_PLUGIN_URL', 'https://github.com/Voicecommander/annyang/archive/master.zip');

/**
 * Prefix for downloaded Annyang plugin archive.
 */
define('VOICECOMMANDER_ANNYANG_DOWNLOAD_PREFIX', 'annyang-');

/**
 * Annyang plugin name.
 */
define('VOICECOMMANDER_ANNYANG_PLUGIN_NAME', 'annyang');

/**
 * Default prefix name value of setting form.
 */
define('VOICECOMMANDER_DEFAULT_VALUE_PREFIX_NAME', 'drupal');

/**
 * Voicecommander module name.
 */
define('VOICECOMMANDER_MODULE_NAME', 'voicecommander');

/**
 * Every good program needs a robot
 */
define('VOICECOMMANDER_ROBOT_NAME', 'jarvis');

/**
 * Implements hook_page_build().
 *
 * Load Annyang library.
 * Load js and css base files of module.
 * Load base commands from menus and add to Drupal.settings
 */
function voicecommander_page_build(&$page) {
  // ensure they have permission to use this
  if (_voicecommander_access()) {
    _voicecommander_apply();
    $page['page_bottom']['voicecommander'] = array(
      '#weight' => 10,
      '#markup' => theme('voicecommander_drawer', array('label' => variable_get('voicecommander_robot', VOICECOMMANDER_ROBOT_NAME))),
    );
  }
}

/**
 * Implementation of hook_form_alter().
 */
function voicecommander_form_alter(&$form, &$form_state, $form_id) {
  // add voice command support to all submit buttons
  foreach ($form as &$item) {
    if (is_array($item) && isset($item['#type']) && in_array($item['#type'], array('submit', 'textfield', 'container'))) {
      $command = '';
      if ($item['#type'] == 'container' && isset($item['und']) && isset($item['und']['#title'])) {
        $command .= drupal_strtolower($item['und']['#title']);
      }
      elseif (isset($item['#value'])) {
        $command .= drupal_strtolower($item['#value']);
      }
      elseif (isset($item['#title'])) {
        $command .= drupal_strtolower($item['#title']);
      }
      // ensure we had a well made form item
      if ($command != '') {
        $item['#attributes']['data-voicecommand'] = t('form ') . $command;
      }
    }
    elseif (is_array($item)) {
      foreach ($item as &$subitem) {
        if (is_array($subitem) && isset($subitem['#type']) && in_array($subitem['#type'], array('submit', 'textfield', 'container'))) {
          $command = '';
          if ($subitem['#type'] == 'container' && isset($subitem['und']) && isset($subitem['und']['#title'])) {
            $command .= drupal_strtolower($subitem['und']['#title']);
          }
          elseif (isset($subitem['#value'])) {
            $command .= drupal_strtolower($subitem['#value']);
          }
          elseif (isset($subitem['#title'])) {
            $command .= drupal_strtolower($subitem['#title']);
          }
          // ensure we had a well made form item
          if ($command != '') {
            $subitem['#attributes']['data-voicecommand'] = t('form ') . $command;
          }
        }
      }
    }
  }
}

/**
 * Access check for voice commander.
 */
function _voicecommander_access() {
  // allow other projects to jump in and evaluate if it should apply VC
  if (user_access('use voice commander')) {
    $access = TRUE;
    drupal_alter('voicecommander_access', $access);
    return $access;
  }
  return FALSE;
}

/**
 * Apply voice commander to the current page.
 */
function _voicecommander_apply() {
  // check that annyang is in here
  $libraries = libraries_get_libraries();
  // Check whether the files were loaded Annyang plugin.
  if (isset($libraries['annyang'])) {
    drupal_add_js($libraries['annyang'] . '/annyang.min.js', array('weight' => -100));
  }
  else {
    drupal_set_message(t('VoiceCommander: plugin "Annyang" or file "annyang.min.js" is not exist in libraries folder. Run "drush vc" in Drush CLI or <a target="_blank" href="@path">download</a> and install it manual to /sites/default/libraries', array('@path' => VOICECOMMANDER_ANNYANG_PLUGIN_URL)), 'error');
    watchdog('VoiceCommander', 'Plugin "Annyang" or file "annyang.min.js" is not exist in libraries folder.', array(), WATCHDOG_ERROR);
  }

  // Add custom module js and css files.
  drupal_add_css(drupal_get_path('module', VOICECOMMANDER_MODULE_NAME) . '/css/voicecommander.css');
  drupal_add_js(drupal_get_path('module', VOICECOMMANDER_MODULE_NAME) . '/js/voicecommander-container.js', array('type' => 'file', 'weight' => -1000));
  drupal_add_js(drupal_get_path('module', VOICECOMMANDER_MODULE_NAME) . '/js/voicecommander.js', array('type' => 'file', 'scope' => 'footer', 'weight' => 1001));

  // assemble all voice commands the system supports
  $commandsets = module_invoke_all('voice_command');
  drupal_alter('voice_command', $commandsets);
  $commands = array();
  foreach ($commandsets as $commandset) {
    if (isset($commandset['file'])) {
      drupal_add_js($commandset['file']);
    }
    foreach ($commandset['commands'] as $key => $command) {
      $tmp = $key;
      $replacement = variable_get('voicecommander_prefix', VOICECOMMANDER_DEFAULT_VALUE_PREFIX_NAME);
      if (variable_get('voicecommander_optional_prefix', TRUE)) {
        $replacement = '(' . $replacement . ')';
      }
      $tmp = str_replace('%phrase', $replacement, drupal_strtolower($key));
      $command['phrase'] = $tmp;
      $commandset['commands'][$tmp] = $command;
      if ($tmp != $key) {
        unset($commandset['commands'][$key]);
      }
    }
    $commands += $commandset['commands'];
  }
  // Add to Drupal.settings
  drupal_add_js(
    array(
      'voiceCommander' => array(
        'commands'                  => $commands,
        'prefix'                    => variable_get('voicecommander_prefix', VOICECOMMANDER_DEFAULT_VALUE_PREFIX_NAME),
        'optionalPrefix'            => variable_get('voicecommander_optional_prefix', TRUE),
        'mobile'                    => variable_get('voicecommander_mobile', 1),
        'startCallback'             => t('Please speak'),
        'waitCallback'              => t('Wait ...'),
        'errorCallback'             => t('Wrong or unset command. Please repeat.'),
        'errorNetworkCallback'      => t('Network Error. Try later.'),
        'permissionBlockedCallback' => t('Permission Blocked. Check another process for using voice recognition'),
        'permissionDeniedCallback'  => t('Permission Denied'),
        'secureToken'               => drupal_get_token(),
        'continuous'                => (variable_get('voicecommander_continuous', FALSE) && user_access('access voice commander settings')),
        'userName'                  => $GLOBALS['user']->name,
        'robotName'                 => variable_get('voicecommander_robot', VOICECOMMANDER_ROBOT_NAME),
      )
    ),
    'setting');
}

/**
 * Implements hook_libraries_info().
 */
function voicecommander_libraries_info() {
  $libraries['annyang'] = array(
    'name'              => 'Annyang plugin',
    'vendor url'        => 'https://www.talater.com/annyang/',
    'download url'      => VOICECOMMANDER_ANNYANG_PLUGIN_URL,
    'version arguments' => array(
      'file'    => 'annyang.min.js',
      'pattern' => "/(?:version)?(?::)?([0-9]+.+)/",
      'lines'   => 5,
    ),
    'files'             => array(
      'js' => array(
        'annyang.min.js',
      ),
    ),
    'variants'          => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'annyang.min.js',
          ),
        ),
      ),
      'source'   => array(
        'files' => array(
          'js' => array(
            'annyang.js',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function voicecommander_menu() {
  $items['admin/config/user-interface/voice-commander'] = array(
    'title'            => 'VoiceCommander',
    'description'      => 'Voice commander administrator settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('voicecommander_settings_form'),
    'access arguments' => array('access voice commander settings'),
    'file'             => 'includes/voicecommander.admin.inc',
  );
  $items['admin/config/user-interface/voice-commander/cc_all'] = array(
    'title' => 'clear cache',
    'access arguments' => array('access voice commander settings'),
    'page callback' => 'voicecommander_cc_all',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function voicecommander_permission() {
  return array(
    'access voice commander settings' => array(
      'title'       => t('Voice commander settings'),
      'description' => t('Access to Voice commander settings.'),
    ),
    'use voice commander' => array(
      'title'       => t('Use voice commander'),
      'description' => t('User voice commands to control the site experience.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function voicecommander_help($path, $arg) {
  switch ($path) {
    // Main module help for the voicecommander module.
    case 'admin/help#voicecommander':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('A voice-driven launcher for navigating the entire menu system of your Drupal site.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<p>' . t('On any page, hit') . '<b>' . ' Ctrl+Alt ' . '</b>' . t('and start speak.') . '</p>';
      $output .= '<p><i>' . t('Use better on https:// (Asks for permission once and remembers the choice).') . '</i></p>';
      return $output;
  }
}

/**
 * Clear cache on default command.
 */
function voicecommander_cc_all() {
  $query_parameters = drupal_get_query_parameters();
  if (!empty($query_parameters['token'])) {
    $token = $query_parameters['token'];
  }

  if (drupal_valid_token($token)) {
    drupal_flush_all_caches();
    drupal_set_message(t('Cache cleared'));
    drupal_goto();
  }
  else {
    drupal_set_message(t('Cache cannot be cleared. You dont have permission or try reload page or/and clean cache'));
    drupal_goto();
  }
}

/**
 * Implements hook_voice_command().
 */
function voicecommander_voice_command() {
  // optional clear cache statement to be more conversational
  return array(
    'core' => array(
      'commands' => array(
        '%phrase (go) home' => array(
          'callback' => 'Drupal.voicecommander.goTo',
          'data' => '/',
        ),
        '%phrase (go) back' => array(
          'callback' => 'Drupal.voicecommander.back',
        ),
        '%phrase (go) forward' => array(
          'callback' => 'Drupal.voicecommander.forward',
        ),
        '%phrase scroll up' => array(
          'callback' => 'Drupal.voicecommander.scroll',
        ),
        '%phrase scroll (back to) top' => array(
          'callback' => 'Drupal.voicecommander.scroll',
        ),
        '%phrase scroll (down)' => array(
          'callback' => 'Drupal.voicecommander.scroll',
        ),
      ),
    ),
    'core_cacheclear' => array(
      'file' => drupal_get_path('module', 'voicecommander') . '/js/vc-cache.js',
      'commands' => array(
        '%phrase (clear) cache' => array(
          'callback' => 'Drupal.voicecommander.clearCache'
        ),
        '%phrase (clear) caches' => array(
          'callback' => 'Drupal.voicecommander.clearCache'
        ),
      ),
    ),
    'core_dictate' => array(
      'file' => drupal_get_path('module', 'voicecommander') . '/js/vc-dictate.js',
      'commands' => array(
        '%phrase insert *input' => array(
          'callback' => 'Drupal.voicecommander.dictate'
        ),
        '%phrase write *input' => array(
          'callback' => 'Drupal.voicecommander.dictate'
        ),
      ),
    ),
    'jarvis' => array(
      'commands' => array(
        'hey ' . variable_get('voicecommander_prefix', VOICECOMMANDER_DEFAULT_VALUE_PREFIX_NAME) => array(
          'callback' => 'Drupal.voicecommander.jarvis'
        ),
      ),
    ),
    'show_commands' => array(
      'commands' => array(
        '%phrase show options' => array(
          'callback' => 'Drupal.voicecommander.showOptions'
        ),
        '%phrase hide options' => array(
          'callback' => 'Drupal.voicecommander.showOptions'
        ),
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function voicecommander_theme() {
  return array(
    'voicecommander_drawer' => array(
      'variables' => array(
        'label' => t('Jarvis..'),
      ),
      'render element' => 'element',
      'template' => 'templates/voicecommander-drawer',
    ),
  );
}
