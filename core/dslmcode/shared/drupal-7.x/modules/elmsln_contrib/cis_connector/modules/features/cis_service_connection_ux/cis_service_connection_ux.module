<?php
/**
 * @file
 * Code for the CIS Service Connection UX feature.
 */

include_once 'cis_service_connection_ux.features.inc';

/**
 * Implements hook_menu().
 */
function cis_service_connection_ux_menu() {
  $items = array();

  $items['admin/config/system/course-settings'] = array(
    'title' => 'Course settings',
    'description' => 'Change system settings for your course.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cis_service_connection_ux_form'),
    'access callback' => '_cis_connector_role_groupings',
    'access arguments' => array(array('teacher', 'staff')),
  );

  $items['cis/course-settings'] = array(
    'title' => 'Settings',
    'description' => 'Change settings for your course.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cis_service_connection_ux_form'),
    'access callback' => '_cis_connector_role_groupings',
    'access arguments' => array(array('teacher', 'staff')),
    'menu_name' => 'menu-elmsln-settings',
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function cis_service_connection_ux_block_info() {
  $blocks = array(
    'elmsln_navigation_l1' => array(
      'info' => t('ELMSLN nav level 1'),
      'cache' => DRUPAL_CACHE_PER_ROLE,
    ),
    'elmsln_navigation_l2' => array(
      'info' => t('ELMSLN nav level 2'),
      'cache' => DRUPAL_CACHE_PER_ROLE,
    ),
    'elmsln_navigation_l3' => array(
      'info' => t('ELMSLN nav level 3'),
      'cache' => DRUPAL_CACHE_PER_ROLE,
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cis_service_connection_ux_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'elmsln_navigation_l1':
      $block['subject'] = t('Navigation');
      // get current item, load everything at top level
      $item = menu_link_get_preferred();
      $tree = menu_tree_all_data('menu-elmsln-navigation', $item, 1);
      $block['content'] = menu_tree_output($tree);
    break;
    case 'elmsln_navigation_l2':
      $block['subject'] = t('Sub-navigation');
      // get current, test everything below for children
      $item = menu_link_get_preferred();
      $item2 = $item;
      // look at the parent if we are on level 2 item
      if ($item['depth'] == 2) {
        $item2 = menu_link_load($item['plid']);
      }
      // look at parent's parent if we are on level 3
      elseif ($item['depth'] == 3) {
        $item = menu_link_load($item['plid']);
        $item2 = menu_link_load($item['plid']);
      }
      $tree = menu_tree_some_data('menu-elmsln-navigation', $item, 1, 2);
      // ensure we aren't a step down
      foreach ($tree as $branch) {
        if ($branch['link']['link_path'] == $item2['link_path']) {
          $below = $branch['below'];
          continue;
        }
      }
      // make sure we have something in order to render
      if (isset($below)) {
        $block['content'] = menu_tree_output($below);
      }
    break;
    case 'elmsln_navigation_l3':
      $block['subject'] = t('Sub-sub-navigation');
      // get the curren item
      $item = menu_link_get_preferred();
      // don't bother loading for level 1
      if ($item['depth'] != 1) {
        $item2 = $item;
        // if level 3 we need to load parent
        if ($item['depth'] == 3) {
          $item2 = menu_link_load($item['plid']);
        }
        $tree = menu_tree_some_data('menu-elmsln-navigation', $item, 2, 3);
        // ensure we aren't down a step
        foreach ($tree as $branch) {
          if ($branch['link']['link_path'] == $item2['link_path']) {
            $below = $branch['below'];
            continue;
          }
        }
        // make sure we have something in order to render
        if (isset($below)) {
          $block['content'] = menu_tree_output($below);
        }
      }
    break;
  }
  return $block;
}

/**
 * Page callback for cis_service_connection_ux.
 */
function cis_service_connection_ux_form($form, $form_state) {
  $form = array();
  $form['site_information_name'] = array(
    '#tree' => '0',
    '#type' => 'fieldset',
    '#collapsed' => '1',
    '#collapsible' => '1',
    '#title' => t('Course Name'),
    '#description' => t('Course name and title displayed in the top right.'),
    '#weight' => '-2',
  );
  $form['site_information_links'] = array(
    '#tree' => '0',
    '#type' => 'fieldset',
    '#collapsed' => '1',
    '#collapsible' => '1',
    '#title' => t('Links'),
    '#weight' => '-1',
  );
  $form['site_information'] = array(
    '#tree' => '0',
    '#type' => 'fieldset',
    '#collapsed' => '1',
    '#collapsible' => '1',
    '#title' => t('Tool details'),
    '#weight' => '0',
  );
  // name fields
  $form['elmsln_api_sync'] = array(
    '#default_value' => variable_get('elmsln_api_sync', 1),
    '#weight' => '-1000',
    '#description' => t('How should this system be kept in sync with its network?'),
    '#options' => array(
      0 => t("Don't sync"),
      1 => t("Sync everything"),
      2 => t("Sync everything but the banner"),
    ),
    '#type' => 'select',
    '#title' => t('Sync'),
  );
  $form['site_information_name']['site_name'] = array(
    '#description' => t('A short name for the Course'),
    '#default_value' => variable_get('site_name', ''),
    '#weight' => '0',
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#required' => '1',
  );
  $form['site_information_name']['site_slogan'] = array(
    '#default_value' => variable_get('site_slogan', ''),
    '#weight' => '1',
    '#description' => t('Title of the course'),
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => '1',
  );
  // links
  $form['site_information_links']['site_frontpage'] = array(
    '#default_value' => variable_get('site_frontpage', 'node'),
    '#weight' => '2',
    '#description' => t('Home page for this site'),
    '#type' => 'textfield',
    '#title' => t('Front page'),
    '#required' => '1',
  );
  $form['site_information_links']['cis_help_page'] = array(
    '#default_value' => variable_get('cis_help_page', 'course-help'),
    '#weight' => '3',
    '#description' => t('Where the help button points. Leave blank to hide the button'),
    '#type' => 'textfield',
    '#title' => t('Help button'),
  );
  $form['site_information_links']['cis_resource_page'] = array(
    '#default_value' => variable_get('cis_resource_page', 'resources'),
    '#weight' => '3',
    '#description' => t('Where the resources button points. Leave blank to hide the button'),
    '#type' => 'textfield',
    '#title' => t('Resources button'),
  );
  $form['site_information_links']['cis_syllabus_page'] = array(
    '#default_value' => variable_get('cis_syllabus_page', 'syllabus'),
    '#weight' => '4',
    '#description' => t('Where the syllabus link points. Leave blank to hide the button'),
    '#type' => 'textfield',
    '#title' => t('Syllabus button'),
  );
  // load up the system theme admin form to modify it here
  module_load_include('inc', 'system', 'system.admin');
  $tmp = drupal_get_form('system_theme_settings', variable_get('theme_default', 'foundation_access'));
  // see if we have foundation access settings we can dump in here too
  if (isset($tmp['zurb_foundation']['foundation_access'])) {
    // format and append the collapse
    $tmp['zurb_foundation']['foundation_access']['#collapsible'] = TRUE;
    $form['theme'] = $tmp['zurb_foundation']['foundation_access'];
    $form['theme']['#title'] = t('Theme / Style settings');
    $form['theme']['#collapsed'] = '1';
    // add in the favicon / logo areas
    $form['theme']['favicon']  = $tmp['favicon'];
    $form['theme']['favicon']['#weight'] = 11;
    $form['theme']['logo'] = $tmp['logo'];
    $form['theme']['logo']['#weight'] = 10;
    // unset some of the standard theme settings
    foreach ($form['theme'] as &$value) {
      if (is_array($value) && isset($value['#value'])) {
        unset($value['#value']);
      }
    }
    // submit handlers
    $form['#validate'][] = 'cis_service_connection_ux_form_validate';
    $form['#submit'][] = 'cis_service_connection_ux_form_submit';
  }
  return system_settings_form($form);
}

/**
 * Form validation for cis_service_connection_ux_form.
 */
function cis_service_connection_ux_form_validate($form, &$form_state) {
  // Handle file uploads.
  $validators = array('file_validate_is_image' => array());
  // Check for a new uploaded logo.
  $file = file_save_upload('logo_upload', $validators);
  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['logo_upload'] = $file;
    }
    else {
      // File upload failed.
      form_set_error('logo_upload', t('The logo could not be uploaded.'));
    }
  }

  $validators = array('file_validate_extensions' => array('ico png gif jpg jpeg apng svg'));

  // Check for a new uploaded favicon.
  $file = file_save_upload('favicon_upload', $validators);
  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['favicon_upload'] = $file;
    }
    else {
      // File upload failed.
      form_set_error('favicon_upload', t('The favicon could not be uploaded.'));
    }
  }

  // If the user provided a path for a logo or favicon file, make sure a file
  // exists at that path.
  if (!empty($form_state['values']['logo_path'])) {
    $path = _cis_service_connection_ux_validate_path($form_state['values']['logo_path']);
    if (!$path) {
      form_set_error('logo_path', t('The custom logo path is invalid.'));
    }
  }
  if (!empty($form_state['values']['favicon_path'])) {
    $path = _cis_service_connection_ux_validate_path($form_state['values']['favicon_path']);
    if (!$path) {
      form_set_error('favicon_path', t('The custom favicon path is invalid.'));
    }
  }
}

/**
 * Callback to validate that this is a path we accept for images in theme settings.
 * @param  string $path path to file, could be local, remote, URI, or URL
 * @return mixed       path if valid or FALSE if not
 */
function _cis_service_connection_ux_validate_path($path) {
  // Absolute local file paths are invalid.
  if (drupal_realpath($path) == $path) {
    return FALSE;
  }
  // A path relative to the Drupal root or a fully qualified URI is valid.
  if (is_file($path)) {
    return $path;
  }
  // Prepend 'public://' for relative file paths within public filesystem.
  if (file_uri_scheme($path) === FALSE) {
    $path = 'public://' . $path;
  }
  if (is_file($path)) {
    return $path;
  }
  if (valid_url($path)) {
    return $path;
  }
  return FALSE;
}

/**
 * Callback for the settings form.
 */
function cis_service_connection_ux_form_submit($form, &$form_state) {
  module_load_include('inc', 'system', 'system.admin');
  // Exclude unnecessary elements before saving.
  form_state_values_clean($form_state);
  $values = $form_state['values'];
  // see if we have foundation access settings in here
  if (isset($form_state['groups']['foundation_access'])) {
    // load the current settings array we'd get on the theme settings page
    $vars = variable_get('theme_' . variable_get('theme_default', '') . '_settings', array());
    foreach ($form_state['values'] as $key => $val) {
      // if the name of the variable includes FA, overwrite the current one
      if (strpos($key, 'foundation_access') !== FALSE || in_array($key, array('default_favicon', 'favicon_path', 'favicon_upload', 'default_logo', 'logo_path', 'logo_upload'))) {
        $vars[$key] = $val;
        // unset so we don't get these stored in the database as stand alones
        unset($form_state['values'][$key]);
      }
    }
    // If the user uploaded a new logo or favicon, save it to a permanent location
    // and use it in place of the default theme-provided file.
    if (!empty($values['logo_upload']) && $values['logo_upload']) {
      $file = $values['logo_upload'];
      unset($vars['logo_upload']);
      $filename = file_unmanaged_copy($file->uri);
      $vars['default_logo'] = 0;
      $vars['logo_path'] = $filename;
      $vars['toggle_logo'] = 1;
    }
    if (!empty($values['favicon_upload']) && $values['favicon_upload']) {
      $file = $values['favicon_upload'];
      unset($vars['favicon_upload']);
      $filename = file_unmanaged_copy($file->uri);
      $vars['default_favicon'] = 0;
      $vars['favicon_path'] = $filename;
      $vars['toggle_favicon'] = 1;
    }

    // If the user entered a path relative to the system files directory for
    // a logo or favicon, store a public:// URI so the theme system can handle it.
    if (!empty($vars['logo_path'])) {
      $vars['logo_path'] = _cis_service_connection_ux_validate_path($vars['logo_path']);
    }
    if (!empty($vars['favicon_path'])) {
      $vars['favicon_path'] = _cis_service_connection_ux_validate_path($vars['favicon_path']);
    }

    if (empty($vars['default_favicon']) && !empty($vars['favicon_path'])) {
      $vars['favicon_mimetype'] = file_get_mimetype($vars['favicon_path']);
    }
    // set the variables for the theme
    variable_set('theme_' . variable_get('theme_default', '') . '_settings', $vars);
  }
  // see if we should elmsln_api_sync things
  if (!($form_state['values']['elmsln_api_sync'] === 0)) {
    // load the settings
    $vars = array(
      'default_favicon',
      'favicon_path',
      'toggle_favicon',
      'foundation_access_primary_color',
      'foundation_access_secondary_color',
      'foundation_access_required_color',
      'foundation_access_optional_color',
    );
    // account for sync mode with option to not sync banner
    if (variable_get('elmsln_api_sync', 1) == 1) {
      $vars[] = 'default_logo';
      $vars[] = 'logo_path';
      $vars[] = 'toggle_logo';
    }
    $values = array();
    // get the theme variables
    foreach ($vars as $var) {
      $values[$var] = theme_get_setting($var, variable_get('theme_default', 'foundation_access'));
      if ($var == 'logo_path') {
        $values[$var] = file_create_url($values[$var]);
      }
    }
    // prepare requests to kick off settings
    $requests = array(
       array(
        'elmsln_module' => 'elmsln_api',
        'elmsln_callback' => 'theme_settings',
        'values' => $values,
      ),
    );
    // rebuild these requests for the active network
    _elmsln_api_network_request($requests, '1', TRUE);
    // ensure that course name is changed globally if updated anywhere
    $properties = array();
    if (variable_get('site_name', '') != $form_state['values']['site_name']) {
      $properties['title'] = $form_state['values']['site_name'];
    }
    if (variable_get('site_slogan', '') != $form_state['values']['site_slogan']) {
      $properties['slogan'] = $form_state['values']['site_slogan'];
    }
    // if anything changed let's ship this off everywhere
    if (!empty($properties)) {
      _elmsln_api_course_sync($properties, '1', TRUE);
    }
  }
}

/**
 * Fork of menu_tree_all_data which allows for passing in min value
 * @see  menu_tree_some_data()
 */
function menu_tree_some_data($menu_name, $link = NULL, $min_depth = NULL, $max_depth = NULL) {
  $tree = &drupal_static(__FUNCTION__, array());

  // Use $mlid as a flag for whether the data being loaded is for the whole tree.
  $mlid = isset($link['mlid']) ? $link['mlid'] : 0;
  // Generate a cache ID (cid) specific for this $menu_name, $link, $language, max depth, min depth.
  $cid = 'links:' . $menu_name . ':all:' . $mlid . ':' . $GLOBALS['language']->language . ':' . (int) $max_depth . ':' . (int) $min_depth;

  if (!isset($tree[$cid])) {
    // If the static variable doesn't have the data, check {cache_menu}.
    $cache = cache_get($cid, 'cache_menu');
    if ($cache && isset($cache->data)) {
      // If the cache entry exists, it contains the parameters for
      // menu_build_tree().
      $tree_parameters = $cache->data;
    }
    // If the tree data was not in the cache, build $tree_parameters.
    if (!isset($tree_parameters)) {
      $tree_parameters = array(
        'min_depth' => $min_depth,
        'max_depth' => $max_depth,
      );
      if ($mlid) {
        // The tree is for a single item, so we need to match the values in its
        // p columns and 0 (the top level) with the plid values of other links.
        $parents = array(0);
        for ($i = 1; $i < MENU_MAX_DEPTH; $i++) {
          if (!empty($link["p$i"])) {
            $parents[] = $link["p$i"];
          }
        }
        $tree_parameters['expanded'] = $parents;
        $tree_parameters['active_trail'] = $parents;
        $tree_parameters['active_trail'][] = $mlid;
      }

      // Cache the tree building parameters using the page-specific cid.
      cache_set($cid, $tree_parameters, 'cache_menu');
    }

    // Build the tree using the parameters; the resulting tree will be cached
    // by _menu_build_tree()).
    $tree[$cid] = menu_build_tree($menu_name, $tree_parameters);
  }

  return $tree[$cid];
}
