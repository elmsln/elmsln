<?php
define("HAXCMS_VERSION", "2.0.9");
define("HAXCMS_DRUPAL_THEME", "haxcms_drupal_theme");

include_once __DIR__ . '/../../HAXapi/php/lib/HAXAppStoreService.php';
/**
 * @file
 * Headless Authoring eXperience, all we do is accept calls and make things haxable in the first place.
 */

/**
 * Implements hook_webcomponents_build_integration_markup_alter().
 * This ensures that HAXcms's build script loads at the right times
 */
function haxcms_webcomponents_build_integration_markup_alter(&$markup) {
  if (_is_haxcms_context()) {
    $search = '';
    // support variable to hide search
    if (!variable_get('haxcms_settings_search', TRUE)) {
      $search .= '
      ::part(search-btn),
      clean-one::part(search-btn),
      clean-two::part(search-btn),
      bootstrap-theme::part(search-btn),
      learn-two-theme::part(search-btn) {
        display: none;
      }';
    }
    // support variable to hide title
    if (!variable_get('haxcms_settings_title', TRUE)) {
      $search .= '
      ::part(page-title),
      clean-one::part(page-title),
      clean-two::part(page-title),
      bootstrap-theme::part(page-title),
      learn-two-theme::part(page-title) {
        display: none;
      }';
    }
    // support variable to hide breadcrumb
    if (!variable_get('haxcms_settings_breadcrumb', TRUE)) {
      $search .= '
      ::part(page-breadcrumb),
      clean-one::part(page-breadcrumb),
      clean-two::part(page-breadcrumb),
      bootstrap-theme::part(page-breadcrumb),
      learn-two-theme::part(page-breadcrumb) {
        display: none;
      }';
    }
    // some Drupal markup hacks to go w/ the HAXcms build script
    $markup .= "\n" . '
    <style>
      #admin-menu {
        z-index: 100000;
      }
      #admin-menu .dropdown a {
        line-height: 24px;
        font-size: 12px;
      }
      ' . $search . '
    </style>
    <script>
      document.body.removeAttribute("no-js");
      window.__appPrevRoute = ""; 
      window.__appCustomEnv=true;window.appSettings = {connectionSettings: "' . base_path() . 'haxapi/connectionSettings"};
      // custom Drupal JS integration for legacy content to still attach correctly
      window.addEventListener("json-outline-schema-active-body-changed", function(e) {
        if (window.Drupal) {
          window.Drupal.attachBehaviors(document, window.Drupal.settings);
        }
        if (window.WCAutoload) {
          window.WCAutoload.process();
        }
      });
      // because we are in a larger system and it might have wrapper UI or "external" links that are not part of the format route
      // we need to see if we missed our internal router and instead of a fake 404 we need to reload the page to trigger the
      // real drupal page load
      window.addEventListener("vaadin-router-location-changed", function(e) {
        if (document.querySelector("#elmsln-node-edit") && e.detail.router.location.route.path.indexOf("node") != -1) {
          document.querySelector("#elmsln-node-edit").setAttribute("href",e.detail.router.location.route.path + "/edit");
        }
        // wait a microtask to allow HAXcms to do its routing first regardless of time to attach
        setTimeout(function(){
        // ensure a weird possible handoff issue on backend paths does not cause an infinite loop
        if (e.detail.router.location.params && e.detail.router.location.params[0] && !e.detail.router.location.params[0].includes("/haxcms") && e.detail.router.location.params[0].includes("haxcms") === true) {
          //window.location.href = e.detail.router.location.pathname.replace("haxcms/","").replace("haxcms","");
        }
        else if (e.detail.location.route.name == "404") {
            window.localStorage.setItem(
              "HAXCMSlastRoute-" + window.HAXCMS.requestAvailability().store.manifest.metadata.site.name,
              window.__appPrevRoute
            );
            // ignore admin menu calls
            if (e.detail.router.location.pathname.includes("/users/") ||
            e.detail.router.location.pathname.includes("/user/login") ||
            e.detail.router.location.pathname.includes("/user/logout")) {
              window.history.replaceState( {} , "Redirecting..", e.detail.router.location.pathname);  
            }
            else if (!e.detail.router.location.pathname.includes("admin_menu") &&
            !e.detail.router.location.pathname.includes("masquerade") &&
            !e.detail.router.location.pathname.includes("token=")) {
              // remove link and replace it with the redirect. sneaky charlie.. we\'re going to be sneaky
              window.history.replaceState( {} , "Redirecting..", e.detail.router.location.pathname + "?destination=" + window.__appPrevRoute );
            }
            
            window.location.reload();
        }
        else {
          window.__appPrevRoute = e.detail.router.location.route.path;
        }
      }, 10); 
    });
    </script>
    <script src="' . base_path() . drupal_get_path('module', 'haxcms') . '/build-haxcms.js' . '"></script>';
  }
}

/**
 * Implements hook_cron().
 */
function haxcms_cron() {
  // ensure haxcms theme is enabled
  $theme = _haxcms_drupal_theme();
  if (!_haxcms_drupal_theme_exists($theme)) {
    theme_enable(array($theme));
  }
}

/**
 * Helper function to test if a theme is enabled.
 */
function _haxcms_drupal_theme_exists($theme_name) {
  $themes = list_themes();
  return isset($themes[$theme_name]) && $themes[$theme_name]->status == 1;
}

function _haxcms_deliverStyles() {
  print '';
  exit;
}
/**
 * Implements hook_menu().
 */
function haxcms_menu() {
  // load the player onto the UI
  $items['haxcms'] = array(
    'page callback' => '_haxcms_loader',
    'page arguments' => array(0),
    'access callback' => '_haxcms_node_access',
    'access arguments' => array('view'),
    'type' => MENU_CALLBACK,
    'theme callback' => '_haxcms_drupal_theme',
  );
  $items['theme/theme.css'] = array(
    'page callback' => '_haxcms_deliverStyles',
    'page arguments' => array(0),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  // load connection settings for HAXcms to know how to talk to Drupal
  $items['lunrSearchIndex.json'] = array(
    'page callback' => '_haxcms_getLunrData',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  // load connection settings for HAXcms to know how to talk to Drupal
  $items['haxcms/lunrSearchIndex.json'] = array(
    'page callback' => '_haxcms_getLunrData',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  // load site.json format - fallback to default one
  $items['haxapi/loadJOS'] = array(
    'page callback' => '_haxcms_loadJOS',
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'access callback' => '_haxcms_node_access',
    'access arguments' => array('view'),
  );
  // load site.json - fallback to default one
  $items['site.json'] = array(
    'page callback' => '_haxcms_loadJOS',
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'access callback' => '_haxcms_node_access',
    'access arguments' => array('view'),
  );
  // load site.json format for a specific node
  $items['haxapi/loadJOS/%node'] = array(
    'page callback' => '_haxcms_loadJOS',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => '_haxcms_node_access',
    'access arguments' => array('view', 2),
  );
  // load connection settings for HAXcms to know how to talk to Drupal
  $items['haxapi/getUserData/%'] = array(
    'page callback' => '_haxcms_getUserData',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use hax'),
  );
  // login endpoint
  $items['haxapi/login'] = array(
    'page callback' => '_haxcms_login',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use hax'),
  );
  // logout endpoint
  $items['haxapi/logout'] = array(
    'page callback' => '_haxcms_logout',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use hax'),
  );
  // refreshAccessToken endpoint
  $items['haxapi/refreshAccessToken'] = array(
    'page callback' => '_haxcms_refreshAccessToken',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use hax'),
  );
  // load connection settings for HAXcms to know how to talk to Drupal
  $items['haxapi/connectionSettings'] = array(
    'page callback' => '_haxcms_connectionSettings',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use hax'),
  );
  $items['haxapi/getNodeContent/%node'] = array(
    'page callback' => '_haxcms_getNodeContent',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => '_haxcms_node_access',
    'access arguments' => array('view', 2),
  );
  // HAXcms implementation based on data structure so we can do POST
  // @see _hax_node_save for stand alone submission mode
  $items['haxapi/saveNode/%'] = array(
    'page callback' => '_haxcms_saveNode',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use hax'),
  );
  // delete node
  $items['haxapi/deleteNode/%'] = array(
    'page callback' => '_haxcms_deleteNode',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use hax'),
  );
  // create node
  $items['haxapi/createNode/%'] = array(
    'page callback' => '_haxcms_createNode',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use hax'),
  );
  // saveOutline from outline-designer
  $items['haxapi/saveOutline'] = array(
    'page callback' => '_haxcms_saveOutline',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use hax'),
  );
  // settings for theme / JOS spec settings Drupal won't have
  $items['admin/config/content/haxcms'] = array(
    'title' => 'HAXcms configuration',
    'description' => 'site.json loader / configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('haxcms_settings'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer haxcms settings'),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function haxcms_menu_alter(&$items) {
  // Override the book admin page with a custom version that includes book copy links.
  $items['admin/content/book']['page callback'] = '_haxcms_book_admin_overview';
}

/**
 * Return lunr data based on the current page that's being shown and the outline
 * of nodes associated with it.
 */
function _haxcms_getLunrData() {
  drupal_add_http_header('Content-Type', 'application/javascript');
  if (variable_get('haxcms_settings_search', TRUE)) {
    $node = NULL;
    // totally possible to be null still. allow other modules to figure out what active is
    // in elmsln this will be section cvontextr in mooc distro.
    drupal_alter('haxcms_root_node_loader', $node);
    if (isset($node->book['bid'])) {
      $book = node_load($node->book['bid']);
      $site = _haxcms_loadJOS($book, TRUE);
      $json = _haxcms_lunrSearchIndex($site->items);
      drupal_add_http_header('Status', 200);
      print json_encode($json);
      exit;
    }
  }
  drupal_add_http_header('Status', 403);
  print "0";
  exit;
}

function _haxcms_lunrSearchIndex($items) {
  $data = array();
  foreach ($items as $item) {
    $created = time();
    if (isset($item->metadata) && isset($item->metadata->created)) {
      $created = $item->metadata->created;
    }
    $parts = explode("/", $item->location);
    $nid = array_pop($parts);
    $node = node_load($nid);
    // if we already have a "safe value" then just return it
    if (isset($node->body[0]['safe_value'])) {
      $nodeBody = $node->body[0]['safe_value'];
    }
    else {
      // in the event that we don't have it via the loading of a node
      $body = field_get_items('node', $node, 'body');
      // if we dont have content then make it an empty p node
      // or HAX will be annoyed
      if (!isset($body[0]['value']) || $body[0]['value'] == '') {
        $body[0]['value'] = '<p></p>';
      }
      // should be a format..
      if (!isset($body[0]['format']) || $body[0]['format'] == '') {
        $body[0]['format'] = filter_default_format();
      }
      $nodeBody = check_markup($body[0]['value'], $body[0]['format']);
    }
    $description = substr(trim(strtolower(str_replace("\n", ' ', utf8_encode(strip_tags($nodeBody))))), 0, 200);
    $description = preg_replace('/[^a-z0-9\']/', ' ', $description);
    $description = str_replace("'", '', $description);

    // may seem silly but IDs in lunr have a size limit for some reason in our context..
    $data[] = array(
      "id" => substr(str_replace('-', '', str_replace('item-', '', $item->id)), 0, 29),
      "title" => $item->title,
      "created" => $created,
      "location" => drupal_get_path_alias('node/' . $nid),
      "description" => $description,
      "text" => _haxcms_cleanSearchData($nodeBody),
    );
  }
  return $data;
}

function _haxcms_cleanSearchData($text) {
  // clean up initial, small, trim, replace end lines, utf8 no tags
  $text = trim(strtolower(str_replace("\n", ' ', utf8_encode(strip_tags($text)))));
  // all weird chars
  $text = preg_replace('/[^a-z0-9\']/', ' ', $text);
  $text = str_replace("'", '', $text);
  // all words 1 to 4 letters long
  $text = preg_replace('~\b[a-z]{1,4}\b\s*~', '', $text);
  // all excess white space
  $text = preg_replace('/\s+/', ' ', $text);
  // crush string to array and back to make an unique index
  $text = implode(' ', array_unique(explode(' ', $text)));
  return $text;
}

/**
 * Menu callback.  Overrides the book_admin_overview at admin/content/book.
 *
 * @see book_copy_menu_alter()
 */
function _haxcms_book_admin_overview() {
  $has = array(
    'copy' => FALSE,
    'delete' => FALSE,
    'export' => FALSE,
  );
  $paths = array(
    'copy' => 'admin/content/book/copy',
    'delete' => 'admin/content/book/delete',
    'export' => 'feeds_node_helper_export',
  );
  $headers = array(t('View'), t('Outline'), t('HAXcms'));
  // form simple add button
  if (module_exists('outline_designer')) {
    drupal_add_css(drupal_get_path('module', 'outline_designer') .'/css/outline_designer.css');
    $add_button = l('<div style="width:120px;" class="context-menu context-menu-theme-'. variable_get('outline_designer_theme', 'osx') .'"><div title="" class="context-menu-item"><div style="background-repeat:no-repeat;background-image: url('. base_path() . drupal_get_path('module', 'outline_designer') .'/images/add_content.png);" class="context-menu-item-inner">'. t('add book') . '</div></div></div>', 'node/add/'. variable_get('book_child_type', 'book'), array('html' => TRUE, 'query' => array('destination' => 'admin/content/book', 'parent' => 'new')));
  }
  else {
    $add_button = l('<div style="width:120px;" class="context-menu"><div title="" class="context-menu-item"><div style="background-repeat:no-repeat;" class="context-menu-item-inner">'. t('add book') . '</div></div></div>', 'node/add/'. variable_get('book_child_type', 'book'), array('html' => TRUE, 'query' => array('destination' => 'admin/content/book', 'parent' => 'new')));
  }
  // support for copy button
  if (module_exists('book_copy') && user_access('copy books')) {
    $has['copy'] = TRUE;
  }
  // support for delete button
  if (module_exists('book_delete') && user_access('bypass node access')) {
    $has['delete'] = TRUE;
  }
  // export for export button
  if (module_exists('feeds_node_helper_export') && user_access('bypass node access')) {
    $has['export'] = TRUE;
  }
  // form headers based on what's allowed
  foreach ($has as $key => $item) {
    if ($item) {
      $headers[] = ucwords(t($key));
    }
  }
  // loop through books
  foreach (book_get_books() as $book) {
    $ary = array(l($book['title'], $book['href'], $book['options']), l(t('edit order and titles'), "admin/content/book/". $book['nid']), l(t('Load via HAXcms'), "haxcms/node/". $book['nid']));
    foreach ($has as $key => $item) {
      if ($item) {
        $ary[] = l(t('@key book', array('@key' => $key)), $paths[$key] . '/' . $book['nid']);
      }
    }
    $rows[] = $ary;
  }
  // If no books were found, let the user know.
  if (empty($rows)) {
    $rows[] = array(array('data' => t('No books available.'), 'colspan' => 3));
  }
  $output = theme('table', array('header' => $headers, 'rows' => $rows));
  return $add_button . $output;
}

/**
 * Helper to translate HAXcms front end API request structure to Drupal node
 * @return mixed Boolean if requested or Object for node response if we can load one
 */
function _haxcms_convert_request_structure($token, $validateOnly = FALSE, $method = "POST") {
  // ensure we had data POST here and it is valid
  $postData = file_get_contents("php://input");
  $postData = json_decode($postData, TRUE);
  if ($_SERVER['REQUEST_METHOD'] == $method && drupal_valid_token($token, 'hax') && (isset($postData['node']) || isset($postData['items']))) {
    // if we were only asked to validate the return the node path
    if ($validateOnly) {
      return TRUE;
    }
    // try and load a menu link so we can figure out the node
    else if (isset($postData['node']['id'])) {
      if ($link = menu_link_load(str_replace('mlid-', '', $postData['node']['id']))) {
        return node_load(str_replace('node/', '', $link['link_path']));
      }
    }
  }
  return FALSE;
}

/**
 * Verify user is logged into Drupal
*/
function _haxcms_login() {
  // test if this is a valid user login
  if ($GLOBALS['user']->uid === 0) {
    // deliver a piece of JS object structure
    drupal_add_http_header('Content-Type', 'application/javascript');
    drupal_add_http_header('Status', 403);
    print json_encode(array(
      '__failed' => array(
        'status' => 403,
        'message' => 'Access denied',
      )
    )); 
  } else {
    drupal_add_http_header('Status', 200);
    $HAXCMS = _haxcms_bootstrap();
    $u = $GLOBALS['user']->name;
    // set a refresh_token COOKIE that will ship w/ all calls automatically
    setcookie('haxcms_refresh_token', $HAXCMS->getRefreshToken($u), $_expires = 0, $_path = '/', $_domain = '', $_secure = false, $_httponly = true);
    print $HAXCMS->getJWT($u);
  }
  exit;
}
  /**
   * @OA\Post(
   *    path="/logout",
   *    tags={"cms","user"},
   *    @OA\Response(
   *        response="200",
   *        description="User logout, front end will kill token"
   *   )
   * )
   */
  function _haxcms_logout() {
    print 'loggedout';
    exit;
  }
  /**
   * Simple bootstrap for HAXcms that returns an instance so we can use the class
   */
  function _haxcms_bootstrap() {
    // include HAXcms and print out the settings
    define('HAXCMS_ROOT', DRUPAL_ROOT . drupal_get_path("module", "hax"));
    include_once __DIR__ . '/../../HAXapi/php/lib/HAXCMS.php';
    class DrupalHAXCMS extends HAXCMS {
      /**
       * Get Front end JWT based connection settings
       */
      public function appJWTConnectionSettings()
      {
          $path = $this->basePath . $this->systemRequestBase . '/';
          $settings = new stdClass();
          $settings->login = $path . 'login';
          $settings->refreshUrl = $path . 'refreshAccessToken';
          $settings->logout = $path . 'logout';
          $settings->connectionSettings = $path . 'connectionSettings';
          $settings->redirectUrl = $this->basePath; // enables redirecting back to site root if JWT really is dead
          $settings->themes = $this->getThemes();
          $settings->saveNodePath = $path . 'saveNode/' . drupal_get_token('hax');
          $settings->backLink = base_path();
          $settings->backText = t('Back to front page');
          // @todo comment in when we implement these in Drupal
          //$settings->saveManifestPath = $path . 'saveManifest';
          $settings->saveOutlinePath = $path . 'saveOutline';
          //$settings->setConfigPath = $path . 'setConfig';
          //$settings->getConfigPath = $path . 'getConfig';
          //$settings->getNodeFieldsPath = $path . 'getNodeFields';
          //$settings->getSiteFieldsPath = $path . 'formLoad?haxcms_form_id=siteSettings';
          // form token to validate form submissions as unique to the session
          $settings->getFormToken = drupal_get_token('hax');
          $settings->createNodePath = $path . 'createNode/' . drupal_get_token('hax');
          $settings->deleteNodePath = $path . 'deleteNode/' . drupal_get_token('hax');
          $settings->getUserDataPath = $path . 'getUserData/' . drupal_get_token('hax');
          // not an actual jwt but fakes it correctly for session based Drupal to function
          $settings->jwt = drupal_get_token('hax');
          $settings->reloadOnError = true;
          //$settings->syncSitePath = $path . 'syncSite';
          //$settings->publishSitePath = $path . 'publishSite';
          //$settings->revertSitePath = $path . 'revertCommit';
          //$settings->setUserPhotoPath = $path . 'setUserPhoto';
          //$settings->createNewSitePath = $path . 'createSite';
          //$settings->gitImportSitePath = $path . 'gitImportSite';
          //$settings->downloadSitePath = $path . 'downloadSite';
          //$settings->archiveSitePath = $path . 'archiveSite';
          //$settings->cloneSitePath = $path . 'cloneSite';
          //$settings->deleteSitePath = $path . 'deleteSite';
          $settings->appStore = array(
            'url' => base_path() . 'haxapi/generateAppStore/' . drupal_get_token('hax'),
          );
          return $settings;
      }
    }
    $HAXCMS = new DrupalHAXCMS();
    $HAXCMS->basePath = base_path();
    $HAXCMS->systemRequestBase = 'haxapi';
    $HAXCMS->config->themes = array(
      'clean-one' => t('Course theme'),
      'clean-two' => t('Course theme two'),
      'learn-two-theme' => t('Course theme three'),
      'bootstrap-theme' => t('Bootstrap theme'),
      'outline-player' => t('Documentation theme'),
      'haxcms-slide-theme' => t('Slide player'),
      'haxor-slevin' => t('Developer Blog theme'),
    );
    return $HAXCMS;
  }
  /**
   * @OA\Post(
   *    path="/refreshAccessToken",
   *    tags={"cms","user"},
   *    @OA\Response(
   *        response="200",
   *        description="User access token for refreshing JWT when it goes stale"
   *   )
   * )
   */
  function _haxcms_refreshAccessToken() {
    $HAXCMS = _haxcms_bootstrap();
    // check that we have a valid refresh token
    $validRefresh = $HAXCMS->validateRefreshToken(FALSE);
    // if we have a valid refresh token then issue a new access token
    if ($validRefresh) {
      // define status
      drupal_add_http_header('Status', 200);
      print $HAXCMS->getJWT($validRefresh->user);
    }
    else {
    // define status
    // deliver a piece of JS object structure
    drupal_add_http_header('Content-Type', 'application/javascript');
    drupal_add_http_header('Status', 401);
      // this failed so unset the cookie
      setcookie('haxcms_refresh_token', '', 1);
      print json_encode(array(
        '__failed' => array(
          'status' => 401,
          'message' => 'haxcms_refresh_token:invalid',
        )
      ));
    }
    exit;
  }

/**
 * Return basic user data info
 */
function _haxcms_getUserData($token) {
  if (drupal_valid_token($token, 'hax')) {
    // send back happy headers
    drupal_add_http_header('Content-Type', 'application/json');
    // define status
    drupal_add_http_header('Status', 200);
    $image = '';
    if (isset($GLOBALS['user']->picture)) {
      $picture = file_load($GLOBALS['user']->picture);
      $image = image_style_url('thumbnail', $picture->uri);
    }
    $return = array(
      'status' => 200,
      'data' => array(
        'fName' => '',
        'lName' => '',
        'social' => array(),
        'integrations' => array(),
        'userName' => $GLOBALS['user']->name,
        'userPicture' => $image,
      ),
    );
    // output the response as json
    print drupal_json_output($return);
    exit;
  }
}

/**
 * Callback to save outline
 * @todo THIS IS MOSTLY STUB CODE THAT NEEDS TO SUPPORT LOADING AND SAVING EXISTING NODES
 * WHILE THIS IS CURRENTLY ABOUT MAKING NEW THINGS EACH TIME
 */
function _haxcms_saveOutline() {
  $status = 403;
  $message = t('Access denied');
  $items = array();
  $postData = file_get_contents("php://input");
  $postData = json_decode($postData, TRUE);
  $token = $postData['jwt'];
  if (_haxcms_convert_request_structure($token, TRUE)) {
    // resolve multiple vs singular creation request
    if (isset($postData['items'])) {
      for ($i=0; $i < count($postData['items']); $i++) {
        if (isset($postData['items'][$i]['delete']) && $postData['items'][$i]['delete'] == true) {
          // do nothing, need to clean up later and delete these
          // verify access to this operation
          $tmpNode = node_load($postData['items'][$i]['id']);
          if (node_access('delete', $tmpNode)) {
            node_delete($postData['items'][$i]['id']);
          }
        }
        else {
          array_push($items, array(
            "parent" => $postData['items'][$i]['parent'],
            "title" => $postData['items'][$i]['title'],
            "slug" => $postData['items'][$i]['slug'],
            "order" => $postData['items'][$i]['order'],
            "id" => $postData['items'][$i]['id'],
            "indent" => $postData['items'][$i]['indent'],
            "contents" => $postData['items'][$i]['contents'],
            "location" => $postData['items'][$i]['location'],
            "duplicate" => $postData['items'][$i]['duplicate'],
          ));
        }
      }
    }
    // run through and create the array of items
    for ($i=0; $i < count($items); $i++) {
      $node = new stdClass();
      $activeNode = $items[$i]['node'];
      $status = 500;
      $message = t('Node creation failed!');
      $parent = NULL;
      // parent node is required or we don't know where to place this item
      if ($link = menu_link_load(str_replace('mlid-', '', $activeNode['parent']))) {
        $parent = node_load(str_replace('node/', '', $link['link_path']));
      }
      else if ($link = menu_link_load(str_replace('mlid-', '', $itemMap[$activeNode['parent']]))) {
        $parent = node_load(str_replace('node/', '', $link['link_path']));
      }
      else {
        // totally possible to be null still. allow other modules to figure out what active is
        // in elmsln this will be section context in mooc distro.
        drupal_alter('haxcms_root_node_loader', $parent);
      }
      // should be able to get either of these
      if ($parent != null) {
        // see if we can't load the existing node vs a full rebuild
        if ($tmp = node_load($activeNode['id'])) {
          $node = $tmp;
        }
        else {
          // load this from an actual setting / default setting
          // default to the parent's type
          $type = variable_get('book_child_type', $parent->type);
          // set the node
          $node->type = $type;
          node_object_prepare($node);
          $node->uid = $GLOBALS['user']->uid;
          // default to setting parent language if set, otherwise none
          $node->language = isset($parent->language) ? $parent->language : LANGUAGE_NONE;
          $node->book['bid'] = $parent->book['bid'];
          // minor support for OG
          if (!empty($parent->og_group_ref[LANGUAGE_NONE][0]['target_id'])){
            $node->og_group_ref = $parent->og_group_ref;
          }
          $node->book['menu_name'] = $parent->book['menu_name'];
          $node->book['module'] = $parent->book['module'];
        }
        $node->title = $activeNode['title'];
        // copy over book structure
        $node->book['weight'] = $activeNode['order'];
        $node->book['plid'] = $activeNode['parent'] != null ? $parent->book['mlid'] : null;

        // support for duplicating the content of another item
        if (isset($activeNode['duplicate'])) {
          // verify we can load this id
          if ($linkToDuplicate = menu_link_load(str_replace('mlid-', '', $activeNode['duplicate']))) {
            $nodeToDuplicate = node_load(str_replace('node/', '', $linkToDuplicate['link_path']));
            $node->body['und'][0]['value'] = $nodeToDuplicate->body['und'][0]['value'];
            if (!isset($node->body['und'][0]['format']) || $node->body['und'][0]['format'] == '') {
              $node->body['und'][0]['format'] = filter_default_format();
            }
            $node->book['weight'] = $nodeToDuplicate->book['weight'] - 1;
          }
        }
        // body content trumps duplication if it is set
        if (isset($activeNode['contents'])) {
          $node->body['und'][0]['value'] = $activeNode['contents'];
          if (!isset($node->body['und'][0]['format']) || $node->body['und'][0]['format'] == '') {
            $node->body['und'][0]['format'] = filter_default_format();
          }
        }
        // leave a trace that haxcms processed this
        $node->_haxcms = TRUE;
        // allow other projects to jump in as needed for this very specific node save context
        drupal_alter('haxcms_save_node', $node);

        // verify access to the operation in question prior to execution
        if (isset($node->nid) && node_access('update', $node) || !isset($node->nid) && node_access('create', $node->type)) {
          node_save($node);
          // allow front end to set path if defined
          $nodePath = 'node/' . $node->nid;
          if (isset($activeNode['location']) && $activeNode['location'] != '' && $activeNode['location'] != NULL) {
            $pathMap = array("source" => 'node/' . $node->nid, "alias" => $activeNode['location']);
            path_save($pathMap);
            $nodePath = $activeNode['location'];
          }
          $status = 200;
          $message = t('Outline updated!');
          $node->slug = $nodePath;
        }
      }
    }
  }
  // send back happy headers
  drupal_add_http_header('Content-Type', 'application/json');
  // define status
  drupal_add_http_header('Status', $status);
  $return = array(
    'status' => $status,
    'message' => $message,
    'data' => $node,
  );
  // output the response as json
  print drupal_json_output($return);
  exit;
}

/**
 * Callback to create a new node
 */
function _haxcms_createNode($token) {
  $status = 403;
  $message = t('Access denied');
  $items = array();
  $itemMap = array();
  if (_haxcms_convert_request_structure($token, TRUE)) {
    $postData = file_get_contents("php://input");
    $postData = json_decode($postData, TRUE);
    // resolve multiple vs singular creation request
    if (isset($postData['items'])) {
      for ($i=0; $i < count($postData['items']); $i++) {
        if (isset($postData['items'][$i]['delete']) && $postData['items'][$i]['delete'] == true) {
          // do nothing
        }
        else {
          array_push($items, array(
            "parent" => $postData['items'][$i]['parent'],
            "title" => $postData['items'][$i]['title'],
            "slug" => $postData['items'][$i]['slug'],
            "order" => $postData['items'][$i]['order'],
            "id" => $postData['items'][$i]['id'],
            "indent" => $postData['items'][$i]['indent'],
            "contents" => $postData['items'][$i]['contents'],
            "location" => $postData['items'][$i]['location'],
            "duplicate" => $postData['items'][$i]['duplicate'],
          ));
        }
      }
    }
    else {
      array_push($items, array(
        "parent" => $postData['parent'],
        "order" => $postData['order'],
        "title" => $postData['node']['title'],
        "slug" => $postData['node']['slug'],
        "id" => $postData['node']['id'],
        "indent" => $postData['node']['indent'],
        "contents" => $postData['node']['contents'],
        "location" => $postData['node']['location'],
        "duplicate" => $postData['node']['duplicate'],
      ));
    }
    // run through and create the array of items
    for ($i=0; $i < count($items); $i++) {
      $node = new stdClass();
      $activeNode = $items[$i];
      $status = 500;
      $message = t('Node creation failed!');
      $parent = NULL;
      // parent node is required or we don't know where to place this item
      if ($link = menu_link_load(str_replace('mlid-', '', $activeNode['parent']))) {
        $parent = node_load(str_replace('node/', '', $link['link_path']));
      }
      else if ($link = menu_link_load(str_replace('mlid-', '', $itemMap[$activeNode['parent']]))) {
        $parent = node_load(str_replace('node/', '', $link['link_path']));
      }
      else {
        // totally possible to be null still. allow other modules to figure out what active is
        // in elmsln this will be section context in mooc distro.
        drupal_alter('haxcms_root_node_loader', $parent);
      }
      // should be able to get either of these
      if ($parent != null) {
        // load this from an actual setting / default setting
        // default to the parent's type
        $type = variable_get('book_child_type', $parent->type);
        // set the node
        $node->type = $type;
        node_object_prepare($node);
        $node->title = $activeNode['title'];
        $node->uid = $GLOBALS['user']->uid;
        // default to setting parent language if set, otherwise none
        $node->language = isset($parent->language) ? $parent->language : LANGUAGE_NONE;
        // copy over book structure
        $node->book['weight'] = $activeNode['order'];
        $node->book['plid'] = $activeNode['parent'] != null ? $parent->book['mlid'] : null;
        $node->book['bid'] = $parent->book['bid'];
        // minor support for OG
        if (!empty($parent->og_group_ref[LANGUAGE_NONE][0]['target_id'])){
          $node->og_group_ref = $parent->og_group_ref;
        }
        $node->book['menu_name'] = $parent->book['menu_name'];
        $node->book['module'] = $parent->book['module'];
        // support for duplicating the content of another item
        if (isset($activeNode['duplicate'])) {
          // verify we can load this id
          if ($linkToDuplicate = menu_link_load(str_replace('mlid-', '', $activeNode['duplicate']))) {
            $nodeToDuplicate = node_load(str_replace('node/', '', $linkToDuplicate['link_path']));
            $node->body['und'][0]['value'] = $nodeToDuplicate->body['und'][0]['value'];
            if (!isset($node->body['und'][0]['format']) || $node->body['und'][0]['format'] == '') {
              $node->body['und'][0]['format'] = filter_default_format();
            }
            $node->book['weight'] = $nodeToDuplicate->book['weight'] - 1;
          }
        }
        // body content trumps duplication if it is set
        if (isset($activeNode['contents'])) {
          $node->body['und'][0]['value'] = $activeNode['contents'];
          if (!isset($node->body['und'][0]['format']) || $node->body['und'][0]['format'] == '') {
            $node->body['und'][0]['format'] = filter_default_format();
          }
        }
        // leave a trace that haxcms processed this
        $node->_haxcms = TRUE;
        // allow other projects to jump in as needed for this very specific node save context
        drupal_alter('haxcms_save_node', $node);

        // Allow other modules to alter the new book node.
        if (node_access('create', $node->type)) {
          node_save($node);
          // set record of what it WAS and what it became
          $itemMap[$activeNode['id']] = $node->nid;
          // allow front end to set path if defined
          $nodePath = 'node/' . $node->nid;
          if (isset($activeNode['location']) && $activeNode['location'] != '' && $activeNode['location'] != NULL) {
            $pathMap = array("source" => 'node/' . $node->nid, "alias" => $activeNode['location']);
            path_save($pathMap);
            $nodePath = $activeNode['location'];
          }
          $status = 200;
          $message = t('Node created!');
          $node->slug = $nodePath;
        }
      }
    }
  }
  // send back happy headers
  drupal_add_http_header('Content-Type', 'application/json');
  // define status
  drupal_add_http_header('Status', $status);
  $return = array(
    'status' => $status,
    'message' => $message,
    'data' => $node,
  );
  // output the response as json
  print drupal_json_output($return);
  exit;
}
/**
 * Callback to delete a node
 */
function _haxcms_deleteNode($token) {
  $status = 403;
  $message = t('Access denied');
  if ($node = _haxcms_convert_request_structure($token)) {
    if (user_access('use hax') && _haxcms_node_access('delete', $node)) {
      node_delete($node->nid);
      $status = 200;
      $message = t('Delete successful!');
    }
  }
  // send back happy headers
  drupal_add_http_header('Content-Type', 'application/json');
  // define status
  drupal_add_http_header('Status', $status);
  $return = array(
    'status' => $status,
    'message' => $message,
    'data' => $node,
  );
  // output the response as json
  print drupal_json_output($return);
  exit;
}
function _haxcms_pageBreakParser($body = '<page-break></page-break>') {
  $body .= '<page-break fakeendcap="fakeendcap"></page-break>';
  $pageData = [];
  // match all pages + content
  //preg_match_all("/(<page-break(.*?)><\/page-break>)((?:.|\n)*?)(?=<page-break)/", $body, $matches);
  // match all page break tags for the sake of doing so
  preg_match_all("/(<page-break(.*?)><\/page-break>)/", $body, $matches);
  foreach($matches[0] as $i => $match) {
    $content = "<div " . str_replace('path-auto ', 'path-auto="path-auto" ', str_replace('published ', 'published="published" ', str_replace('locked ', 'locked="locked" ', $matches[2][$i]))) . "></div>";
    try {
      $attrs = current((array) new SimpleXMLElement($content));
    }
    catch(Exception $e) {
      $attrs = array();
    }
    $pageData[$i] = array(
        // this assumes that the attributes are well formed; make sure front end did this
        // even for boolean attributes
        "attributes" => $attrs
    );
  }
  return $pageData;
}
/**
 * Callback to save just the body field.
 */
function _haxcms_saveNode($token) {
  $node = new stdClass();
  $status = 403;
  $message = t('Access denied');
  if ($node = _haxcms_convert_request_structure($token)) {
    // verify they can update this
    if (user_access('use hax') && _haxcms_node_access('update', $node)) {
      $postData = file_get_contents("php://input");
      $postData = json_decode($postData, TRUE);
      // body post
      if (isset($postData['node']['body'])) {
        // @todo need to process body to find page-break tag and remove it from output
        // if it's found we also need to update title, publishing (hidden or published if not there)
        // and locked status (made up meta data?)
        // IF for some reason these do not exist or item-id !== mlid of this item, just ignore the info
        // and lob off the tag. This avoids any possible issues while we mess w/ this further.
        $pageData = _haxcms_pageBreakParser($postData['node']['body']);
        $body = $postData['node']['body'];

        // check if we have a page-break; if not (we always should) then we skip these steps
        // this would imply the user deleted it manually which is bad but we won't fail them :0
        if (count($pageData) > 0) {
          // @todo in the future make new pages off of this
          // forcibly remove page-break from output of body. this way we got the data needed
          // without incorrectly losing material with a bad regex
          $body = preg_replace("/(<page-break(.*?)><\/page-break>)/", "",$body);  
          // now just work against the 1st one for the node and ignore the rest
          $data = $pageData[0];
          if (isset($data["attributes"]["title"]) && $node->title != $data["attributes"]["title"]) {
            $node->title = $data["attributes"]["title"];
          }
          $newSlug = '';
          // ignore setting path if it's just node/123
          if (isset($data["attributes"]["slug"]) && $data["attributes"]["slug"] != '' && strpos( $data["attributes"]["slug"] , 'node/' ) !== 0) {
            $alias = drupal_lookup_path('alias', $data["attributes"]["slug"]);
            // create the alias if it's not a node path and it doesn't have a match here yet
            if (!$alias) {
              $pathObj = array(
                "source" => 'node/' . $node->nid,
                "alias" => $data["attributes"]["slug"]
              );
              path_save($pathObj);
              $newSlug = $data["attributes"]["slug"];
            }
          } 
          // use hidden nodes if it exists; or fallback to actual published status in drupal node
          // @todo when we sure up the regex work then we can tackle this
          // this is not a common use case but needs fixed
          /*if (module_exists("hidden_nodes")) {
            if (isset($data["attributes"]["published"])) {
              $node->hidden = 0;
            }
            else {
              $node->hidden = 1;
            }
          }
          else {
            if (isset($data["attributes"]["published"])) {
              $node->status = 1;
            }
            else {
              $node->status = 0;
            }
          }*/
          // support for changing parent / plid
          if (isset($data["attributes"]["parent"]) && $node->book["plid"] != $data["attributes"]["parent"]) {
            $node->book["plid"] = str_replace('mlid-', '', $data["attributes"]["parent"]);
          }
          // support for changing order / weight
          if (isset($data["attributes"]["order"])) {
            $node->book["weight"] = (int)$data["attributes"]["order"];
          }
          // @note Drupal manages depth so we do not work on the depth value at all
        }
        $node->body['und'][0]['value'] = $body;
        if (!isset($node->body['und'][0]['format']) || $node->body['und'][0]['format'] == '') {
          $node->body['und'][0]['format'] = filter_default_format();
        }
      }
      // @note currently not supported bc UI hides this
      else if (isset($postData['node']['details'])) {
        // @todo support other fields
        if (isset($postData['node']['details']['title'])) {
          $node->title = $postData['node']['details'];
        }
      }
      // check for revision to ensure it's set automatically if globally set
      $node_options = variable_get('node_options_' . $node->type, array(
        'status',
        'promote',
      ));
      $node->log = t('saved via HAXcms');
      $node->revision = in_array('revision', $node_options);
      node_save($node);
      $status = 200;
      $message = t('Save successful!');
    }
    else {
      $message = t('Node access denied');
    }
  }
  else {
    $status = 500;
    $message = t('Invalid node');
  }
  // send back happy headers
  drupal_add_http_header('Content-Type', 'application/json');
  // define status
  drupal_add_http_header('Status', $status);
  // helps w/ front end routing if path changed but also for API consistency w/ HAXcms
  $node->slug = 'node/' . $node->nid;
  if ($newSlug != '') {
    $node->slug = $newSlug;
  }
  $return = array(
    'status' => $status,
    'message' => $message,
    'data' => $node,
  );
  // output the response as json
  print drupal_json_output($return);
  exit;
}

/**
 * Render just the node body and display
 */
function _haxcms_getNodeContent($node) {
  // if we already have a "safe value" then just return it
  if (isset($node->body[0]['safe_value'])) {
    drupal_alter("haxcms_node_content_response", $node->body);
    print $node->body[0]['safe_value'];
  }
  else {
    // in the event that we don't have it via the loading of a node
    $body = field_get_items('node', $node, 'body');
    // if there's no content then generate an outline of links to render
    if (!isset($body[0]['value']) || $body[0]['value'] == '') {
      $body[0]['value'] = '<p><ul>';
      $items = _haxcms_book_get_flat_menu($node->book);
      foreach ($items as $mlid => $bookData) {
        if ($node->book['mlid'] == $bookData['plid']) {
          $body[0]['value'] .= '<li><a href="' . str_replace(' ', '%20', drupal_get_path_alias($bookData['link_path'])) . '">' . $bookData['title'] . '</a></li>';
        }
      }
      $body[0]['value'] .= '</ul></p>';
      drupal_alter("haxcms_node_content_response", $body);
      print $body[0]['value'];
    }
    else {
      // should be a format..
      if (!isset($body[0]['format']) || $body[0]['format'] == '') {
        $body[0]['format'] = NULL;
      }
      drupal_alter("haxcms_node_content_response", $body);
      // special edge case of NO wrapping p tag but not for common markdown formats
      // this is known as adding "Collins" support to the code base.
      if (strip_tags($body[0]['value']) == $body[0]['value'] && $body[0]['format'] != "markdown" && $body[0]['format'] != "git_book_markdown") {
        $body[0]['value'] = '<p>' . $body[0]['value'] . '</p>';
      }
      print check_markup($body[0]['value'], $body[0]['format']);
    }
  }
  exit;
}

/**
 * copy of book_get_flat_menu but without a depth limit to give us everything
 */
function _haxcms_book_get_flat_menu($book_link) {
  $haxcmsflat =& drupal_static(__FUNCTION__, array());
  if (!isset($haxcmsflat[$book_link['mlid']])) {

    // Call menu_tree_all_data() to take advantage of the menu system's caching.
    $tree = menu_tree_all_data($book_link['menu_name'], NULL, 100);
    $haxcmsflat[$book_link['mlid']] = array();
    _book_flatten_menu($tree, $haxcmsflat[$book_link['mlid']]);
  }
  return $haxcmsflat[$book_link['mlid']];
}

/**
 * Return the connection settings
 */
function _haxcms_connectionSettings() {
  // deliver a piece of JS object structure
  drupal_add_http_header('Content-Type', 'application/javascript');
  // define status
  drupal_add_http_header('Status', 200);
  $HAXCMS = _haxcms_bootstrap();
  print 'window.appSettings = ' . json_encode($HAXCMS->appJWTConnectionSettings()) . ';';
  exit;
}

/**
 * Return a built JSON outline schema file
 */
function _haxcms_loadJOS($book = null, $returnSite = false) {
  // support finding the default when not asked for a specific one
  if ($book == NULL) {
    drupal_alter('haxcms_root_node_loader', $book);
  }
  // support being asked to load a node that IS NOT the book root
  // we require a book in order to know the structure
  if ($book->book['bid'] != $book->nid) {
    $book = node_load($book->book['bid']);
  }
  define('HAXCMS_ROOT', DRUPAL_ROOT . drupal_get_path("module", "hax"));
  include_once __DIR__ . '/../../HAXapi/php/lib/JSONOutlineSchema.php';
  $site = new JSONOutlineSchema();
  $site->file = base_path() . "haxapi/loadJOS/" . $book->nid;
  $site->id = 'mlid-' . $book->book['mlid'];
  // load user data
  $author = user_load($book->uid);
  if (isset($author->picture->uri)) {
    $image = image_style_url('thumbnail', $author->picture->uri);
  }
  // site data
  $site->title = $book->title;
  $site->description = '';
  if (isset($book->body[0])) {
    $site->description = substr(check_markup($book->body[0]['und']['value'], $book->body[0]['und']['format']),0,200);
  }
  $site->author = $author->name;
  $site->license = variable_get("haxcms_settings_license", "by-sa");
  $site->metadata = new stdClass();
  // author
  $site->metadata->author = new stdClass();
  $site->metadata->author->image = $image;
  $site->metadata->author->name = $author->name;
  $site->metadata->author->socialLink = variable_get("haxcms_settings_socialLink", "");
  $site->metadata->author->email = $author->mail;
  // site
  $site->metadata->site = new stdClass();
  $site->metadata->site->name = str_replace('/', '', base_path());
  $site->metadata->site->domain = base_path();
  $site->metadata->site->domain = HAXCMS_VERSION;
  // get thumbnail unless it doesn't exist
  $site->metadata->site->logo = _haxcms_get_logo('thumbnail');
  // just for spec conformance, drupal manages this stuff
  $site->metadata->site->git = new stdClass();
  $site->metadata->site->static = new stdClass();
  $site->metadata->site->settings = new stdClass();
  $site->metadata->node = new stdClass();
  $site->metadata->node->fields = new stdClass();
  // theme
  $site->metadata->theme = new stdClass();
  $site->metadata->theme->element = variable_get("haxcms_settings_theme", "clean-one");
  $theme = '';
  // test for theme hijack, great for testing things
  if (isset($_GET["theme"])) {
    $get   = filter_input_array(INPUT_GET, FILTER_SANITIZE_STRING);
    $site->metadata->theme->element = $get["theme"];
  }
  $site->metadata->theme->variables = new stdClass();
  $site->metadata->theme->variables->image = file_create_url(_haxcms_get_logo());
  $site->metadata->theme->variables->hexCode = variable_get("haxcms_settings_hexCode", "#009d75");
  $site->metadata->theme->variables->cssVariable = variable_get("haxcms_settings_cssVariable", "--simple-colors-default-theme-deep-purple-7");
  $site->metadata->theme->variables->icon = variable_get("haxcms_settings_icon", "icons:android");

  // now work on the children of this book root
  $items = _haxcms_book_get_flat_menu($book->book);
  foreach ($items as $mlid => $bookData) {
    if ($book->book['mlid'] != $bookData['mlid']) {
      $item = new JSONOutlineSchemaItem();
      $item->id = 'mlid-' . $bookData['mlid'];
      $item->title = $bookData['title'];
      $item->indent = ($bookData['depth'] - 1);
      // JOS requires parent be null for top level items
      // while Drupal has a parent as the root node for everything
      // and JOS has the structure itself in this "book" root
      if ($book->book['mlid'] == $bookData['plid']) {
        $item->parent = null;
      }
      else {
        $item->parent = 'mlid-' . $bookData['plid'];
      }
      $item->order = (int)$bookData['weight'];
      // @todo for this to work we have to detect a path NOT having 'node' in it
      // and then load accordingly
      $item->slug = str_replace(' ', '%20', drupal_get_path_alias($bookData['link_path']));
      $item->title = $bookData['title'];
      $page = node_load(str_replace('node/', '', $bookData['link_path']));
      $item->metadata->created = $page->created;
      $item->metadata->updated = $page->changed;
      // use hidden nodes if it exists; or fallback to actual published status in drupal node
      if (module_exists("hidden_nodes")) {
        $item->metadata->published = ($page->hidden) ? false : true;
      }
      else {
        $item->metadata->published = ($page->status) ? true : false;
      }
      $item->location = base_path() . "haxapi/getNodeContent/" . $page->nid;
      drupal_alter('haxcms_site_item', $item, $bookData, $book);
      array_push($site->items, $item);
    }
  }
  if (!$returnSite) {
    // allow altering the site data by hook
    $status = 200;
    drupal_alter('haxcms_site_data', $site, $status);

    drupal_add_http_header('Content-Type', 'application/json');
    // define status
    drupal_add_http_header('Status', $status);
    // output the response as json
    print drupal_json_output($site);
    exit;
  }
  else {
    return $site;
  }
}

/**
 * Permission + Node access check.
 */
function _haxcms_node_access($op, $node = NULL) {
  // if node not available try and obtain one
  if ($node == NULL || $node == FALSE) {
    $args = arg();
    if ($args[0] == 'haxcms') {
      array_shift($args);
    }
    $path = drupal_get_normal_path(str_replace('%20', ' ',implode('/', $args)));
    if ($path != '') {
      $node = node_load(str_replace('node/', '', $path));
    }
  }
  drupal_alter('haxcms_root_node_loader', $node);
  if (isset($node->nid) && isset($node->book) && node_access($op, $node)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Present the node form but wrap the content in hax-body tag
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function _haxcms_loader($node = NULL) {
  $baseURI = base_path();
  if ($node == NULL || $node == 'haxcms') {
    $args = arg();
    if ($args[0] == 'haxcms') {
      array_shift($args);
      if (variable_get("site_frontpage", "node") != "haxcms") {
        $baseURI .= 'haxcms/';
      }
    }
    
    $path = drupal_get_normal_path(str_replace('%20', ' ',implode('/', $args)));
    $node = node_load(str_replace('node/', '', $path));
  }
  $theme = '';
  // test for theme hijack, great for testing things
  if (isset($_GET["theme"])) {
    $get   = filter_input_array(INPUT_GET, FILTER_SANITIZE_STRING);
    $theme = "?theme=" . $get["theme"];
  }

  // totally possible to be null still. allow other modules to figure out what active is
  // in elmsln this will be section cvontextr in mooc distro.
  drupal_alter('haxcms_root_node_loader', $node);
  // we have to have a total miss if we don't have an answer at this point
  if (isset($node->book['bid'])) {
    // write content to screen, wrapped in tag to do all the work
    $siteAttributes = array(
      'file' => base_path() . 'haxapi/loadJOS/' . $node->book['bid'] . $theme,
      'base-uri' => $baseURI,
    );
    // deep developer function to allow full control over tag's properties
    drupal_alter('haxcms_render_attributes', $siteAttributes);
    return theme('haxcms', array(
      'node' => $node,
      'logo' => _haxcms_get_logo('thumbnail'),
      'siteAttributes' => $siteAttributes,
      'slots' => _haxcms_get_slots($node),
      'contents' => check_markup($node->body['und'][0]['value'], $node->body['und'][0]['format'])));
  }
}
/**
 * return path to theme logo or our lego land fallback
 */
function _haxcms_get_logo($style = NULL) {
  $path = '';
  // support custom logo definitions
  drupal_alter("haxcms_get_logo",$path, $style);
  if ($path != '') {
    return $path;
  }
  if (theme_get_setting('logo_path') != NULL) {
    if ($style == "thumbnail") {
      return image_style_url('thumbnail', theme_get_setting('logo_path'));
    }
    else {
      return theme_get_setting('logo_path');
    }
  }
  
  return base_path() . drupal_get_path("module", "hax") . "/banner.jpg";
}

/**
 * Hooks to allow for slots to be pulled in
 */
function _haxcms_get_slots($node) {
  $slots = module_invoke_all('haxcms_slots', $node);
  drupal_alter('haxcms_slots', $slots, $node);
  $content = '';
  foreach ($slots as $slot) {
    $content .= $slot;
  }
  return $content;
}

/**
 * Implements hook_custom_theme().
 */
function haxcms_custom_theme() {
  // this probably isn't required but acts as a fallback
  if (_is_haxcms_context()) {
   return _haxcms_drupal_theme();
  }
}

/**
 * Callback for haxcms drupal theme layer interaction.
 */
function _haxcms_drupal_theme() {
  return variable_get('haxcms_drupal_theme', HAXCMS_DRUPAL_THEME);
}

/**
 * Implements hook_theme().
 */
function haxcms_theme() {
  return array(
    'haxcms' => array(
      'variables' => array(
        'siteAttributes' => NULL,
        'node' => NULL,
        'logo' => NULL,
        'slots' => NULL,
        'contents' => NULL),
      'template' => 'haxcms',
    ),
  );
}

/**
 * Processes variables for haxcms.tpl.php.
 *
 * The $variables array contains the following elements:
 * - title
 * - contents
 *
 * @see haxcms.tpl.php
 */
function template_preprocess_haxcms(&$variables) {
  global $base_url, $language;
  $variables['base_url'] = $base_url;
  $variables['language'] = $language;
  $variables['language_rtl'] = ($language->direction == LANGUAGE_RTL);
  $variables['dir'] = $language->direction ? 'rtl' : 'ltr';
}

/**
 * Implements hook_page_build().
 */
function haxcms_page_build(&$page) {
  // HAXcms NEEDS base set to operate correctly
  if (_is_haxcms_context()) {
    $href = base_path();
    if (!drupal_is_front_page() && arg(0) == "haxcms") {
      $href.= 'haxcms/';
    }
    $tag = array(
      '#tag' => 'base',
      '#attributes' => array(
        'href' => $href,
      ),
    );
    drupal_add_html_head($tag, 'haxcms-base-tag');
    $base = variable_get('webcomponents_project_location');
    if (variable_get('webcomponents_project_location') == 'sites/all/libraries/webcomponents/') {
      $base = base_path() . variable_get('webcomponents_project_location');
    }
    $loader = array(
      "preload" => array(
        base_path() . drupal_get_path('module', 'haxcms') . '/build-haxcms.js',
        $base . 'build/es6/node_modules/@lrnwebcomponents/haxcms-elements/lib/base.css',
      ),
      "modulepreload" => array(
        $base . 'build/es6/node_modules/@lrnwebcomponents/' . variable_get("haxcms_settings_theme", "clean-one") . '/' . variable_get("haxcms_settings_theme", "clean-one") . '.js',
      )
    );
    foreach ($loader as $rel => $data) {
      foreach ($data as $key => $src) {
        $tag = array(
          '#tag' => 'link',
          '#attributes' => array(
            'rel' => $rel,
            'href' => $src,
          ),
        );
        if ($rel == "preload") {
          if ($src == $base . 'build/es6/node_modules/@lrnwebcomponents/haxcms-elements/lib/base.css') {
            $tag['#attributes']['as'] = 'style';
          }
          else {
            $tag['#attributes']['as'] = 'script';
          }
        }
        if ($rel == "modulepreload") {
          $tag2 = array(
            '#tag' => 'link',
            '#attributes' => array(
              'rel' => "preload",
              'href' => $src,
              'as' => "script",
              'crossorigin' => "anonymous"
            ),
          );
          drupal_add_html_head($tag2, 'haxcms-tag2-preload-' . $key);
        }
        drupal_add_html_head($tag, 'haxcms-tag-' . $rel . $key);
      }
    }
  }
}

function _is_haxcms_context() {
  $is = FALSE;
  if (arg(0) == "haxcms") {
    $is = TRUE;
  }
  drupal_alter('is_haxcms_context', $is);
  return $is;
}

/**
 * Implements hook_permission().
 */
function haxcms_permission() {
  return array(
    'administer haxcms settings' =>  array(
      'title' => t('Change HAXcms settings'),
      'description' => t('Influence HAXcms internal settings which affect the creation of the site.json file that powers HAXcms site builder tag.'),
    ),
  );
}

/**
 * Helper function to make outline designer settings more obvious.
 */
function haxcms_settings($form, &$form_state) {
  $form['haxcms_settings_theme'] = [
    "#weight" => -100,
    '#type' => 'select',
    '#title' => t('Theme'),
    '#default_value' => variable_get('haxcms_settings_theme', 'clean-one'),
    '#options' => array(
      'clean-one' => t('Course theme'),
      'clean-two' => t('Course theme two'),
      'learn-two-theme' => t('Course theme three'),
      'bootstrap-theme' => t('Bootstrap theme'),
      'outline-player' => t('Documentation theme'),
      'haxor-slevin' => t('Developer Blog theme'),
    ),
    '#description' => t("Full URL to the social account"),
  ];
  define('HAXCMS_ROOT', DRUPAL_ROOT . drupal_get_path("module", "hax"));
  include_once __DIR__ . '/../../HAXapi/php/lib/JSONOutlineSchema.php';
  $outline = new JSONOutlineSchema();
  $outline->license = '';
  $list = $outline->getLicenseDetails(TRUE);
  $license = array();
  foreach ($list as $key => $value) {
    $license[$key] = $value['name'];
  }
  $form['haxcms_settings_search'] = [
    '#type' => 'checkbox',
    '#title' => t('Search'),
    '#default_value' => variable_get('haxcms_settings_search', TRUE),
    '#description' => t("Allow users to search material"),
  ];
  $form['haxcms_settings_title'] = [
    '#type' => 'checkbox',
    '#title' => t('Page title'),
    '#default_value' => variable_get('haxcms_settings_title', TRUE),
    '#description' => t("Display page title"),
  ];
  $form['haxcms_settings_breadcrumb'] = [
    '#type' => 'checkbox',
    '#title' => t('Breadcrumb'),
    '#default_value' => variable_get('haxcms_settings_breadcrumb', TRUE),
    '#description' => t("Show breadcrumb trail to the current page"),
  ];
  $form['haxcms_settings_license'] = [
    '#type' => 'select',
    '#title' => t('License'),
    '#default_value' => variable_get('haxcms_settings_license', 'by-sa'),
    '#options' => $license,
    '#description' => t("License to broadcast throughout the theme and metadata layers of the site."),
  ];
  $form['haxcms_settings_socialLink'] = [
    '#type' => 'textfield',
    '#title' => t('Social link'),
    '#default_value' => variable_get('haxcms_settings_socialLink', ''),
    '#description' => t("Full URL to the social account"),
  ];
  $form['haxcms_settings_hexCode'] = [
    '#type' => 'textfield',
    '#title' => t('Hex code'),
    '#default_value' => variable_get('haxcms_settings_hexCode', '#009d75'),
    '#description' => t("Hex code for the color value involved"),
  ];
  $form['haxcms_settings_cssVariable'] = [
    '#type' => 'textfield',
    '#title' => t('CSS variable'),
    '#default_value' => variable_get('haxcms_settings_cssVariable', '--simple-colors-default-theme-deep-purple-7'),
    '#description' => t("CSS var, edit if you get what you are doing"),
  ];
  $form['haxcms_settings_icon'] = [
    '#type' => 'textfield',
    '#title' => t('Icon'),
    '#default_value' => variable_get('haxcms_settings_icon', 'icons:android'),
    '#description' => t("Valid Material / iron-icons style icon name"),
  ];
  return system_settings_form($form);
}
