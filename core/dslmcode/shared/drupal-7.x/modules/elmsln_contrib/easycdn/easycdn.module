<?php
/**
 * @file
 * Allow site administrators to choose whether they would like to load libraries from a CDN and what
 * version of the files they would like to use.
 */

/**
 * Implements hook_menu().
 */
function easycdn_menu() {
  // Admin UI.
  $items['admin/config/development/easycdn'] = array(
    'title'            => 'EasyCDN',
    'description'      => 'Configure EasyCDN integration.',
    'access arguments' => array('access administration pages'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('easycdn_admin_general_settings_form'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'easycdn.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_module_implements_alter().
 */
function easycdn_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'js_alter') {
    $group = $implementations['easycdn'];
    unset($implementations['easycdn']);
    $implementations['easycdn'] = $group;
  }
}
/**
 * Implements hook_js_alter().
 */
function easycdn_js_alter(&$javascript) {
  foreach ($javascript as $path => $values) {
    if (strpos(strval($path), 'sites/all/libraries/') === 0) {
      $path_end = explode('sites/all/libraries/', $path)[1];
      $arr = explode("/", $path_end, 2);
      $name = $arr[0];
      $library = libraries_detect("$name"); 
      // Check which version of ELMS:LN is running.
      $code_version = '/var/www/elmsln/VERSION.txt';
      if (file_exists($code_version)) {
        $elmsln_version = preg_replace('/\s+/', '', file_get_contents($code_version));
      }
      // Test if library is found on CDNJS using search query. Returns first result in the search query. May need to add error checking later.
      if (variable_get('easycdn_cdn_' . $name) === 'CDN_CDNJS') {
        $json = file_get_contents('http://api.cdnjs.com/libraries?search=' . $name);
        $data = json_decode($json, true);
        // verify that there is indeed data.
        if (isset($data['results'][0])) {
          $name = $data['results'][0]['name'];
        }
      }
      $version = $library['version'];
      $version_index = variable_get('easycdn_version_'. $library['machine name']);
      if (!empty($library) && !empty($version)) {
        $cdn_version_arr_elements = getVersions($name);
        // We either want to get versions about what we care about - or let RawGit through because its raw
        if (!empty($cdn_version_arr_elements) || (variable_get('easycdn_cdn_' . $name) === 'RAWGIT')) {
          if (variable_get('easycdn_cdn_' . $name) === 'CDN_CDNJS') {
            $cdn_version = $cdn_version_arr_elements[$version_index]['version'];
            $files = $cdn_version_arr_elements[$version_index]['files'];
          }
          elseif (variable_get('easycdn_cdn_' . $name) === 'CDN_JSDELIVR') {
            $cdn_version = $cdn_version_arr_elements[$version_index];
            $content = file_get_contents('http://api.jsdelivr.com/v1/jsdelivr/libraries/' . $name . '/' . $cdn_version);
            $files = json_decode($content, true);
          }
          elseif (variable_get('easycdn_cdn_' . $name) === 'RAWGIT') {
            // Directly add the rawgit files to the js variable to be served remotely.
            $javascript[$path]['data'] = 'https://cdn.rawgit.com/elmsln/elmsln/'. $elmsln_version . '/core/dslmcode/shared/drupal-7.x/libraries/' . $path_end;
            $javascript[$path]['type'] = 'external';
          }
          // Unless you are RawGit -- get the selected files from the CDN and mark them as external
          if (variable_get('easycdn_cdn_' . $name) !== 'RAWGIT') {          
            foreach ($files as $index => $value) {
              if (variable_get('easycdn_cdn_' . $name) === 'CDN_CDNJS') {
              $javascript[$path]['data'] = 'http://cdnjs.cloudflare.com/ajax/libs/'. $name .'/' . $cdn_version .'/' . $files[$index];
              }
              elseif (variable_get('easycdn_cdn_' . $name) === 'CDN_JSDELIVR') {
                $javascript[$path]['data'] = 'https://cdn.jsdelivr.net/'. $name . '/' . $cdn_version . '/' .strval($files[$index]);
              }
              $javascript[$path]['type'] = 'external';
            }
          }
        }
      }
    }
  }
}
/**
 * getVersions() is a helper function to get versions from the two supported CDNs.
 */
function getVersions($name) {
  $versions = array();
  $files = array();
  // If JSDelivr cannot find the library in the search query - it returns blank array
  if (variable_get('easycdn_cdn_' . $name) === 'CDN_JSDELIVR'){
    $json = file_get_contents('http://api.jsdelivr.com/v1/jsdelivr/libraries?name='. $name .'&fields=versions');
    $data = json_decode($json, true);
    if (isset($data[0])) {
      $versions = $data[0]['versions'];
    }
  }
  elseif (variable_get('easycdn_cdn_' . $name) === 'CDN_CDNJS') {
    $json = file_get_contents('http://api.cdnjs.com/libraries/'. $name);
    $files = json_decode($json, true);
    // May make this if $files['assets'] doesn't exist, then switch to RAWGIT / local...
    $versions = $files['assets'];
  }
  elseif (variable_get('easycdn_cdn_' . $name) === 'RAWGIT') {
    // We do nothing because why would we? 
  }
  else {
    // return blank array === no CDN Selected
  }
  return $versions;
}
