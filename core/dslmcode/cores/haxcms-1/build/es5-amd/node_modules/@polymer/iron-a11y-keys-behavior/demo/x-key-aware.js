define(["../../polymer/polymer-legacy.js", "../../polymer/lib/legacy/polymer-fn.js", "../../polymer/lib/utils/html-tag.js", "../iron-a11y-keys-behavior.js"], function (_polymerLegacy, _polymerFn, _htmlTag, _ironA11yKeysBehavior) {
  "use strict";

  var _templateObject_93e9f1408e0011ed99ce491205e67b1d;

  (0, _polymerFn.Polymer)({
    _template: (0, _htmlTag.html)(_templateObject_93e9f1408e0011ed99ce491205e67b1d || (_templateObject_93e9f1408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n        position: relative;\n      }\n\n      pre {\n        color: #3367d6;\n      }\n\n      .keys {\n        line-height: 25px;\n      }\n\n      .keys span {\n        cursor: default;\n        background-color: #f5f5f5;\n        border: 1px solid #e0e0e0;\n        padding: 1px 5px;\n        border-radius: 5px;\n      }\n    </style>\n\n    <h4>Press any of these keys</h4>\n    <input type=\"checkbox\" checked=\"{{preventDefault::change}}\"> prevent default = {{preventDefault}}\n    <p class=\"keys\">\n      <template is=\"dom-repeat\" items=\"[[boundKeys]]\">\n        <span>{{item}}</span>\n      </template>\n    </p>\n    <pre>[[pressed]]</pre>\n"]))),
    is: 'x-key-aware',
    behaviors: [_ironA11yKeysBehavior.IronA11yKeysBehavior],
    properties: {
      pressed: {
        type: String,
        readOnly: true,
        value: ''
      },
      boundKeys: {
        type: Array,
        value: function value() {
          return Object.keys(this.keyBindings).join(' ').split(' ');
        }
      },
      preventDefault: {
        type: Boolean,
        value: true,
        notify: true
      },
      keyEventTarget: {
        type: Object,
        value: function value() {
          return document.body;
        }
      }
    },
    keyBindings: {
      '* pageup pagedown left right down up home end space enter @ ~ " $ ? ! \\ + : # backspace': '_updatePressed',
      'a': '_updatePressed',
      'shift+a alt+a': '_updatePressed',
      'shift+tab shift+space': '_updatePressed'
    },
    _updatePressed: function _updatePressed(event) {
      console.log(event.detail);

      if (this.preventDefault) {
        event.preventDefault();
      }

      this._setPressed(this.pressed + event.detail.combo + ' pressed!\n');
    }
  });
});