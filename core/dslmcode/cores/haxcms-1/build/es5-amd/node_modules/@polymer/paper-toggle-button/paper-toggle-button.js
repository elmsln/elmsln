define(["../polymer/polymer-legacy.js", "../iron-flex-layout/iron-flex-layout.js", "../paper-styles/color.js", "../paper-styles/default-theme.js", "../paper-behaviors/paper-checked-element-behavior.js", "../paper-behaviors/paper-ripple-behavior.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/utils/gestures.js", "../polymer/lib/utils/html-tag.js", "../polymer/lib/utils/render-status.js"], function (_polymerLegacy, _ironFlexLayout, _color, _defaultTheme, _paperCheckedElementBehavior, _paperRippleBehavior, _polymerFn, _gestures, _htmlTag, _renderStatus) {
  "use strict";

  var _templateObject_92ae64008e0011ed99ce491205e67b1d;

  var template = (0, _htmlTag.html)(_templateObject_92ae64008e0011ed99ce491205e67b1d || (_templateObject_92ae64008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n\n    <style>\n      :host {\n        display: inline-block;\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-common-base;\n      }\n\n      :host([disabled]) {\n        pointer-events: none;\n      }\n\n      :host(:focus) {\n        outline:none;\n      }\n\n      .toggle-bar {\n        position: absolute;\n        height: 100%;\n        width: 100%;\n        border-radius: 8px;\n        pointer-events: none;\n        opacity: 0.4;\n        transition: background-color linear .08s;\n        background-color: var(--paper-toggle-button-unchecked-bar-color, #000000);\n\n        @apply --paper-toggle-button-unchecked-bar;\n      }\n\n      .toggle-button {\n        position: absolute;\n        top: -3px;\n        left: 0;\n        height: 20px;\n        width: 20px;\n        border-radius: 50%;\n        box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.6);\n        transition: -webkit-transform linear .08s, background-color linear .08s;\n        transition: transform linear .08s, background-color linear .08s;\n        will-change: transform;\n        background-color: var(--paper-toggle-button-unchecked-button-color, var(--paper-grey-50));\n\n        @apply --paper-toggle-button-unchecked-button;\n      }\n\n      .toggle-button.dragging {\n        -webkit-transition: none;\n        transition: none;\n      }\n\n      :host([checked]:not([disabled])) .toggle-bar {\n        opacity: 0.5;\n        background-color: var(--paper-toggle-button-checked-bar-color, var(--primary-color));\n\n        @apply --paper-toggle-button-checked-bar;\n      }\n\n      :host([disabled]) .toggle-bar {\n        background-color: #000;\n        opacity: 0.12;\n      }\n\n      :host([checked]) .toggle-button {\n        -webkit-transform: translate(16px, 0);\n        transform: translate(16px, 0);\n      }\n\n      :host([checked]:not([disabled])) .toggle-button {\n        background-color: var(--paper-toggle-button-checked-button-color, var(--primary-color));\n\n        @apply --paper-toggle-button-checked-button;\n      }\n\n      :host([disabled]) .toggle-button {\n        background-color: #bdbdbd;\n        opacity: 1;\n      }\n\n      .toggle-ink {\n        position: absolute;\n        top: -14px;\n        left: -14px;\n        right: auto;\n        bottom: auto;\n        width: 48px;\n        height: 48px;\n        opacity: 0.5;\n        pointer-events: none;\n        color: var(--paper-toggle-button-unchecked-ink-color, var(--primary-text-color));\n\n        @apply --paper-toggle-button-unchecked-ink;\n      }\n\n      :host([checked]) .toggle-ink {\n        color: var(--paper-toggle-button-checked-ink-color, var(--primary-color));\n\n        @apply --paper-toggle-button-checked-ink;\n      }\n\n      .toggle-container {\n        display: inline-block;\n        position: relative;\n        width: 36px;\n        height: 14px;\n        /* The toggle button has an absolute position of -3px; The extra 1px\n        /* accounts for the toggle button shadow box. */\n        margin: 4px 1px;\n      }\n\n      .toggle-label {\n        position: relative;\n        display: inline-block;\n        vertical-align: middle;\n        padding-left: var(--paper-toggle-button-label-spacing, 8px);\n        pointer-events: none;\n        color: var(--paper-toggle-button-label-color, var(--primary-text-color));\n      }\n\n      /* invalid state */\n      :host([invalid]) .toggle-bar {\n        background-color: var(--paper-toggle-button-invalid-bar-color, var(--error-color));\n      }\n\n      :host([invalid]) .toggle-button {\n        background-color: var(--paper-toggle-button-invalid-button-color, var(--error-color));\n      }\n\n      :host([invalid]) .toggle-ink {\n        color: var(--paper-toggle-button-invalid-ink-color, var(--error-color));\n      }\n    </style>\n\n    <div class=\"toggle-container\">\n      <div id=\"toggleBar\" class=\"toggle-bar\"></div>\n      <div id=\"toggleButton\" class=\"toggle-button\"></div>\n    </div>\n\n    <div class=\"toggle-label\"><slot></slot></div>\n\n  "])));
  template.setAttribute('strip-whitespace', '');
  /**
  Material design: [Switch](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-switch)
  
  `paper-toggle-button` provides a ON/OFF switch that user can toggle the state
  by tapping or by dragging the switch.
  
  Example:
  
      <paper-toggle-button></paper-toggle-button>
  
  ### Styling
  
  The following custom properties and mixins are available for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--paper-toggle-button-unchecked-bar-color` | Slider color when the input is not checked | `#000000`
  `--paper-toggle-button-unchecked-button-color` | Button color when the input is not checked | `--paper-grey-50`
  `--paper-toggle-button-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--dark-primary-color`
  `--paper-toggle-button-checked-bar-color` | Slider button color when the input is checked | `--primary-color`
  `--paper-toggle-button-checked-button-color` | Button color when the input is checked | `--primary-color`
  `--paper-toggle-button-checked-ink-color` | Selected/focus ripple color when the input is checked | `--primary-color`
  `--paper-toggle-button-invalid-bar-color` | Slider button color when the input is invalid | `--error-color`
  `--paper-toggle-button-invalid-button-color` | Button color when the input is invalid | `--error-color`
  `--paper-toggle-button-invalid-ink-color` | Selected/focus ripple color when the input is invalid | `--error-color`
  `--paper-toggle-button-unchecked-bar` | Mixin applied to the slider when the input is not checked | `{}`
  `--paper-toggle-button-unchecked-button` | Mixin applied to the slider button when the input is not checked | `{}`
  `--paper-toggle-button-unchecked-ink` | Mixin applied to the ripple when the input is not checked | `{}`
  `--paper-toggle-button-checked-bar` | Mixin applied to the slider when the input is checked | `{}`
  `--paper-toggle-button-checked-button` | Mixin applied to the slider button when the input is checked | `{}`
  `--paper-toggle-button-checked-ink` | Mixin applied to the ripple when the input is checked | `{}`
  `--paper-toggle-button-label-color` | Label color | `--primary-text-color`
  `--paper-toggle-button-label-spacing` | Spacing between the label and the button | `8px`
  
  This element applies the mixin `--paper-font-common-base` but does not import `paper-styles/typography.html`.
  In order to apply the `Roboto` font to this element, make sure you've imported `paper-styles/typography.html`.
  
  @group Paper Elements
  @element paper-toggle-button
  @demo demo/index.html
  */

  (0, _polymerFn.Polymer)({
    _template: template,
    is: 'paper-toggle-button',
    behaviors: [_paperCheckedElementBehavior.PaperCheckedElementBehavior],

    /** @private */
    hostAttributes: {
      role: 'button',
      'aria-pressed': 'false',
      tabindex: 0
    },
    properties: {
      /**
       * Fired when the checked state changes due to user interaction.
       *
       * @event change
       */

      /**
       * Fired when the checked state changes.
       *
       * @event iron-change
       */
    },
    listeners: {
      track: '_ontrack'
    },
    attached: function attached() {
      (0, _renderStatus.afterNextRender)(this, function () {
        (0, _gestures.setTouchAction)(this, 'pan-y');
      });
    },
    _ontrack: function _ontrack(event) {
      var track = event.detail;

      if (track.state === 'start') {
        this._trackStart(track);
      } else if (track.state === 'track') {
        this._trackMove(track);
      } else if (track.state === 'end') {
        this._trackEnd(track);
      }
    },
    _trackStart: function _trackStart(track) {
      this._width = this.$.toggleBar.offsetWidth / 2;
      /*
       * keep an track-only check state to keep the dragging behavior smooth
       * while toggling activations
       */

      this._trackChecked = this.checked;
      this.$.toggleButton.classList.add('dragging');
    },
    _trackMove: function _trackMove(track) {
      var dx = track.dx;
      this._x = Math.min(this._width, Math.max(0, this._trackChecked ? this._width + dx : dx));
      this.translate3d(this._x + 'px', 0, 0, this.$.toggleButton);

      this._userActivate(this._x > this._width / 2);
    },
    _trackEnd: function _trackEnd(track) {
      this.$.toggleButton.classList.remove('dragging');
      this.transform('', this.$.toggleButton);
    },
    // customize the element's ripple
    _createRipple: function _createRipple() {
      this._rippleContainer = this.$.toggleButton;

      var ripple = _paperRippleBehavior.PaperRippleBehavior._createRipple();

      ripple.id = 'ink';
      ripple.setAttribute('recenters', '');
      ripple.classList.add('circle', 'toggle-ink');
      return ripple;
    }
  });
});