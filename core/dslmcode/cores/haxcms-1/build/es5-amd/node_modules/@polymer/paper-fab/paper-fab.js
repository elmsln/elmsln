define(["../polymer/polymer-legacy.js", "../iron-flex-layout/iron-flex-layout.js", "../iron-icon/iron-icon.js", "../paper-styles/element-styles/paper-material-styles.js", "../paper-styles/color.js", "../paper-styles/default-theme.js", "../paper-behaviors/paper-button-behavior.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/utils/html-tag.js"], function (_polymerLegacy, _ironFlexLayout, _ironIcon, _paperMaterialStyles, _color, _defaultTheme, _paperButtonBehavior, _polymerFn, _htmlTag) {
  "use strict";

  var _templateObject_90d733008e0011ed99ce491205e67b1d;

  var template = (0, _htmlTag.html)(_templateObject_90d733008e0011ed99ce491205e67b1d || (_templateObject_90d733008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n  <style include=\"paper-material-styles\">\n    :host {\n      @apply --layout-vertical;\n      @apply --layout-center-center;\n\n      background: var(--paper-fab-background, var(--accent-color));\n      border-radius: 50%;\n      box-sizing: border-box;\n      color: var(--text-primary-color);\n      cursor: pointer;\n      height: 56px;\n      min-width: 0;\n      outline: none;\n      padding: 16px;\n      position: relative;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      -webkit-user-select: none;\n      user-select: none;\n      width: 56px;\n      z-index: 0;\n\n      /* NOTE: Both values are needed, since some phones require the value `transparent`. */\n      -webkit-tap-highlight-color: rgba(0,0,0,0);\n      -webkit-tap-highlight-color: transparent;\n\n      @apply --paper-fab;\n    }\n\n    [hidden] {\n      display: none !important;\n    }\n\n    :host([mini]) {\n      width: 40px;\n      height: 40px;\n      padding: 8px;\n\n      @apply --paper-fab-mini;\n    }\n\n    :host([disabled]) {\n      color: var(--paper-fab-disabled-text, var(--paper-grey-500));\n      background: var(--paper-fab-disabled-background, var(--paper-grey-300));\n\n      @apply --paper-fab-disabled;\n    }\n\n    iron-icon {\n      @apply --paper-fab-iron-icon;\n    }\n\n    span {\n      width: 100%;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      text-align: center;\n\n      @apply --paper-fab-label;\n    }\n\n    :host(.keyboard-focus) {\n      background: var(--paper-fab-keyboard-focus-background, var(--paper-pink-900));\n    }\n\n    :host([elevation=\"1\"]) {\n      @apply --paper-material-elevation-1;\n    }\n\n    :host([elevation=\"2\"]) {\n      @apply --paper-material-elevation-2;\n    }\n\n    :host([elevation=\"3\"]) {\n      @apply --paper-material-elevation-3;\n    }\n\n    :host([elevation=\"4\"]) {\n      @apply --paper-material-elevation-4;\n    }\n\n    :host([elevation=\"5\"]) {\n      @apply --paper-material-elevation-5;\n    }\n  </style>\n\n  <iron-icon id=\"icon\" hidden$=\"{{!_computeIsIconFab(icon, src)}}\" src=\"[[src]]\" icon=\"[[icon]]\"></iron-icon>\n  <span hidden$=\"{{_computeIsIconFab(icon, src)}}\">{{label}}</span>\n"], ["\n  <style include=\"paper-material-styles\">\n    :host {\n      @apply --layout-vertical;\n      @apply --layout-center-center;\n\n      background: var(--paper-fab-background, var(--accent-color));\n      border-radius: 50%;\n      box-sizing: border-box;\n      color: var(--text-primary-color);\n      cursor: pointer;\n      height: 56px;\n      min-width: 0;\n      outline: none;\n      padding: 16px;\n      position: relative;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      -webkit-user-select: none;\n      user-select: none;\n      width: 56px;\n      z-index: 0;\n\n      /* NOTE: Both values are needed, since some phones require the value \\`transparent\\`. */\n      -webkit-tap-highlight-color: rgba(0,0,0,0);\n      -webkit-tap-highlight-color: transparent;\n\n      @apply --paper-fab;\n    }\n\n    [hidden] {\n      display: none !important;\n    }\n\n    :host([mini]) {\n      width: 40px;\n      height: 40px;\n      padding: 8px;\n\n      @apply --paper-fab-mini;\n    }\n\n    :host([disabled]) {\n      color: var(--paper-fab-disabled-text, var(--paper-grey-500));\n      background: var(--paper-fab-disabled-background, var(--paper-grey-300));\n\n      @apply --paper-fab-disabled;\n    }\n\n    iron-icon {\n      @apply --paper-fab-iron-icon;\n    }\n\n    span {\n      width: 100%;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      text-align: center;\n\n      @apply --paper-fab-label;\n    }\n\n    :host(.keyboard-focus) {\n      background: var(--paper-fab-keyboard-focus-background, var(--paper-pink-900));\n    }\n\n    :host([elevation=\"1\"]) {\n      @apply --paper-material-elevation-1;\n    }\n\n    :host([elevation=\"2\"]) {\n      @apply --paper-material-elevation-2;\n    }\n\n    :host([elevation=\"3\"]) {\n      @apply --paper-material-elevation-3;\n    }\n\n    :host([elevation=\"4\"]) {\n      @apply --paper-material-elevation-4;\n    }\n\n    :host([elevation=\"5\"]) {\n      @apply --paper-material-elevation-5;\n    }\n  </style>\n\n  <iron-icon id=\"icon\" hidden\\$=\"{{!_computeIsIconFab(icon, src)}}\" src=\"[[src]]\" icon=\"[[icon]]\"></iron-icon>\n  <span hidden\\$=\"{{_computeIsIconFab(icon, src)}}\">{{label}}</span>\n"])));
  template.setAttribute('strip-whitespace', '');
  /**
  Material design: [Floating Action
  Button](https://www.google.com/design/spec/components/buttons-floating-action-button.html)
  
  `paper-fab` is a floating action button. It contains an image placed in the
  center and comes in two sizes: regular size and a smaller size by applying the
  attribute `mini`. When the user touches the button, a ripple effect emanates
  from the center of the button.
  
  You may import `iron-icons` to use with this element, or provide a URL to a
  custom icon. See `iron-iconset` for more information about how to use a custom
  icon set.
  
  Example:
  
      <script type="module">
        import '@polymer/iron-icons/iron-icons.js';
      </script>
  
      <paper-fab icon="add"></paper-fab>
      <paper-fab mini icon="favorite"></paper-fab>
      <paper-fab src="star.png"></paper-fab>
  
  
  ### Styling
  
  The following custom properties and mixins are available for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--paper-fab-background` | The background color of the button | `--accent-color`
  `--paper-fab-keyboard-focus-background` | The background color of the button when focused | `--paper-pink-900`
  `--paper-fab-disabled-background` | The background color of the button when it's disabled | `--paper-grey-300`
  `--paper-fab-disabled-text` | The text color of the button when it's disabled | `--paper-grey-500`
  `--paper-fab` | Mixin applied to the button | `{}`
  `--paper-fab-mini` | Mixin applied to a mini button | `{}`
  `--paper-fab-disabled` | Mixin applied to a disabled button | `{}`
  `--paper-fab-iron-icon` | Mixin applied to the iron-icon within the button | `{}`
  `--paper-fab-label` | Mixin applied to the label within the button | `{}`
  
  @group Paper Elements
  @demo demo/index.html
  */

  (0, _polymerFn.Polymer)({
    _template: template,
    is: 'paper-fab',
    behaviors: [_paperButtonBehavior.PaperButtonBehavior],
    properties: {
      /**
       * The URL of an image for the icon. If the src property is specified,
       * the icon property should not be.
       */
      src: {
        type: String,
        value: ''
      },

      /**
       * Specifies the icon name or index in the set of icons available in
       * the icon's icon set. If the icon property is specified,
       * the src property should not be.
       */
      icon: {
        type: String,
        value: ''
      },

      /**
       * Set this to true to style this is a "mini" FAB.
       */
      mini: {
        type: Boolean,
        value: false,
        reflectToAttribute: true
      },

      /**
       * The label displayed in the badge. The label is centered, and ideally
       * should have very few characters.
       */
      label: {
        type: String,
        observer: '_labelChanged'
      }
    },
    _labelChanged: function _labelChanged() {
      this.setAttribute('aria-label', this.label);
    },
    _computeIsIconFab: function _computeIsIconFab(icon, src) {
      return icon.length > 0 || src.length > 0;
    }
  });
});