define(["../polymer/polymer-legacy.js", "../iron-flex-layout/iron-flex-layout.js", "../paper-styles/default-theme.js", "../paper-styles/typography.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/legacy/polymer.dom.js", "../polymer/lib/utils/case-map.js", "../polymer/lib/utils/html-tag.js"], function (_polymerLegacy, _ironFlexLayout, _defaultTheme, _typography, _polymerFn, _polymerDom, _caseMap, _htmlTag) {
  "use strict";

  var _templateObject_5fba5160809211edaa2833647dc78c6c, _templateObject2_5fba5160809211edaa2833647dc78c6c;

  var template = (0, _htmlTag.html)(_templateObject_5fba5160809211edaa2833647dc78c6c || (_templateObject_5fba5160809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n      --paper-input-container-shared-input-style: {\n        position: relative; /* to make a stacking context */\n        outline: none;\n        box-shadow: none;\n        padding: 0;\n        margin: 0;\n        width: 100%;\n        max-width: 100%;\n        background: transparent;\n        border: none;\n        color: var(--paper-input-container-input-color, var(--primary-text-color));\n        -webkit-appearance: none;\n        text-align: inherit;\n        vertical-align: var(--paper-input-container-input-align, bottom);\n\n        @apply --paper-font-subhead;\n      };\n    }\n  </style>\n</custom-style>\n"])));
  template.setAttribute('style', 'display: none;');
  document.head.appendChild(template.content);
  /*
  `<paper-input-container>` is a container for a `<label>`, an `<iron-input>` or
  `<textarea>` and optional add-on elements such as an error message or character
  counter, used to implement Material Design text fields.
  
  For example:
  
      <paper-input-container>
        <label slot="label">Your name</label>
        <iron-input slot="input">
          <input>
        </iron-input>
        // In Polymer 1.0, you would use `<input is="iron-input" slot="input">`
  instead of the above.
      </paper-input-container>
  
  You can style the nested `<input>` however you want; if you want it to look like
  a Material Design input, you can style it with the
  --paper-input-container-shared-input-style mixin.
  
  Do not wrap `<paper-input-container>` around elements that already include it,
  such as `<paper-input>`. Doing so may cause events to bounce infinitely between
  the container and its contained element.
  
  ### Listening for input changes
  
  By default, it listens for changes on the `bind-value` attribute on its children
  nodes and perform tasks such as auto-validating and label styling when the
  `bind-value` changes. You can configure the attribute it listens to with the
  `attr-for-value` attribute.
  
  ### Using a custom input element
  
  You can use a custom input element in a `<paper-input-container>`, for example
  to implement a compound input field like a social security number input. The
  custom input element should have the `paper-input-input` class, have a
  `notify:true` value property and optionally implements
  `Polymer.IronValidatableBehavior` if it is validatable.
  
      <paper-input-container attr-for-value="ssn-value">
        <label slot="label">Social security number</label>
        <ssn-input slot="input" class="paper-input-input"></ssn-input>
      </paper-input-container>
  
  
  If you're using a `<paper-input-container>` imperatively, it's important to make
  sure that you attach its children (the `iron-input` and the optional `label`)
  before you attach the `<paper-input-container>` itself, so that it can be set up
  correctly.
  
  ### Validation
  
  If the `auto-validate` attribute is set, the input container will validate the
  input and update the container styling when the input value changes.
  
  ### Add-ons
  
  Add-ons are child elements of a `<paper-input-container>` with the `add-on`
  attribute and implements the `Polymer.PaperInputAddonBehavior` behavior. They
  are notified when the input value or validity changes, and may implement
  functionality such as error messages or character counters. They appear at the
  bottom of the input.
  
  ### Prefixes and suffixes
  These are child elements of a `<paper-input-container>` with the `prefix`
  or `suffix` attribute, and are displayed inline with the input, before or after.
  
      <paper-input-container>
        <div slot="prefix">$</div>
        <label slot="label">Total</label>
        <iron-input slot="input">
          <input>
        </iron-input>
        // In Polymer 1.0, you would use `<input is="iron-input" slot="input">`
  instead of the above. <paper-icon-button slot="suffix"
  icon="clear"></paper-icon-button>
      </paper-input-container>
  
  ### Styling
  
  The following custom properties and mixins are available for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--paper-input-container-color` | Label and underline color when the input is not focused | `--secondary-text-color`
  `--paper-input-container-focus-color` | Label and underline color when the input is focused | `--primary-color`
  `--paper-input-container-invalid-color` | Label and underline color when the input is is invalid | `--error-color`
  `--paper-input-container-input-color` | Input foreground color | `--primary-text-color`
  `--paper-input-container` | Mixin applied to the container | `{}`
  `--paper-input-container-disabled` | Mixin applied to the container when it's disabled | `{}`
  `--paper-input-container-label` | Mixin applied to the label | `{}`
  `--paper-input-container-label-focus` | Mixin applied to the label when the input is focused | `{}`
  `--paper-input-container-label-floating` | Mixin applied to the label when floating | `{}`
  `--paper-input-container-input` | Mixin applied to the input | `{}`
  `--paper-input-container-input-align` | The vertical-align property of the input | `bottom`
  `--paper-input-container-input-disabled` | Mixin applied to the input when the component is disabled | `{}`
  `--paper-input-container-input-focus` | Mixin applied to the input when focused | `{}`
  `--paper-input-container-input-invalid` | Mixin applied to the input when invalid | `{}`
  `--paper-input-container-input-webkit-spinner` | Mixin applied to the webkit spinner | `{}`
  `--paper-input-container-input-webkit-clear` | Mixin applied to the webkit clear button | `{}`
  `--paper-input-container-input-webkit-calendar-picker-indicator` | Mixin applied to the webkit calendar picker indicator | `{}`
  `--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer clear button | `{}`
  `--paper-input-container-underline` | Mixin applied to the underline | `{}`
  `--paper-input-container-underline-focus` | Mixin applied to the underline when the input is focused | `{}`
  `--paper-input-container-underline-disabled` | Mixin applied to the underline when the input is disabled | `{}`
  `--paper-input-prefix` | Mixin applied to the input prefix | `{}`
  `--paper-input-suffix` | Mixin applied to the input suffix | `{}`
  `--paper-input-container-label-before` | Mixin applied to label before pseudo element | {}
  `--paper-input-container-label-after` | Mixin applied to label after pseudo element (useful for required asterisk) | {}
  
  This element is `display:block` by default, but you can set the `inline`
  attribute to make it `display:inline-block`.
  */

  (0, _polymerFn.Polymer)({
    /** @override */
    _template: (0, _htmlTag.html)(_templateObject2_5fba5160809211edaa2833647dc78c6c || (_templateObject2_5fba5160809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n        padding: 8px 0;\n        @apply --paper-input-container;\n      }\n\n      :host([inline]) {\n        display: inline-block;\n      }\n\n      :host([disabled]) {\n        pointer-events: none;\n        opacity: 0.33;\n\n        @apply --paper-input-container-disabled;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      [hidden] {\n        display: none !important;\n      }\n\n      .floated-label-placeholder {\n        @apply --paper-font-caption;\n      }\n\n      .underline {\n        height: 2px;\n        position: relative;\n      }\n\n      .focused-line {\n        @apply --layout-fit;\n        border-bottom: 2px solid var(--paper-input-container-focus-color, var(--primary-color));\n\n        -webkit-transform-origin: center center;\n        transform-origin: center center;\n        -webkit-transform: scale3d(0,1,1);\n        transform: scale3d(0,1,1);\n\n        @apply --paper-input-container-underline-focus;\n      }\n\n      .underline.is-highlighted .focused-line {\n        -webkit-transform: none;\n        transform: none;\n        -webkit-transition: -webkit-transform 0.25s;\n        transition: transform 0.25s;\n\n        @apply --paper-transition-easing;\n      }\n\n      .underline.is-invalid .focused-line {\n        border-color: var(--paper-input-container-invalid-color, var(--error-color));\n        -webkit-transform: none;\n        transform: none;\n        -webkit-transition: -webkit-transform 0.25s;\n        transition: transform 0.25s;\n\n        @apply --paper-transition-easing;\n      }\n\n      .unfocused-line {\n        @apply --layout-fit;\n        border-bottom: 1px solid var(--paper-input-container-color, var(--secondary-text-color));\n        @apply --paper-input-container-underline;\n      }\n\n      :host([disabled]) .unfocused-line {\n        border-bottom: 1px dashed;\n        border-color: var(--paper-input-container-color, var(--secondary-text-color));\n        @apply --paper-input-container-underline-disabled;\n      }\n\n      .input-wrapper {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        position: relative;\n      }\n\n      .input-content {\n        @apply --layout-flex-auto;\n        @apply --layout-relative;\n        max-width: 100%;\n      }\n\n      .input-content ::slotted(label),\n      .input-content ::slotted(.paper-input-label) {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        font: inherit;\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n        -webkit-transition: -webkit-transform 0.25s, width 0.25s;\n        transition: transform 0.25s, width 0.25s;\n        -webkit-transform-origin: left top;\n        transform-origin: left top;\n        /* Fix for safari not focusing 0-height date/time inputs with -webkit-apperance: none; */\n        min-height: 1px;\n\n        @apply --paper-font-common-nowrap;\n        @apply --paper-font-subhead;\n        @apply --paper-input-container-label;\n        @apply --paper-transition-easing;\n      }\n\n\n      .input-content ::slotted(label):before,\n      .input-content ::slotted(.paper-input-label):before {\n        @apply --paper-input-container-label-before;\n      }\n\n      .input-content ::slotted(label):after,\n      .input-content ::slotted(.paper-input-label):after {\n        @apply --paper-input-container-label-after;\n      }\n\n      .input-content.label-is-floating ::slotted(label),\n      .input-content.label-is-floating ::slotted(.paper-input-label) {\n        -webkit-transform: translateY(-75%) scale(0.75);\n        transform: translateY(-75%) scale(0.75);\n\n        /* Since we scale to 75/100 of the size, we actually have 100/75 of the\n        original space now available */\n        width: 133%;\n\n        @apply --paper-input-container-label-floating;\n      }\n\n      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(label),\n      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(.paper-input-label) {\n        right: 0;\n        left: auto;\n        -webkit-transform-origin: right top;\n        transform-origin: right top;\n      }\n\n      .input-content.label-is-highlighted ::slotted(label),\n      .input-content.label-is-highlighted ::slotted(.paper-input-label) {\n        color: var(--paper-input-container-focus-color, var(--primary-color));\n\n        @apply --paper-input-container-label-focus;\n      }\n\n      .input-content.is-invalid ::slotted(label),\n      .input-content.is-invalid ::slotted(.paper-input-label) {\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n      }\n\n      .input-content.label-is-hidden ::slotted(label),\n      .input-content.label-is-hidden ::slotted(.paper-input-label) {\n        visibility: hidden;\n      }\n\n      .input-content ::slotted(input),\n      .input-content ::slotted(iron-input),\n      .input-content ::slotted(textarea),\n      .input-content ::slotted(iron-autogrow-textarea),\n      .input-content ::slotted(.paper-input-input) {\n        @apply --paper-input-container-shared-input-style;\n        /* The apply shim doesn't apply the nested color custom property,\n          so we have to re-apply it here. */\n        color: var(--paper-input-container-input-color, var(--primary-text-color));\n        @apply --paper-input-container-input;\n      }\n\n      .input-content ::slotted(input)::-webkit-outer-spin-button,\n      .input-content ::slotted(input)::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      .input-content.focused ::slotted(input),\n      .input-content.focused ::slotted(iron-input),\n      .input-content.focused ::slotted(textarea),\n      .input-content.focused ::slotted(iron-autogrow-textarea),\n      .input-content.focused ::slotted(.paper-input-input) {\n        @apply --paper-input-container-input-focus;\n      }\n\n      .input-content.is-invalid ::slotted(input),\n      .input-content.is-invalid ::slotted(iron-input),\n      .input-content.is-invalid ::slotted(textarea),\n      .input-content.is-invalid ::slotted(iron-autogrow-textarea),\n      .input-content.is-invalid ::slotted(.paper-input-input) {\n        @apply --paper-input-container-input-invalid;\n      }\n\n      .prefix ::slotted(*) {\n        display: inline-block;\n        @apply --paper-font-subhead;\n        @apply --layout-flex-none;\n        @apply --paper-input-prefix;\n      }\n\n      .suffix ::slotted(*) {\n        display: inline-block;\n        @apply --paper-font-subhead;\n        @apply --layout-flex-none;\n\n        @apply --paper-input-suffix;\n      }\n\n      /* Firefox sets a min-width on the input, which can cause layout issues */\n      .input-content ::slotted(input) {\n        min-width: 0;\n      }\n\n      .input-content ::slotted(textarea) {\n        resize: none;\n      }\n\n      .add-on-content {\n        position: relative;\n      }\n\n      .add-on-content.is-invalid ::slotted(*) {\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n      }\n\n      .add-on-content.is-highlighted ::slotted(*) {\n        color: var(--paper-input-container-focus-color, var(--primary-color));\n      }\n    </style>\n\n    <div class=\"floated-label-placeholder\" aria-hidden=\"true\" hidden=\"[[noLabelFloat]]\">&nbsp;</div>\n\n    <div class=\"input-wrapper\">\n      <span class=\"prefix\"><slot name=\"prefix\"></slot></span>\n\n      <div class$=\"[[_computeInputContentClass(noLabelFloat,alwaysFloatLabel,focused,invalid,_inputHasContent)]]\" id=\"labelAndInputContainer\">\n        <slot name=\"label\"></slot>\n        <slot name=\"input\"></slot>\n      </div>\n\n      <span class=\"suffix\"><slot name=\"suffix\"></slot></span>\n    </div>\n\n    <div class$=\"[[_computeUnderlineClass(focused,invalid)]]\">\n      <div class=\"unfocused-line\"></div>\n      <div class=\"focused-line\"></div>\n    </div>\n\n    <div class$=\"[[_computeAddOnContentClass(focused,invalid)]]\">\n      <slot name=\"add-on\"></slot>\n    </div>\n"]))),
    is: 'paper-input-container',
    properties: {
      /**
       * Set to true to disable the floating label. The label disappears when the
       * input value is not null.
       */
      noLabelFloat: {
        type: Boolean,
        value: false
      },

      /**
       * Set to true to always float the floating label.
       */
      alwaysFloatLabel: {
        type: Boolean,
        value: false
      },

      /**
       * The attribute to listen for value changes on.
       */
      attrForValue: {
        type: String,
        value: 'bind-value'
      },

      /**
       * Set to true to auto-validate the input value when it changes.
       */
      autoValidate: {
        type: Boolean,
        value: false
      },

      /**
       * True if the input is invalid. This property is set automatically when the
       * input value changes if auto-validating, or when the `iron-input-validate`
       * event is heard from a child.
       */
      invalid: {
        observer: '_invalidChanged',
        type: Boolean,
        value: false
      },

      /**
       * True if the input has focus.
       */
      focused: {
        readOnly: true,
        type: Boolean,
        value: false,
        notify: true
      },
      _addons: {
        type: Array // do not set a default value here intentionally - it will be initialized
        // lazily when a distributed child is attached, which may occur before
        // configuration for this element in polyfill.

      },
      _inputHasContent: {
        type: Boolean,
        value: false
      },
      _inputSelector: {
        type: String,
        value: 'input,iron-input,textarea,.paper-input-input'
      },
      _boundOnFocus: {
        type: Function,
        value: function value() {
          return this._onFocus.bind(this);
        }
      },
      _boundOnBlur: {
        type: Function,
        value: function value() {
          return this._onBlur.bind(this);
        }
      },
      _boundOnInput: {
        type: Function,
        value: function value() {
          return this._onInput.bind(this);
        }
      },
      _boundValueChanged: {
        type: Function,
        value: function value() {
          return this._onValueChanged.bind(this);
        }
      }
    },
    listeners: {
      'addon-attached': '_onAddonAttached',
      'iron-input-validate': '_onIronInputValidate'
    },

    get _valueChangedEvent() {
      return this.attrForValue + '-changed';
    },

    get _propertyForValue() {
      return (0, _caseMap.dashToCamelCase)(this.attrForValue);
    },

    get _inputElement() {
      return (0, _polymerDom.dom)(this).querySelector(this._inputSelector);
    },

    get _inputElementValue() {
      return this._inputElement[this._propertyForValue] || this._inputElement.value;
    },

    /** @override */
    ready: function ready() {
      // Paper-input treats a value of undefined differently at startup than
      // the rest of the time (specifically: it does not validate it at startup,
      // but it does after that. We need to track whether the first time we
      // encounter the value is basically this first time, so that we can validate
      // it correctly the rest of the time. See
      // https://github.com/PolymerElements/paper-input/issues/605
      this.__isFirstValueUpdate = true;

      if (!this._addons) {
        this._addons = [];
      }

      this.addEventListener('focus', this._boundOnFocus, true);
      this.addEventListener('blur', this._boundOnBlur, true);
    },

    /** @override */
    attached: function attached() {
      if (this.attrForValue) {
        this._inputElement.addEventListener(this._valueChangedEvent, this._boundValueChanged);
      } else {
        this.addEventListener('input', this._onInput);
      } // Only validate when attached if the input already has a value.


      if (this._inputElementValue && this._inputElementValue != '') {
        this._handleValueAndAutoValidate(this._inputElement);
      } else {
        this._handleValue(this._inputElement);
      }
    },

    /** @private */
    _onAddonAttached: function _onAddonAttached(event) {
      if (!this._addons) {
        this._addons = [];
      }

      var target = event.target;

      if (this._addons.indexOf(target) === -1) {
        this._addons.push(target);

        if (this.isAttached) {
          this._handleValue(this._inputElement);
        }
      }
    },

    /** @private */
    _onFocus: function _onFocus() {
      this._setFocused(true);
    },

    /** @private */
    _onBlur: function _onBlur() {
      this._setFocused(false);

      this._handleValueAndAutoValidate(this._inputElement);
    },

    /** @private */
    _onInput: function _onInput(event) {
      this._handleValueAndAutoValidate(event.target);
    },

    /** @private */
    _onValueChanged: function _onValueChanged(event) {
      var input = event.target; // Paper-input treats a value of undefined differently at startup than
      // the rest of the time (specifically: it does not validate it at startup,
      // but it does after that. If this is in fact the bootup case, ignore
      // validation, just this once.

      if (this.__isFirstValueUpdate) {
        this.__isFirstValueUpdate = false;

        if (input.value === undefined || input.value === '') {
          return;
        }
      }

      this._handleValueAndAutoValidate(event.target);
    },

    /** @private */
    _handleValue: function _handleValue(inputElement) {
      var value = this._inputElementValue; // type="number" hack needed because this.value is empty until it's valid

      if (value || value === 0 || inputElement.type === 'number' && !inputElement.checkValidity()) {
        this._inputHasContent = true;
      } else {
        this._inputHasContent = false;
      }

      this.updateAddons({
        inputElement: inputElement,
        value: value,
        invalid: this.invalid
      });
    },

    /** @private */
    _handleValueAndAutoValidate: function _handleValueAndAutoValidate(inputElement) {
      if (this.autoValidate && inputElement) {
        var valid;

        if (inputElement.validate) {
          valid = inputElement.validate(this._inputElementValue);
        } else {
          valid = inputElement.checkValidity();
        }

        this.invalid = !valid;
      } // Call this last to notify the add-ons.


      this._handleValue(inputElement);
    },

    /** @private */
    _onIronInputValidate: function _onIronInputValidate(event) {
      this.invalid = this._inputElement.invalid;
    },

    /** @private */
    _invalidChanged: function _invalidChanged() {
      if (this._addons) {
        this.updateAddons({
          invalid: this.invalid
        });
      }
    },

    /**
     * Call this to update the state of add-ons.
     * @param {Object} state Add-on state.
     */
    updateAddons: function updateAddons(state) {
      for (var addon, index = 0; addon = this._addons[index]; index++) {
        addon.update(state);
      }
    },

    /** @private */
    _computeInputContentClass: function _computeInputContentClass(noLabelFloat, alwaysFloatLabel, focused, invalid, _inputHasContent) {
      var cls = 'input-content';

      if (!noLabelFloat) {
        var label = this.querySelector('label');

        if (alwaysFloatLabel || _inputHasContent) {
          cls += ' label-is-floating'; // If the label is floating, ignore any offsets that may have been
          // applied from a prefix element.

          this.$.labelAndInputContainer.style.position = 'static';

          if (invalid) {
            cls += ' is-invalid';
          } else if (focused) {
            cls += ' label-is-highlighted';
          }
        } else {
          // When the label is not floating, it should overlap the input element.
          if (label) {
            this.$.labelAndInputContainer.style.position = 'relative';
          }

          if (invalid) {
            cls += ' is-invalid';
          }
        }
      } else {
        if (_inputHasContent) {
          cls += ' label-is-hidden';
        }

        if (invalid) {
          cls += ' is-invalid';
        }
      }

      if (focused) {
        cls += ' focused';
      }

      return cls;
    },

    /** @private */
    _computeUnderlineClass: function _computeUnderlineClass(focused, invalid) {
      var cls = 'underline';

      if (invalid) {
        cls += ' is-invalid';
      } else if (focused) {
        cls += ' is-highlighted';
      }

      return cls;
    },

    /** @private */
    _computeAddOnContentClass: function _computeAddOnContentClass(focused, invalid) {
      var cls = 'add-on-content';

      if (invalid) {
        cls += ' is-invalid';
      } else if (focused) {
        cls += ' is-highlighted';
      }

      return cls;
    }
  });
});