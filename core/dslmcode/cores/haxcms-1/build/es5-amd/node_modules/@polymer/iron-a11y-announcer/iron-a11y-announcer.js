define(["exports", "../polymer/polymer-legacy.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/utils/html-tag.js"], function (_exports, _polymerLegacy, _polymerFn, _htmlTag) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.IronA11yAnnouncer = void 0;

  var _templateObject_5f382910809211edaa2833647dc78c6c;

  /**
  `iron-a11y-announcer` is a singleton element that is intended to add a11y
  to features that require on-demand announcement from screen readers. In
  order to make use of the announcer, it is best to request its availability
  in the announcing element.
  
  Example:
  
      Polymer({
  
        is: 'x-chatty',
  
        attached: function() {
          // This will create the singleton element if it has not
          // been created yet:
          Polymer.IronA11yAnnouncer.requestAvailability();
        }
      });
  
  After the `iron-a11y-announcer` has been made available, elements can
  make announces by firing bubbling `iron-announce` events.
  
  Example:
  
      this.fire('iron-announce', {
        text: 'This is an announcement!'
      }, { bubbles: true });
  
  Note: announcements are only audible if you have a screen reader enabled.
  
  @demo demo/index.html
  */
  var IronA11yAnnouncer = (0, _polymerFn.Polymer)({
    /** @override */
    _template: (0, _htmlTag.html)(_templateObject_5f382910809211edaa2833647dc78c6c || (_templateObject_5f382910809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n"]))),
    is: 'iron-a11y-announcer',
    properties: {
      /**
       * The value of mode is used to set the `aria-live` attribute
       * for the element that will be announced. Valid values are: `off`,
       * `polite` and `assertive`.
       */
      mode: {
        type: String,
        value: 'polite'
      },

      /**
       * The timeout on refreshing the announcement text. Larger timeouts are
       * needed for certain screen readers to re-announce the same message.
       */
      timeout: {
        type: Number,
        value: 150
      },
      _text: {
        type: String,
        value: ''
      }
    },

    /** @override */
    created: function created() {
      if (!IronA11yAnnouncer.instance) {
        IronA11yAnnouncer.instance = this;
      }

      document.addEventListener('iron-announce', this._onIronAnnounce.bind(this));
    },

    /**
     * Cause a text string to be announced by screen readers.
     *
     * @param {string} text The text that should be announced.
     */
    announce: function announce(text) {
      this._text = '';
      this.async(function () {
        this._text = text;
      }, this.timeout);
    },
    _onIronAnnounce: function _onIronAnnounce(event) {
      if (event.detail && event.detail.text) {
        this.announce(event.detail.text);
      }
    }
  });
  _exports.IronA11yAnnouncer = IronA11yAnnouncer;
  IronA11yAnnouncer.instance = null;

  IronA11yAnnouncer.requestAvailability = function () {
    if (!IronA11yAnnouncer.instance) {
      IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');
    }

    if (document.body) {
      document.body.appendChild(IronA11yAnnouncer.instance);
    } else {
      document.addEventListener('load', function () {
        document.body.appendChild(IronA11yAnnouncer.instance);
      });
    }
  };
});