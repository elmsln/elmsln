define(["../polymer/polymer-legacy.js", "../marked-element/marked-element.js", "../prism-element/prism-highlighter.js", "../prism-element/prism-theme-default.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/legacy/polymer.dom.js", "../polymer/lib/utils/html-tag.js"], function (_polymerLegacy, _markedElement, _prismHighlighter, _prismThemeDefault, _polymerFn, _polymerDom, _htmlTag) {
  "use strict";

  var _templateObject_8d48b5108e0011ed99ce491205e67b1d;

  /**
  `demo-snippet` is a helper element that displays the source of a code snippet
  and its rendered demo. It can be used for both native elements and Polymer
  elements.
  
      Example of a native element demo
  
          <demo-snippet>
            <template>
              <input type="date">
            </template>
          </demo-snippet>
  
      Example of a Polymer <paper-checkbox> demo
  
          <demo-snippet>
            <template>
              <paper-checkbox>Checkbox</paper-checkbox>
              <paper-checkbox checked>Checkbox</paper-checkbox>
            </template>
          </demo-snippet>
  
  ### Styling
  
  The following custom properties and mixins are available for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--demo-snippet` | Mixin applied to the entire element | `{}`
  `--demo-snippet-demo` | Mixin applied to just the demo section | `{}`
  `--demo-snippet-code` | Mixin applied to just the code section | `{}`
  
  @element demo-snippet
  @demo demo/index.html
  */
  (0, _polymerFn.Polymer)({
    _template: (0, _htmlTag.html)(_templateObject_8d48b5108e0011ed99ce491205e67b1d || (_templateObject_8d48b5108e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    <style include=\"prism-theme-default\">\n      :host {\n        display: block;\n\n        box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n                    0 1px 5px 0 rgba(0, 0, 0, 0.12),\n                    0 3px 1px -2px rgba(0, 0, 0, 0.2);\n        margin-bottom: 40px;\n        @apply --demo-snippet;\n      }\n\n      .demo {\n        display: block;\n        border-bottom: 1px solid #e0e0e0;\n        background-color: white;\n        margin: 0;\n        padding: 20px;\n        @apply --demo-snippet-demo;\n      }\n\n      .code-container {\n        margin: 0;\n        background-color: #f5f5f5;\n        font-size: 13px;\n        overflow: auto;\n        position: relative;\n        padding: 0 20px;\n        @apply --demo-snippet-code;\n      }\n\n      .code {\n        padding: 20px;\n        margin: 0;\n        background-color: var(--google-grey-100);\n        font-size: 13px;\n        overflow: auto;\n        @apply --demo-snippet-code;\n      }\n      .code > pre {\n        margin: 0;\n        padding: 0 0 10px 0;\n      }\n\n      button {\n        position: absolute;\n        top: 0;\n        right: 0px;\n        text-transform: uppercase;\n        border: none;\n        cursor: pointer;\n        background: #e0e0e0;\n      }\n    </style>\n\n    <prism-highlighter></prism-highlighter>\n\n    <div class=\"demo\">\n      <slot id=\"content\"></slot>\n    </div>\n\n    <div class=\"code-container\">\n      <marked-element markdown=\"[[_markdown]]\" id=\"marked\">\n         <div class=\"code\" slot=\"markdown-html\" id=\"code\"></div>\n      </marked-element>\n      <button id=\"copyButton\" title=\"copy to clipboard\" on-tap=\"_copyToClipboard\">Copy</button>\n    </div>\n"]))),
    is: 'demo-snippet',
    properties: {
      /**
       * Fired when the demo-snippet is ready, i.e. when it has injected the code to demo 
       * in the DOM and it can be interacted with
       * 
       * @event dom-ready
       */

      /** @private */
      _markdown: {
        type: String
      }
    },
    attached: function attached() {
      this._observer = (0, _polymerDom.dom)(this.$.content).observeNodes(function (info) {
        this._updateMarkdown();
      }.bind(this));
    },
    detached: function detached() {
      if (this._observer) {
        (0, _polymerDom.dom)(this.$.content).unobserveNodes(this._observer);
        this._observer = null;
      }
    },
    _updateMarkdown: function _updateMarkdown() {
      var template = (0, _polymerDom.dom)(this).queryDistributedElements('template')[0]; // If there's no template, render empty code.

      if (!template) {
        this._markdown = '';
        return;
      }

      var snippet = this.$.marked.unindent(template.innerHTML); // Hack: In safari + shady dom, sometime we get an empty 'class' attribute.
      // if we do, delete it.

      snippet = snippet.replace(/ class=""/g, ''); // Boolean properties are displayed as checked="", so remove the ="" bit.

      snippet = snippet.replace(/=""/g, '');
      this._markdown = '```\n' + snippet + '\n' + '```'; // Stamp the template.

      if (!template.hasAttribute('is')) {
        // Don't need to listen for more changes (since stamping the template
        // will trigger an observeNodes)
        (0, _polymerDom.dom)(this.$.content).unobserveNodes(this._observer);
        this._observer = null;
        (0, _polymerDom.dom)(this).appendChild(document.importNode(template.content, true));
      }

      this.dispatchEvent(new CustomEvent('dom-ready'));
    },
    _copyToClipboard: function _copyToClipboard() {
      // From
      // https://github.com/google/material-design-lite/blob/master/docs/_assets/snippets.js
      var snipRange = document.createRange();
      snipRange.selectNodeContents(this.$.code);
      var selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange(snipRange);
      var result = false;

      try {
        result = document.execCommand('copy');
        this.$.copyButton.textContent = 'done';
      } catch (err) {
        // Copy command is not available
        console.error(err);
        this.$.copyButton.textContent = 'error';
      } // Return to the copy button after a second.


      setTimeout(this._resetCopyButtonState.bind(this), 1000);
      selection.removeAllRanges();
      return result;
    },
    _resetCopyButtonState: function _resetCopyButtonState() {
      this.$.copyButton.textContent = 'copy';
    }
  });
});