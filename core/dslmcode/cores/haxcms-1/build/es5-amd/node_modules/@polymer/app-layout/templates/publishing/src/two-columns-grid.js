define(["../../../../iron-flex-layout/iron-flex-layout.js", "../../../../iron-media-query/iron-media-query.js", "../../../../polymer/lib/legacy/polymer-fn.js", "../../../../polymer/lib/utils/html-tag.js"], function (_ironFlexLayout, _ironMediaQuery, _polymerFn, _htmlTag) {
  "use strict";

  var _templateObject_9a12c9208e0011ed99ce491205e67b1d;

  /*
  This is a simple adaptive 2-columns grid. The first and every 4th item have
  width:100%, and the rest of the items have width equals to the column width
  (`columnWidth` in px). The grid will reflow to single column when 2 columns
  (plus a defined gutter margin) no longer fit on screen.
  
      <two-columns-grid column-width="320" gutter="16">
        <div class="card"></div>
        <div class="card"></div>
        <div class="card"></div>
        <div class="card"></div>
        <div class="card"></div>
      </two-columns-grid>
  
  */
  (0, _polymerFn.Polymer)({
    _template: (0, _htmlTag.html)(_templateObject_9a12c9208e0011ed99ce491205e67b1d || (_templateObject_9a12c9208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    <style>\n\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-wrap;\n        max-width: calc(2 * var(--grid-column-width) + 4 * var(--grid-gutter));\n        margin: var(--grid-gutter) auto;\n        /* item has width/height ratio 4:3 */\n        --grid-item-height: calc(3 * var(--grid-column-width) / 4);\n      }\n\n      :host > ::slotted(*) {\n        @apply --layout-flex-none;\n        width: var(--grid-column-width);\n        height: var(--grid-item-height);\n        margin: var(--grid-gutter);\n        box-sizing: border-box;\n      }\n\n      /* https://github.com/webcomponents/shadycss/issues/15 */\n      :host > ::slotted(*:nth-of-type(3n-2)) {\n        width: calc(100% - 2 * var(--grid-gutter));\n        /* large item has widht/height ratio 2:1 */\n        height: calc(var(--grid-column-width)  + 2 * var(--grid-gutter));\n      }\n\n      :host([narrow-layout]) {\n        max-width: none;\n        margin: 0 var(--grid-gutter);\n      }\n\n      :host([narrow-layout]) > ::slotted(*) {\n        width: 100% !important;\n        height: var(--grid-item-height) !important;\n        margin: var(--grid-gutter) 0;\n      }\n\n      iron-media-query {\n        display: none;\n      }\n\n    </style>\n\n    <slot></slot>\n\n    <iron-media-query query=\"[[query]]\" query-matches=\"{{narrowLayout}}\"></iron-media-query>\n"]))),
    is: 'two-columns-grid',
    properties: {
      /**
       * The width of the column in px.
       */
      columnWidth: {
        type: Number,
        value: 300
      },

      /**
       * The gutter width in px.
       */
      gutter: {
        type: Number,
        value: 8
      },

      /**
       * Indicates it is in narrow layout which means the grid is displayed as
       * single column.
       */
      narrowLayout: {
        type: Boolean,
        notify: true,
        reflectToAttribute: true
      }
    },
    observers: ['_updateLayout(columnWidth, gutter)'],
    attached: function attached() {
      // observers may run before attached, and updateStyles() will skip if it is
      // not attached. So we need to make sure updateStyles() is called after it's
      // attached.
      this._updateCustomStyles();
    },
    _updateLayout: function _updateLayout(columnWidth, gutter) {
      this.query = '(max-width:' + (2 * columnWidth + 4 * gutter) + 'px)';

      this._updateCustomStyles();
    },
    _updateCustomStyles: function _updateCustomStyles() {
      this.updateStyles({
        '--grid-column-width': this.columnWidth + 'px',
        '--grid-gutter': this.gutter + 'px'
      });
    }
  });
});