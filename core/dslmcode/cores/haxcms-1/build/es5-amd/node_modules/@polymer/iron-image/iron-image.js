define(["../polymer/polymer-legacy.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/utils/html-tag.js", "../polymer/lib/utils/resolve-url.js"], function (_polymerLegacy, _polymerFn, _htmlTag, _resolveUrl) {
  "use strict";

  var _templateObject_560b8710809211edaa2833647dc78c6c;

  /**
  `iron-image` is an element for displaying an image that provides useful sizing and
  preloading options not found on the standard `<img>` tag.
  
  The `sizing` option allows the image to be either cropped (`cover`) or
  letterboxed (`contain`) to fill a fixed user-size placed on the element.
  
  The `preload` option prevents the browser from rendering the image until the
  image is fully loaded.  In the interim, either the element's CSS `background-color`
  can be be used as the placeholder, or the `placeholder` property can be
  set to a URL (preferably a data-URI, for instant rendering) for an
  placeholder image.
  
  The `fade` option (only valid when `preload` is set) will cause the placeholder
  image/color to be faded out once the image is rendered.
  
  Examples:
  
    Basically identical to `<img src="...">` tag:
  
      <iron-image src="http://lorempixel.com/400/400"></iron-image>
  
    Will letterbox the image to fit:
  
      <iron-image style="width:400px; height:400px;" sizing="contain"
        src="http://lorempixel.com/600/400"></iron-image>
  
    Will crop the image to fit:
  
      <iron-image style="width:400px; height:400px;" sizing="cover"
        src="http://lorempixel.com/600/400"></iron-image>
  
    Will show light-gray background until the image loads:
  
      <iron-image style="width:400px; height:400px; background-color: lightgray;"
        sizing="cover" preload src="http://lorempixel.com/600/400"></iron-image>
  
    Will show a base-64 encoded placeholder image until the image loads:
  
      <iron-image style="width:400px; height:400px;" placeholder="data:image/gif;base64,..."
        sizing="cover" preload src="http://lorempixel.com/600/400"></iron-image>
  
    Will fade the light-gray background out once the image is loaded:
  
      <iron-image style="width:400px; height:400px; background-color: lightgray;"
        sizing="cover" preload fade src="http://lorempixel.com/600/400"></iron-image>
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--iron-image-placeholder` | Mixin applied to #placeholder | `{}`
  `--iron-image-width` | Sets the width of the wrapped image | `auto`
  `--iron-image-height` | Sets the height of the wrapped image | `auto`
  
  @group Iron Elements
  @element iron-image
  @demo demo/index.html
  */
  (0, _polymerFn.Polymer)({
    _template: (0, _htmlTag.html)(_templateObject_560b8710809211edaa2833647dc78c6c || (_templateObject_560b8710809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: inline-block;\n        overflow: hidden;\n        position: relative;\n      }\n\n      #baseURIAnchor {\n        display: none;\n      }\n\n      #sizedImgDiv {\n        position: absolute;\n        top: 0px;\n        right: 0px;\n        bottom: 0px;\n        left: 0px;\n\n        display: none;\n      }\n\n      #img {\n        display: block;\n        width: var(--iron-image-width, auto);\n        height: var(--iron-image-height, auto);\n      }\n\n      :host([sizing]) #sizedImgDiv {\n        display: block;\n      }\n\n      :host([sizing]) #img {\n        display: none;\n      }\n\n      #placeholder {\n        position: absolute;\n        top: 0px;\n        right: 0px;\n        bottom: 0px;\n        left: 0px;\n\n        background-color: inherit;\n        opacity: 1;\n\n        @apply --iron-image-placeholder;\n      }\n\n      #placeholder.faded-out {\n        transition: opacity 0.5s linear;\n        opacity: 0;\n      }\n    </style>\n\n    <a id=\"baseURIAnchor\" href=\"#\"></a>\n    <div id=\"sizedImgDiv\" role=\"img\" hidden$=\"[[_computeImgDivHidden(sizing)]]\" aria-hidden$=\"[[_computeImgDivARIAHidden(alt)]]\" aria-label$=\"[[_computeImgDivARIALabel(alt, src)]]\"></div>\n    <img id=\"img\" alt$=\"[[alt]]\" hidden$=\"[[_computeImgHidden(sizing)]]\" crossorigin$=\"[[crossorigin]]\" on-load=\"_imgOnLoad\" on-error=\"_imgOnError\">\n    <div id=\"placeholder\" hidden$=\"[[_computePlaceholderHidden(preload, fade, loading, loaded)]]\" class$=\"[[_computePlaceholderClassName(preload, fade, loading, loaded)]]\"></div>\n"]))),
    is: 'iron-image',
    properties: {
      /**
       * The URL of an image.
       */
      src: {
        type: String,
        value: ''
      },

      /**
       * A short text alternative for the image.
       */
      alt: {
        type: String,
        value: null
      },

      /**
       * CORS enabled images support:
       * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image
       */
      crossorigin: {
        type: String,
        value: null
      },

      /**
       * When true, the image is prevented from loading and any placeholder is
       * shown.  This may be useful when a binding to the src property is known to
       * be invalid, to prevent 404 requests.
       */
      preventLoad: {
        type: Boolean,
        value: false
      },

      /**
       * Sets a sizing option for the image.  Valid values are `contain` (full
       * aspect ratio of the image is contained within the element and
       * letterboxed) or `cover` (image is cropped in order to fully cover the
       * bounds of the element), or `null` (default: image takes natural size).
       */
      sizing: {
        type: String,
        value: null,
        reflectToAttribute: true
      },

      /**
       * When a sizing option is used (`cover` or `contain`), this determines
       * how the image is aligned within the element bounds.
       */
      position: {
        type: String,
        value: 'center'
      },

      /**
       * When `true`, any change to the `src` property will cause the
       * `placeholder` image to be shown until the new image has loaded.
       */
      preload: {
        type: Boolean,
        value: false
      },

      /**
       * This image will be used as a background/placeholder until the src image
       * has loaded.  Use of a data-URI for placeholder is encouraged for instant
       * rendering.
       */
      placeholder: {
        type: String,
        value: null,
        observer: '_placeholderChanged'
      },

      /**
       * When `preload` is true, setting `fade` to true will cause the image to
       * fade into place.
       */
      fade: {
        type: Boolean,
        value: false
      },

      /**
       * Read-only value that is true when the image is loaded.
       */
      loaded: {
        notify: true,
        readOnly: true,
        type: Boolean,
        value: false
      },

      /**
       * Read-only value that tracks the loading state of the image when the
       * `preload` option is used.
       */
      loading: {
        notify: true,
        readOnly: true,
        type: Boolean,
        value: false
      },

      /**
       * Read-only value that indicates that the last set `src` failed to load.
       */
      error: {
        notify: true,
        readOnly: true,
        type: Boolean,
        value: false
      },

      /**
       * Can be used to set the width of image (e.g. via binding); size may also
       * be set via CSS.
       */
      width: {
        observer: '_widthChanged',
        type: Number,
        value: null
      },

      /**
       * Can be used to set the height of image (e.g. via binding); size may also
       * be set via CSS.
       *
       * @attribute height
       * @type number
       * @default null
       */
      height: {
        observer: '_heightChanged',
        type: Number,
        value: null
      }
    },
    observers: ['_transformChanged(sizing, position)', '_loadStateObserver(src, preventLoad)'],
    created: function created() {
      this._resolvedSrc = '';
    },
    _imgOnLoad: function _imgOnLoad() {
      if (this.$.img.src !== this._resolveSrc(this.src)) {
        return;
      }

      this._setLoading(false);

      this._setLoaded(true);

      this._setError(false);
    },
    _imgOnError: function _imgOnError() {
      if (this.$.img.src !== this._resolveSrc(this.src)) {
        return;
      }

      this.$.img.removeAttribute('src');
      this.$.sizedImgDiv.style.backgroundImage = '';

      this._setLoading(false);

      this._setLoaded(false);

      this._setError(true);
    },
    _computePlaceholderHidden: function _computePlaceholderHidden() {
      return !this.preload || !this.fade && !this.loading && this.loaded;
    },
    _computePlaceholderClassName: function _computePlaceholderClassName() {
      return this.preload && this.fade && !this.loading && this.loaded ? 'faded-out' : '';
    },
    _computeImgDivHidden: function _computeImgDivHidden() {
      return !this.sizing;
    },
    _computeImgDivARIAHidden: function _computeImgDivARIAHidden() {
      return this.alt === '' ? 'true' : undefined;
    },
    _computeImgDivARIALabel: function _computeImgDivARIALabel() {
      if (this.alt !== null) {
        return this.alt;
      } // Polymer.ResolveUrl.resolveUrl will resolve '' relative to a URL x to
      // that URL x, but '' is the default for src.


      if (this.src === '') {
        return '';
      } // NOTE: Use of `URL` was removed here because IE11 doesn't support
      // constructing it. If this ends up being problematic, we should
      // consider reverting and adding the URL polyfill as a dev dependency.


      var resolved = this._resolveSrc(this.src); // Remove query parts, get file name.


      return resolved.replace(/[?|#].*/g, '').split('/').pop();
    },
    _computeImgHidden: function _computeImgHidden() {
      return !!this.sizing;
    },
    _widthChanged: function _widthChanged() {
      this.style.width = isNaN(this.width) ? this.width : this.width + 'px';
    },
    _heightChanged: function _heightChanged() {
      this.style.height = isNaN(this.height) ? this.height : this.height + 'px';
    },
    _loadStateObserver: function _loadStateObserver(src, preventLoad) {
      var newResolvedSrc = this._resolveSrc(src);

      if (newResolvedSrc === this._resolvedSrc) {
        return;
      }

      this._resolvedSrc = '';
      this.$.img.removeAttribute('src');
      this.$.sizedImgDiv.style.backgroundImage = '';

      if (src === '' || preventLoad) {
        this._setLoading(false);

        this._setLoaded(false);

        this._setError(false);
      } else {
        this._resolvedSrc = newResolvedSrc;
        this.$.img.src = this._resolvedSrc;
        this.$.sizedImgDiv.style.backgroundImage = 'url("' + this._resolvedSrc + '")';

        this._setLoading(true);

        this._setLoaded(false);

        this._setError(false);
      }
    },
    _placeholderChanged: function _placeholderChanged() {
      this.$.placeholder.style.backgroundImage = this.placeholder ? 'url("' + this.placeholder + '")' : '';
    },
    _transformChanged: function _transformChanged() {
      var sizedImgDivStyle = this.$.sizedImgDiv.style;
      var placeholderStyle = this.$.placeholder.style;
      sizedImgDivStyle.backgroundSize = placeholderStyle.backgroundSize = this.sizing;
      sizedImgDivStyle.backgroundPosition = placeholderStyle.backgroundPosition = this.sizing ? this.position : '';
      sizedImgDivStyle.backgroundRepeat = placeholderStyle.backgroundRepeat = this.sizing ? 'no-repeat' : '';
    },
    _resolveSrc: function _resolveSrc(testSrc) {
      var resolved = (0, _resolveUrl.resolveUrl)(testSrc, this.$.baseURIAnchor.href); // NOTE: Use of `URL` was removed here because IE11 doesn't support
      // constructing it. If this ends up being problematic, we should
      // consider reverting and adding the URL polyfill as a dev dependency.

      if (resolved.length >= 2 && resolved[0] === '/' && resolved[1] !== '/') {
        // In IE location.origin might not work
        // https://connect.microsoft.com/IE/feedback/details/1763802/location-origin-is-undefined-in-ie-11-on-windows-10-but-works-on-windows-7
        resolved = (location.origin || location.protocol + '//' + location.host) + resolved;
      }

      return resolved;
    }
  });
});