define(["../iron-flex-layout/iron-flex-layout.js", "../paper-styles/element-styles/paper-material-styles.js", "../paper-behaviors/paper-button-behavior.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/polymer-legacy.js"], function (_ironFlexLayout, _paperMaterialStyles, _paperButtonBehavior, _polymerFn, _polymerLegacy) {
  "use strict";

  var _templateObject_54f5f860809211edaa2833647dc78c6c;

  var template = (0, _polymerLegacy.html)(_templateObject_54f5f860809211edaa2833647dc78c6c || (_templateObject_54f5f860809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n  <style include=\"paper-material-styles\">\n    /* Need to specify the same specificity as the styles imported from paper-material. */\n    :host {\n      @apply --layout-inline;\n      @apply --layout-center-center;\n      position: relative;\n      box-sizing: border-box;\n      min-width: 5.14em;\n      margin: 0 0.29em;\n      background: transparent;\n      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n      -webkit-tap-highlight-color: transparent;\n      font: inherit;\n      text-transform: uppercase;\n      outline-width: 0;\n      border-radius: 3px;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      -webkit-user-select: none;\n      user-select: none;\n      cursor: pointer;\n      z-index: 0;\n      padding: 0.7em 0.57em;\n\n      @apply --paper-font-common-base;\n      @apply --paper-button;\n    }\n\n    :host([elevation=\"1\"]) {\n      @apply --paper-material-elevation-1;\n    }\n\n    :host([elevation=\"2\"]) {\n      @apply --paper-material-elevation-2;\n    }\n\n    :host([elevation=\"3\"]) {\n      @apply --paper-material-elevation-3;\n    }\n\n    :host([elevation=\"4\"]) {\n      @apply --paper-material-elevation-4;\n    }\n\n    :host([elevation=\"5\"]) {\n      @apply --paper-material-elevation-5;\n    }\n\n    :host([hidden]) {\n      display: none !important;\n    }\n\n    :host([raised].keyboard-focus) {\n      font-weight: bold;\n      @apply --paper-button-raised-keyboard-focus;\n    }\n\n    :host(:not([raised]).keyboard-focus) {\n      font-weight: bold;\n      @apply --paper-button-flat-keyboard-focus;\n    }\n\n    :host([disabled]) {\n      background: none;\n      color: #a8a8a8;\n      cursor: auto;\n      pointer-events: none;\n\n      @apply --paper-button-disabled;\n    }\n\n    :host([disabled][raised]) {\n      background: #eaeaea;\n    }\n\n\n    :host([animated]) {\n      @apply --shadow-transition;\n    }\n\n    paper-ripple {\n      color: var(--paper-button-ink-color);\n    }\n  </style>\n\n  <slot></slot>"])));
  template.setAttribute('strip-whitespace', '');
  /**
  Material design:
  [Buttons](https://www.google.com/design/spec/components/buttons.html)
  
  `paper-button` is a button. When the user touches the button, a ripple effect
  emanates from the point of contact. It may be flat or raised. A raised button is
  styled with a shadow.
  
  Example:
  
      <paper-button>Flat button</paper-button>
      <paper-button raised>Raised button</paper-button>
      <paper-button noink>No ripple effect</paper-button>
      <paper-button toggles>Toggle-able button</paper-button>
  
  A button that has `toggles` true will remain `active` after being clicked (and
  will have an `active` attribute set). For more information, see the
  `IronButtonState` behavior.
  
  You may use custom DOM in the button body to create a variety of buttons. For
  example, to create a button with an icon and some text:
  
      <paper-button>
        <iron-icon icon="favorite"></iron-icon>
        custom button content
      </paper-button>
  
  To use `paper-button` as a link, wrap it in an anchor tag. Since `paper-button`
  will already receive focus, you may want to prevent the anchor tag from
  receiving focus as well by setting its tabindex to -1.
  
      <a href="https://www.polymer-project.org/" tabindex="-1">
        <paper-button raised>Polymer Project</paper-button>
      </a>
  
  ### Styling
  
  Style the button with CSS as you would a normal DOM element.
  
      paper-button.fancy {
        background: green;
        color: yellow;
      }
  
      paper-button.fancy:hover {
        background: lime;
      }
  
      paper-button[disabled],
      paper-button[toggles][active] {
        background: red;
      }
  
  By default, the ripple is the same color as the foreground at 25% opacity. You
  may customize the color using the `--paper-button-ink-color` custom property.
  
  The following custom properties and mixins are also available for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--paper-button-ink-color` | Background color of the ripple | `Based on the button's color`
  `--paper-button` | Mixin applied to the button | `{}`
  `--paper-button-disabled` | Mixin applied to the disabled button. Note that you can also use the `paper-button[disabled]` selector | `{}`
  `--paper-button-flat-keyboard-focus` | Mixin applied to a flat button after it's been focused using the keyboard | `{}`
  `--paper-button-raised-keyboard-focus` | Mixin applied to a raised button after it's been focused using the keyboard | `{}`
  
  @demo demo/index.html
  */

  (0, _polymerFn.Polymer)({
    _template: template,
    is: 'paper-button',
    behaviors: [_paperButtonBehavior.PaperButtonBehavior],
    properties: {
      /**
       * If true, the button should be styled with a shadow.
       */
      raised: {
        type: Boolean,
        reflectToAttribute: true,
        value: false,
        observer: '_calculateElevation'
      }
    },
    _calculateElevation: function _calculateElevation() {
      if (!this.raised) {
        this._setElevation(0);
      } else {
        _paperButtonBehavior.PaperButtonBehaviorImpl._calculateElevation.apply(this);
      }
    }
    /**
    Fired when the animation finishes.
    This is useful if you want to wait until
    the ripple animation finishes to perform some action.
     @event transitionend
    Event param: {{node: Object}} detail Contains the animated node.
    */

  });
});