define(["../polymer/polymer-legacy.js", "../iron-autogrow-textarea/iron-autogrow-textarea.js", "./paper-input-char-counter.js", "./paper-input-container.js", "./paper-input-error.js", "../iron-form-element-behavior/iron-form-element-behavior.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/utils/html-tag.js", "./paper-input-behavior.js"], function (_polymerLegacy, _ironAutogrowTextarea, _paperInputCharCounter, _paperInputContainer, _paperInputError, _ironFormElementBehavior, _polymerFn, _htmlTag, _paperInputBehavior) {
  "use strict";

  var _templateObject_55719100809211edaa2833647dc78c6c;

  /*
  `<paper-textarea>` is a multi-line text field with Material Design styling.
  
      <paper-textarea label="Textarea label"></paper-textarea>
  
  See `Polymer.PaperInputBehavior` for more API docs.
  
  ### Validation
  
  Currently only `required` and `maxlength` validation is supported.
  
  ### Styling
  
  See `Polymer.PaperInputContainer` for a list of custom properties used to
  style this element.
  */
  (0, _polymerFn.Polymer)({
    /** @override */
    _template: (0, _htmlTag.html)(_templateObject_55719100809211edaa2833647dc78c6c || (_templateObject_55719100809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container no-label-float$=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <iron-autogrow-textarea class=\"paper-input-input\" slot=\"input\" id$=\"[[_inputId]]\" aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" bind-value=\"{{value}}\" invalid=\"{{invalid}}\" validator$=\"[[validator]]\" disabled$=\"[[disabled]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" required$=\"[[required]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" autocapitalize$=\"[[autocapitalize]]\" rows$=\"[[rows]]\" max-rows$=\"[[maxRows]]\" on-change=\"_onChange\"></iron-autogrow-textarea>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n"]))),
    is: 'paper-textarea',
    behaviors: [_paperInputBehavior.PaperInputBehavior, _ironFormElementBehavior.IronFormElementBehavior],
    properties: {
      _ariaLabelledBy: {
        observer: '_ariaLabelledByChanged',
        type: String
      },
      _ariaDescribedBy: {
        observer: '_ariaDescribedByChanged',
        type: String
      },
      value: {
        // Required for the correct TypeScript type-generation
        type: String
      },

      /**
       * The initial number of rows.
       * @type {number}
       * @default 1
       */
      rows: {
        type: Number,
        value: 1
      },

      /**
       * The maximum number of rows this element can grow to until it
       * scrolls. 0 means no maximum.
       * @type {number}
       * @default 0
       */
      maxRows: {
        type: Number,
        value: 0
      }
    },

    /**
     * @return {number}
     */
    get selectionStart() {
      return this.$.input.textarea.selectionStart;
    },

    set selectionStart(start) {
      this.$.input.textarea.selectionStart = start;
    },

    /**
     * @return {number}
     */
    get selectionEnd() {
      return this.$.input.textarea.selectionEnd;
    },

    set selectionEnd(end) {
      this.$.input.textarea.selectionEnd = end;
    },

    _ariaLabelledByChanged: function _ariaLabelledByChanged(ariaLabelledBy) {
      this._focusableElement.setAttribute('aria-labelledby', ariaLabelledBy);
    },
    _ariaDescribedByChanged: function _ariaDescribedByChanged(ariaDescribedBy) {
      this._focusableElement.setAttribute('aria-describedby', ariaDescribedBy);
    },

    get _focusableElement() {
      return this.inputElement.textarea;
    }

  });
});