define(["../iron-a11y-announcer/iron-a11y-announcer.js", "../iron-overlay-behavior/iron-overlay-behavior.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/utils/html-tag.js", "../polymer/polymer-legacy.js"], function (_ironA11yAnnouncer, _ironOverlayBehavior, _polymerFn, _htmlTag, _polymerLegacy) {
  "use strict";

  var _templateObject_9145ac408e0011ed99ce491205e67b1d;

  // Keeps track of the toast currently opened.
  var currentToast = null;
  /**
  Material design: [Snackbars &
  toasts](https://www.google.com/design/spec/components/snackbars-toasts.html)
  
  `paper-toast` provides a subtle notification toast. Only one `paper-toast` will
  be visible on screen.
  
  Use `opened` to show the toast:
  
  Example:
  
      <paper-toast text="Hello world!" opened></paper-toast>
  
  Also `open()` or `show()` can be used to show the toast:
  
  Example:
  
      <paper-button on-click="openToast">Open Toast</paper-button>
      <paper-toast id="toast" text="Hello world!"></paper-toast>
  
      ...
  
      openToast: function() {
        this.$.toast.open();
      }
  
  Set `duration` to 0, a negative number or Infinity to persist the toast on
  screen:
  
  Example:
  
      <paper-toast text="Terms and conditions" opened duration="0">
        <a href="#">Show more</a>
      </paper-toast>
  
  
  ### Styling
  The following custom properties and mixins are available for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--paper-toast-background-color` | The paper-toast background-color | `#323232`
  `--paper-toast-color` | The paper-toast color | `#f1f1f1`
  
  This element applies the mixin `--paper-font-common-base` but does not import
  `paper-styles/typography.html`. In order to apply the `Roboto` font to this
  element, make sure you've imported `paper-styles/typography.html`.
  
  @group Paper Elements
  @element paper-toast
  @demo demo/index.html
  @hero hero.svg
  */

  (0, _polymerFn.Polymer)({
    _template: (0, _htmlTag.html)(_templateObject_9145ac408e0011ed99ce491205e67b1d || (_templateObject_9145ac408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n        position: fixed;\n        background-color: var(--paper-toast-background-color, #323232);\n        color: var(--paper-toast-color, #f1f1f1);\n        min-height: 48px;\n        min-width: 288px;\n        padding: 16px 24px;\n        box-sizing: border-box;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n        border-radius: 2px;\n        margin: 12px;\n        font-size: 14px;\n        cursor: default;\n        -webkit-transition: -webkit-transform 0.3s, opacity 0.3s;\n        transition: transform 0.3s, opacity 0.3s;\n        opacity: 0;\n        -webkit-transform: translateY(100px);\n        transform: translateY(100px);\n        @apply --paper-font-common-base;\n      }\n\n      :host(.capsule) {\n        border-radius: 24px;\n      }\n\n      :host(.fit-bottom) {\n        width: 100%;\n        min-width: 0;\n        border-radius: 0;\n        margin: 0;\n      }\n\n      :host(.paper-toast-open) {\n        opacity: 1;\n        -webkit-transform: translateY(0px);\n        transform: translateY(0px);\n      }\n    </style>\n\n    <span id=\"label\">{{text}}</span>\n    <slot></slot>\n"]))),
    is: 'paper-toast',
    behaviors: [_ironOverlayBehavior.IronOverlayBehavior],
    properties: {
      /**
       * The element to fit `this` into.
       * Overridden from `Polymer.IronFitBehavior`.
       */
      fitInto: {
        type: Object,
        value: window,
        observer: '_onFitIntoChanged'
      },

      /**
       * The orientation against which to align the dropdown content
       * horizontally relative to `positionTarget`.
       * Overridden from `Polymer.IronFitBehavior`.
       */
      horizontalAlign: {
        type: String,
        value: 'left'
      },

      /**
       * The orientation against which to align the dropdown content
       * vertically relative to `positionTarget`.
       * Overridden from `Polymer.IronFitBehavior`.
       */
      verticalAlign: {
        type: String,
        value: 'bottom'
      },

      /**
       * The duration in milliseconds to show the toast.
       * Set to `0`, a negative number, or `Infinity`, to disable the
       * toast auto-closing.
       */
      duration: {
        type: Number,
        value: 3000
      },

      /**
       * The text to display in the toast.
       */
      text: {
        type: String,
        value: ''
      },

      /**
       * Overridden from `IronOverlayBehavior`.
       * Set to false to enable closing of the toast by clicking outside it.
       */
      noCancelOnOutsideClick: {
        type: Boolean,
        value: true
      },

      /**
       * Overridden from `IronOverlayBehavior`.
       * Set to true to disable auto-focusing the toast or child nodes with
       * the `autofocus` attribute` when the overlay is opened.
       */
      noAutoFocus: {
        type: Boolean,
        value: true
      }
    },
    listeners: {
      'transitionend': '__onTransitionEnd'
    },

    /**
     * Read-only. Deprecated. Use `opened` from `IronOverlayBehavior`.
     * @property visible
     * @deprecated
     */
    get visible() {
      _polymerLegacy.Base._warn('`visible` is deprecated, use `opened` instead');

      return this.opened;
    },

    /**
     * Read-only. Can auto-close if duration is a positive finite number.
     * @property _canAutoClose
     */
    get _canAutoClose() {
      return this.duration > 0 && this.duration !== Infinity;
    },

    created: function created() {
      this._autoClose = null;

      _ironA11yAnnouncer.IronA11yAnnouncer.requestAvailability();
    },

    /**
     * Show the toast. Without arguments, this is the same as `open()` from
     * `IronOverlayBehavior`.
     * @param {(Object|string)=} properties Properties to be set before opening the toast.
     * e.g. `toast.show('hello')` or `toast.show({text: 'hello', duration: 3000})`
     */
    show: function show(properties) {
      if (typeof properties == 'string') {
        properties = {
          text: properties
        };
      }

      for (var property in properties) {
        if (property.indexOf('_') === 0) {
          _polymerLegacy.Base._warn('The property "' + property + '" is private and was not set.');
        } else if (property in this) {
          this[property] = properties[property];
        } else {
          _polymerLegacy.Base._warn('The property "' + property + '" is not valid.');
        }
      }

      this.open();
    },

    /**
     * Hide the toast. Same as `close()` from `IronOverlayBehavior`.
     */
    hide: function hide() {
      this.close();
    },

    /**
     * Called on transitions of the toast, indicating a finished animation
     * @private
     */
    __onTransitionEnd: function __onTransitionEnd(e) {
      // there are different transitions that are happening when opening and
      // closing the toast. The last one so far is for `opacity`.
      // This marks the end of the transition, so we check for this to determine
      // if this is the correct event.
      if (e && e.target === this && e.propertyName === 'opacity') {
        if (this.opened) {
          this._finishRenderOpened();
        } else {
          this._finishRenderClosed();
        }
      }
    },

    /**
     * Overridden from `IronOverlayBehavior`.
     * Called when the value of `opened` changes.
     */
    _openedChanged: function _openedChanged() {
      if (this._autoClose !== null) {
        this.cancelAsync(this._autoClose);
        this._autoClose = null;
      }

      if (this.opened) {
        if (currentToast && currentToast !== this) {
          currentToast.close();
        }

        currentToast = this;
        this.fire('iron-announce', {
          text: this.text
        });

        if (this._canAutoClose) {
          this._autoClose = this.async(this.close, this.duration);
        }
      } else if (currentToast === this) {
        currentToast = null;
      }

      _ironOverlayBehavior.IronOverlayBehaviorImpl._openedChanged.apply(this, arguments);
    },

    /**
     * Overridden from `IronOverlayBehavior`.
     */
    _renderOpened: function _renderOpened() {
      this.classList.add('paper-toast-open');
    },

    /**
     * Overridden from `IronOverlayBehavior`.
     */
    _renderClosed: function _renderClosed() {
      this.classList.remove('paper-toast-open');
    },

    /**
     * @private
     */
    _onFitIntoChanged: function _onFitIntoChanged(fitInto) {
      this.positionTarget = fitInto;
    }
    /**
     * Fired when `paper-toast` is opened.
     *
     * @event 'iron-announce'
     * @param {{text: string}} detail Contains text that will be announced.
     */

  });
});