define(["../polymer/polymer-legacy.js", "../marked-element/marked-element.js", "./iron-doc-viewer-styles.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/utils/html-tag.js"], function (_polymerLegacy, _markedElement, _ironDocViewerStyles, _polymerFn, _htmlTag) {
  "use strict";

  var _templateObject_522f8560809211edaa2833647dc78c6c;

  /**
   * Renders documentation describing a function or method.
   */
  (0, _polymerFn.Polymer)({
    _template: (0, _htmlTag.html)(_templateObject_522f8560809211edaa2833647dc78c6c || (_templateObject_522f8560809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n    <style include=\"iron-doc-viewer-styles\"></style>\n    <style>\n      :host {\n        display: block;\n      }\n\n      .paramName {\n        color: var(--iron-doc-accent-color-internal);\n      }\n\n      .paramType, .returnType {\n        color: #666;\n      }\n\n      #paramList .paramName {\n        color: #666;\n        margin-right: 5px;\n      }\n\n      #paramList marked-element,\n      #paramList .markdown-html,\n      #paramList .markdown-html p {\n        display: inline-block;\n        margin: 0;\n      }\n\n      .static {\n        color: #666;\n      }\n\n      .privacy {\n        color: #666;\n      }\n\n      .import-path {\n        padding-left: 25px;\n      }\n    </style>\n\n    <code id=\"signature\">\n      <span class=\"privacy\">[[_privacy]]</span>\n      <span class=\"static\" hidden$=\"[[!static]]\">static</span>\n\n      <a href$=\"#[[anchorId]]\" id=\"funcName\" class=\"name deeplink\">\n        [[descriptor.name]]<!--\n   --></a><!--\n   -->(<span class=\"funcParams\"><!--\n     --><template is=\"dom-repeat\" items=\"[[descriptor.params]]\" as=\"p\"><!--\n       --><span hidden$=\"[[!index]]\">, </span><!--\n       --><span class=\"paramName\">[[p.name]]</span><!--\n       --><span hidden$=\"[[!p.type]]\">:\n            <span class=\"paramType\">[[p.type]]</span><!--\n       --></span><!--\n     --></template><!--\n   --></span>)<!--\n   --><span hidden$=\"[[!descriptor.return]]\">:\n        <span class=\"returnType\">[[descriptor.return.type]]</span>\n      </span>\n    </code>\n\n    <p hidden$=\"[[!descriptor.inheritedFrom]]\" class=\"inheritedFrom\">\n      Inherited from <code>[[descriptor.inheritedFrom]]</code>\n    </p>\n\n    <div class=\"import-path\" hidden$=\"[[!addImportPath]]\">Requires import: <code>[[descriptor.sourceRange.file]]</code></div>\n\n    <marked-element sanitize markdown=\"[[descriptor.description]]\" hidden$=\"[[!descriptor.description]]\">\n      <div slot=\"markdown-html\" class=\"markdown-html\"></div>\n    </marked-element>\n\n    <ul id=\"paramList\" hidden$=\"[[!_showParamList]]\">\n      <template is=\"dom-repeat\" items=\"[[descriptor.params]]\">\n        <li>\n          <code class=\"paramName\">[[item.name]]</code>\n          <marked-element sanitize markdown=\"[[item.description]]\" hidden$=\"[[!item.description]]\">\n           <div slot=\"markdown-html\" class=\"markdown-html\"></div>\n         </marked-element>\n        </li>\n      </template>\n    </ul>\n"], ["\n    <style include=\"iron-doc-viewer-styles\"></style>\n    <style>\n      :host {\n        display: block;\n      }\n\n      .paramName {\n        color: var(--iron-doc-accent-color-internal);\n      }\n\n      .paramType, .returnType {\n        color: #666;\n      }\n\n      #paramList .paramName {\n        color: #666;\n        margin-right: 5px;\n      }\n\n      #paramList marked-element,\n      #paramList .markdown-html,\n      #paramList .markdown-html p {\n        display: inline-block;\n        margin: 0;\n      }\n\n      .static {\n        color: #666;\n      }\n\n      .privacy {\n        color: #666;\n      }\n\n      .import-path {\n        padding-left: 25px;\n      }\n    </style>\n\n    <code id=\"signature\">\n      <span class=\"privacy\">[[_privacy]]</span>\n      <span class=\"static\" hidden\\$=\"[[!static]]\">static</span>\n\n      <a href\\$=\"#[[anchorId]]\" id=\"funcName\" class=\"name deeplink\">\n        [[descriptor.name]]<!--\n   --></a><!--\n   -->(<span class=\"funcParams\"><!--\n     --><template is=\"dom-repeat\" items=\"[[descriptor.params]]\" as=\"p\"><!--\n       --><span hidden\\$=\"[[!index]]\">, </span><!--\n       --><span class=\"paramName\">[[p.name]]</span><!--\n       --><span hidden\\$=\"[[!p.type]]\">:\n            <span class=\"paramType\">[[p.type]]</span><!--\n       --></span><!--\n     --></template><!--\n   --></span>)<!--\n   --><span hidden\\$=\"[[!descriptor.return]]\">:\n        <span class=\"returnType\">[[descriptor.return.type]]</span>\n      </span>\n    </code>\n\n    <p hidden\\$=\"[[!descriptor.inheritedFrom]]\" class=\"inheritedFrom\">\n      Inherited from <code>[[descriptor.inheritedFrom]]</code>\n    </p>\n\n    <div class=\"import-path\" hidden\\$=\"[[!addImportPath]]\">Requires import: <code>[[descriptor.sourceRange.file]]</code></div>\n\n    <marked-element sanitize markdown=\"[[descriptor.description]]\" hidden\\$=\"[[!descriptor.description]]\">\n      <div slot=\"markdown-html\" class=\"markdown-html\"></div>\n    </marked-element>\n\n    <ul id=\"paramList\" hidden\\$=\"[[!_showParamList]]\">\n      <template is=\"dom-repeat\" items=\"[[descriptor.params]]\">\n        <li>\n          <code class=\"paramName\">[[item.name]]</code>\n          <marked-element sanitize markdown=\"[[item.description]]\" hidden\\$=\"[[!item.description]]\">\n           <div slot=\"markdown-html\" class=\"markdown-html\"></div>\n         </marked-element>\n        </li>\n      </template>\n    </ul>\n"]))),
    is: 'iron-doc-function',
    properties: {
      anchorId: {
        type: String,
        reflectToAttribute: true,
        value: ''
      },
      static: {
        type: Boolean,
        value: false
      },
      _privacy: {
        type: String,
        computed: '_computePrivacy(descriptor)'
      },
      _showParamList: {
        type: Boolean,
        computed: '_computeShowParamList(descriptor)'
      },
      addImportPath: {
        type: Boolean,
        value: false
      }
    },
    _computePrivacy: function _computePrivacy(descriptor) {
      if (!descriptor || !descriptor.privacy || descriptor.privacy === 'public') {
        return '';
      }

      return descriptor.privacy;
    },
    _computeShowParamList: function _computeShowParamList(descriptor) {
      if (descriptor && descriptor.params) {
        for (var i = 0; i < descriptor.params.length; i++) {
          if (descriptor.params[i].description) {
            return true;
          }
        }
      }

      return false;
    }
  });
});