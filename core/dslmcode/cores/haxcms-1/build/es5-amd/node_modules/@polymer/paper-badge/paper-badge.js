define(["../iron-icon/iron-icon.js", "../iron-flex-layout/iron-flex-layout.js", "../paper-styles/default-theme.js", "../paper-styles/typography.js", "../iron-resizable-behavior/iron-resizable-behavior.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/legacy/polymer.dom.js", "../polymer/lib/utils/html-tag.js"], function (_ironIcon, _ironFlexLayout, _defaultTheme, _typography, _ironResizableBehavior, _polymerFn, _polymerDom, _htmlTag) {
  "use strict";

  var _templateObject_90bfda708e0011ed99ce491205e67b1d;

  /**
  `<paper-badge>` is a circular text badge that is displayed on the top right
  corner of an element, representing a status or a notification. It will badge
  the anchor element specified in the `for` attribute, or, if that doesn't exist,
  centered to the parent node containing it.
  
  Badges can also contain an icon by adding the `icon` attribute and setting
  it to the id of the desired icon. Please note that you should still set the
  `label` attribute in order to keep the element accessible. Also note that you
  will need to import the `iron-iconset` that includes the icons you want to use.
  See [iron-icon](../iron-icon) for more information on how to import and use icon
  sets.
  
  Example:
  
      <div style="display:inline-block">
        <span>Inbox</span>
        <paper-badge label="3"></paper-badge>
      </div>
  
      <div>
        <paper-button id="btn">Status</paper-button>
        <paper-badge
            icon="favorite"
            for="btn"
            label="favorite icon">
        </paper-badge>
      </div>
  
      <div>
        <paper-icon-button
            id="account-box"
            icon="account-box"
            alt="account-box">
        </paper-icon-button>
        <paper-badge
            icon="social:mood"
            for="account-box"
            label="mood
            icon">
        </paper-badge>
  
      </div>
  
  ### Styling
  
  The following custom properties and mixins are available for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--paper-badge-background` | The background color of the badge | `--accent-color`
  `--paper-badge-opacity` | The opacity of the badge | `1.0`
  `--paper-badge-text-color` | The color of the badge text | `white`
  `--paper-badge-width` | The width of the badge circle | `20px`
  `--paper-badge-height` | The height of the badge circle | `20px`
  `--paper-badge-icon-width` | The width of the badge icon, allowed up to the width of the badge | `12px`
  `--paper-badge-icon-height` | The height of the badge icon, allowed up to the height of the badge | `12px`
  `--paper-badge-margin-left` | Optional spacing added to the left of the badge. | `0px`
  `--paper-badge-margin-bottom` | Optional spacing added to the bottom of the badge. | `0px`
  `--paper-badge` | Mixin applied to the badge | `{}`
  
  @element paper-badge
  @demo demo/index.html
  */
  (0, _polymerFn.Polymer)({
    /** @override */
    _template: (0, _htmlTag.html)(_templateObject_90bfda708e0011ed99ce491205e67b1d || (_templateObject_90bfda708e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n        position: absolute;\n        outline: none;\n      }\n\n      :host([hidden]), [hidden] {\n        display: none !important;\n      }\n\n      iron-icon {\n        --iron-icon-width: var(--paper-badge-icon-width, 12px);\n        --iron-icon-height: var(--paper-badge-icon-height, 12px);\n      }\n\n      .badge {\n        @apply --layout;\n        @apply --layout-center-center;\n        @apply --paper-font-common-base;\n\n        font-weight: normal;\n        font-size: 11px;\n        border-radius: 50%;\n        margin-left: var(--paper-badge-margin-left, 0px);\n        margin-bottom: var(--paper-badge-margin-bottom, 0px);\n        width: var(--paper-badge-width, 20px);\n        height: var(--paper-badge-height, 20px);\n        background-color: var(--paper-badge-background, var(--accent-color));\n        opacity: var(--paper-badge-opacity, 1.0);\n        color: var(--paper-badge-text-color, white);\n\n        @apply --paper-badge;\n      }\n    </style>\n\n    <div class=\"badge\">\n      <iron-icon hidden$=\"{{!_computeIsIconBadge(icon)}}\" icon=\"{{icon}}\"></iron-icon>\n      <span id=\"badge-text\" hidden$=\"{{_computeIsIconBadge(icon)}}\">{{label}}</span>\n    </div>\n  "], ["\n    <style>\n      :host {\n        display: block;\n        position: absolute;\n        outline: none;\n      }\n\n      :host([hidden]), [hidden] {\n        display: none !important;\n      }\n\n      iron-icon {\n        --iron-icon-width: var(--paper-badge-icon-width, 12px);\n        --iron-icon-height: var(--paper-badge-icon-height, 12px);\n      }\n\n      .badge {\n        @apply --layout;\n        @apply --layout-center-center;\n        @apply --paper-font-common-base;\n\n        font-weight: normal;\n        font-size: 11px;\n        border-radius: 50%;\n        margin-left: var(--paper-badge-margin-left, 0px);\n        margin-bottom: var(--paper-badge-margin-bottom, 0px);\n        width: var(--paper-badge-width, 20px);\n        height: var(--paper-badge-height, 20px);\n        background-color: var(--paper-badge-background, var(--accent-color));\n        opacity: var(--paper-badge-opacity, 1.0);\n        color: var(--paper-badge-text-color, white);\n\n        @apply --paper-badge;\n      }\n    </style>\n\n    <div class=\"badge\">\n      <iron-icon hidden\\$=\"{{!_computeIsIconBadge(icon)}}\" icon=\"{{icon}}\"></iron-icon>\n      <span id=\"badge-text\" hidden\\$=\"{{_computeIsIconBadge(icon)}}\">{{label}}</span>\n    </div>\n  "]))),
    is: 'paper-badge',

    /** @private */
    hostAttributes: {
      role: 'status',
      tabindex: 0
    },
    behaviors: [_ironResizableBehavior.IronResizableBehavior],
    listeners: {
      'iron-resize': 'updatePosition'
    },
    properties: {
      /**
       * The id of the element that the badge is anchored to. This element
       * must be a sibling of the badge.
       */
      for: {
        type: String,
        observer: '_forChanged'
      },

      /**
       * The label displayed in the badge. The label is centered, and ideally
       * should have very few characters.
       */
      label: {
        type: String,
        observer: '_labelChanged'
      },

      /**
       * An iron-icon ID. When given, the badge content will use an
       * `<iron-icon>` element displaying the given icon ID rather than the
       * label text. However, the label text will still be used for
       * accessibility purposes.
       */
      icon: {
        type: String,
        value: ''
      },
      _boundNotifyResize: {
        type: Function,
        value: function value() {
          return this.notifyResize.bind(this);
        }
      },
      _boundUpdateTarget: {
        type: Function,
        value: function value() {
          return this._updateTarget.bind(this);
        }
      }
    },

    /** @override */
    attached: function attached() {
      // Polymer 2.x does not have this.offsetParent defined by attached
      requestAnimationFrame(this._boundUpdateTarget);
    },

    /** @override */
    attributeChanged: function attributeChanged(name) {
      if (name === 'hidden') {
        this.updatePosition();
      }
    },
    _forChanged: function _forChanged() {
      // The first time the property is set is before the badge is attached,
      // which means we're not ready to position it yet.
      if (!this.isAttached) {
        return;
      }

      this._updateTarget();
    },
    _labelChanged: function _labelChanged() {
      this.setAttribute('aria-label', this.label);
    },
    _updateTarget: function _updateTarget() {
      this._target = this.target;
      requestAnimationFrame(this._boundNotifyResize);
    },
    _computeIsIconBadge: function _computeIsIconBadge(icon) {
      return icon.length > 0;
    },

    /**
     * Returns the target element that this badge is anchored to. It is
     * either the element given by the `for` attribute, or the immediate parent
     * of the badge.
     */
    get target() {
      var parentNode = (0, _polymerDom.dom)(this).parentNode; // If the parentNode is a document fragment, then we need to use the host.

      var ownerRoot = (0, _polymerDom.dom)(this).getOwnerRoot();
      var target;

      if (this.for) {
        target = (0, _polymerDom.dom)(ownerRoot).querySelector('#' + this.for);
      } else {
        target = parentNode.nodeType == Node.DOCUMENT_FRAGMENT_NODE ? ownerRoot.host : parentNode;
      }

      return target;
    },

    /**
     * Repositions the badge relative to its anchor element. This is called
     * automatically when the badge is attached or an `iron-resize` event is
     * fired (for exmaple if the window has resized, or your target is a
     * custom element that implements IronResizableBehavior).
     *
     * You should call this in all other cases when the achor's position
     * might have changed (for example, if it's visibility has changed, or
     * you've manually done a page re-layout).
     */
    updatePosition: function updatePosition() {
      if (!this._target || !this.offsetParent) {
        return;
      }

      var parentRect = this.offsetParent.getBoundingClientRect();

      var targetRect = this._target.getBoundingClientRect();

      var thisRect = this.getBoundingClientRect();
      this.style.left = targetRect.left - parentRect.left + (targetRect.width - thisRect.width / 2) + 'px';
      this.style.top = targetRect.top - parentRect.top - thisRect.height / 2 + 'px';
    }
  });
});