define(["../../../polymer/polymer-legacy.js", "../../../polymer/lib/legacy/polymer-fn.js", "../../../polymer/lib/legacy/polymer.dom.js", "../../../polymer/lib/utils/html-tag.js", "../../neon-shared-element-animatable-behavior.js"], function (_polymerLegacy, _polymerFn, _polymerDom, _htmlTag, _neonSharedElementAnimatableBehavior) {
  "use strict";

  var _templateObject_97f6ee008e0011ed99ce491205e67b1d;

  (0, _polymerFn.Polymer)({
    _template: (0, _htmlTag.html)(_templateObject_97f6ee008e0011ed99ce491205e67b1d || (_templateObject_97f6ee008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      .header {\n        height: 40%;\n        background: var(--color-one);\n      }\n\n      .body {\n        text-align: center;\n        padding: 8px;\n      }\n\n      .square {\n        display: inline-block;\n        width: 150px;\n        height: 150px;\n        margin: 8px;\n        background: var(--color-two);\n      }\n    </style>\n\n    <div id=\"header\" class=\"header\"></div>\n\n    <div class=\"body\">\n      <div class=\"square\"></div>\n      <div class=\"square\"></div>\n      <div class=\"square\"></div>\n      <div class=\"square\"></div>\n    </div>\n  "]))),
    is: 'squares-page',
    behaviors: [_neonSharedElementAnimatableBehavior.NeonSharedElementAnimatableBehavior],
    properties: {
      sharedElements: {
        type: Object
      },
      animationConfig: {
        type: Object
      }
    },
    attached: function attached() {
      if (this.animationConfig) {
        return;
      }

      this.sharedElements = {
        'hero': this.$.header
      };
      var squares = (0, _polymerDom.dom)(this.root).querySelectorAll('.square');
      var squaresArray = Array.from(squares);
      this.animationConfig = {
        'entry': [{
          name: 'hero-animation',
          id: 'hero',
          toPage: this
        }, {
          name: 'cascaded-animation',
          animation: 'transform-animation',
          transformFrom: 'translateY(100%)',
          nodes: squaresArray
        }],
        'exit': [{
          name: 'slide-up-animation',
          node: this.$.header
        }, {
          name: 'cascaded-animation',
          animation: 'transform-animation',
          transformTo: 'translateY(60vh)',
          nodes: squaresArray
        }]
      };
    }
  });
});