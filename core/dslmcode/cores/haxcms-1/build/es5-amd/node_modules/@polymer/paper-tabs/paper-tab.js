define(["../polymer/polymer-legacy.js", "../iron-flex-layout/iron-flex-layout.js", "../iron-behaviors/iron-button-state.js", "../iron-behaviors/iron-control-state.js", "../paper-behaviors/paper-ripple-behavior.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/legacy/polymer.dom.js", "../polymer/lib/utils/html-tag.js"], function (_polymerLegacy, _ironFlexLayout, _ironButtonState, _ironControlState, _paperRippleBehavior, _polymerFn, _polymerDom, _htmlTag) {
  "use strict";

  var _templateObject_99e5c5b08e0011ed99ce491205e67b1d;

  /*
  `paper-tab` is styled to look like a tab. It should be used in conjunction with
  `paper-tabs`.
  
  Example:
  
      <paper-tabs selected="0">
        <paper-tab>TAB 1</paper-tab>
        <paper-tab>TAB 2</paper-tab>
        <paper-tab>TAB 3</paper-tab>
      </paper-tabs>
  
  ### Styling
  
  The following custom properties and mixins are available for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--paper-tab-ink` | Ink color | `--paper-yellow-a100`
  `--paper-tab` | Mixin applied to the tab | `{}`
  `--paper-tab-content` | Mixin applied to the tab content | `{}`
  `--paper-tab-content-focused` | Mixin applied to the tab content when the tab is focused | `{}`
  `--paper-tab-content-unselected` | Mixin applied to the tab content when the tab is not selected | `{}`
  
  This element applies the mixin `--paper-font-common-base` but does not import
  `paper-styles/typography.html`. In order to apply the `Roboto` font to this
  element, make sure you've imported `paper-styles/typography.html`.
  */
  (0, _polymerFn.Polymer)({
    _template: (0, _htmlTag.html)(_templateObject_99e5c5b08e0011ed99ce491205e67b1d || (_templateObject_99e5c5b08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center;\n        @apply --layout-center-justified;\n        @apply --layout-flex-auto;\n\n        position: relative;\n        padding: 0 12px;\n        overflow: hidden;\n        cursor: pointer;\n        vertical-align: middle;\n\n        @apply --paper-font-common-base;\n        @apply --paper-tab;\n      }\n\n      :host(:focus) {\n        outline: none;\n      }\n\n      :host([link]) {\n        padding: 0;\n      }\n\n      .tab-content {\n        height: 100%;\n        transform: translateZ(0);\n          -webkit-transform: translateZ(0);\n        transition: opacity 0.1s cubic-bezier(0.4, 0.0, 1, 1);\n        @apply --layout-horizontal;\n        @apply --layout-center-center;\n        @apply --layout-flex-auto;\n        @apply --paper-tab-content;\n      }\n\n      :host(:not(.iron-selected)) > .tab-content {\n        opacity: 0.8;\n\n        @apply --paper-tab-content-unselected;\n      }\n\n      :host(:focus) .tab-content {\n        opacity: 1;\n        font-weight: 700;\n\n        @apply --paper-tab-content-focused;\n      }\n\n      paper-ripple {\n        color: var(--paper-tab-ink, var(--paper-yellow-a100));\n      }\n\n      .tab-content > ::slotted(a) {\n        @apply --layout-flex-auto;\n\n        height: 100%;\n      }\n    </style>\n\n    <div class=\"tab-content\">\n      <slot></slot>\n    </div>\n"]))),
    is: 'paper-tab',
    behaviors: [_ironControlState.IronControlState, _ironButtonState.IronButtonState, _paperRippleBehavior.PaperRippleBehavior],
    properties: {
      /**
       * If true, the tab will forward keyboard clicks (enter/space) to
       * the first anchor element found in its descendants
       */
      link: {
        type: Boolean,
        value: false,
        reflectToAttribute: true
      }
    },

    /** @private */
    hostAttributes: {
      role: 'tab'
    },
    listeners: {
      down: '_updateNoink',
      tap: '_onTap'
    },
    attached: function attached() {
      this._updateNoink();
    },

    get _parentNoink() {
      var parent = (0, _polymerDom.dom)(this).parentNode;
      return !!parent && !!parent.noink;
    },

    _updateNoink: function _updateNoink() {
      this.noink = !!this.noink || !!this._parentNoink;
    },
    _onTap: function _onTap(event) {
      if (this.link) {
        var anchor = this.queryEffectiveChildren('a');

        if (!anchor) {
          return;
        } // Don't get stuck in a loop delegating
        // the listener from the child anchor


        if (event.target === anchor) {
          return;
        }

        anchor.click();
      }
    }
  });
});