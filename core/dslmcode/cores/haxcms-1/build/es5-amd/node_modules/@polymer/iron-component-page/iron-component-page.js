define(["../polymer/polymer-legacy.js", "../app-layout/app-drawer-layout/app-drawer-layout.js", "../app-layout/app-drawer/app-drawer.js", "../app-layout/app-header-layout/app-header-layout.js", "../app-layout/app-header/app-header.js", "../app-layout/app-toolbar/app-toolbar.js", "../iron-ajax/iron-ajax.js", "../iron-doc-viewer/default-theme.js", "../iron-doc-viewer/iron-doc-nav.js", "../iron-doc-viewer/iron-doc-viewer.js", "../iron-icons/iron-icons.js", "../paper-icon-button/paper-icon-button.js", "../paper-styles/color.js", "../paper-styles/typography.js", "../paper-toast/paper-toast.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/utils/html-tag.js"], function (_polymerLegacy, _appDrawerLayout, _appDrawer, _appHeaderLayout, _appHeader, _appToolbar, _ironAjax, _defaultTheme, _ironDocNav, _ironDocViewer, _ironIcons, _paperIconButton, _color, _typography, _paperToast, _polymerFn, _htmlTag) {
  "use strict";

  var _templateObject_51cb1e40809211edaa2833647dc78c6c;

  (0, _polymerFn.Polymer)({
    _template: (0, _htmlTag.html)(_templateObject_51cb1e40809211edaa2833647dc78c6c || (_templateObject_51cb1e40809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n    <style include=\"iron-doc-default-theme\">\n      :host {\n        --app-drawer-width: 300px;\n      }\n\n      [hidden] {\n        display: none;\n      }\n\n      app-header {\n        @apply --paper-font-headline;\n        color: white;\n        background-color: var(--iron-component-page-header-color,\n                              var(--iron-doc-accent-color, #5a5a5a));\n      }\n\n      [drawer-toggle] {\n        flex-shrink: 0;\n      }\n\n      [condensed-title] {\n        white-space: nowrap;\n      }\n\n      app-drawer {\n        --app-drawer-content-container: {\n          background-color: #fbfbfb;\n        }\n        box-shadow: 0 0 8px rgba(0, 0, 0, 0.3);\n      }\n\n      iron-doc-nav {\n        height: 100%;\n        overflow-y: auto;\n        overflow-x: hidden;\n      }\n\n      iron-doc-viewer {\n        height: 100%;\n        --iron-doc-title: {\n          display: none;\n        }\n      }\n\n      iron-doc-viewer:not([demo]) {\n        padding: 5px 20px 20px 20px;\n        max-width: 56em;\n      }\n\n      #error-toast {\n        background-color: var(--paper-red-600);\n      }\n    </style>\n\n    <iron-ajax auto url=\"[[descriptorUrl]]\" handle-as=\"json\" last-response=\"{{_descriptor}}\" loading=\"{{_loading}}\" last-error=\"{{_descriptorError}}\">\n    </iron-ajax>\n\n    <paper-toast id=\"loading-toast\" opened=\"[[_loading]]\" duration=\"0\">\n      Loading descriptor ...\n    </paper-toast>\n\n    <paper-toast id=\"error-toast\" opened=\"[[_descriptorError]]\" duration=\"0\">\n      Could not load descriptor \"[[descriptorUrl]]\". <br> [[_descriptorError.error]]\n    </paper-toast>\n\n    <app-drawer-layout fullbleed narrow=\"{{_narrow}}\">\n\n      <app-drawer id=\"drawer\" slot=\"drawer\" swipe-open>\n        <iron-doc-nav descriptor=\"[[_descriptor]]\" base-href=\"[[baseHref]]\" path=\"[[_path]]\" on-select=\"_onNavSelect\">\n        </iron-doc-nav>\n      </app-drawer>\n\n      <app-header-layout has-scrolling-region>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <paper-icon-button icon=\"menu\" drawer-toggle hidden$=\"[[!_narrow]]\">\n            </paper-icon-button>\n\n            <div>[[_title]]</div>\n          </app-toolbar>\n        </app-header>\n\n        <iron-doc-viewer id=\"viewer\" descriptor=\"[[_descriptor]]\" root-namespace=\"[[rootNamespace]]\" base-href=\"[[baseHref]]\" demo-src-prefix=\"[[demoSrcPrefix]]\" title=\"{{_title}}\" path=\"{{_path}}\" on-view-changed=\"_onViewChanged\">\n        </iron-doc-viewer>\n\n      </app-header-layout>\n    </app-drawer-layout>\n"]))),
    is: 'iron-component-page',
    properties: {
      /**
       * URL of the Polymer Analyzer descriptor to fetch and display.
       */
      descriptorUrl: {
        type: String,
        value: 'analysis.json',
        observer: '_descriptorUrlChanged'
      },

      /**
       * By default all routing is performed using the URL fragment
       * (e.g. `docs.html#/elements/my-element`).
       *
       * If your server supports it and you would like to use the real URL
       * path instead (e.g. `/api/docs/elements/my-element`), set this to
       * the base path where the page is mounted, omitting the trailing
       * slash (e.g. `/api/docs` or *empty string* for the root path).
       */
      baseHref: String,

      /**
       * Instead of displaying items relative to the top level of
       * `descriptor`, start from this namespace.
       */
      rootNamespace: String,

      /**
       * URL prefix for demo iframes.
       */
      demoSrcPrefix: String,
      _loading: Boolean,
      _descriptorError: Object,
      _descriptor: {
        type: Object,
        observer: '_descriptorChanged'
      },
      _path: String,
      _narrow: Boolean,
      _title: {
        type: String,
        observer: '_titleChanged'
      }
    },
    _onViewChanged: function _onViewChanged() {
      this.$.viewer.scrollIntoView();
    },
    _onNavSelect: function _onNavSelect() {
      // Note we need to listen for this event, and can't rely just on the
      // path changing, because the user might click on the nav item they
      // are already viewing.
      this.$.viewer.scrollIntoView();

      if (this._narrow) {
        this.$.drawer.close();
      }
    },
    _descriptorUrlChanged: function _descriptorUrlChanged() {
      this._descriptorError = null;
    },
    _descriptorChanged: function _descriptorChanged(descriptor) {
      if (!descriptor || this._changing) {
        return;
      }

      this._changing = true;
      this._descriptor = _flatten(descriptor);
      this._changing = false;
    },
    _titleChanged: function _titleChanged(title) {
      window.document.title = title;
    }
  });

  function _flatten(descriptor, flat) {
    if (!flat) {
      flat = {
        namespaces: [],
        elements: [],
        metadata: {
          polymer: {
            behaviors: []
          }
        },
        mixins: [],
        classes: []
      };
    }

    for (var i = 0; i < (descriptor.namespaces || []).length; i++) {
      _flatten(descriptor.namespaces[i], flat);

      flat.namespaces.push(descriptor.namespaces[i]);
    }

    for (var i = 0; i < (descriptor.classes || []).length; i++) {
      flat.classes.push(descriptor.classes[i]);
    }

    for (var i = 0; i < (descriptor.elements || []).length; i++) {
      flat.elements.push(descriptor.elements[i]);
    }

    var descriptorBehaviors = ((descriptor.metadata || {}).polymer || {}).behaviors;

    for (var i = 0; i < (descriptorBehaviors || []).length; i++) {
      flat.metadata.polymer.behaviors.push(descriptorBehaviors[i]);
    }

    for (var i = 0; i < (descriptor.mixins || []).length; i++) {
      flat.mixins.push(descriptor.mixins[i]);
    }

    return flat;
  }
});