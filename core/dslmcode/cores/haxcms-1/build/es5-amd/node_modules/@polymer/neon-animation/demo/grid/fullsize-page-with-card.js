define(["../../../polymer/polymer-legacy.js", "../../../paper-styles/color.js", "../shared-styles.js", "../../../polymer/lib/legacy/polymer-fn.js", "../../../polymer/lib/utils/html-tag.js", "../../neon-shared-element-animatable-behavior.js"], function (_polymerLegacy, _color, _sharedStyles, _polymerFn, _htmlTag, _neonSharedElementAnimatableBehavior) {
  "use strict";

  var _templateObject_97ebf1808e0011ed99ce491205e67b1d;

  (0, _polymerFn.Polymer)({
    _template: (0, _htmlTag.html)(_templateObject_97ebf1808e0011ed99ce491205e67b1d || (_templateObject_97ebf1808e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    <style include=\"shared-styles\"></style>\n    <style>\n\n      :host {\n        display: block;\n      }\n\n      .fixed {\n        position: fixed;\n        top: 0;\n        left: 0;\n        height: 100vh;\n        width: 100vw;\n      }\n\n      .card {\n        position: relative;\n        margin: 15vh 15vw 0;\n        width: 70vw;\n        height: 70vh;\n      }\n\n    </style>\n\n    <div id=\"fixed\" class$=\"[[_computeFixedBackgroundClass(color)]]\"></div>\n    <div id=\"card\" class$=\"[[_computeCardClass(color)]]\"></div>\n  "]))),
    is: 'fullsize-page-with-card',
    behaviors: [_neonSharedElementAnimatableBehavior.NeonSharedElementAnimatableBehavior],
    properties: {
      color: {
        type: String
      },
      sharedElements: {
        type: Object
      },
      animationConfig: {
        type: Object
      }
    },
    attached: function attached() {
      if (this.animationConfig) {
        return;
      }

      this.sharedElements = {
        'hero': this.$.card,
        'ripple': this.$.fixed
      };
      this.animationConfig = {
        'entry': [{
          name: 'ripple-animation',
          id: 'ripple',
          toPage: this
        }, {
          name: 'hero-animation',
          id: 'hero',
          toPage: this,
          timing: {
            delay: 150
          }
        }],
        'exit': [{
          name: 'fade-out-animation',
          node: this.$.fixed
        }, {
          name: 'transform-animation',
          transformFrom: 'none',
          transformTo: 'translate(0px,-200vh) scale(0.9,1)',
          node: this.$.card
        }]
      };
    },
    _computeCardClass: function _computeCardClass(color) {
      var cls = 'card';

      if (color) {
        cls += ' ' + color + '-300';
      }

      return cls;
    },
    _computeFixedBackgroundClass: function _computeFixedBackgroundClass(color) {
      var cls = 'fixed';

      if (color) {
        cls += ' ' + color + '-100';
      }

      return cls;
    }
  });
});