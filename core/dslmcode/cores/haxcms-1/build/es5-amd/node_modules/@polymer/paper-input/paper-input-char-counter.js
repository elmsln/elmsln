define(["../polymer/polymer-legacy.js", "../paper-styles/typography.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/utils/html-tag.js", "./paper-input-addon-behavior.js"], function (_polymerLegacy, _typography, _polymerFn, _htmlTag, _paperInputAddonBehavior) {
  "use strict";

  var _templateObject_5fb5e490809211edaa2833647dc78c6c;

  /*
  `<paper-input-char-counter>` is a character counter for use with
  `<paper-input-container>`. It shows the number of characters entered in the
  input and the max length if it is specified.
  
      <paper-input-container>
        <input maxlength="20">
        <paper-input-char-counter></paper-input-char-counter>
      </paper-input-container>
  
  ### Styling
  
  The following mixin is available for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--paper-input-char-counter` | Mixin applied to the element | `{}`
  */
  (0, _polymerFn.Polymer)({
    /** @override */
    _template: (0, _htmlTag.html)(_templateObject_5fb5e490809211edaa2833647dc78c6c || (_templateObject_5fb5e490809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: inline-block;\n        float: right;\n\n        @apply --paper-font-caption;\n        @apply --paper-input-char-counter;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:dir(rtl)) {\n        float: left;\n      }\n    </style>\n\n    <span>[[_charCounterStr]]</span>\n"]))),
    is: 'paper-input-char-counter',
    behaviors: [_paperInputAddonBehavior.PaperInputAddonBehavior],
    properties: {
      _charCounterStr: {
        type: String,
        value: '0'
      }
    },

    /**
     * This overrides the update function in PaperInputAddonBehavior.
     * @param {{
     *   inputElement: (Element|undefined),
     *   value: (string|undefined),
     *   invalid: boolean
     * }} state -
     *     inputElement: The input element.
     *     value: The input value.
     *     invalid: True if the input value is invalid.
     */
    update: function update(state) {
      if (!state.inputElement) {
        return;
      }

      state.value = state.value || '';
      var counter = state.value.toString().length.toString();

      if (state.inputElement.hasAttribute('maxlength')) {
        counter += '/' + state.inputElement.getAttribute('maxlength');
      }

      this._charCounterStr = counter;
    }
  });
});