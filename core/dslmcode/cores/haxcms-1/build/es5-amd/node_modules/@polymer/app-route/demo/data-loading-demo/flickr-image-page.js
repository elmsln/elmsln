define(["../../../polymer/polymer-legacy.js", "../../../iron-ajax/iron-ajax.js", "../../../paper-spinner/paper-spinner.js", "../../app-route.js", "../../../polymer/lib/legacy/polymer-fn.js", "../../../polymer/lib/utils/html-tag.js"], function (_polymerLegacy, _ironAjax, _paperSpinner, _appRoute, _polymerFn, _htmlTag) {
  "use strict";

  var _templateObject_972805408e0011ed99ce491205e67b1d;

  (0, _polymerFn.Polymer)({
    _template: (0, _htmlTag.html)(_templateObject_972805408e0011ed99ce491205e67b1d || (_templateObject_972805408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      paper-spinner {\n        display: block;\n      }\n      .tags span {\n        display: inline-block;\n        padding-right: 10px;\n        font-size: 110%;\n      }\n      .tags span::after {\n        content: ', ';\n      }\n      .tags span:last-of-type::after {\n        content: '';\n      }\n    </style>\n    <app-route route=\"{{route}}\" pattern=\"/:farm/:server/:id/:secret\" data=\"{{data}}\">\n    </app-route>\n    <img src=\"{{_computeSrc(data)}}\">\n    <iron-ajax auto url=\"https://www.flickr.com/services/rest/\" handle-as=\"json\" params=\"{{params}}\" last-response=\"{{metadata}}\" last-error=\"{{error}}\" loading=\"{{loading}}\">\n    </iron-ajax>\n    <paper-spinner active=\"{{loading}}\"></paper-spinner>\n    <div>\n      <h1>{{metadata.photo.title._content}}</h1>\n      <div class=\"tags\">\n      <template is=\"dom-repeat\" items=\"{{metadata.photo.tags.tag}}\">\n        <span>{{item.raw}}</span>\n      </template>\n      </div>\n      <div>\n        <ul>\n          <template is=\"dom-repeat\" items=\"{{metadata.photo.urls.url}}\">\n            <li>\n              <a target=\"_blank\" href=\"{{item._content}}\">\n                {{item._content}}\n              </a>\n            </li>\n          </template>\n        </ul>\n      </div>\n    </div>\n"]))),
    is: 'flickr-image-page',
    properties: {
      apiKey: {
        type: String
      },
      params: {
        type: Object,
        computed: '_computeParams(apiKey, data.id, data.secret)'
      },
      route: {
        type: Object
      }
    },
    observers: ['_clearOldMetadata(route.path)'],
    _clearOldMetadata: function _clearOldMetadata() {
      this.metadata = null;
    },
    _computeParams: function _computeParams(apiKey, id, secret) {
      return {
        method: 'flickr.photos.getInfo',
        api_key: apiKey,
        photo_id: id,
        secret: secret,
        format: 'json',
        nojsoncallback: 1
      };
    },
    _computeSrc: function _computeSrc(photo) {
      if (!photo || !photo.farm) {
        return '';
      }

      return 'https://farm' + photo.farm + '.staticflickr.com/' + photo.server + '/' + photo.id + '_' + photo.secret + '.jpg';
    }
  });
});