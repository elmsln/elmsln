define(["exports", "../../../@polymer/polymer/polymer-element.js", "./vaadin-text-field-mixin.js", "../../vaadin-control-state-mixin/vaadin-control-state-mixin.js", "../../vaadin-themable-mixin/vaadin-themable-mixin.js", "../../vaadin-element-mixin/vaadin-element-mixin.js", "../../../@polymer/polymer/lib/utils/html-tag.js"], function (_exports, _polymerElement, _vaadinTextFieldMixin, _vaadinControlStateMixin, _vaadinThemableMixin, _vaadinElementMixin, _htmlTag) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TextFieldElement = void 0;

  var _templateObject_ccacf160809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `<vaadin-text-field>` is a Web Component for text field control in forms.
   *
   * ```html
   * <vaadin-text-field label="First Name">
   * </vaadin-text-field>
   * ```
   *
   * ### Prefixes and suffixes
   *
   * These are child elements of a `<vaadin-text-field>` that are displayed
   * inline with the input, before or after.
   * In order for an element to be considered as a prefix, it must have the slot
   * attribute set to `prefix` (and similarly for `suffix`).
   *
   * ```html
   * <vaadin-text-field label="Email address">
   *   <div slot="prefix">Sent to:</div>
   *   <div slot="suffix">@vaadin.com</div>
   * </vaadin-text-area>
   * ```
   *
   * ### Styling
   *
   * The following custom properties are available for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|-------------
   * `--vaadin-text-field-default-width` | Set the default width of the input field | `12em`
   *
   * The following shadow DOM parts are available for styling:
   *
   * Part name | Description
   * ----------------|----------------
   * `label` | The label element
   * `input-field` | The element that wraps prefix, value and suffix
   * `value` | The text value element inside the `input-field` element
   * `error-message` | The error message element
   *
   * The following state attributes are available for styling:
   *
   * Attribute    | Description | Part name
   * -------------|-------------|------------
   * `disabled` | Set to a disabled text field | :host
   * `has-value` | Set when the element has a value | :host
   * `has-label` | Set when the element has a label | :host
   * `has-helper` | Set when the element has helper text or slot | :host
   * `has-error-message` | Set when the element has an error message | :host
   * `invalid` | Set when the element is invalid | :host
   * `input-prevented` | Temporarily set when invalid input is prevented | :host
   * `focused` | Set when the element is focused | :host
   * `focus-ring` | Set when the element is keyboard focused | :host
   * `readonly` | Set to a readonly text field | :host
   *
   * See [ThemableMixin â€“ how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
   *
   * @extends PolymerElement
   * @mixes TextFieldMixin
   * @mixes ControlStateMixin
   * @mixes ThemableMixin
   * @mixes ElementMixin
   * @demo demo/index.html
   */
  var TextFieldElement = /*#__PURE__*/function (_ElementMixin) {
    babelHelpers.inherits(TextFieldElement, _ElementMixin);

    var _super = _createSuper(TextFieldElement);

    function TextFieldElement() {
      babelHelpers.classCallCheck(this, TextFieldElement);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(TextFieldElement, null, [{
      key: "template",
      get: function get() {
        return (0, _htmlTag.html)(_templateObject_ccacf160809211edaa2833647dc78c6c || (_templateObject_ccacf160809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n    <style include=\"vaadin-text-field-shared-styles\">\n      /* polymer-cli linter breaks with empty line */\n    </style>\n\n    <div class=\"vaadin-text-field-container\">\n\n      <label part=\"label\" on-click=\"focus\" id=\"[[_labelId]]\">[[label]]</label>\n\n      <div part=\"input-field\" id=\"[[_inputId]]\">\n\n        <slot name=\"prefix\"></slot>\n\n        <slot name=\"input\">\n          <input part=\"value\">\n        </slot>\n\n        <div part=\"clear-button\" id=\"clearButton\" role=\"button\" aria-label$=\"[[i18n.clear]]\"></div>\n        <slot name=\"suffix\"></slot>\n\n      </div>\n\n      <div part=\"helper-text\" id=\"[[_helperTextId]]\">\n        <slot name=\"helper\">[[helperText]]</slot>\n      </div>\n\n      <div part=\"error-message\" id=\"[[_errorId]]\" aria-live=\"assertive\" aria-hidden$=\"[[_getErrorMessageAriaHidden(invalid, errorMessage, _errorId)]]\">[[errorMessage]]</div>\n\n    </div>\n"], ["\n    <style include=\"vaadin-text-field-shared-styles\">\n      /* polymer-cli linter breaks with empty line */\n    </style>\n\n    <div class=\"vaadin-text-field-container\">\n\n      <label part=\"label\" on-click=\"focus\" id=\"[[_labelId]]\">[[label]]</label>\n\n      <div part=\"input-field\" id=\"[[_inputId]]\">\n\n        <slot name=\"prefix\"></slot>\n\n        <slot name=\"input\">\n          <input part=\"value\">\n        </slot>\n\n        <div part=\"clear-button\" id=\"clearButton\" role=\"button\" aria-label\\$=\"[[i18n.clear]]\"></div>\n        <slot name=\"suffix\"></slot>\n\n      </div>\n\n      <div part=\"helper-text\" id=\"[[_helperTextId]]\">\n        <slot name=\"helper\">[[helperText]]</slot>\n      </div>\n\n      <div part=\"error-message\" id=\"[[_errorId]]\" aria-live=\"assertive\" aria-hidden\\$=\"[[_getErrorMessageAriaHidden(invalid, errorMessage, _errorId)]]\">[[errorMessage]]</div>\n\n    </div>\n"])));
      }
    }, {
      key: "is",
      get: function get() {
        return 'vaadin-text-field';
      }
    }, {
      key: "version",
      get: function get() {
        return '2.9.2';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Identifies a list of pre-defined options to suggest to the user.
           * The value must be the id of a <datalist> element in the same document.
           */
          list: {
            type: String
          },

          /**
           * A regular expression that the value is checked against.
           * The pattern must match the entire value, not just some subset.
           */
          pattern: {
            type: String
          },

          /**
           * The text usually displayed in a tooltip popup when the mouse is over the field.
           * @type {string}
           */
          title: {
            type: String
          }
        };
      }
    }]);
    return TextFieldElement;
  }((0, _vaadinElementMixin.ElementMixin)((0, _vaadinTextFieldMixin.TextFieldMixin)((0, _vaadinControlStateMixin.ControlStateMixin)((0, _vaadinThemableMixin.ThemableMixin)(_polymerElement.PolymerElement)))));

  _exports.TextFieldElement = TextFieldElement;
  customElements.define(TextFieldElement.is, TextFieldElement);
});