define(["exports", "../../../@polymer/polymer/polymer-legacy.js", "../../vaadin-text-field/src/vaadin-text-field.js", "../../../@polymer/polymer/lib/utils/html-tag.js", "../../../@polymer/polymer/lib/utils/debounce.js", "../../../@polymer/polymer/lib/utils/async.js", "../../../@polymer/polymer/polymer-element.js"], function (_exports, _polymerLegacy, _vaadinTextField, _htmlTag, _debounce, _async, _polymerElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GridFilterElement = void 0;

  var _templateObject_039c4d808e0111ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `<vaadin-grid-filter>` is a helper element for the `<vaadin-grid>` that provides out-of-the-box UI controls,
   * and handlers for filtering the grid data.
   *
   * #### Example:
   * ```html
   * <vaadin-grid-column>
   *   <template class="header">
   *     <vaadin-grid-filter path="name.first"></vaadin-grid-filter>
   *   </template>
   *   <template>[[item.name.first]]</template>
   * </vaadin-grid-column>
   * ```
   *
   */
  var GridFilterElement = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(GridFilterElement, _PolymerElement);

    var _super = _createSuper(GridFilterElement);

    function GridFilterElement() {
      babelHelpers.classCallCheck(this, GridFilterElement);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(GridFilterElement, [{
      key: "connectedCallback",
      value:
      /** @protected */
      function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(GridFilterElement.prototype), "connectedCallback", this).call(this);
        this._connected = true;
      }
    }, {
      key: "ready",
      value:
      /** @protected */
      function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(GridFilterElement.prototype), "ready", this).call(this);
        var child = this.firstElementChild;

        if (child && child.getAttribute('slot') !== 'filter') {
          console.warn('Make sure you have assigned slot="filter" to the child elements of <vaadin-grid-filter>');
          child.setAttribute('slot', 'filter');
        }
      }
      /** @private */

    }, {
      key: "_filterChanged",
      value: function _filterChanged(path, value, connected) {
        var _this = this;

        if (path === undefined || value === undefined || !connected) {
          return;
        }

        if (this._previousValue === undefined && value === '') {
          return;
        }

        this._previousValue = value;
        this._debouncerFilterChanged = _debounce.Debouncer.debounce(this._debouncerFilterChanged, _async.timeOut.after(200), function () {
          _this.dispatchEvent(new CustomEvent('filter-changed', {
            bubbles: true
          }));
        });
      }
    }, {
      key: "focus",
      value: function focus() {
        this.$.filter.focus();
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _htmlTag.html)(_templateObject_039c4d808e0111ed99ce491205e67b1d || (_templateObject_039c4d808e0111ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: inline-flex;\n        max-width: 100%;\n      }\n\n      #filter {\n        width: 100%;\n        box-sizing: border-box;\n      }\n    </style>\n    <slot name=\"filter\">\n      <vaadin-text-field id=\"filter\" value=\"{{value}}\"></vaadin-text-field>\n    </slot>\n"])));
      }
    }, {
      key: "is",
      get: function get() {
        return 'vaadin-grid-filter';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * JS Path of the property in the item used for filtering the data.
           */
          path: String,

          /**
           * Current filter value.
           */
          value: {
            type: String,
            notify: true
          },

          /** @private */
          _connected: Boolean
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ['_filterChanged(path, value, _connected)'];
      }
    }]);
    return GridFilterElement;
  }(_polymerElement.PolymerElement);

  _exports.GridFilterElement = GridFilterElement;
  customElements.define(GridFilterElement.is, GridFilterElement);
});