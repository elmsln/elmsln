define(["exports", "../../../@polymer/polymer/polymer-legacy.js", "./vaadin-grid-column.js", "../../vaadin-checkbox/src/vaadin-checkbox.js", "../../../@polymer/polymer/lib/utils/html-tag.js"], function (_exports, _polymerLegacy, _vaadinGridColumn, _vaadinCheckbox, _htmlTag) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GridSelectionColumnElement = void 0;

  var _templateObject_cc4492a0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `<vaadin-grid-selection-column>` is a helper element for the `<vaadin-grid>`
   * that provides default templates and functionality for item selection.
   *
   * #### Example:
   * ```html
   * <vaadin-grid items="[[items]]">
   *  <vaadin-grid-selection-column frozen auto-select></vaadin-grid-selection-column>
   *
   *  <vaadin-grid-column>
   *    ...
   * ```
   *
   * By default the selection column displays `<vaadin-checkbox>` elements in the
   * column cells. The checkboxes in the body rows toggle selection of the corresponding row items.
   *
   * When the grid data is provided as an array of [`items`](#/elements/vaadin-grid#property-items),
   * the column header gets an additional checkbox that can be used for toggling
   * selection for all the items at once.
   *
   * __The default content can also be overridden__
   *
   */
  var GridSelectionColumnElement = /*#__PURE__*/function (_GridColumnElement) {
    babelHelpers.inherits(GridSelectionColumnElement, _GridColumnElement);

    var _super = _createSuper(GridSelectionColumnElement);

    function GridSelectionColumnElement() {
      var _this;

      babelHelpers.classCallCheck(this, GridSelectionColumnElement);
      _this = _super.call(this);
      _this._boundOnActiveItemChanged = _this._onActiveItemChanged.bind(babelHelpers.assertThisInitialized(_this));
      _this._boundOnDataProviderChanged = _this._onDataProviderChanged.bind(babelHelpers.assertThisInitialized(_this));
      _this._boundOnSelectedItemsChanged = _this._onSelectedItemsChanged.bind(babelHelpers.assertThisInitialized(_this));
      return _this;
    }
    /** @protected */


    babelHelpers.createClass(GridSelectionColumnElement, [{
      key: "_pathOrHeaderChanged",
      value:
      /** @private */
      function _pathOrHeaderChanged(path, header, headerCell, footerCell, cells, renderer, headerRenderer, bodyTemplate, headerTemplate) {
        // As a special case, allow overriding the default header / body templates
        if (cells.value && (path !== undefined || renderer !== undefined)) {
          this._bodyTemplate = bodyTemplate = undefined;

          this.__cleanCellsOfTemplateProperties(cells.value);
        }

        if (headerCell && (header !== undefined || headerRenderer !== undefined)) {
          this._headerTemplate = headerTemplate = undefined;

          this.__cleanCellsOfTemplateProperties([headerCell]);
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(GridSelectionColumnElement.prototype), "_pathOrHeaderChanged", this).call(this, path, header, headerCell, footerCell, cells, renderer, headerRenderer, bodyTemplate, headerTemplate);
      }
      /** @private */

    }, {
      key: "__cleanCellsOfTemplateProperties",
      value: function __cleanCellsOfTemplateProperties(cells) {
        cells.forEach(function (cell) {
          cell._content.innerHTML = '';
          delete cell._instance;
          delete cell._template;
        });
      }
      /** @private */

    }, {
      key: "_prepareHeaderTemplate",
      value: function _prepareHeaderTemplate() {
        var headerTemplate = this._prepareTemplatizer(this._findTemplate(true) || this.$.defaultHeaderTemplate); // needed to override the dataHost correctly in case internal template is used.


        headerTemplate.templatizer.dataHost = headerTemplate === this.$.defaultHeaderTemplate ? this : this.dataHost;
        return headerTemplate;
      }
      /** @private */

    }, {
      key: "_prepareBodyTemplate",
      value: function _prepareBodyTemplate() {
        var template = this._prepareTemplatizer(this._findTemplate() || this.$.defaultBodyTemplate); // needed to override the dataHost correctly in case internal template is used.


        template.templatizer.dataHost = template === this.$.defaultBodyTemplate ? this : this.dataHost;
        return template;
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this._grid.removeEventListener('active-item-changed', this._boundOnActiveItemChanged);

        this._grid.removeEventListener('data-provider-changed', this._boundOnDataProviderChanged);

        this._grid.removeEventListener('filter-changed', this._boundOnSelectedItemsChanged);

        this._grid.removeEventListener('selected-items-changed', this._boundOnSelectedItemsChanged);

        var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

        if (isSafari && window.ShadyDOM && this.parentElement) {
          // Detach might have beem caused by order change.
          // Shady on safari doesn't restore isAttached so we'll need to do it manually.
          var parent = this.parentElement;
          var nextSibling = this.nextElementSibling;
          parent.removeChild(this);

          if (nextSibling) {
            parent.insertBefore(this, nextSibling);
          } else {
            parent.appendChild(this);
          }
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(GridSelectionColumnElement.prototype), "disconnectedCallback", this).call(this);
      }
      /** @protected */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(GridSelectionColumnElement.prototype), "connectedCallback", this).call(this);

        if (this._grid) {
          this._grid.addEventListener('active-item-changed', this._boundOnActiveItemChanged);

          this._grid.addEventListener('data-provider-changed', this._boundOnDataProviderChanged);

          this._grid.addEventListener('filter-changed', this._boundOnSelectedItemsChanged);

          this._grid.addEventListener('selected-items-changed', this._boundOnSelectedItemsChanged);
        }
      }
      /** @private */

    }, {
      key: "_onSelectAllChanged",
      value: function _onSelectAllChanged(selectAll) {
        if (selectAll === undefined || !this._grid) {
          return;
        }

        if (this._selectAllChangeLock) {
          return;
        }

        this._grid.selectedItems = selectAll && Array.isArray(this._grid.items) ? this._grid._filter(this._grid.items) : [];
      }
      /**
       * Return true if array `a` contains all the items in `b`
       * We need this when sorting or to preserve selection after filtering.
       * @private
       */

    }, {
      key: "_arrayContains",
      value: function _arrayContains(a, b) {
        for (var i = 0; a && b && b[i] && a.indexOf(b[i]) >= 0; i++) {
          ;
        } // eslint-disable-line


        return i == b.length;
      }
      /** @private */

    }, {
      key: "_onSelectAllCheckedChanged",
      value: function _onSelectAllCheckedChanged(e) {
        this.selectAll = this._indeterminate || e.target.checked;
      }
      /**
       * iOS needs indeterminated + checked at the same time
       * @private
       */

    }, {
      key: "_isChecked",
      value: function _isChecked(selectAll, indeterminate) {
        return indeterminate || selectAll;
      }
      /** @private */

    }, {
      key: "_onActiveItemChanged",
      value: function _onActiveItemChanged(e) {
        var activeItem = e.detail.value;

        if (this.autoSelect) {
          var item = activeItem || this._previousActiveItem;

          if (item) {
            this._grid._toggleItem(item);
          }
        }

        this._previousActiveItem = activeItem;
      }
      /** @private */

    }, {
      key: "_onSelectedItemsChanged",
      value: function _onSelectedItemsChanged(e) {
        this._selectAllChangeLock = true;

        if (Array.isArray(this._grid.items)) {
          if (!this._grid.selectedItems.length) {
            this.selectAll = false;
            this._indeterminate = false;
          } else if (this._arrayContains(this._grid.selectedItems, this._grid._filter(this._grid.items))) {
            this.selectAll = true;
            this._indeterminate = false;
          } else {
            this.selectAll = false;
            this._indeterminate = true;
          }
        }

        this._selectAllChangeLock = false;
      }
      /** @private */

    }, {
      key: "_onDataProviderChanged",
      value: function _onDataProviderChanged(e) {
        this._selectAllHidden = !Array.isArray(this._grid.items);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _htmlTag.html)(_templateObject_cc4492a0809211edaa2833647dc78c6c || (_templateObject_cc4492a0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n    <template class=\"header\" id=\"defaultHeaderTemplate\">\n      <vaadin-checkbox class=\"vaadin-grid-select-all-checkbox\" aria-label=\"Select All\" hidden$=\"[[_selectAllHidden]]\" on-checked-changed=\"_onSelectAllCheckedChanged\" checked=\"[[_isChecked(selectAll, _indeterminate)]]\" indeterminate=\"[[_indeterminate]]\"></vaadin-checkbox>\n    </template>\n    <template id=\"defaultBodyTemplate\">\n      <vaadin-checkbox aria-label=\"Select Row\" checked=\"{{selected}}\"></vaadin-checkbox>\n    </template>\n"], ["\n    <template class=\"header\" id=\"defaultHeaderTemplate\">\n      <vaadin-checkbox class=\"vaadin-grid-select-all-checkbox\" aria-label=\"Select All\" hidden\\$=\"[[_selectAllHidden]]\" on-checked-changed=\"_onSelectAllCheckedChanged\" checked=\"[[_isChecked(selectAll, _indeterminate)]]\" indeterminate=\"[[_indeterminate]]\"></vaadin-checkbox>\n    </template>\n    <template id=\"defaultBodyTemplate\">\n      <vaadin-checkbox aria-label=\"Select Row\" checked=\"{{selected}}\"></vaadin-checkbox>\n    </template>\n"])));
      }
    }, {
      key: "is",
      get: function get() {
        return 'vaadin-grid-selection-column';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Width of the cells for this column.
           */
          width: {
            type: String,
            value: '58px'
          },

          /**
           * Flex grow ratio for the cell widths. When set to 0, cell width is fixed.
           * @attr {number} flex-grow
           * @type {number}
           */
          flexGrow: {
            type: Number,
            value: 0
          },

          /**
           * When true, all the items are selected.
           * @attr {boolean} select-all
           * @type {boolean}
           */
          selectAll: {
            type: Boolean,
            value: false,
            notify: true
          },

          /**
           * When true, the active gets automatically selected.
           * @attr {boolean} auto-select
           * @type {boolean}
           */
          autoSelect: {
            type: Boolean,
            value: false
          },

          /** @private */
          _indeterminate: Boolean,

          /**
           * The previous state of activeItem. When activeItem turns to `null`,
           * previousActiveItem will have an Object with just unselected activeItem
           * @private
           */
          _previousActiveItem: Object,

          /** @private */
          _selectAllHidden: Boolean
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ['_onSelectAllChanged(selectAll)'];
      }
    }]);
    return GridSelectionColumnElement;
  }(_vaadinGridColumn.GridColumnElement);

  _exports.GridSelectionColumnElement = GridSelectionColumnElement;
  customElements.define(GridSelectionColumnElement.is, GridSelectionColumnElement);
});