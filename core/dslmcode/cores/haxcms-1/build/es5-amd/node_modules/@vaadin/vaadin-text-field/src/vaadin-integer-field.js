define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/elements/custom-style.js", "./vaadin-number-field.js", "../../../@polymer/polymer/lib/utils/html-tag.js"], function (_exports, _polymerElement, _customStyle, _vaadinNumberField, _htmlTag) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.IntegerFieldElement = void 0;

  var _templateObject_040bb1208e0111ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var $_documentContainer = (0, _htmlTag.html)(_templateObject_040bb1208e0111ed99ce491205e67b1d || (_templateObject_040bb1208e0111ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<dom-module id=\"vaadin-integer-field-template\">\n\n  \n</dom-module>"])));
  document.head.appendChild($_documentContainer.content);
  /**
   * `<vaadin-integer-field>` is a Web Component for integer field control in forms.
   *
   * ```html
   * <vaadin-integer-field label="Number">
   * </vaadin-integer-field>
   * ```
   * @extends NumberFieldElement
   * @demo demo/index.html
   */

  var IntegerFieldElement = /*#__PURE__*/function (_NumberFieldElement) {
    babelHelpers.inherits(IntegerFieldElement, _NumberFieldElement);

    var _super = _createSuper(IntegerFieldElement);

    function IntegerFieldElement() {
      babelHelpers.classCallCheck(this, IntegerFieldElement);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(IntegerFieldElement, [{
      key: "ready",
      value:
      /** @protected */
      function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(IntegerFieldElement.prototype), "ready", this).call(this);
        this._enabledCharPattern = '[-+\\d]';
      }
      /**
       * @param {unknown} newVal
       * @param {unknown} oldVal
       * @protected
       */

    }, {
      key: "_valueChanged",
      value: function _valueChanged(newVal, oldVal) {
        if (newVal !== '' && !this.__isInteger(newVal)) {
          console.warn("Trying to set non-integer value \"".concat(newVal, "\" to <vaadin-integer-field>.") + " Clearing the value.");
          this.value = '';
          return;
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(IntegerFieldElement.prototype), "_valueChanged", this).call(this, newVal, oldVal);
      }
      /**
       * @param {number} newVal
       * @param {number | undefined} oldVal
       * @protected
       */

    }, {
      key: "_stepChanged",
      value: function _stepChanged(newVal, oldVal) {
        if (!this.__hasOnlyDigits(newVal)) {
          console.warn("Trying to set invalid step size \"".concat(newVal, "\",") + " which is not a positive integer, to <vaadin-integer-field>." + " Resetting the default value 1.");
          this.step = 1;
          return;
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(IntegerFieldElement.prototype), "_stepChanged", this).call(this, newVal, oldVal);
      }
      /** @private */

    }, {
      key: "__isInteger",
      value: function __isInteger(value) {
        return /^(-\d)?\d*$/.test(String(value));
      }
      /** @private */

    }, {
      key: "__hasOnlyDigits",
      value: function __hasOnlyDigits(value) {
        return /^\d*$/.test(String(value));
      }
    }], [{
      key: "is",
      get: function get() {
        return 'vaadin-integer-field';
      }
    }, {
      key: "version",
      get: function get() {
        return '2.9.2';
      }
    }, {
      key: "properties",
      get: function get() {
        // Hide inherited props that don't work with <input type="number"> from JSDoc.
        return {
          /** @private */
          pattern: String,

          /** @private */
          preventInvalidInput: Boolean,

          /** @private */
          minlength: Number,

          /** @private */
          maxlength: Number
        };
      }
    }]);
    return IntegerFieldElement;
  }(_vaadinNumberField.NumberFieldElement);

  _exports.IntegerFieldElement = IntegerFieldElement;
  window.customElements.define(IntegerFieldElement.is, IntegerFieldElement);
});