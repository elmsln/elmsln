define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/elements/custom-style.js", "../../../@polymer/polymer/lib/utils/debounce.js", "../../vaadin-themable-mixin/vaadin-themable-mixin.js", "../../vaadin-element-mixin/vaadin-dir-mixin.js", "../../../@polymer/polymer/lib/utils/html-tag.js", "./vaadin-grid-active-item-mixin.js", "../../../@polymer/polymer/lib/utils/async.js"], function (_exports, _polymerElement, _customStyle, _debounce, _vaadinThemableMixin, _vaadinDirMixin, _htmlTag, _vaadinGridActiveItemMixin, _async) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GridTreeToggleElement = void 0;

  var _templateObject_cc6b7b90809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var $_documentContainer = document.createElement('template');
  $_documentContainer.innerHTML = "<custom-style>\n  <style>\n    @font-face {\n      font-family: \"vaadin-grid-tree-icons\";\n      src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAQkAA0AAAAABrwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAECAAAABoAAAAcgHwa6EdERUYAAAPsAAAAHAAAAB4AJwAOT1MvMgAAAZQAAAA/AAAAYA8TBIJjbWFwAAAB8AAAAFUAAAFeGJvXWmdhc3AAAAPkAAAACAAAAAgAAAAQZ2x5ZgAAAlwAAABLAAAAhIrPOhFoZWFkAAABMAAAACsAAAA2DsJI02hoZWEAAAFcAAAAHQAAACQHAgPHaG10eAAAAdQAAAAZAAAAHAxVAgBsb2NhAAACSAAAABIAAAASAIAAVG1heHAAAAF8AAAAGAAAACAACgAFbmFtZQAAAqgAAAECAAACTwflzbdwb3N0AAADrAAAADYAAABZQ7Ajh3icY2BkYGAA4twv3Vfi+W2+MnCzMIDANSOmbGSa2YEZRHEwMIEoAAoiB6sAeJxjYGRgYD7w/wADAwsDCDA7MDAyoAI2AFEEAtIAAAB4nGNgZGBg4GBgZgDRDAxMDGgAAAGbABB4nGNgZp7JOIGBlYGBaSbTGQYGhn4IzfiawZiRkwEVMAqgCTA4MDA+38d84P8BBgdmIAapQZJVYGAEAGc/C54AeJxjYYAAxlAIzQTELAwMBxgZGB0ACy0BYwAAAHicY2BgYGaAYBkGRgYQiADyGMF8FgYbIM3FwMHABISMDArP9/3/+/8/WJXC8z0Q9v8nEp5gHVwMMMAIMo+RDYiZoQJMQIKJARUA7WBhGN4AACFKDtoAAAAAAAAAAAgACAAQABgAJgA0AEIAAHichYvBEYBADAKBVHBjBT4swl9KS2k05o0XHd/yW1hAfBFwCv9sIlJu3nZaNS3PXAaXXHI8Lge7DlzF7C1RgXc7xkK6+gvcD2URmQB4nK2RQWoCMRiFX3RUqtCli65yADModOMBLLgQSqHddRFnQghIAnEUvEA3vUUP0LP0Fj1G+yb8R5iEhO9/ef/7FwFwj28o9EthiVp4hBlehcfUP4Ur8o/wBAv8CU+xVFvhOR7UB7tUdUdlVRJ6HnHWTnhM/V24In8JT5j/KzzFSi2E53hUz7jCcrcIiDDwyKSW1JEct2HdIPH1DFytbUM0PofWdNk5E5oUqb/Q6HHBiVGZpfOXkyUMEj5IyBuNmYZQjBobfsuassvnkKLe1OuBBj0VQ8cRni2xjLWsHaM0jrjx3peYA0/vrdmUYqe9iy7bzrX6eNP7Jh1SijX+AaUVbB8AAHicY2BiwA84GBgYmRiYGJkZmBlZGFkZ2djScyoLMgzZS/MyDQwMwLSruZMzlHaB0q4A76kLlwAAAAEAAf//AA94nGNgZGBg4AFiMSBmYmAEQnYgZgHzGAAD6wA2eJxjYGBgZACCKxJigiD6mhFTNowGACmcA/8AAA==) format('woff');\n      font-weight: normal;\n      font-style: normal;\n    }\n  </style>\n</custom-style>";
  document.head.appendChild($_documentContainer.content);
  /**
   * `<vaadin-grid-tree-toggle>` is a helper element for the `<vaadin-grid>`
   * that provides toggle and level display functionality for the item tree.
   *
   * #### Example:
   * ```html
   * <vaadin-grid-column>
   *   <template class="header">Package name</template>
   *   <template>
   *     <vaadin-grid-tree-toggle
   *         leaf="[[!item.hasChildren]]"
   *         expanded="{{expanded}}"
   *         level="[[level]]">
   *       [[item.name]]
   *     </vaadin-grid-tree-toggle>
   *   </template>
   * </vaadin-grid-column>
   * ```
   *
   * ### Styling
   *
   * The following shadow DOM parts are available for styling:
   *
   * Part name | Description
   * ---|---
   * `toggle` | The tree toggle icon
   *
   * The following state attributes are available for styling:
   *
   * Attribute    | Description | Part name
   * ---|---|---
   * `expanded` | When present, the toggle is expanded | :host
   * `leaf` | When present, the toggle is not expandable, i. e., the current item is a leaf | :host
   *
   * The following custom CSS properties are available on
   * the `<vaadin-grid-tree-toggle>` element:
   *
   * Custom CSS property | Description | Default
   * ---|---|---
   * `--vaadin-grid-tree-toggle-level-offset` | Visual offset step for each tree sublevel | `1em`
   *
   * @extends PolymerElement
   * @mixes ThemableMixin
   */

  var GridTreeToggleElement = /*#__PURE__*/function (_ThemableMixin) {
    babelHelpers.inherits(GridTreeToggleElement, _ThemableMixin);

    var _super = _createSuper(GridTreeToggleElement);

    function GridTreeToggleElement() {
      babelHelpers.classCallCheck(this, GridTreeToggleElement);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(GridTreeToggleElement, [{
      key: "ready",
      value:
      /** @protected */
      function ready() {
        var _this = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(GridTreeToggleElement.prototype), "ready", this).call(this);
        this.addEventListener('click', function (e) {
          return _this._onClick(e);
        });
      }
      /** @private */

    }, {
      key: "_onClick",
      value: function _onClick(e) {
        if (this.leaf) {
          return;
        }

        if ((0, _vaadinGridActiveItemMixin.isFocusable)(e.target)) {
          return;
        }

        e.preventDefault();
        this.expanded = !this.expanded;
      }
      /** @private */

    }, {
      key: "_levelChanged",
      value: function _levelChanged(level) {
        var _this2 = this;

        var value = Number(level).toString();
        this.updateStyles({
          '---level': value
        }); // Async is to make DOM updates applied before evaluating the style
        // update, required for polyfilled RTL support in MSIE and Edge.

        this._debouncerUpdateLevel = _debounce.Debouncer.debounce(this._debouncerUpdateLevel, _async.microTask, function () {
          return _this2.updateStyles({
            '---level': value
          });
        });
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _htmlTag.html)(_templateObject_cc6b7b90809211edaa2833647dc78c6c || (_templateObject_cc6b7b90809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: inline-flex;\n        align-items: baseline;\n\n        /* CSS API for :host */\n        --vaadin-grid-tree-toggle-level-offset: 1em;\n\n        /*\n          ShadyCSS seems to polyfill :dir(rtl) only for :host, thus using\n          a host custom CSS property for ltr/rtl toggle icon choice.\n         */\n        ---collapsed-icon: \"\\e7be\\00a0\";\n      }\n\n      :host(:dir(rtl)) {\n        ---collapsed-icon: \"\\e7bd\\00a0\";\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:not([leaf])) {\n        cursor: pointer;\n      }\n\n      #level-spacer,\n      [part=\"toggle\"] {\n        flex: none;\n      }\n\n      #level-spacer {\n        display: inline-block;\n        width: calc(var(---level, '0') * var(--vaadin-grid-tree-toggle-level-offset));\n      }\n\n      [part=\"toggle\"]::before {\n        font-family: \"vaadin-grid-tree-icons\";\n        line-height: 1em; /* make icon font metrics not affect baseline */\n      }\n\n      :host(:not([expanded])) [part=\"toggle\"]::before {\n        content: var(---collapsed-icon);\n      }\n\n      :host([expanded]) [part=\"toggle\"]::before {\n        content: \"\\e7bc\\00a0\"; /* icon glyph + single non-breaking space */\n      }\n\n      :host([leaf]) [part=\"toggle\"] {\n        visibility: hidden;\n      }\n    </style>\n\n    <span id=\"level-spacer\"></span>\n    <span part=\"toggle\"></span>\n    <slot></slot>\n"], ["\n    <style>\n      :host {\n        display: inline-flex;\n        align-items: baseline;\n\n        /* CSS API for :host */\n        --vaadin-grid-tree-toggle-level-offset: 1em;\n\n        /*\n          ShadyCSS seems to polyfill :dir(rtl) only for :host, thus using\n          a host custom CSS property for ltr/rtl toggle icon choice.\n         */\n        ---collapsed-icon: \"\\\\e7be\\\\00a0\";\n      }\n\n      :host(:dir(rtl)) {\n        ---collapsed-icon: \"\\\\e7bd\\\\00a0\";\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:not([leaf])) {\n        cursor: pointer;\n      }\n\n      #level-spacer,\n      [part=\"toggle\"] {\n        flex: none;\n      }\n\n      #level-spacer {\n        display: inline-block;\n        width: calc(var(---level, '0') * var(--vaadin-grid-tree-toggle-level-offset));\n      }\n\n      [part=\"toggle\"]::before {\n        font-family: \"vaadin-grid-tree-icons\";\n        line-height: 1em; /* make icon font metrics not affect baseline */\n      }\n\n      :host(:not([expanded])) [part=\"toggle\"]::before {\n        content: var(---collapsed-icon);\n      }\n\n      :host([expanded]) [part=\"toggle\"]::before {\n        content: \"\\\\e7bc\\\\00a0\"; /* icon glyph + single non-breaking space */\n      }\n\n      :host([leaf]) [part=\"toggle\"] {\n        visibility: hidden;\n      }\n    </style>\n\n    <span id=\"level-spacer\"></span>\n    <span part=\"toggle\"></span>\n    <slot></slot>\n"])));
      }
    }, {
      key: "is",
      get: function get() {
        return 'vaadin-grid-tree-toggle';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Current level of the tree represented with a horizontal offset
           * of the toggle button.
           * @type {number}
           */
          level: {
            type: Number,
            value: 0,
            observer: '_levelChanged'
          },

          /**
           * Hides the toggle icon and disables toggling a tree sublevel.
           * @type {boolean}
           */
          leaf: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * Sublevel toggle state.
           * @type {boolean}
           */
          expanded: {
            type: Boolean,
            value: false,
            reflectToAttribute: true,
            notify: true
          }
        };
      }
    }]);
    return GridTreeToggleElement;
  }((0, _vaadinThemableMixin.ThemableMixin)((0, _vaadinDirMixin.DirMixin)(_polymerElement.PolymerElement)));

  _exports.GridTreeToggleElement = GridTreeToggleElement;
  customElements.define(GridTreeToggleElement.is, GridTreeToggleElement);
});