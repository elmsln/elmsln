define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/elements/custom-style.js", "./vaadin-text-field.js", "../../../@polymer/polymer/lib/elements/dom-module.js", "../../../@polymer/polymer/lib/utils/html-tag.js"], function (_exports, _polymerElement, _customStyle, _vaadinTextField, _domModule, _htmlTag) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.NumberFieldElement = void 0;

  var _templateObject_cc9b8c40809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var $_documentContainer = (0, _htmlTag.html)(_templateObject_cc9b8c40809211edaa2833647dc78c6c || (_templateObject_cc9b8c40809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["<dom-module id=\"vaadin-number-field-template\">\n  <template>\n    <style>\n      :host([readonly]) [part$=\"button\"] {\n        pointer-events: none;\n      }\n\n      [part=\"decrease-button\"]::before {\n        content: \"\u2212\";\n      }\n\n      [part=\"increase-button\"]::before {\n        content: \"+\";\n      }\n\n      [part=\"decrease-button\"],\n      [part=\"increase-button\"] {\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n\n      /* Hide the native arrow icons */\n      [part=\"value\"]::-webkit-outer-spin-button,\n      [part=\"value\"]::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      [part=\"value\"] {\n        /* Older Firefox versions (v47.0) requires !important */\n        -moz-appearance: textfield !important;\n      }\n\n      :host([dir=\"rtl\"]) [part=\"input-field\"] {\n        direction: ltr;\n      }\n\n      :host([dir=\"rtl\"]) [part=\"value\"]::placeholder {\n        direction: rtl;\n      }\n\n      :host([dir=\"rtl\"]) [part=\"input-field\"] ::slotted(input)::placeholder {\n        direction: rtl;\n      }\n\n      :host([dir=\"rtl\"]) [part=\"value\"]:-ms-input-placeholder,\n      :host([dir=\"rtl\"]) [part=\"input-field\"] ::slotted(input):-ms-input-placeholder {\n        direction: rtl;\n      }\n\n      :host([dir=\"rtl\"]:not([has-controls])) [part=\"value\"]::placeholder {\n        text-align: left;\n      }\n\n      :host([dir=\"rtl\"]:not([has-controls])) [part=\"input-field\"] ::slotted(input)::placeholder {\n        text-align: left;\n      }\n\n      :host([dir=\"rtl\"]:not([has-controls])) [part=\"value\"]:-ms-input-placeholder,\n      :host([dir=\"rtl\"]:not([has-controls])) [part=\"input-field\"] ::slotted(input):-ms-input-placeholder {\n        text-align: left;\n      }\n    </style>\n\n    <div disabled$=\"[[!_allowed(-1, value, min, max, step)]]\" part=\"decrease-button\" on-click=\"_decreaseValue\" on-touchend=\"_decreaseButtonTouchend\" hidden$=\"[[!hasControls]]\">\n    </div>\n\n    <div disabled$=\"[[!_allowed(1, value, min, max, step)]]\" part=\"increase-button\" on-click=\"_increaseValue\" on-touchend=\"_increaseButtonTouchend\" hidden$=\"[[!hasControls]]\">\n    </div>\n  </template>\n\n  \n</dom-module>"], ["<dom-module id=\"vaadin-number-field-template\">\n  <template>\n    <style>\n      :host([readonly]) [part\\$=\"button\"] {\n        pointer-events: none;\n      }\n\n      [part=\"decrease-button\"]::before {\n        content: \"\u2212\";\n      }\n\n      [part=\"increase-button\"]::before {\n        content: \"+\";\n      }\n\n      [part=\"decrease-button\"],\n      [part=\"increase-button\"] {\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n\n      /* Hide the native arrow icons */\n      [part=\"value\"]::-webkit-outer-spin-button,\n      [part=\"value\"]::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      [part=\"value\"] {\n        /* Older Firefox versions (v47.0) requires !important */\n        -moz-appearance: textfield !important;\n      }\n\n      :host([dir=\"rtl\"]) [part=\"input-field\"] {\n        direction: ltr;\n      }\n\n      :host([dir=\"rtl\"]) [part=\"value\"]::placeholder {\n        direction: rtl;\n      }\n\n      :host([dir=\"rtl\"]) [part=\"input-field\"] ::slotted(input)::placeholder {\n        direction: rtl;\n      }\n\n      :host([dir=\"rtl\"]) [part=\"value\"]:-ms-input-placeholder,\n      :host([dir=\"rtl\"]) [part=\"input-field\"] ::slotted(input):-ms-input-placeholder {\n        direction: rtl;\n      }\n\n      :host([dir=\"rtl\"]:not([has-controls])) [part=\"value\"]::placeholder {\n        text-align: left;\n      }\n\n      :host([dir=\"rtl\"]:not([has-controls])) [part=\"input-field\"] ::slotted(input)::placeholder {\n        text-align: left;\n      }\n\n      :host([dir=\"rtl\"]:not([has-controls])) [part=\"value\"]:-ms-input-placeholder,\n      :host([dir=\"rtl\"]:not([has-controls])) [part=\"input-field\"] ::slotted(input):-ms-input-placeholder {\n        text-align: left;\n      }\n    </style>\n\n    <div disabled\\$=\"[[!_allowed(-1, value, min, max, step)]]\" part=\"decrease-button\" on-click=\"_decreaseValue\" on-touchend=\"_decreaseButtonTouchend\" hidden\\$=\"[[!hasControls]]\">\n    </div>\n\n    <div disabled\\$=\"[[!_allowed(1, value, min, max, step)]]\" part=\"increase-button\" on-click=\"_increaseValue\" on-touchend=\"_increaseButtonTouchend\" hidden\\$=\"[[!hasControls]]\">\n    </div>\n  </template>\n\n  \n</dom-module>"])));
  document.head.appendChild($_documentContainer.content);
  var memoizedTemplate;
  /**
   * `<vaadin-number-field>` is a Web Component for number field control in forms.
   *
   * ```html
   * <vaadin-number-field label="Number">
   * </vaadin-number-field>
   * ```
   * @extends TextFieldElement
   * @demo demo/index.html
   */

  var NumberFieldElement = /*#__PURE__*/function (_TextFieldElement) {
    babelHelpers.inherits(NumberFieldElement, _TextFieldElement);

    var _super = _createSuper(NumberFieldElement);

    function NumberFieldElement() {
      babelHelpers.classCallCheck(this, NumberFieldElement);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(NumberFieldElement, [{
      key: "ready",
      value:
      /** @protected */
      function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(NumberFieldElement.prototype), "ready", this).call(this);
        this.__previousValidInput = this.value || '';
        this.inputElement.type = 'number';
        this.inputElement.addEventListener('change', this.__onInputChange.bind(this));
      }
      /** @private */

    }, {
      key: "_decreaseButtonTouchend",
      value: function _decreaseButtonTouchend(e) {
        // Cancel the following click and focus events
        e.preventDefault();

        this._decreaseValue();
      }
      /** @private */

    }, {
      key: "_increaseButtonTouchend",
      value: function _increaseButtonTouchend(e) {
        // Cancel the following click and focus events
        e.preventDefault();

        this._increaseValue();
      }
    }, {
      key: "_createConstraintsObserver",
      value:
      /** @protected */
      function _createConstraintsObserver() {
        // NOTE: do not call "super" but instead override the method to add extra arguments
        this._createMethodObserver('_constraintsChanged(required, minlength, maxlength, pattern, min, max, step)');
      }
      /** @private */

    }, {
      key: "_constraintsChanged",
      value: function _constraintsChanged(required, minlength, maxlength, pattern, min, max, step) {
        if (!this.invalid) {
          return;
        }

        var isNumUnset = function isNumUnset(n) {
          return !n && n !== 0;
        };

        if (!isNumUnset(min) || !isNumUnset(max)) {
          this.validate();
        } else {
          babelHelpers.get(babelHelpers.getPrototypeOf(NumberFieldElement.prototype), "_constraintsChanged", this).call(this, required, minlength, maxlength, pattern);
        }
      }
      /** @private */

    }, {
      key: "_decreaseValue",
      value: function _decreaseValue() {
        this._incrementValue(-1);
      }
      /** @private */

    }, {
      key: "_increaseValue",
      value: function _increaseValue() {
        this._incrementValue(1);
      }
      /** @private */

    }, {
      key: "_incrementValue",
      value: function _incrementValue(incr) {
        if (this.disabled || this.readonly) {
          return;
        }

        var value = parseFloat(this.value);

        if (!this.value) {
          if (this.min == 0 && incr < 0 || this.max == 0 && incr > 0 || this.max == 0 && this.min == 0) {
            incr = 0;
            value = 0;
          } else if ((this.max == null || this.max >= 0) && (this.min == null || this.min <= 0)) {
            value = 0;
          } else if (this.min > 0) {
            value = this.min;

            if (this.max < 0 && incr < 0) {
              value = this.max;
            }

            incr = 0;
          } else if (this.max < 0) {
            value = this.max;

            if (incr < 0) {
              incr = 0;
            } else {
              // FIXME(yuriy): find a proper solution to make correct step back
              if (this._getIncrement(1, value - this.step) > this.max) {
                value -= 2 * this.step;
              } else {
                value -= this.step;
              }
            }
          }
        } else if (value < this.min) {
          incr = 0;
          value = this.min;
        } else if (value > this.max) {
          incr = 0;
          value = this.max;
        }

        var newValue = this._getIncrement(incr, value);

        if (!this.value || incr == 0 || this._incrementIsInsideTheLimits(incr, value)) {
          this._setValue(newValue);
        }
      }
      /** @private */

    }, {
      key: "_setValue",
      value: function _setValue(value) {
        this.value = this.inputElement.value = String(parseFloat(value));
        this.dispatchEvent(new CustomEvent('change', {
          bubbles: true
        }));
      }
      /** @private */

    }, {
      key: "_getIncrement",
      value: function _getIncrement(incr, currentValue) {
        var step = this.step || 1,
            min = this.min || 0; // To avoid problems with decimal math, multiplying to operate with integers.

        var multiplier = Math.max(this._getMultiplier(currentValue), this._getMultiplier(step), this._getMultiplier(min));
        step *= multiplier;
        currentValue = Math.round(currentValue * multiplier);
        min *= multiplier;
        var margin = (currentValue - min) % step;

        if (incr > 0) {
          return (currentValue - margin + step) / multiplier;
        } else if (incr < 0) {
          return (currentValue - (margin || step)) / multiplier;
        } else {
          return currentValue / multiplier;
        }
      }
      /** @private */

    }, {
      key: "_getDecimalCount",
      value: function _getDecimalCount(number) {
        var s = String(number);
        var i = s.indexOf('.');
        return i === -1 ? 1 : s.length - i - 1;
      }
      /** @private */

    }, {
      key: "_getMultiplier",
      value: function _getMultiplier(number) {
        if (!isNaN(number)) {
          return Math.pow(10, this._getDecimalCount(number));
        }
      }
      /** @private */

    }, {
      key: "_incrementIsInsideTheLimits",
      value: function _incrementIsInsideTheLimits(incr, value) {
        if (incr < 0) {
          return this.min == null || this._getIncrement(incr, value) >= this.min;
        } else if (incr > 0) {
          return this.max == null || this._getIncrement(incr, value) <= this.max;
        } else {
          return this._getIncrement(incr, value) <= this.max && this._getIncrement(incr, value) >= this.min;
        }
      }
      /** @private */

    }, {
      key: "_allowed",
      value: function _allowed(sign) {
        var incr = sign * (this.step || 1);
        var value = parseFloat(this.value);
        return !this.value || !this.disabled && this._incrementIsInsideTheLimits(incr, value);
      }
      /**
       * @param {number} newVal
       * @param {number | undefined} oldVal
       * @protected
       */

    }, {
      key: "_stepChanged",
      value: function _stepChanged(newVal, oldVal) {
        // Avoid using initial value in validation
        this.__validateByStep = this.__stepChangedCalled || this.getAttribute('step') !== null;
        this.inputElement.step = this.__validateByStep ? newVal : 'any';
        this.__stepChangedCalled = true;
        this.setAttribute('step', newVal);
      }
      /** @private */

    }, {
      key: "_minChanged",
      value: function _minChanged(min) {
        this.inputElement.min = min;
      }
      /** @private */

    }, {
      key: "_maxChanged",
      value: function _maxChanged(max) {
        this.inputElement.max = max;
      }
      /**
       * @param {unknown} newVal
       * @param {unknown} oldVal
       * @protected
       */

    }, {
      key: "_valueChanged",
      value: function _valueChanged(newVal, oldVal) {
        // Validate value to be numeric
        if (newVal && isNaN(parseFloat(newVal))) {
          this.value = '';
        } else if (typeof this.value !== 'string') {
          this.value = String(this.value);
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(NumberFieldElement.prototype), "_valueChanged", this).call(this, this.value, oldVal);
      }
      /**
       * @param {!KeyboardEvent} e
       * @protected
       */

    }, {
      key: "_onKeyDown",
      value: function _onKeyDown(e) {
        if (e.keyCode == 38) {
          e.preventDefault();

          this._increaseValue();
        } else if (e.keyCode == 40) {
          e.preventDefault();

          this._decreaseValue();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(NumberFieldElement.prototype), "_onKeyDown", this).call(this, e);
      }
      /** @private */

    }, {
      key: "__onInputChange",
      value: function __onInputChange() {
        this.validate();
      }
      /**
       * @return {boolean}
       */

    }, {
      key: "checkValidity",
      value: function checkValidity() {
        // text-field mixin does not check against `min`, `max` and `step`
        if (this.min !== undefined || this.max !== undefined || this.__validateByStep) {
          return this.inputElement.checkValidity();
        }

        return babelHelpers.get(babelHelpers.getPrototypeOf(NumberFieldElement.prototype), "checkValidity", this).call(this);
      }
    }], [{
      key: "is",
      get: function get() {
        return 'vaadin-number-field';
      }
    }, {
      key: "version",
      get: function get() {
        return '2.9.2';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Set to true to display value increase/decrease controls.
           * @attr {boolean} has-controls
           * @type {boolean}
           */
          hasControls: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * The minimum value of the field.
           */
          min: {
            type: Number,
            reflectToAttribute: true,
            observer: '_minChanged'
          },

          /**
           * The maximum value of the field.
           */
          max: {
            type: Number,
            reflectToAttribute: true,
            observer: '_maxChanged'
          },

          /**
           * Specifies the allowed number intervals of the field.
           * @type {number}
           */
          step: {
            type: Number,
            value: 1,
            observer: '_stepChanged'
          }
        };
      }
    }, {
      key: "template",
      get: function get() {
        if (!memoizedTemplate) {
          // Clone the superclass template
          memoizedTemplate = babelHelpers.get(babelHelpers.getPrototypeOf(NumberFieldElement), "template", this).cloneNode(true); // Retrieve this element's dom-module template

          var thisTemplate = _domModule.DomModule.import(this.is + '-template', 'template');

          var decreaseButton = thisTemplate.content.querySelector('[part="decrease-button"]');
          var increaseButton = thisTemplate.content.querySelector('[part="increase-button"]');
          var styles = thisTemplate.content.querySelector('style'); // Add the buttons and styles to the text-field template

          var inputField = memoizedTemplate.content.querySelector('[part="input-field"]');
          var prefixSlot = memoizedTemplate.content.querySelector('[name="prefix"]');
          inputField.insertBefore(decreaseButton, prefixSlot);
          inputField.appendChild(increaseButton);
          memoizedTemplate.content.appendChild(styles);
        }

        return memoizedTemplate;
      }
    }]);
    return NumberFieldElement;
  }(_vaadinTextField.TextFieldElement);

  _exports.NumberFieldElement = NumberFieldElement;
  window.customElements.define(NumberFieldElement.is, NumberFieldElement);
});