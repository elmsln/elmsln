define(["exports", "./relative-time.js", "./extended-time-element.js", "./utils.js"], function (_exports, _relativeTime, _extendedTimeElement, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _relativeTime = babelHelpers.interopRequireDefault(_relativeTime);
  _extendedTimeElement = babelHelpers.interopRequireDefault(_extendedTimeElement);

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var RelativeTimeElement = /*#__PURE__*/function (_ExtendedTimeElement) {
    babelHelpers.inherits(RelativeTimeElement, _ExtendedTimeElement);

    var _super = _createSuper(RelativeTimeElement);

    function RelativeTimeElement() {
      babelHelpers.classCallCheck(this, RelativeTimeElement);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(RelativeTimeElement, [{
      key: "getFormattedDate",
      value: function getFormattedDate() {
        var date = this.date;
        if (!date) return;
        return new _relativeTime.default(date, (0, _utils.localeFromElement)(this)).toString();
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        nowElements.push(this);

        if (!updateNowElementsId) {
          updateNowElements();
          updateNowElementsId = window.setInterval(updateNowElements, 60 * 1000);
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(RelativeTimeElement.prototype), "connectedCallback", this).call(this);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var ix = nowElements.indexOf(this);

        if (ix !== -1) {
          nowElements.splice(ix, 1);
        }

        if (!nowElements.length) {
          if (updateNowElementsId) {
            clearInterval(updateNowElementsId);
            updateNowElementsId = null;
          }
        }
      }
    }]);
    return RelativeTimeElement;
  }(_extendedTimeElement.default);

  _exports.default = RelativeTimeElement;
  var nowElements = [];
  var updateNowElementsId;

  function updateNowElements() {
    var time;
    var i;
    var len;

    for (i = 0, len = nowElements.length; i < len; i++) {
      time = nowElements[i];
      time.textContent = time.getFormattedDate() || '';
    }
  }

  if (!window.customElements.get('relative-time')) {
    window.RelativeTimeElement = RelativeTimeElement;
    window.customElements.define('relative-time', RelativeTimeElement);
  }
});