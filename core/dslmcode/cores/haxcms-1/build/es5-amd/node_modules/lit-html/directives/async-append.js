define(["exports", "../directive.js", "./async-replace.js", "../directive-helpers.js"], function (_exports, _directive, _asyncReplace, _directiveHelpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.asyncAppend = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  var c = (0, _directive.directive)( /*#__PURE__*/function (_s) {
    babelHelpers.inherits(_class, _s);

    var _super = _createSuper(_class);

    function _class(r) {
      var _this;

      babelHelpers.classCallCheck(this, _class);
      if (_this = _super.call(this, r), r.type !== _directive.PartType.CHILD) throw Error("asyncAppend can only be used in child expressions");
      return babelHelpers.possibleConstructorReturn(_this);
    }

    babelHelpers.createClass(_class, [{
      key: "update",
      value: function update(r, e) {
        return this._$Ctt = r, babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "update", this).call(this, r, e);
      }
    }, {
      key: "commitValue",
      value: function commitValue(r, e) {
        0 === e && (0, _directiveHelpers.clearPart)(this._$Ctt);
        var s = (0, _directiveHelpers.insertPart)(this._$Ctt);
        (0, _directiveHelpers.setChildPartValue)(s, r);
      }
    }]);
    return _class;
  }(_asyncReplace.AsyncReplaceDirective));
  _exports.asyncAppend = c;
});