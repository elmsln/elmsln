define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/paper-input/paper-input.js", "../../@polymer/iron-input/iron-input.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button.js", "../schema-behaviors/schema-behaviors.js", "../../pdfjs-dist/build/pdf.js", "../../pdfjs-dist/build/pdf.worker.js", "./lib/main.js"], function (_exports, _require, _polymerElement, _paperInput, _ironInput, _simpleIcon, _simpleIcons, _simpleIconButton, _schemaBehaviors, _pdf, _pdfWorker, _main) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PdfElement = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_ac0200b08e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  Polymer element which renders PDF documents. It uses [PDF.js](https://mozilla.github.io/pdf.js/) library behind.
  
  Example:
  
  Minimum configuration:
  ```html
  <pdf-element src="../example.pdf" width=800 height=600></pdf-element>
  ```
  Optionally following parameters could be triggered:
   - `elevation` material elevation;
   - `downloadable` to be able to download document;
   - `show-file-name` to show name of the file in the PDF toolbar.
  
  
   ```html
   <pdf-element src="../example.pdf" elevation="5" downloadable show-file-name width=800 height=600></pdf-element>
   ```
  
  Another awesome feature is dynamically load PDF file. So you can change the `src` attribute of the element and document will be automatically reloaded (checkout the demo):
  
  ```html
  <pdf-element src="[[pdfFile]]" width=800 height=600></pdf-element>
  ```
  
  * @demo demo/index.html
  @hero hero.svg
  */
  var PdfElement = /*#__PURE__*/function (_SchemaBehaviors) {
    babelHelpers.inherits(PdfElement, _SchemaBehaviors);

    var _super = _createSuper(PdfElement);

    function PdfElement() {
      var _this;

      babelHelpers.classCallCheck(this, PdfElement);
      _this = _super.call(this);
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/app-layout/app-toolbar/app-toolbar.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-spinner/paper-spinner.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(PdfElement, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(PdfElement.prototype), "connectedCallback", this).call(this);
        this.src = this.getAttribute("src");

        this._initializeReader();

        if (this.src) this.instance.loadPDF();

        this._setFitWidth();
      }
    }, {
      key: "loadPDF",
      value:
      /*
       * For the first time the pdf is loaded.
       * The inital page is set to 1 and it sets the total Pages
       */
      function loadPDF() {
        if (!this.getAttribute("src")) return;
        this.instance.changePDFSource(this.getAttribute("src"));
        this.currentPage = 1;
        this.totalPages = this.instance.totalPages;
        this.fileName = this.src.split("/").pop();

        this._setFitWidth();

        this.shadowRoot.querySelector("#zoomIcon").icon = "fullscreen";
      }
      /*
       * When a new pdf is selected and loaded, this sets the properties for the switch
       */

    }, {
      key: "attributeChanged",
      value: function attributeChanged(name, type) {
        if (name === "src") {
          if (typeof this.instance == "undefined") this._initializeReader();else {
            this.loadPDF();
            this.changedSideBar = true;
            this.fromChange = true;
            this.sideBar();
          }
        } else if (name === "fitWidth") {
          this._setFitWidth();
        }
      }
    }, {
      key: "_initializeReader",
      value: function _initializeReader() {
        this.instance = new Reader(this);
        if (this.src != null) this.fileName = this.src.split("/").pop();
        this.currentPage = 1;
      }
    }, {
      key: "_setFitWidth",
      value: function _setFitWidth() {
        this.instance.setFitWidth(this.fitWidth);
      }
      /*
       * Is called from zoomIn function to control the zoom in
       */

    }, {
      key: "zoomInOut",
      value: function zoomInOut(step) {
        if (this.instance.currentZoomVal >= 2) {
          this.instance.currentZoomVal = 2;
        } else if (this.instance.currentZoomVal <= 0.1) {
          this.instance.currentZoomVal = 0.1;
        } else {
          this.shadowRoot.querySelector("#zoomIcon").icon = "fullscreen";
          this.instance.zoomInOut(step);
        }
      }
      /*
       * Zoom in to the pdf as long as it is loaded
       */

    }, {
      key: "zoomIn",
      value: function zoomIn() {
        if (this.instance.pdfExists) {
          this.zoomInOut(0.1);
        }
      }
      /*
       * Zoom out of the pdf as long as it is loaded
       */

    }, {
      key: "zoomOut",
      value: function zoomOut() {
        if (this.instance.pdfExists) {
          this.instance.zoomInOut(-0.1);
        }
      }
      /*
       * When the zoom in/out button is selected. Reformats the pdf to the original display
       */

    }, {
      key: "zoomFit",
      value: function zoomFit() {
        if (this.instance.pdfExists) {
          if (this.instance.currentZoomVal == this.instance.widthZoomVal) {
            this.instance.zoomPageFit();
            this.shadowRoot.querySelector("#zoomIcon").icon = "fullscreen";
          } else {
            this.instance.zoomWidthFit();
            this.shadowRoot.querySelector("#zoomIcon").icon = "fullscreen-exit";
          }
        }
      }
      /*
       * Controls the page search functionality.
       * When a number is input it checks to see if it is a valid page
       * If it is valid then it will change the view to that page
       * as well as update the page number
       */

    }, {
      key: "pageNumSearch",
      value: function pageNumSearch() {
        var page = parseInt(this.shadowRoot.querySelector("#input").value);

        if (1 <= page && page <= this.instance.totalPagesNum) {
          this.instance.currentPage = page;
          this.instance.queueRenderPage(this.instance.currentPage);
          this.currentPage = page;
          this.shadowRoot.querySelector("#input").blur();
        } else {
          this.shadowRoot.querySelector("#input").value = this.currentPage;
          this.shadowRoot.querySelector("#input").blur();
        }
      }
      /*
       * Is called when a page is selected from the sidebar
       * Checks to make sure a valid page is selected, then changes the page
       * The currentInstance is passed in to make sure it is changing the proper pdf if multiple are loaded
       */

    }, {
      key: "sideBarClick",
      value: function sideBarClick(page, currentInstance, currentThis) {
        //this.instance = currentInstance;
        var parsedFileName = currentThis.src.split("/").pop();
        var self = currentInstance;
        currentThis.sidebarOpen = true;

        if (1 <= page && page <= currentInstance.totalPagesNum) {
          self.currentPage = page;
          self.queueRenderPage(self.currentPage);
          currentInstance.currentPage = page;
          currentThis.currentPage = page;
          this.shadowRoot.querySelector("#input").blur();
        } else {
          this.shadowRoot.querySelector("#input").value = self.currentPage;
          this.shadowRoot.querySelector("#input").blur();
        }
      }
      /*
       * Is called to show the previous page and update page number
       */

    }, {
      key: "showPrev",
      value: function showPrev() {
        if (1 < this.instance.currentPage) {
          this.instance.currentPage--;
          this.instance.queueRenderPage(this.instance.currentPage);
          this.currentPage--;
        }
      }
      /*
       * Is called to show the next page and update page number
       */

    }, {
      key: "showNext",
      value: function showNext() {
        if (this.instance.totalPagesNum > this.instance.currentPage) {
          this.instance.currentPage++;
          this.instance.queueRenderPage(this.instance.currentPage);
          this.currentPage++;
        }
      }
      /*
       * The sidebar is a scrollable bar on the side of the page that allows you to scroll and select a page to change to
       * Checks if the pdf loaded changed
       * Then checks if the sidebar is open or not
       * If it is open, close. Else open sidebar. Set sidebarOpen to either T or F
       */

    }, {
      key: "sideBar",
      value: function sideBar() {
        if (this.instance.pdfExists) {
          if (!this.fromChange) {
            this.shadowRoot.querySelector("#container").style.height = this.shadowRoot.querySelector("#test").style.height;
            this.shadowRoot.querySelector("#container").style.width = this.shadowRoot.querySelector("#test").style.width;

            if (this.shadowRoot.querySelector("#main").style.marginLeft == "25%") {
              this.sidebarOpen = false;
              this.instance.setViewportPos(false);
              this.shadowRoot.querySelector("#main").style.marginLeft = "0%";
              this.shadowRoot.querySelector("#container").style.marginLeft = "-25%";
              this.shadowRoot.querySelector("#container").style.visibility = "hidden";
            } else {
              this.sidebarOpen = true;
              this.shadowRoot.querySelector("#main").style.marginLeft = "25%";
              this.shadowRoot.querySelector("#container").style.marginLeft = "0%";
              this.shadowRoot.querySelector("#container").style.visibility = "visible";
              this.instance.setViewportPos(true);
            }
          }

          this.fromChange = false;
          this.instance.sidebarSetup(this);
          this.changedSideBar = false;
        }
      }
      /*
       * Is called when the download pdf button is selected
       */

    }, {
      key: "download",
      value: function download() {
        if (this.instance.pdfExists) {
          this.instance.download();
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_ac0200b08e0011ed99ce491205e67b1d || (_templateObject_ac0200b08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          width: 100%;\n          height: 100%;\n        }\n\n        app-toolbar.pdf-toolbar {\n          --app-toolbar-background: #323639;\n        }\n\n        .pdf-viewer {\n          text-align: center;\n          border: 1px solid #4d4d4d;\n        }\n\n        .pdf-viewport-out {\n          overflow: auto;\n          background-color: #525659;\n          position: relative;\n          width: 100%;\n          height: 100%;\n        }\n\n        .pdf-viewport {\n          display: block;\n          position: relative;\n          border: 1px solid #eeeeee;\n          transition: all 200ms ease-in-out;\n          width: 100%;\n          height: 100%;\n        }\n\n        .sidebar {\n          background-color: gray;\n          float: left;\n          height: 0px;\n          overflow: scroll;\n          margin-left: -25%;\n          visibility: hidden;\n        }\n\n        .main {\n          margin-left: 0%;\n        }\n\n        .pageselector {\n          width: 3ch;\n          background-color: black;\n          font-size: 17px;\n          background-color: transparent;\n          border: 0px solid;\n        }\n\n        .pageselector:focus {\n          outline: none;\n        }\n\n        #input {\n          -webkit-margin-start: -3px;\n          color: #fff;\n          line-height: 18px;\n          padding: 3px;\n          text-align: end;\n        }\n\n        #input:focus,\n        #input:hover {\n          background-color: rgba(0, 0, 0, 0.5);\n          border-radius: 2px;\n        }\n\n        #slash {\n          padding: 0 3px;\n        }\n\n        paper-spinner {\n          position: absolute;\n          left: 50%;\n        }\n\n        .textLayer {\n          transition: all 200ms ease-in-out;\n        }\n\n        .positionRelative {\n          position: relative;\n        }\n      </style>\n\n      <paper-material elevation=\"{{elevation}}\">\n        <div class=\"card-content\" style=\"width: {{width}}px\">\n          <div class=\"card paperCard\" style=\"width: {{width}}px\">\n            <div class=\"pdf-viewer\">\n              <app-toolbar class=\"pdf-toolbar\">\n                <simple-icon-button\n                  icon=\"menu\"\n                  on-click=\"sideBar\"\n                ></simple-icon-button>\n                <simple-icon-button\n                  icon=\"arrow-back\"\n                  on-click=\"showPrev\"\n                ></simple-icon-button>\n                <input\n                  class=\"pageselector\"\n                  id=\"input\"\n                  is=\"iron-input\"\n                  value=\"{{currentPage}}\"\n                  prevent-invalid-input=\"\"\n                  allowed-pattern=\"\\d\"\n                  on-change=\"pageNumSearch\"\n                />\n                <span id=\"slash\">/</span><span id=\"totalPages\"></span>\n                <simple-icon-button\n                  icon=\"arrow-forward\"\n                  on-click=\"showNext\"\n                ></simple-icon-button>\n                <span class=\"title\" hidden=\"{{!showFileName}}\">Testing</span>\n                <span class=\"title\" hidden=\"{{showFileName}}\"></span>\n                <span class=\"pageRendering\"></span>\n                <simple-icon-button\n                  icon=\"zoom-in\"\n                  on-click=\"zoomIn\"\n                ></simple-icon-button>\n                <simple-icon-button\n                  icon=\"zoom-out\"\n                  on-click=\"zoomOut\"\n                ></simple-icon-button>\n                <simple-icon-button\n                  id=\"zoomIcon\"\n                  icon=\"fullscreen\"\n                  on-click=\"zoomFit\"\n                ></simple-icon-button>\n                <simple-icon-button\n                  icon=\"file-download\"\n                  hidden$=\"{{!downloadable}}\"\n                  on-click=\"download\"\n                ></simple-icon-button>\n              </app-toolbar>\n              <div id=\"container\" class=\"sidebar\" style=\"width:25%\"></div>\n              <div id=\"main\">\n                <div id=\"test\" class=\"pdf-viewport-out\">\n                  <canvas class=\"pdf-viewport\"></canvas>\n                  <div\n                    id=\"text-layer\"\n                    class=\"textLayer\"\n                    hidden$=\"{{!enableTextSelection}}\"\n                  ></div>\n                </div>\n                <paper-spinner\n                  class=\"spinner\"\n                  hidden$=\"{{!showSpinner}}\"\n                ></paper-spinner>\n              </div>\n            </div>\n          </div>\n        </div>\n      </paper-material>\n    "], ["\n      <style>\n        :host {\n          display: block;\n          width: 100%;\n          height: 100%;\n        }\n\n        app-toolbar.pdf-toolbar {\n          --app-toolbar-background: #323639;\n        }\n\n        .pdf-viewer {\n          text-align: center;\n          border: 1px solid #4d4d4d;\n        }\n\n        .pdf-viewport-out {\n          overflow: auto;\n          background-color: #525659;\n          position: relative;\n          width: 100%;\n          height: 100%;\n        }\n\n        .pdf-viewport {\n          display: block;\n          position: relative;\n          border: 1px solid #eeeeee;\n          transition: all 200ms ease-in-out;\n          width: 100%;\n          height: 100%;\n        }\n\n        .sidebar {\n          background-color: gray;\n          float: left;\n          height: 0px;\n          overflow: scroll;\n          margin-left: -25%;\n          visibility: hidden;\n        }\n\n        .main {\n          margin-left: 0%;\n        }\n\n        .pageselector {\n          width: 3ch;\n          background-color: black;\n          font-size: 17px;\n          background-color: transparent;\n          border: 0px solid;\n        }\n\n        .pageselector:focus {\n          outline: none;\n        }\n\n        #input {\n          -webkit-margin-start: -3px;\n          color: #fff;\n          line-height: 18px;\n          padding: 3px;\n          text-align: end;\n        }\n\n        #input:focus,\n        #input:hover {\n          background-color: rgba(0, 0, 0, 0.5);\n          border-radius: 2px;\n        }\n\n        #slash {\n          padding: 0 3px;\n        }\n\n        paper-spinner {\n          position: absolute;\n          left: 50%;\n        }\n\n        .textLayer {\n          transition: all 200ms ease-in-out;\n        }\n\n        .positionRelative {\n          position: relative;\n        }\n      </style>\n\n      <paper-material elevation=\"{{elevation}}\">\n        <div class=\"card-content\" style=\"width: {{width}}px\">\n          <div class=\"card paperCard\" style=\"width: {{width}}px\">\n            <div class=\"pdf-viewer\">\n              <app-toolbar class=\"pdf-toolbar\">\n                <simple-icon-button\n                  icon=\"menu\"\n                  on-click=\"sideBar\"\n                ></simple-icon-button>\n                <simple-icon-button\n                  icon=\"arrow-back\"\n                  on-click=\"showPrev\"\n                ></simple-icon-button>\n                <input\n                  class=\"pageselector\"\n                  id=\"input\"\n                  is=\"iron-input\"\n                  value=\"{{currentPage}}\"\n                  prevent-invalid-input=\"\"\n                  allowed-pattern=\"\\\\d\"\n                  on-change=\"pageNumSearch\"\n                />\n                <span id=\"slash\">/</span><span id=\"totalPages\"></span>\n                <simple-icon-button\n                  icon=\"arrow-forward\"\n                  on-click=\"showNext\"\n                ></simple-icon-button>\n                <span class=\"title\" hidden=\"{{!showFileName}}\">Testing</span>\n                <span class=\"title\" hidden=\"{{showFileName}}\"></span>\n                <span class=\"pageRendering\"></span>\n                <simple-icon-button\n                  icon=\"zoom-in\"\n                  on-click=\"zoomIn\"\n                ></simple-icon-button>\n                <simple-icon-button\n                  icon=\"zoom-out\"\n                  on-click=\"zoomOut\"\n                ></simple-icon-button>\n                <simple-icon-button\n                  id=\"zoomIcon\"\n                  icon=\"fullscreen\"\n                  on-click=\"zoomFit\"\n                ></simple-icon-button>\n                <simple-icon-button\n                  icon=\"file-download\"\n                  hidden$=\"{{!downloadable}}\"\n                  on-click=\"download\"\n                ></simple-icon-button>\n              </app-toolbar>\n              <div id=\"container\" class=\"sidebar\" style=\"width:25%\"></div>\n              <div id=\"main\">\n                <div id=\"test\" class=\"pdf-viewport-out\">\n                  <canvas class=\"pdf-viewport\"></canvas>\n                  <div\n                    id=\"text-layer\"\n                    class=\"textLayer\"\n                    hidden$=\"{{!enableTextSelection}}\"\n                  ></div>\n                </div>\n                <paper-spinner\n                  class=\"spinner\"\n                  hidden$=\"{{!showSpinner}}\"\n                ></paper-spinner>\n              </div>\n            </div>\n          </div>\n        </div>\n      </paper-material>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "pdf-element";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(PdfElement), "properties", this)), {}, {
          /**
           * Source of a PDF file.
           */
          src: {
            type: String,
            reflectToAttribute: true
          },

          /**
           * The z-depth of this element, from 0-5. Setting to 0 will remove the shadow, and each increasing number greater than 0 will be "deeper" than the last.
           */
          elevation: {
            type: Number,
            value: 1
          },

          /**
           * If provided then download icon will appear on the toolbar to download file.
           */
          downloadable: {
            type: Boolean,
            value: false
          },

          /**
           * If provided then file name will be shown on the toolbar.
           */
          showFileName: {
            type: Boolean,
            value: false
          },

          /*
           * If provided then during page rendering loading spinner will be shown.
           * Maybe used for documents with many images for example.
           */
          showSpinner: {
            type: Boolean,
            value: false
          },

          /*
           * If provided then text selection will be enabled.
           */
          enableTextSelection: {
            type: Boolean,
            value: false
          },

          /*
           * If provided then the document will be zoomed to maximum width initially.
           */
          fitWidth: {
            type: Boolean,
            value: false
          },

          /*
           * If provided then the width will be set.
           */
          width: {
            type: Number,
            value: 500
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "PDF viewer",
            descrption: "This can nicely present a PDF in a standard inplace, cross browser way.",
            icon: "image:picture-as-pdf",
            color: "red",
            groups: ["Presentation", "PDF", "Data"],
            handles: [{
              type: "pdf",
              url: "src",
              source: "src"
            }, {
              type: "document",
              url: "src",
              source: "src"
            }],
            meta: {
              author: "HAXTheWeb core team"
            }
          },
          settings: {
            configure: [{
              property: "src",
              title: "Source",
              description: "The URL for this csv file",
              inputMethod: "textfield",
              icon: "link",
              required: true
            }, {
              property: "downloadable",
              title: "Downloadable",
              description: "User can download this",
              inputMethod: "boolean",
              icon: "file-download"
            }, {
              property: "enableTextSelection",
              title: "Text Selection",
              description: "User can select text in this element.",
              inputMethod: "boolean",
              icon: "file-download"
            }, {
              property: "elevation",
              title: "Elevation",
              description: "Visual elevation of the element",
              inputMethod: "number",
              icon: "flip-to-front"
            }],
            advanced: []
          }
        };
      }
    }]);
    return PdfElement;
  }((0, _schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement));

  _exports.PdfElement = PdfElement;
  customElements.define(PdfElement.tag, PdfElement);
});