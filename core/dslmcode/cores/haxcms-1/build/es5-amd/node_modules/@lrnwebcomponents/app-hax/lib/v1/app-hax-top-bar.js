define(["exports", "../../../../lit/index.js", "./app-hax-wired-toggle.js", "../../../simple-popover/lib/SimpleTourFinder.js"], function (_exports, _index, _appHaxWiredToggle, _SimpleTourFinder) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxTopBar = void 0;

  var _templateObject_ae486e408e0011ed99ce491205e67b1d, _templateObject2_ae486e408e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // top bar of the UI
  var AppHaxTopBar = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(AppHaxTopBar, _LitElement);

    var _super = _createSuper(AppHaxTopBar);

    function AppHaxTopBar() {
      babelHelpers.classCallCheck(this, AppHaxTopBar);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(AppHaxTopBar, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_ae486e408e0011ed99ce491205e67b1d || (_templateObject_ae486e408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"topBar\" part=\"top-bar\">\n        <div class=\"left\" part=\"left\">\n          <slot name=\"left\"></slot>\n        </div>\n        <div class=\"center\" part=\"center\">\n          <slot name=\"center\"></slot>\n        </div>\n        <div class=\"right\" part=\"right\">\n          <slot name=\"right\"></slot>\n        </div>\n      </div>\n    "])));
      }
    }], [{
      key: "tag",
      get: // a convention I enjoy so you can change the tag name in 1 place
      function get() {
        return "app-hax-top-bar";
      } // constructor() {
      //   super();
      // }
      // static get properties() {
      //   return {
      //   };
      // }

    }, {
      key: "styles",
      get: function get() {
        return (0, _index.css)(_templateObject2_ae486e408e0011ed99ce491205e67b1d || (_templateObject2_ae486e408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      :host {\n        --bg-color: var(--app-hax-background-color);\n        --accent-color: var(--app-hax-accent-color);\n        --top-bar-height: 48px;\n        display: block;\n        height: var(--top-bar-height);\n      }\n\n      /* @media (prefers-color-scheme: dark) {\n        :root {\n          --accent-color: white;\n          color: var(--accent-color);\n          \n        }\n\n        :host {\n          background-color: black;\n        } \n      } */\n\n      .topBar {\n        overflow: hidden;\n        background-color: var(--bg-color);\n        color: var(--accent-color);\n        height: var(--top-bar-height);\n        text-align: center;\n        vertical-align: middle;\n        border-bottom: 3px solid var(--app-hax-accent-color);\n        display: grid;\n        grid-template-columns: 32.5% 35% 32.5%;\n      }\n\n      /* .topBar > div {\n        background-color: rgba(255, 255, 255, 0.8);\n        border: 1px solid black;\n      } */\n\n      .topBar .left {\n        text-align: left;\n        height: var(--top-bar-height);\n        vertical-align: text-top;\n      }\n\n      .topBar .center {\n        text-align: center;\n        height: var(--top-bar-height);\n        vertical-align: text-top;\n      }\n\n      .topBar .right {\n        text-align: right;\n        height: var(--top-bar-height);\n        vertical-align: text-top;\n      }\n    "])));
      }
    }]);
    return AppHaxTopBar;
  }(_index.LitElement);

  _exports.AppHaxTopBar = AppHaxTopBar;
  customElements.define(AppHaxTopBar.tag, AppHaxTopBar);
});