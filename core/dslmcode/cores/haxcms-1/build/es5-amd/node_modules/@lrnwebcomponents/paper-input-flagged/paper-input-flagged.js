define(["exports", "../../lit/index.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-tooltip/simple-tooltip.js", "../simple-fields/lib/simple-fields-field.js"], function (_exports, _index, _simpleIcon, _simpleIcons, _simpleTooltip, _simpleFieldsField) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PaperInputFlagged = void 0;

  var _templateObject_abf137d08e0011ed99ce491205e67b1d, _templateObject2_abf137d08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  `paper-input-flagged`
  A LRN element
  
  * @demo demo/index.html
  
  @microcopy - the mental model for this element
   - flagged - a piece of content with a status message indicating there's an issue with the input by the user. This isn't formal validation but more of feedback or suggestions about what they are entering. The default is feedback for alt metadata, useful for images.
  */
  var PaperInputFlagged = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(PaperInputFlagged, _LitElement);

    var _super = _createSuper(PaperInputFlagged);

    function PaperInputFlagged() {
      var _this;

      babelHelpers.classCallCheck(this, PaperInputFlagged);
      _this = _super.call(this);
      _this.disabled = false;
      _this.label = "";
      _this.value = "";
      _this.inputSuccess = {
        message: "You passed our simple accessibility checks.",
        status: "info"
      };
      _this.flaggedInput = [{
        match: null,
        message: "Alt data is required for everything except decoration images.",
        status: "notice"
      }, {
        match: "image",
        message: "Screenreaders will say the word image, don't put it in the descriptive text",
        status: "error"
      }, {
        match: "photo",
        message: "Screenreaders will say the word image, don't put photo in the descriptive text",
        status: "error"
      }, {
        match: "picture",
        message: "Screenreaders will say the word image, don't put picture in the descriptive text",
        status: "error"
      }, {
        match: 3,
        message: "Description not effective enough. This should be at least a sentance about what the image is.",
        status: "error"
      }, {
        match: 10,
        message: "Make sure your alt text is descriptive enough for those that can't see the media.",
        status: "warning"
      }];
      return _this;
    }

    babelHelpers.createClass(PaperInputFlagged, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          var notifiedProps = ["value"];

          if (notifiedProps.includes(propName)) {
            // notify
            var eventName = "".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), "-changed");

            _this2.dispatchEvent(new CustomEvent(eventName, {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (propName == "status") {
            _this2.icon = _this2._iconFromStatus(_this2.status);
          }

          if (propName == "flaggedInput" || propName == "value") {
            _this2.status = _this2.testStatus(_this2.flaggedInput, _this2.value);
          }
        });
      }
    }, {
      key: "valueEvent",
      value: function valueEvent(e) {
        this.value = e.detail.value;
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_abf137d08e0011ed99ce491205e67b1d || (_templateObject_abf137d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <simple-fields-field\n        label=\"", "\"\n        value=\"", "\"\n        @value-changed=\"", "\"\n        ?char-counter=\"", "\"\n        ?disabled=\"", "\"\n        minlength=\"", "\"\n        maxlength=\"", "\"\n      >\n        <simple-icon id=\"icon\" icon=\"", "\" slot=\"prefix\"></simple-icon>\n      </simple-fields-field>\n      <div class=\"element-invisible\">", "</div>\n      <simple-tooltip\n        for=\"icon\"\n        position=\"top\"\n        offset=\"20\"\n        fit-to-visible-bounds\n      >\n        ", "\n      </simple-tooltip>\n    "])), this.label, this.value, this.valueEvent, this.charCounter, this.disabled, this.minlength, this.maxlength, this.icon, this.__activeMessage, this.__activeMessage);
      }
    }, {
      key: "testStatus",
      value:
      /**
       * testStatus based on current input
       */
      function testStatus(test, value) {
        for (var i in test) {
          // special case for null if testing empty
          if (test[i].match === null && (value === "" || value === null)) {
            this.__activeMessage = test[i].message;
            return test[i].status;
          } else if (!isNaN(test[i].match) && value.split(/\s+/g).length < parseInt(test[i].match)) {
            this.__activeMessage = test[i].message;
            return test[i].status;
          } // see if we match on a piece of the rest of it
          else if (value.toLowerCase().includes(test[i].match)) {
              this.__activeMessage = test[i].message;
              return test[i].status;
            }
        } // if we beat all the test then display some nominal woo msg


        this.__activeMessage = this.inputSuccess.message;
        return this.inputSuccess.status;
      }
      /**
       * Compute icon from status
       */

    }, {
      key: "_iconFromStatus",
      value: function _iconFromStatus(status) {
        switch (status) {
          case "error":
            return "icons:error";
            break;

          case "warning":
          case "notice":
            return "icons:warning";
            break;

          case "info":
            return "icons:info-outline";
            break;

          default:
            return "icons:info";
            break;
        }
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject2_abf137d08e0011ed99ce491205e67b1d || (_templateObject2_abf137d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        simple-icon {\n          transition: 0.6s all ease-in;\n          width: 24px;\n          height: 24px;\n          margin-right: 4px;\n        }\n        simple-tooltip {\n          --simple-tooltip-delay-in: 100;\n          font-size: 11px;\n        }\n        #icon {\n          color: var(--paper-grey-400);\n          background-color: transparent;\n        }\n        :host([status=\"info\"]) #icon {\n          color: var(--paper-green-400);\n        }\n        :host([status=\"notice\"]) #icon {\n          color: var(--paper-grey-400);\n        }\n        :host([status=\"warning\"]) #icon {\n          color: var(--paper-yellow-700);\n        }\n        :host([status=\"error\"]) #icon {\n          color: var(--paper-red-900);\n        }\n        .element-invisible {\n          position: absolute !important;\n          clip: rect(1px, 1px, 1px, 1px);\n          overflow: hidden;\n          height: 1px;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "paper-input-flagged";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          label: {
            type: String
          },
          disabled: {
            type: Boolean
          },

          /**
           * Icon based on status
           */
          icon: {
            type: String
          },
          maxlength: {
            type: Number
          },
          minlength: {
            type: Number
          },

          /**
           * Status based on test for flagged words
           */
          status: {
            type: String,
            reflect: true
          },

          /**
           * value
           */
          value: {
            type: String
          },

          /**
           * Input to trap and offer feedback about.
           */
          flaggedInput: {
            type: Array,
            attribute: "flagged-input"
          },

          /**
           * Passed tests / success data.
           */
          inputSuccess: {
            type: Object,
            attribute: "input-success"
          },
          __activeMessage: {
            type: String
          }
        };
      }
    }]);
    return PaperInputFlagged;
  }(_index.LitElement);

  _exports.PaperInputFlagged = PaperInputFlagged;
  customElements.define(PaperInputFlagged.tag, PaperInputFlagged);
});