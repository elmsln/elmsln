define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../../@polymer/polymer/lib/utils/async.js", "../../../../@polymer/iron-icons/iron-icons.js", "../../../../@polymer/iron-icons/hardware-icons.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-button.js", "../../../hax-iconset/lib/simple-hax-iconset.js", "../../../../@polymer/paper-styles/color.js", "../../../simple-tooltip/simple-tooltip.js", "../../../../@polymer/app-route/app-location.js", "../../../../@polymer/app-route/app-route.js", "../../../grid-plate/grid-plate.js", "../../../responsive-grid/lib/responsive-grid-row.js", "../../../responsive-grid/lib/responsive-grid-col.js", "../../../materializecss-styles/materializecss-styles.js", "../../../simple-modal/simple-modal.js", "../elmsln-base-deps.js", "../../../utils/utils.js"], function (_exports, _polymerElement, _polymerDom, _async, _ironIcons, _hardwareIcons, _ironAjax, _simpleIcon, _simpleIcons, _simpleIconButton, _simpleHaxIconset, _color, _simpleTooltip, _appLocation, _appRoute, _gridPlate, _responsiveGridRow, _responsiveGridCol, _materializecssStyles, _simpleModal, _elmslnBaseDeps, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MoocContent = void 0;

  var _templateObject_eb2136808e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrnapp-book`
   * A LRN element
   *
   * @demo demo/index.html
   * @microcopy
   * - node / circle - A progress circle on the line
   * - nodes / items - the list of items in the progress bar
   * - bubble - reserved for when events fire out of an element or value is tracking events
   * - percentage - amount complete either in the bar or the nodes themselves
   * - bar - the underlayed bar that's tracking overall progression
   * - author mode - authoring mode
   */
  var MoocContent = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(MoocContent, _PolymerElement);

    var _super = _createSuper(MoocContent);

    function MoocContent() {
      babelHelpers.classCallCheck(this, MoocContent);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(MoocContent, [{
      key: "lastErrorChanged",
      value:
      /**
       * Handle the last error rolling in
       */
      function lastErrorChanged(e) {
        if (e.detail.value) {
          console.error(e);
          var target = (0, _utils.normalizeEventPath)(e)[0]; // check for JWT needing refreshed vs busted but must be 403

          switch (parseInt(e.detail.value.status)) {
            // cookie data not found, need to go get it
            // @notice this currently isn't possible but we could modify
            // the backend in the future to support throwing 401s dynamically
            // if we KNOW an event must expire the timing token
            case 401:
            case 401:
              // we know what the "target" is as an iron-ajax tag
              // so we know what call was just attempted. Let's await
              // a fetch against the top level site landing page with
              // no-cors will force a hit against the backend to refresh
              // the PHP session / bounce back from Azure as needed
              // so that when we reissue this call it'll go through (magically)
              fetch(window.Drupal.settings.basePath, {
                mode: "no-cors"
              }).then(function (e) {
                console.log(e); // delay just to be sure

                setTimeout(function () {
                  target.generateRequest();
                }, 250);
              });
              break;
          }
        }
      }
    }, {
      key: "_modalTap",
      value:
      /**
       * Ensure modal is closed on tap of an item.
       */
      function _modalTap(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var local = normalizedEvent.localTarget; // verify that it is a button√ü

        if (local.tagName === "LRNSYS-BUTTON") {
          if (this.activeNodeItem != null) {
            this.activeNodeItem.classList.remove("book-menu-item-active");
          }

          this.activeNodeItem = local;
          this.activeNodeItem.classList.add("book-menu-item-active");
          this.$.outlinepopover.toggleDialog();
        }
      }
      /**
       * Notice loading state has changed.
       */

    }, {
      key: "_contentLoading",
      value: function _contentLoading(newValue, oldValue) {
        var _this = this;

        if ((typeof newValue === "undefined" ? "undefined" : babelHelpers.typeof(newValue)) !== (typeof undefined === "undefined" ? "undefined" : typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !newValue) {
          setTimeout(function () {
            _this.loading = false;

            _this._resetScroll("anchor");

            _this.$["main-content"].focus();
          }, 500);
        } else {
          this.loading = true;
        }
      }
      /**
       * Callback to push the data into the page.
       */

    }, {
      key: "handleResponse",
      value: function handleResponse(e) {
        // handle the HTML we just got
        if (babelHelpers.typeof(this.pageData.data) !== (typeof undefined === "undefined" ? "undefined" : typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          var data = this.pageData.data; // test for advanced ops

          if (babelHelpers.typeof(data.ops.redirect) !== (typeof undefined === "undefined" ? "undefined" : typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.set("route.path", data.ops.redirect);

            this._routeChanged(this.data, this.route, this.endPoint);
          } else {
            this.outlineTitle = data.bookOutline.subject;
            this.$.content.innerHTML = data.content;
            this.$.navigation.innerHTML = data.topNavigation;
            this.$.outline.innerHTML = data.bookOutline.content;
            this.$.options.innerHTML = data.options; // inject styles, destroying previous ones

            this.__injectStyle(data.styles); // fire drupal behaviors.. this is evil. Polymer is invoking Drupal behaviors..


            if (window.Drupal) {
              window.Drupal.attachBehaviors(document, window.Drupal.settings);
            }

            if (window.WCAutoload) {
              window.WCAutoload.process();
            } // first time this fires let's get the outline block in the background


            if (babelHelpers.typeof(this.outlineData.data) === (typeof undefined === "undefined" ? "undefined" : typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              this.$.fulloutlinepath.generateRequest();
            }

            _async.microTask.run(function () {
              window.dispatchEvent(new Event("resize"));
            });
          }
        }
      }
      /**
       * Callback to push the data into the page.
       */

    }, {
      key: "handleOutlineResponse",
      value: function handleOutlineResponse(e) {
        // handle the HTML we just got
        var data = this.outlineData.data;

        if ((typeof data === "undefined" ? "undefined" : babelHelpers.typeof(data)) !== (typeof undefined === "undefined" ? "undefined" : typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.$.outlinemodal.innerHTML = data.outline;
          this.aliases = data.aliases;
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(MoocContent.prototype), "connectedCallback", this).call(this);

        if (window.Drupal) {
          window.Drupal.attachBehaviors(document, window.Drupal.settings);
        }
      }
      /**
       * If the current route is outside the scope of our app then allow
       * the website to break out of the single page application routing.
       *
       * This is really critical that we get happy paths that don't trigger a redirec
       * loop so some of the logic will seem a bit repetative but we're trying to trap
       * may different potentially valid addresses / use-cases which still must trigger
       * a reload within the app (without looping) and still allow outbound links to go
       * through as they should.
       */

    }, {
      key: "_routeChanged",
      value: function _routeChanged(data, route, endPoint) {
        if (typeof route.path === "string") {
          // target for url alias that might be delivered into content
          // and menu items throughout the UI
          var urlAlias = route.path.replace("/" + this.elmslnCourse + "/", "");

          if (route.path.startsWith("/" + this.elmslnCourse + "/node/")) {
            // ensure we dont end with a slash
            var routePath = route.path;

            if (routePath.endsWith("/")) {
              routePath = routePath.substring(0, routePath.length - 1);
            }

            var tmp = routePath.split("/"); // ensure this is a number so we know what we're doing

            if (!isNaN(parseFloat(tmp[tmp.length - 1])) && isFinite(tmp[tmp.length - 1])) {
              this.nid = tmp[tmp.length - 1]; // trigger change if data location changed

              this.requestParams.node = this.nid; // send request out the door to the actual end point

              this.$.pageajax.generateRequest(); // if open, close this

              if (this.__modal && this.__modal.opened) {
                window.dispatchEvent(new CustomEvent("simple-modal-hide", {
                  bubbles: true,
                  cancelable: true,
                  detail: {}
                }));
              }

              return;
            } else if (tmp[tmp.length - 1] == "edit") {
              window.location.reload();
            }
          } // test for an node alias, then send off
          else if (this.aliases && urlAlias && this.aliases[urlAlias]) {
              this.nid = this.aliases[urlAlias].replace("node/", ""); // trigger change if data location changed

              this.requestParams.node = this.nid;
              this.$.pageajax.generateRequest(); // if this is open, close it

              if (this.__modal && this.__modal.opened) {
                window.dispatchEvent(new CustomEvent("simple-modal-hide", {
                  bubbles: true,
                  cancelable: true,
                  detail: {}
                }));
              }

              return;
            } // implies front page on first load, so fix that
            else if (urlAlias == "") {
                this.requestParams.node = this.nid; // ensure that we don't see this again

                this.set("route.path", "/" + this.elmslnCourse + "/node/" + this.nid);
                this.$.pageajax.generateRequest();
                return;
              }
        } // ensure nothing went super wrong which may be leading to a busted site
        // so we can avoid an infinite loop


        if (this.elmslnCourse != "") {
          // reload the page which since route changed will load that page
          window.location.reload();
        }
      }
    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(MoocContent.prototype), "ready", this).call(this);
        this.__modal = window.SimpleModal.requestAvailability();
      }
      /**
       * Reset scroll position visually and internally data wise.
       */

    }, {
      key: "_resetScroll",
      value: function _resetScroll() {
        var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "anchor";
        this.resetScroll = true;
        this.$[item].scrollIntoView({
          block: "nearest",
          behavior: "smooth"
        });
      }
      /**
       * Simple way to convert from object to array.
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
      /**
       * Inject styles dynamically from inline CSS blocks.
       * This is a function and capability that will drive Potter nuts.
       * Because of this we're using the unheard of ___ convention. This
       * means that it's such a private function that we wish we'd never
       * actually have thought of it. Fortunately, it came from a stackoverflow
       * article so we don't have to take credit for our own undoing with
       * what this enables.
       */

    }, {
      key: "__injectStyle",
      value: function __injectStyle(style) {
        // target and wipe our id area by force
        if (this.$.hackycsspotterhates != null) {
          (0, _polymerDom.dom)(this.$.hackycontainer).innerHTML = "";
        } // construct a new style tag and inject it overtop of what was there previously


        var customStyle = document.createElement("style", "custom-style");
        customStyle.id = "hackycsspotterhates"; // inject our styles

        customStyle.textContent = style; // we have now successfully ruined something encapsulated and once beautiful

        (0, _polymerDom.dom)(this.$.hackycontainer).appendChild(customStyle);
      }
      /**
       * highjack shadowDom
       */

    }, {
      key: "_attachDom",
      value: function _attachDom(dom) {
        this.appendChild(dom);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_eb2136808e0011ed99ce491205e67b1d || (_templateObject_eb2136808e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    <style include=\"materializecss-styles\">\n      :host {\n        display: block;\n        font-size: 16px;\n        box-sizing: content-box;\n      }\n      #content[data-loading] {\n        opacity: .2 !important;\n        pointer-events: none;\n      }\n      #content {\n        opacity: 1;\n        visibility: visible;\n        transition: all .4s ease;\n      }\n      #block-mooc-nav-block-mooc-nav-nav {\n        z-index: 1;\n      }\n    </style>\n    <div id=\"hackycontainer\"><style id=\"hackycsspotterhates\"></style></div>\n    <iron-ajax\n      reject-with-request\n      on-last-error-changed=\"lastErrorChanged\"\n      id=\"fulloutlinepath\"\n      url=\"[[fullOutlinePath]]\"\n      handle-as=\"json\"\n      on-response=\"handleOutlineResponse\"\n      last-response=\"{{outlineData}}\"></iron-ajax>\n    <iron-ajax\n      reject-with-request\n      on-last-error-changed=\"lastErrorChanged\"\n      id=\"pageajax\"\n      params=\"[[requestParams]]\"\n      url=\"[[sourcePath]]\"\n      handle-as=\"json\"\n      on-response=\"handleResponse\"\n      last-response=\"{{pageData}}\"\n      loading=\"{{_loading}}\"></iron-ajax>\n    <app-location route=\"{{route}}\" query-params=\"{{queryParams}}\"></app-location>\n    <app-route\n      route=\"{{route}}\"\n      pattern=\"[[endPoint]]/:type/:id\"\n      data=\"{{data}}\"\n      tail=\"{{tail}}\"\n      query-params=\"{{queryParams}}\">\n    </app-route>\n    <main id=\"etb-tool-nav\" data-offcanvas=\"\">\n      <div id=\"anchor\"></div>\n      <div class=\"inner-wrap\">\n        <section class=\"main-section etb-book\" style=\"min-height: 318px;\">\n          <h2 class=\"element-invisible\">Content navigation</h2>\n          <div class=\"r-header row\">\n            <div class=\"r-header__left\">\n              <div class=\"book-navigation-header book-sibling-nav-container book-navigation-header-2\">\n                <div class=\"book-navigation-header book-sibling-nav-container\">\n                  <lrnsys-dialog id=\"outlinepopover\" data-voicecommand=\"open outline\" label=\"Outline\" header=\"Outline\">\n                    <span slot=\"button\">\n                      <simple-icon icon=\"explore\"></simple-icon>\n                      Outline\n                    </span>\n                    <div class=\"elmsln-modal-content\" id=\"block-mooc-helper-mooc-helper-toc-nav-modal\">\n                      <div id=\"outlinemodal\" on-click=\"_modalTap\"><slot name=\"outlinemodal\"></slot></div>\n                    </div>\n                  </lrnsys-dialog>\n                  <div id=\"navigation\"><slot name=\"navigation\"></slot></div>\n                </div>\n              </div>\n            </div>\n            <div id=\"options\" class=\"r-header__right\">\n              <slot name=\"options\"></slot>\n            </div>\n          </div>\n          <div class=\"elmsln-content-wrap\" role=\"main\">\n          <responsive-grid-row gutter=\"4\">\n            <responsive-grid-col xl=\"2\" lg=\"2\" md=\"3\" sm=\"3\" xs=\"12\">\n              <section id=\"block-mooc-nav-block-mooc-nav-nav\" class=\"mooc-nav-block-left block block-mooc-nav-block contextual-links-region block-mooc-nav-block-mooc-nav column\" role=\"navigation\" aria-label$=\"[[outlineTitle]]\">\n                <div class=\"block-mooc-nav-block-mooc-title black white-text\">[[outlineTitle]]</div>\n                <div id=\"outline\"><slot name=\"outline\"></slot></div>\n              </section>\n              <div id=\"blocks\"><slot name=\"blocks\"></slot></div>\n            </responsive-grid-col>\n            <responsive-grid-col xl=\"9\" lg=\"9\" md=\"9\" sm=\"9\" xs=\"12\">\n              <a id=\"main-content\" class=\"scrollspy\" data-scrollspy=\"scrollspy\"></a>\n              <div class=\"column\">\n                <div id=\"content\" data-loading$=\"[[loading]]\"><slot name=\"content\"></slot></div>\n              </div>\n            </responsive-grid-col>\n          </responsive-grid-row>\n        </section>\n        <a class=\"exit-off-canvas\"></a>\n      </div>\n    </main>"])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "mooc-content";
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_routeChanged(data, route, endPoint)"];
      }
    }, {
      key: "properties",
      get: function get() {
        var _ref;

        return _ref = {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },

          /**
           * Source of data
           */
          sourcePath: {
            type: String
          },

          /**
           * Full outline path
           */
          fullOutlinePath: {
            type: String
          },

          /**
           * App route tracking.
           */
          route: {
            type: Object,
            notify: true
          },

          /**
           * Title for the content
           */
          currentTitle: {
            type: String
          },

          /**
           * Params for the request for outline/book to load.
           */
          requestParams: {
            type: Object,
            notify: true,
            value: {
              node: null
            }
          },

          /**
           * Returned data for processing.
           */
          pageData: {
            type: Object,
            value: {}
          },

          /**
           * Returned data for processing.
           */
          outlineData: {
            type: Object,
            value: {}
          },

          /**
           * Ensure scrolling doesn't influence during a transition.
           */
          resetScroll: {
            type: Boolean,
            value: false
          },

          /**
           * Store current page data.
           */
          responseData: {
            type: Object,
            value: {}
          }
        }, babelHelpers.defineProperty(_ref, "basePath", {
          type: String
        }), babelHelpers.defineProperty(_ref, "elmslnCourse", {
          type: String
        }), babelHelpers.defineProperty(_ref, "outlineTitle", {
          type: String
        }), babelHelpers.defineProperty(_ref, "nid", {
          type: Number
        }), babelHelpers.defineProperty(_ref, "_loading", {
          type: Boolean,
          observer: "_contentLoading"
        }), babelHelpers.defineProperty(_ref, "loading", {
          type: Boolean,
          reflectToAttribute: true,
          value: false
        }), babelHelpers.defineProperty(_ref, "aliases", {
          type: Array
        }), babelHelpers.defineProperty(_ref, "activeNodeItem", {
          type: Object,
          value: null
        }), _ref;
      }
    }]);
    return MoocContent;
  }(_polymerElement.PolymerElement);

  _exports.MoocContent = MoocContent;
  customElements.define(MoocContent.tag, MoocContent);
});