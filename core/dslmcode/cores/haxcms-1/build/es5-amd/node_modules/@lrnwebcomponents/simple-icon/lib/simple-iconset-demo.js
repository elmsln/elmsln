define(["exports", "../../../lit/index.js", "./simple-icon-lite.js", "./simple-icons.js", "./simple-iconset.js", "./simple-iconset-manifest.js"], function (_exports, _index, _simpleIconLite, _simpleIcons, _simpleIconset, _simpleIconsetManifest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleIconsetDemo = void 0;

  var _templateObject_dde9baa08e0011ed99ce491205e67b1d, _templateObject2_dde9baa08e0011ed99ce491205e67b1d, _templateObject3_dde9baa08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-iconset-demo`
   * @element simple-iconset-demo
   * `iterates through an iconset array to generate a demo of all of the icons`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   * @demo demo/index.html
   */
  var SimpleIconsetDemo = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(SimpleIconsetDemo, _LitElement);

    var _super = _createSuper(SimpleIconsetDemo);

    function SimpleIconsetDemo() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleIconsetDemo);
      _this = _super.call(this);
      window.SimpleIconset.requestAvailability();
      _this.imports = [];

      _this._getIconsets();

      return _this;
    }

    babelHelpers.createClass(SimpleIconsetDemo, [{
      key: "render",
      value: // render function
      function render() {
        return this.iconsets.length < 1 ? "Looking for iconsets..." : this.iconsets.map(function (iconset) {
          return (0, _index.html)(_templateObject_dde9baa08e0011ed99ce491205e67b1d || (_templateObject_dde9baa08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<div class=\"iconset\">\n            <p><strong>", "</strong></p>\n            <ul>\n              ", "\n            </ul>\n          </div> "])), iconset.name, iconset.icons.map(function (icon) {
            return (0, _index.html)(_templateObject2_dde9baa08e0011ed99ce491205e67b1d || (_templateObject2_dde9baa08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                  <li>\n                    <div id=\"icon\">\n                      <simple-icon-lite\n                        icon=\"", ":", "\"\n                      ></simple-icon-lite>\n                      <div id=\"icon-text\">\n                        ", "", "\n                      </div>\n                    </div>\n                  </li>\n                "])), iconset.name, icon, iconset.name === "icons" ? "" : "".concat(iconset.name, ":"), icon);
          }));
        });
      } // properties available to the custom element for data binding

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldVlaue, propName) {
          if (propName == "imports") _this2._getIconsets();
        });
      }
    }, {
      key: "_getIconsets",
      value: function _getIconsets() {
        var _this3 = this;

        var imports = this.imports.length < 1 ? [_simpleIconsetManifest.SimpleIconIconsetsManifest] : this.imports,
            iconsets = imports.flat(),
            excludeSets = (this.exclude || "").split(" "),
            includeSets = (this.include || "").split(" ");
        this.iconsets = iconsets.filter(function (iconset) {
          return !!iconset && !excludeSets.includes(iconset) && (!_this3.include || includeSets.includes(iconset));
        });
      }
    }], [{
      key: "tag",
      get:
      /**
       * This is a convention, not the standard
       */
      function get() {
        return "simple-iconset-demo";
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject3_dde9baa08e0011ed99ce491205e67b1d || (_templateObject3_dde9baa08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n          margin-bottom: 40px;\n          padding: 20px 40px;\n        }\n\n        ul {\n          list-style-type: none;\n          padding: 0;\n        }\n\n        li {\n          display: inline-block;\n          width: 160px;\n          margin: 16px 8px;\n          text-align: center;\n          font-size: 10px;\n        }\n\n        simple-icon-lite {\n          display: inline-block;\n        }\n\n        .iconset:not(:first-of-type) {\n          border-top: 1px solid #ddd;\n        }\n\n        .iconset:nth-of-type(9n + 1) {\n          color: #444444;\n        }\n\n        .iconset:nth-of-type(9n + 2) {\n          color: #be3300;\n        }\n\n        .iconset:nth-of-type(9n + 3) {\n          color: #0000b5;\n        }\n\n        .iconset:nth-of-type(9n + 4) {\n          color: #750075;\n        }\n\n        .iconset:nth-of-type(9n + 5) {\n          color: #aa5d00;\n        }\n\n        .iconset:nth-of-type(9n + 6) {\n          color: #db0a5b;\n        }\n\n        .iconset:nth-of-type(9n + 7) {\n          color: #005500;\n        }\n\n        .iconset:nth-of-type(9n + 8) {\n          color: #cf000f;\n        }\n\n        .iconset:nth-of-type(9n) {\n          color: #005f8b;\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * a space-separated blacklist of iconsets by name
           */
          exclude: {
            attribute: "exclude",
            type: String
          },

          /**
           * a space-separated list of paths to iconsets.json
           */
          iconsets: {
            type: Array
          },

          /**
           * a space-separated whitelist of iconsets by name
           */
          include: {
            attribute: "include",
            type: String
          },

          /**
           * a space-separated list of paths to iconsets.json
           */
          imports: {
            type: Array
          }
        };
      }
    }]);
    return SimpleIconsetDemo;
  }(_index.LitElement);

  _exports.SimpleIconsetDemo = SimpleIconsetDemo;
  customElements.define(SimpleIconsetDemo.tag, SimpleIconsetDemo);
});