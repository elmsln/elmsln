define(["exports", "../micro-frontend-registry.js"], function (_exports, _microFrontendRegistry) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.enableCoreServices = enableCoreServices;
  _exports.enableExperimentalServices = enableExperimentalServices;
  _exports.enableHAXcmsServices = enableHAXcmsServices;
  _exports.enableServices = enableServices;

  // integrate the core services of our lrnwebcomponents API layer
  // While not required, this is the home for non-visual aspects of
  // our ecosystem that can be leveraged independent of other things
  // Examples of a platform specific implementation would be HAXcms
  // and it's name spacing
  function enableServices(services) {
    services.forEach(function (service) {
      switch (service) {
        case "core":
          enableCoreServices();
          break;

        case "experimental":
          enableExperimentalServices();
          break;

        case "haxcms":
          enableHAXcmsServices();
          break;
      }
    });
  } // core services


  function enableCoreServices() {
    // linkValidator
    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/services/website/linkValidator",
      name: "@core/linkValidator",
      method: "GET",
      title: "Validate URLs",
      description: "Validates that an array of URLs are valid by returning status codes of a HEAD request",
      params: {
        links: "link for processing as link otherwise unused"
      }
    }); // mdToHtml


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/services/media/format/mdToHtml",
      name: "@core/mdToHtml",
      title: "Markdown to HTML",
      description: "Convert Markdown string (or file) to HTML",
      params: {
        md: "MD or link to be converted",
        type: "link for processing as link otherwise unused"
      }
    }); // htmlToMd


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/services/media/format/htmlToMd",
      name: "@core/htmlToMd",
      title: "HTML to MD",
      description: "Convert HTML string (or file) to MD",
      params: {
        html: "HTML or link to be converted",
        type: "link for processing as link otherwise unused"
      }
    }); // htmlToPdf


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/services/media/format/htmlToPdf",
      name: "@core/htmlToPdf",
      title: "HTML to PDF",
      description: "Convert HTML string (or file) to a PDF",
      params: {
        html: "HTML or link to be converted",
        type: "link for processing as link otherwise unused"
      }
    }); // duckDuckGo


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/services/website/duckDuckGo",
      name: "@core/duckDuckGo",
      method: "GET",
      title: "Duck Duck Go",
      description: "Search results from duck duck go",
      params: {
        q: "query param to search on"
      }
    }); // screenshot - kept by itself bc of size of getBrowserInstance


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "https://screenshoturl.elmsln.vercel.app/api/screenshotUrl",
      name: "@core/screenshotUrl",
      method: "GET",
      title: "Screenshot page",
      description: "Takes screenshot of a URL and returns image",
      params: {
        urlToCapture: "full url with https",
        quality: "Optional image quality parameter"
      }
    }); // docxToPdf


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/services/media/format/docxToPdf",
      name: "@core/docxToPdf",
      title: "Docx to pdf",
      description: "Convert .docx file to PDF response (downloaded)",
      params: {
        body: "FormData class w/ uploaded file encoded into it"
      }
    }); // docxToHtml


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/services/media/format/docxToHtml",
      name: "@core/docxToHtml",
      title: "Docx to HTML",
      description: "Convert .docx file to HTML",
      params: {
        body: "FormData class w/ uploaded file encoded into it"
      }
    }); // htmlToDocx


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/services/media/format/htmlToDocx",
      name: "@core/htmlToDocx",
      title: "HTML to docx",
      description: "Convert HTML to .docx file",
      params: {
        html: "html body to be converted to a docx file download"
      }
    }); // imgToAscii


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/services/media/format/imgToAscii",
      name: "@core/imgToAscii",
      title: "Image to ascii art",
      description: "Convert any valid image formatted file to ASCII terminal style art",
      params: {
        body: "FormData class w/ uploaded file encoded into it"
      }
    }); // imgManipulation


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/services/media/image/manipulate",
      name: "@core/imgManipulate",
      title: "simple image manipulation",
      description: "scale, resize, convert and perform operations to manipulate any image",
      params: {
        src: "image source",
        height: "height in numbers",
        width: "width in numbers",
        quality: "0-100, jpeg quality to reduce image by if jpeg",
        fit: "how to crop if height and width are supplied (https://sharp.pixelplumbing.com/api-resize)",
        watermark: "SRC for an image to watermark on the output",
        wmspot: "nw,ne,se,sw for moving the location of the watermark",
        rotate: "https://sharp.pixelplumbing.com/api-operation#rotate",
        format: "png, jpg, gif, webp"
      }
    });

    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/services/text/readability",
      name: "@core/readability",
      title: "readability score",
      description: "Readability metrics from analyzing text",
      params: {
        body: "Block of text to enhance"
      }
    });
  } // HAXcms services


  function enableHAXcmsServices() {
    // docxToSite
    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/apps/haxcms/docxToSite",
      name: "@haxcms/docxToSite",
      title: "Docx to Site",
      description: "Convert .docx file to Site schema",
      params: {
        body: "FormData class w/ uploaded file encoded into it"
      }
    }); // insights


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/apps/haxcms/insights",
      name: "@haxcms/insights",
      title: "Site insights",
      description: "States relative to the page, lesson, and site as a whole. Used for content authors.",
      params: {
        site: "location of the HAXcms site OR site.json data",
        type: "site for site.json or link for remote loading",
        activeId: "id to query from"
      }
    }); // contentBrowser


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/apps/haxcms/contentBrowser",
      name: "@haxcms/contentBrowser",
      title: "Content browser",
      description: "Returns details about content relative to an activeID",
      params: {
        site: "location of the HAXcms site OR site.json data",
        type: "site for site.json or link for remote loading",
        activeId: "id to query from"
      }
    }); // mediaBrowser


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/apps/haxcms/mediaBrowser",
      name: "@haxcms/mediaBrowser",
      title: "Media browser",
      description: "Returns details about media relative to an activeID",
      params: {
        site: "location of the HAXcms site OR site.json data",
        type: "site for site.json or link for remote loading",
        activeId: "id to query from"
      }
    }); // linkChecker


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/apps/haxcms/linkChecker",
      name: "@haxcms/linkChecker",
      title: "Check site links",
      description: "Returns details about links relative to an activeID",
      params: {
        site: "location of the HAXcms site OR site.json data",
        type: "site for site.json or link for remote loading",
        activeId: "id to query from"
      }
    }); // courseStats


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/apps/haxcms/courseStats",
      name: "@haxcms/courseStats",
      title: "Course stats",
      description: "Relevant stats for teaching relative to the ancestor in question",
      params: {
        site: "location of the HAXcms site OR site.json data",
        type: "site for site.json or link for remote loading",
        ancestor: "optional: ancestor to print from as opposed to entire site"
      }
    }); // siteToHtml


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/apps/haxcms/siteToHtml",
      name: "@haxcms/siteToHtml",
      title: "HAXcms Full Site HTML",
      description: "Load entire HAXcms site via URL as HTML",
      params: {
        site: "location of the HAXcms site OR site.json data",
        type: "site for site.json or link for remote loading",
        ancestor: "optional: ancestor to print from as opposed to entire site"
      }
    }); // pageCache


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/apps/haxcms/pageCache",
      method: "GET",
      name: "@haxcms/pageCache",
      title: "HAXcms Page cache",
      description: "Load a page from a site via uuid",
      params: {
        site: "location of the HAXcms site OR site.json data",
        type: "site for site.json or link for remote loading",
        uuid: "page to return content of"
      }
    }); // siteManifest


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/apps/haxcms/siteManifest",
      name: "@haxcms/siteManifest",
      title: "HAXcms manifest",
      description: "Load the manifest for a site based on URL",
      params: {
        site: "location of the HAXcms site OR site.json data"
      }
    }); // siteGlossary


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/apps/haxcms/siteGlossary",
      name: "@haxcms/siteGlossary",
      title: "HAXcms site Glossary",
      description: "array of terms found in the glossary slug",
      params: {
        url: "location of the HAXcms site"
      }
    }); // termsInPage


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/apps/haxcms/termsInPage",
      name: "@haxcms/termsInPage",
      title: "HAXcms Page terms",
      description: "array of terms from glossary found in a blob of html",
      params: {
        body: "HTML blob to process",
        site: "location of the HAXcms site OR site.json data",
        type: "site for site.json or link for remote loading",
        wikipedia: "if wikipedia links should be included in response, if found",
        terms: "Optional array of term objects. This is intended for future use / forcibly passing a list from elsewhere"
      }
    }); // siteToEpub


    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/apps/haxcms/siteToEpub",
      name: "@haxcms/siteToEpub",
      title: "HAXcms Full Site EPUB",
      description: "generate .epub of entire HAXcms site via URL",
      params: {
        url: "location of the HAXcms site"
      }
    });
  } // experimental service


  function enableExperimentalServices() {
    // hydrateSsr
    _microFrontendRegistry.MicroFrontendRegistry.add({
      endpoint: "/api/experiments/hydrateSsr",
      name: "@experiments/hydrateSsr",
      title: "Hydrate SSR",
      description: "Hydrate web components via lit server side",
      params: {
        html: "blob of HTML or link to html file to load"
      }
    });
  }
});