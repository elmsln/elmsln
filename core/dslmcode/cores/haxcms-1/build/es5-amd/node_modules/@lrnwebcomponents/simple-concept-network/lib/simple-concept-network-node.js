define(["exports", "require", "../../../@polymer/polymer/polymer-element.js", "../../simple-colors/lib/simple-colors-polymer.js", "../../simple-icon/simple-icon.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-button.js", "../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _require, _polymerElement, _simpleColorsPolymer, _simpleIcon, _simpleIcons, _simpleIconButton, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleConceptNetworkNode = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_de8e10f08e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-concept-network-node`
   * @element simple-concept-network-node
   * A small but effective little data visualizer for topics surrounding
   * a central concept, much like the ELMS:LN snowflake icon.
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   * - ELMS:LN - The ELMS: Learning Network "snowflake" is a network diagram
   */
  var SimpleConceptNetworkNode = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(SimpleConceptNetworkNode, _PolymerElement);

    var _super = _createSuper(SimpleConceptNetworkNode);

    function SimpleConceptNetworkNode() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleConceptNetworkNode);
      _this = _super.call(this);
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["../../simple-tooltip/simple-tooltip.js"], res, rej);
        });
      }, 0);
      return _this;
    }

    babelHelpers.createClass(SimpleConceptNetworkNode, null, [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_de8e10f08e0011ed99ce491205e67b1d || (_templateObject_de8e10f08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors-shared-styles-polymer\">\n        :host {\n          display: inline-flex;\n          --simple-concept-network-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --simple-concept-network-bg: var(\n            --simple-colors-default-theme-accent-5\n          );\n        }\n        :host([colored-text]) {\n          --simple-concept-network-bg: var(\n            --simple-colors-default-theme-grey-1\n          );\n          --simple-concept-network-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n        }\n        button {\n          -webkit-transition: 0.6s transform ease-in-out;\n          transition: 0.6s transform ease-in-out;\n          -webkit-clip-path: polygon(\n            50% 0%,\n            100% 25%,\n            100% 75%,\n            50% 100%,\n            0% 75%,\n            0% 25%\n          );\n          clip-path: polygon(\n            50% 0%,\n            100% 25%,\n            100% 75%,\n            50% 100%,\n            0% 75%,\n            0% 25%\n          );\n          color: var(--simple-concept-network-color);\n        }\n        :host([visualization=\"network\"]) button:hover,\n        :host([visualization=\"network\"]) button:focus {\n          opacity: 0.8;\n        }\n        :host([visualization=\"3d\"]) button {\n          -webkit-transform: perspective(600px) rotateX(60deg);\n          -moz-transform: perspective(600px) rotateX(60deg);\n          -ms-transform: perspective(600px) rotateX(60deg);\n          -o-transform: perspective(600px) rotateX(60deg);\n          transform: perspective(600px) rotateX(60deg);\n        }\n        :host([visualization=\"3d\"]) button:hover,\n        :host([visualization=\"3d\"]) button:focus {\n          transform: perspective(0px) rotateX(0deg);\n        }\n        simple-icon {\n          --simple-icon-width: 50px;\n          --simple-icon-height: 50px;\n          margin: 1px 19px;\n          z-index: 3;\n          color: var(--simple-concept-network-color);\n        }\n        .hexagon {\n          position: relative;\n          width: 88px;\n          height: 50.81px;\n          margin: 25.4px 0;\n          background-size: auto 101.6136px;\n          background-position: center;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);\n          background-color: var(--simple-concept-network-bg);\n        }\n\n        .hexTop,\n        .hexBottom {\n          position: absolute;\n          z-index: 1;\n          width: 62.23px;\n          height: 62.23px;\n          overflow: hidden;\n          -webkit-transform: scaleY(0.5774) rotate(-45deg);\n          -ms-transform: scaleY(0.5774) rotate(-45deg);\n          transform: scaleY(0.5774) rotate(-45deg);\n          background: inherit;\n          left: 12.89px;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);\n        }\n\n        /*counter transform the bg image on the caps*/\n        .hexTop:after,\n        .hexBottom:after {\n          content: \"\";\n          position: absolute;\n          width: 88px;\n          height: 50.80682368868707px;\n          -webkit-transform: rotate(45deg) scaleY(1.7321) translateY(-25.4034px);\n          -ms-transform: rotate(45deg) scaleY(1.7321) translateY(-25.4034px);\n          transform: rotate(45deg) scaleY(1.7321) translateY(-25.4034px);\n          -webkit-transform-origin: 0 0;\n          -ms-transform-origin: 0 0;\n          transform-origin: 0 0;\n          background: inherit;\n        }\n\n        .hexTop {\n          top: -31.1127px;\n        }\n\n        .hexTop:after {\n          background-position: center top;\n        }\n\n        .hexBottom {\n          bottom: -31.1127px;\n        }\n\n        .hexBottom:after {\n          background-position: center bottom;\n        }\n\n        .hexagon:after {\n          content: \"\";\n          position: absolute;\n          top: 0px;\n          left: 0;\n          width: 88px;\n          height: 50.8068px;\n          z-index: 2;\n          background: inherit;\n        }\n      </style>\n      <a tabindex=\"-1\" href=\"[[src]]\" disabled$=\"[[disabled]]\">\n        <button disabled$=\"[[disabled]]\" id=\"button\">\n          <div class=\"hexagon\" style$=\"background-image: url([[image]]);\">\n            <div class=\"hexTop\"></div>\n            <div class=\"hexBottom\"></div>\n            <simple-icon icon=\"[[icon]]\">&gt;</simple-icon>\n          </div>\n        </button>\n      </a>\n      <simple-tooltip for=\"button\" position=\"bottom\" offset=\"45\">\n        [[label]]\n      </simple-tooltip>\n    "])));
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * make the default theme dark?
           */
          coloredText: {
            type: Boolean,
            value: false,
            reflectToAttribute: true,
            notify: true
          },

          /**
           * Visualization reflected to attribute for styling
           */
          visualization: {
            type: String,
            reflectToAttribute: true,
            value: "3d"
          },

          /**
           * Icon to present
           */
          icon: {
            type: String
          },

          /**
           * image to present
           */
          image: {
            type: String
          },

          /**
           * disabled status
           */
          disabled: {
            type: Boolean
          },

          /**
           * title / label text
           */
          label: {
            type: String
          },

          /**
           * Longer description used for more info
           */
          description: {
            type: String
          },

          /**
           * source for a link
           */
          src: {
            type: String
          }
        };
      }
    }, {
      key: "tag",
      get: function get() {
        return "simple-concept-network-node";
      }
    }]);
    return SimpleConceptNetworkNode;
  }(_polymerElement.PolymerElement);

  _exports.SimpleConceptNetworkNode = SimpleConceptNetworkNode;
  window.customElements.define(SimpleConceptNetworkNode.tag, SimpleConceptNetworkNode);
});