define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MicroFrontendRegistry = _exports.MicroFrontend = void 0;

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Copyright 2022 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
  // very basic class for micro
  var MicroFrontendKeys = ["endpoint", "name", "title", "description", "params", "callback", "method"]; // new micro

  var MicroFrontend = /*#__PURE__*/babelHelpers.createClass(function MicroFrontend() {
    var _this = this;

    var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    babelHelpers.classCallCheck(this, MicroFrontend);
    // set defaults for each key expected
    MicroFrontendKeys.map(function (key) {
      return key === "params" ? _this[key] = values[key] || {} : _this[key] = values[key] || null;
    });
  });
  /**
   * `micro-frontend-registry`
   * `A singleton for registration and managing access to leverage microservices for web components`
   *
   * @demo demo/index.html
   * @element micro-frontend-registry
   */

  _exports.MicroFrontend = MicroFrontend;

  var MicroFrontendRegistryEl = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(MicroFrontendRegistryEl, _HTMLElement);

    var _super = _createSuper(MicroFrontendRegistryEl);

    function MicroFrontendRegistryEl() {
      var _this2;

      babelHelpers.classCallCheck(this, MicroFrontendRegistryEl);
      _this2 = _super.call(this);
      _this2.list = [];
      _this2.MicroFrontend = MicroFrontend;
      return _this2;
    }
    /**
     * Adding more or less alias for define
     * @param {Object} params
     */


    babelHelpers.createClass(MicroFrontendRegistryEl, [{
      key: "add",
      value: function add(params) {
        this.define(new MicroFrontend(params));
      }
      /**
       * define a new micro frontend
       *
       * @param {MicroFrontend} item - instanceof MicroFrontend
       * @returns {Boolean} status of definition being accepted
       */

    }, {
      key: "define",
      value: function define(item) {
        if (!babelHelpers.instanceof(item, MicroFrontend)) {
          console.warn("MicroFrontendRegistry: use class MicroFrontend instance but if keys match it will register still.");
          console.warn(item);
        } // validate item has all keys we care about


        if (Object.keys(item).every(function (key) {
          return MicroFrontendKeys.includes(key);
        })) {
          // support for local resolution of vercel vs serve for things that are
          // built off of the main registry on localhost
          if (item.endpoint.startsWith("/api/")) {
            var base = ""; // support base rewrite

            if (window.MicroFrontendRegistryConfig.base) {
              base = window.MicroFrontendRegistryConfig.base;
            } // keep local based if we're local, otherwise we need to leverage deployed address
            else if (window.location.origin.startsWith("http://127.0.0.1") || window.location.origin.startsWith("http://localhost")) {
                base = window.location.origin.replace(/127.0.0.1:8(.*)/, "localhost:3000").replace(/localhost:8(.*)/, "localhost:3000");
              } // most common case, hit vercel address
              else {
                  base = "https://haxapi.vercel.app";
                }

            item.endpoint = "".concat(base).concat(item.endpoint);
          } // check for registry config object


          if (window.MicroFrontendRegistryConfig[item.name]) {
            Object.keys(window.MicroFrontendRegistryConfig[item.name]).map(function (key) {
              item[key] = window.MicroFrontendRegistryConfig[item.name][key];
            });
          }

          if (!this.has(item.name)) {
            this.list.push(item);
            return true;
          }
        } else {
          return false;
        }
      }
      /**
       * get the definition for a machine named micro
       *
       * @param {String} name - machine name of the micro record requested
       * @returns {MicroFrontend} the micro in question
       */

    }, {
      key: "get",
      value: function get(name) {
        var testOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (name && this.list.length > 0) {
          var found = this.list.find(function (item) {
            return item.name === name;
          });

          if (found) {
            return found;
          }
        }

        if (!testOnly) {
          console.error("call for ".concat(name, " but not found in micro-frontend-registry"));
        }

        return null;
      }
      /**
       * boolean for having the definition for a machine named micro
       *
       * @param {String} name - machine name of the micro record requested
       * @returns {Boolean} if we have this micro
       */

    }, {
      key: "has",
      value: function has(name) {
        return this.get(name, true) !== null;
      }
      /**
       * set the definition for a machine named micro that was already registered
       *
       * @param {String} name - machine name of the micro record requested
       * @param {MicroFrontend} item - updated micro data
       * @returns {MicroFrontend} the micro in question
       */

    }, {
      key: "set",
      value: function set(name) {
        var item = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (name && this.list.length > 0 && this.has(name)) {
          var index = this.list.findIndex(function (item) {
            return item.name === name;
          });
          this.list[index] = item;
        }

        return null;
      }
      /**
       * generate the call to the micro based on accepting name and params
       *
       * @param {String} name - machine name for the micro to call
       * @param {Object} params - data to send to endpoint
       * @param {Function} callback - Function callback on data return
       * @param {Object} caller - reference to DOM node that called this
       * @returns {Object} Response object from microservice, otherwise `null`
       */

    }, {
      key: "call",
      value: function () {
        var _call = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name) {
          var params,
              callback,
              caller,
              item,
              method,
              data,
              searchParams,
              _args = arguments;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  params = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                  callback = _args.length > 2 && _args[2] !== undefined ? _args[2] : null;
                  caller = _args.length > 3 && _args[3] !== undefined ? _args[3] : null;

                  if (!this.has(name)) {
                    _context.next = 28;
                    break;
                  }

                  item = this.get(name); // default post, but this is not cacheable

                  method = "POST"; // support definition requiring a certain method

                  if (item.method) {
                    method = item.method;
                  } // support override when calling


                  if (params.__method) {
                    method = params.__method;
                    delete params.__method;
                  }

                  data = null;
                  _context.t0 = method;
                  _context.next = _context.t0 === "GET" ? 12 : _context.t0 === "HEAD" ? 12 : _context.t0 === "POST" ? 17 : 17;
                  break;

                case 12:
                  // support for formdata which is already encoded
                  searchParams = new URLSearchParams(params).toString();
                  _context.next = 15;
                  return fetch(searchParams ? "".concat(item.endpoint, "?").concat(searchParams) : item.endpoint, {
                    method: method
                  }).then(function (d) {
                    return d.ok ? d.json() : {
                      status: d.status,
                      data: null
                    };
                  }).catch(function (e, d) {
                    console.warn("Request failed", e); // this is endpoint completely failed to respond

                    return {
                      status: 500,
                      data: null
                    };
                  });

                case 15:
                  data = _context.sent;
                  return _context.abrupt("break", 21);

                case 17:
                  _context.next = 19;
                  return fetch(item.endpoint, {
                    method: method,
                    body: babelHelpers.instanceof(params, FormData) ? params : JSON.stringify(params)
                  }).then(function (d) {
                    return d.ok ? d.json() : {
                      status: d.status,
                      data: null
                    };
                  }).catch(function (e, d) {
                    console.warn("Request failed", e); // this is endpoint completely failed to respond

                    return {
                      status: 500,
                      data: null
                    };
                  });

                case 19:
                  data = _context.sent;
                  return _context.abrupt("break", 21);

                case 21:
                  if (!item.callback) {
                    _context.next = 24;
                    break;
                  }

                  _context.next = 24;
                  return item.callback(data, caller);

                case 24:
                  if (!callback) {
                    _context.next = 27;
                    break;
                  }

                  _context.next = 27;
                  return callback(data, caller);

                case 27:
                  return _context.abrupt("return", data);

                case 28:
                  return _context.abrupt("return", null);

                case 29:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function call(_x) {
          return _call.apply(this, arguments);
        }

        return call;
      }()
      /**
       * generate the call to the micro as a URL
       *
       * @param {String} name - machine name for the micro to call
       * @param {Object} params - data to send to endpoint
       * @returns {String} URL with parameters for a GET
       */

    }, {
      key: "url",
      value: function url(name) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.has(name)) {
          var item = this.get(name); // no null submissions

          for (var key in params) {
            if (params.hasOwnProperty(key)) {
              if (params[key] == null) delete params[key];
            }
          }

          return new URL(item.endpoint).toString() + "?".concat(new URLSearchParams(params).toString());
        }

        return "";
      }
    }], [{
      key: "tag",
      get: function get() {
        return "micro-frontend-registry";
      }
    }]);
    return MicroFrontendRegistryEl;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  customElements.define(MicroFrontendRegistryEl.tag, MicroFrontendRegistryEl); // register globally so we can make sure there is only one

  window.MicroFrontendRegistry = window.MicroFrontendRegistry || {};
  window.MicroFrontendRegistryConfig = window.MicroFrontendRegistryConfig || {};

  window.MicroFrontendRegistry.requestAvailability = function () {
    if (!window.MicroFrontendRegistry.instance) {
      window.MicroFrontendRegistry.instance = document.createElement(MicroFrontendRegistryEl.tag);
      document.body.appendChild(window.MicroFrontendRegistry.instance);
    }

    return window.MicroFrontendRegistry.instance;
  }; // most common way to access registry


  var MicroFrontendRegistry = window.MicroFrontendRegistry.requestAvailability();
  _exports.MicroFrontendRegistry = MicroFrontendRegistry;
});