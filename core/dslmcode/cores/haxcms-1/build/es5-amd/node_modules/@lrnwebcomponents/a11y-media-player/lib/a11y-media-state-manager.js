define(["exports", "../../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yMediaStateManager = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // register globally so we can make sure there is only one
  window.A11yMediaStateManager = window.A11yMediaStateManager || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same modal

  window.A11yMediaStateManager.requestAvailability = function () {
    if (!window.A11yMediaStateManager.instance) {
      window.A11yMediaStateManager.instance = document.createElement("a11y-media-state-manager");
      document.body.appendChild(window.A11yMediaStateManager.instance);
    }

    return window.A11yMediaStateManager.instance;
  };
  /**
   * `a11y-media-state-manager`
   * A utility that manages the state of multiple a11y-media-players on a single page.
   *
   */


  var A11yMediaStateManager = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(A11yMediaStateManager, _LitElement);

    var _super = _createSuper(A11yMediaStateManager);

    /**
     * Makes sure there is a utility ready and listening for elements.
     */
    function A11yMediaStateManager() {
      var _this;

      babelHelpers.classCallCheck(this, A11yMediaStateManager);
      _this = _super.call(this);
      _this.players = [];

      _this.__stickyManager = function (e) {
        return _this.setStickyPlayer(e.detail);
      };

      _this.__fullscreenManager = function (e) {
        return _this._handleFullscreen(e.detail);
      };

      _this.__playerLoader = function (e) {
        return _this.players.push(e.detail);
      }; // sets the instance to the current instance


      if (!window.A11yMediaStateManager.instance) {
        window.A11yMediaStateManager.instance = babelHelpers.assertThisInitialized(_this);
      }

      return _this;
    }
    /**
     * if a player disallows concurrent players, pauses other players
     */


    babelHelpers.createClass(A11yMediaStateManager, [{
      key: "checkConcurrentPlayers",
      value: function checkConcurrentPlayers() {
        var active = this.activePlayer;
        this.players.forEach(function (player) {
          if (!!active && player !== active) {
            if (player.fullscreen) player.toggleFullscreen(false);
            if (!player.allowConcurrent || !active.allowConcurrent || active.fullscreen) player.pause();
          }
        });
      }
      /**
       * sets the active player
       *
       * @param {object} the player to set stickiness
       */

    }, {
      key: "setActivePlayer",
      value: function setActivePlayer(player) {
        this.activePlayer = player;
        this.checkConcurrentPlayers();
        if (this.observer) this.observer.disconnect();
        this.observer.observe(this.activePlayer);
      }
      /**
       * active player observer
       *
       * @readonly
       * @memberof A11yMediaStateManager
       */

    }, {
      key: "observer",
      get: function get() {
        var handleIntersect = function handleIntersect(entries, observer) {
          window.A11yMediaStateManager.instance._handleIntersect(entries, observer);
        };

        this._observer = this._observer || new IntersectionObserver(handleIntersect, {
          root: null,
          rootMargin: "0px",
          threshold: [0.25, 0.75]
        });
        return this._observer;
      }
      /**
       *
       * handles when active player is out of range and sets stickiness accordingly
       * @param {array} entries
       * @param {object} observer
       */

    }, {
      key: "_handleIntersect",
      value: function _handleIntersect(entries, observer) {
        var _this2 = this;

        entries.forEach(function (entry) {
          if (!_this2.activePlayer || _this2.activePlayer.fullscreen) {} else if (!_this2.activePlayer.__playing) {
            _this2.activePlayer.toggleSticky(false);
          } else {
            _this2.activePlayer.toggleSticky(!entry.isIntersecting);
          }
        });
      }
      /**
       * stops all other players on the page
       *
       * @param {object} the player to set stickiness
       */

    }, {
      key: "setStickyPlayer",
      value: function setStickyPlayer(player) {
        if (player !== this.activePlayer && this.activePlayer !== undefined && this.activePlayer !== null) {
          this.activePlayer.toggleSticky(false);
        }

        this.setActivePlayer(player);
      }
    }, {
      key: "_handleFullscreen",
      value: function _handleFullscreen(player) {
        if (player && player.fullscreen) this.setActivePlayer(player);
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yMediaStateManager.prototype), "connectedCallback", this).call(this); // listen for a player that starts playing

        window.addEventListener("a11y-player-playing", this.__stickyManager); // listen for a player toggling fullscreen mode

        window.addEventListener("fullscreen-toggle", this._handleFullscreen); // listen for a players added to the page

        window.addEventListener("a11y-player", this.__playerLoader);
      }
      /**
       * life cycle, element is removed from the DOM
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var root = this;
        window.removeEventListener("a11y-player", root.__playerLoader);
        window.removeEventListener("a11y-player-playing", root.__stickyManager);
        window.removeEventListener("fullscreen-toggle", root.__fullscreenManager);
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yMediaStateManager.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "a11y-media-state-manager";
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(A11yMediaStateManager), "properties", this)), {}, {
          /**
           * Stores an array of all the players on the page.
           */
          players: {
            type: Array
          },

          /**
           * Manages which player is currently active.
           */
          activePlayer: {
            type: Object
          }
        });
      }
    }]);
    return A11yMediaStateManager;
  }(_index.LitElement);

  _exports.A11yMediaStateManager = A11yMediaStateManager;
  customElements.define(A11yMediaStateManager.tag, A11yMediaStateManager);
});