define(["exports", "require", "../../../../lit/index.js", "./haxcms-site-store.js", "../../../../mobx/dist/mobx.esm.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../jwt-login/jwt-login.js", "../../../h-a-x/h-a-x.js", "../../../simple-modal/simple-modal.js", "../../../simple-fields/lib/simple-fields-form.js", "./haxcms-site-dashboard.js", "../../../micro-frontend-registry/lib/microServices.js", "../../../micro-frontend-registry/micro-frontend-registry.js", "../../../hax-body/lib/hax-store.js", "../../../utils/utils.js"], function (_exports, _require, _index, _haxcmsSiteStore, _mobxEsm, _ironAjax, _jwtLogin, _hAX, _simpleModal, _simpleFieldsForm, _haxcmsSiteDashboard, _microServices, _microFrontendRegistry, _haxStore, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSSiteEditor = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_b05fc3c0809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `haxcms-site-editor`
   * `haxcms editor element that provides all editing capabilities`
   *
   * @demo demo/index.html
   */
  var HAXCMSSiteEditor = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HAXCMSSiteEditor, _LitElement);

    var _super = _createSuper(HAXCMSSiteEditor);

    function HAXCMSSiteEditor() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSSiteEditor);
      _this = _super.call(this);
      _this.__disposer = [];
      _this.method = "POST";
      _this.editMode = false;
      window.SimpleToast.requestAvailability();
      window.SimpleModal.requestAvailability();
      window.addEventListener("jwt-login-refresh-error", _this._tokenRefreshFailed.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("hax-store-ready", _this._storeReadyToGo.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("json-outline-schema-active-item-changed", _this._newActiveItem.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("json-outline-schema-active-body-changed", _this._bodyChanged.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-save-outline", _this.saveOutline.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-save-node", _this.saveNode.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-save-node-details", _this.saveNodeDetails.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-save-site-data", _this.saveManifest.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-load-node-fields", _this.loadNodeFields.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-load-site-dashboard", _this.loadSiteDashboard.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-load-user-data", _this.loadUserData.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-publish-site", _this.publishSite.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-sync-site", _this.syncSite.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-git-revert-last-commit", _this.revertCommit.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-create-node", _this.createNode.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-delete-node", _this.deleteNode.bind(babelHelpers.assertThisInitialized(_this)));
      return _this;
    } // render function


    babelHelpers.createClass(HAXCMSSiteEditor, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_b05fc3c0809211edaa2833647dc78c6c || (_templateObject_b05fc3c0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        haxcms-site-editor {\n          display: block;\n        }\n\n        haxcms-site-editor[edit-mode] #editbutton {\n          width: 100%;\n          z-index: 100;\n          right: 0;\n          bottom: 0;\n          border-radius: 0;\n          height: 80px;\n          margin: 0;\n          padding: 8px;\n          background-color: var(--paper-blue-500) !important;\n        }\n        h-a-x {\n          margin: auto;\n          display: none;\n        }\n        haxcms-site-editor[edit-mode] h-a-x {\n          display: block;\n        }\n      </style>\n      <iron-ajax\n        reject-with-request\n        .headers='{\"Authorization\": \"Bearer ", "\"}'\n        id=\"nodeupdateajax\"\n        .url=\"", "\"\n        .method=\"", "\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        @last-response-changed=\"", "\"\n        @last-error-changed=\"", "\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        .headers='{\"Authorization\": \"Bearer ", "\"}'\n        id=\"outlineupdateajax\"\n        .url=\"", "\"\n        .method=\"", "\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        @response=\"", "\"\n        @last-error-changed=\"", "\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        .headers='{\"Authorization\": \"Bearer ", "\"}'\n        id=\"manifestupdateajax\"\n        .url=\"", "\"\n        .method=\"", "\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        @response=\"", "\"\n        @last-error-changed=\"", "\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        .headers='{\"Authorization\": \"Bearer ", "\"}'\n        id=\"publishajax\"\n        .loading=\"", "\"\n        @loading-changed=\"", "\"\n        .url=\"", "\"\n        .method=\"", "\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        @response=\"", "\"\n        @last-error-changed=\"", "\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        .headers='{\"Authorization\": \"Bearer ", "\"}'\n        id=\"revertajax\"\n        .url=\"", "\"\n        .method=\"", "\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        @response=\"", "\"\n        @last-error-changed=\"", "\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        .headers='{\"Authorization\": \"Bearer ", "\"}'\n        id=\"syncajax\"\n        .url=\"", "\"\n        .method=\"", "\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        @response=\"", "\"\n        @last-error-changed=\"", "\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        .headers='{\"Authorization\": \"Bearer ", "\"}'\n        id=\"createajax\"\n        .url=\"", "\"\n        .method=\"", "\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        @response=\"", "\"\n        @last-error-changed=\"", "\"\n        @last-response-changed=\"", "\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        .headers='{\"Authorization\": \"Bearer ", "\"}'\n        id=\"deleteajax\"\n        .url=\"", "\"\n        .method=\"", "\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        @response=\"", "\"\n        @last-error-changed=\"", "\"\n        @last-response-changed=\"", "\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        .headers='{\"Authorization\": \"Bearer ", "\"}'\n        id=\"getuserdata\"\n        url=\"", "\"\n        method=\"", "\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        @response=\"", "\"\n        @last-error-changed=\"", "\"\n      ></iron-ajax>\n      <h-a-x\n        id=\"hax\"\n        element-align=\"left\"\n        offset-margin=\"48px 0 0 0\"\n        hide-panel-ops=\"hide-panel-ops\"\n      ></h-a-x>\n    "])), this.jwt, this.saveNodePath, this.method, this._handleNodeResponse, this.lastErrorChanged, this.jwt, this.saveOutlinePath, this.method, this._handleOutlineResponse, this.lastErrorChanged, this.jwt, this.saveManifestPath, this.method, this._handleManifestResponse, this.lastErrorChanged, this.jwt, this.publishing, this.loadingChanged, this.publishSitePath, this.method, this._handlePublishResponse, this.lastErrorChanged, this.jwt, this.revertSitePath, this.method, this._handleRevertResponse, this.lastErrorChanged, this.jwt, this.syncSitePath, this.method, this._handleSyncResponse, this.lastErrorChanged, this.jwt, this.createNodePath, this.method, this._handleCreateResponse, this.lastErrorChanged, this.__createNodeResponseChanged, this.jwt, this.deleteNodePath, this.method, this._handleDeleteResponse, this.lastErrorChanged, this.__deleteNodeResponseChanged, this.jwt, this.getUserDataPath, this.method, this._handleUserDataResponse, this.lastErrorChanged);
      }
    }, {
      key: "__deleteNodeResponseChanged",
      value: function __deleteNodeResponseChanged(e) {
        // show message
        if (e.detail.value && e.detail.value.data && e.detail.value.data.title) {
          _haxcmsSiteStore.store.toast("Page deleted ".concat(e.detail.value.data.title, ", selecting another page"), 4000);

          _haxcmsSiteStore.store.playSound("coin");
        }
      }
    }, {
      key: "__createNodeResponseChanged",
      value: function __createNodeResponseChanged(e) {
        // sanity check we have a slug, move to this page that we just made
        if (e.detail.value && e.detail.value.data && e.detail.value.data.slug) {
          window.history.pushState({}, null, e.detail.value.data.slug);

          _haxcmsSiteStore.store.toast("Created ".concat(e.detail.value.data.title, "!"), 3000, {
            hat: "random"
          });

          _haxcmsSiteStore.store.playSound("coin");
        }
      }
    }, {
      key: "_handleUserDataResponse",
      value: function _handleUserDataResponse(e) {
        if (e.detail.response && e.detail.response.data) {
          _haxcmsSiteStore.store.userData = e.detail.response.data;
        }
      }
      /**
       * Handle the last error rolling in
       */

    }, {
      key: "lastErrorChanged",
      value: function lastErrorChanged(e) {
        if (e.detail.value) {
          console.error(e);
          var target = (0, _utils.normalizeEventPath)(e)[0]; // check for JWT needing refreshed vs busted but must be 403

          switch (parseInt(e.detail.value.status)) {
            // cookie data not found, need to go get it
            // @notice this currently isn't possible but we could modify
            // the backend in the future to support throwing 401s dynamically
            // if we KNOW an event must expire the timing token
            case 401:
              this.dispatchEvent(new CustomEvent("jwt-login-logout", {
                composed: true,
                bubbles: true,
                cancelable: false,
                detail: {
                  redirect: true
                }
              }));
              break;

            case 403:
              // if this was a 403 it should be because of a bad jwt
              // or out of date one. This hopefully gets a new one if not
              // other listeners will ensure we redirect appropriately
              this.dispatchEvent(new CustomEvent("jwt-login-refresh-token", {
                composed: true,
                bubbles: true,
                cancelable: false,
                detail: {
                  element: {
                    obj: this,
                    callback: "refreshRequest",
                    params: [target]
                  }
                }
              }));
              break;

            default:
              _haxcmsSiteStore.store.toast(e.detail.value.status + " " + e.detail.value.statusText, 5000, {
                fire: true
              });

              _haxcmsSiteStore.store.playSound("error");

              break;
          }
        }
      }
      /**
       * Attempt to salvage the request that was kicked off
       * when our JWT needed refreshed
       */

    }, {
      key: "refreshRequest",
      value: function refreshRequest(jwt, element) {
        // force the jwt to be the updated jwt
        // this helps avoid any possible event timing issue
        this.jwt = jwt;
        element.body.jwt = jwt;
        element.headers = {
          Authorization: "Bearer ".concat(this.jwt)
        }; // again, sanity check on delay

        setTimeout(function () {
          element.generateRequest();
        }, 0);
      }
    }, {
      key: "loadingChanged",
      value: function loadingChanged(e) {
        this.loading = e.detail.value;
      }
      /**
       * Break the shadow root for this element (by design)
       */

    }, {
      key: "createRenderRoot",
      value: function createRenderRoot() {
        return this;
      }
      /**
       * ready life cycle
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this2 = this;

        (0, _mobxEsm.autorun)(function (reaction) {
          _this2.editMode = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.editMode); // force import on editMode enabled

          if (_this2.editMode && (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeHaxBody)) {
            _haxStore.HAXStore.activeHaxBody.importContent((0, _mobxEsm.toJS)(_haxcmsSiteStore.store.activeItemContent));
          }

          _this2.__disposer.push(reaction);
        });
        (0, _mobxEsm.autorun)(function (reaction) {
          _this2.manifest = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.manifest);

          _this2.__disposer.push(reaction);
        });
        (0, _mobxEsm.autorun)(function (reaction) {
          _this2.activeItem = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.activeItem);

          _this2.__disposer.push(reaction);
        });

        if (_haxStore.HAXStore.ready) {
          var detail = {
            detail: true
          };

          this._storeReadyToGo(detail);
        } // fire event suggesting that we were authorized to have a site editor
        // so the UI and other pieces can react to this news
        // this tag is going to be added by a backend if it has determined we have a valid one


        window.dispatchEvent(new CustomEvent("haxcms-site-editor-loaded", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: true
        }));
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "appStore") {
            _this3.querySelector("#hax").setAttribute("app-store", JSON.stringify(_this3[propName]));
          }

          if (propName == "publishing") {
            _this3._publishingChanged(_this3[propName], oldValue);
          } else if (propName == "activeItem") {
            _this3.dispatchEvent(new CustomEvent("manifest-changed", {
              detail: _this3[propName]
            }));

            _this3._activeItemChanged(_this3[propName], oldValue);
          } else if (propName == "manifest") {
            _this3.dispatchEvent(new CustomEvent("manifest-changed", {
              detail: _this3[propName]
            }));

            _this3._manifestChanged(_this3[propName], oldValue);
          }
        });
      }
      /**
       * Respond to a failed request to refresh the token by killing the logout process
       */

    }, {
      key: "_tokenRefreshFailed",
      value: function _tokenRefreshFailed(e) {
        this.dispatchEvent(new CustomEvent("jwt-login-logout", {
          composed: true,
          bubbles: true,
          cancelable: false,
          detail: {
            redirect: true
          }
        }));
      }
      /**
       * Detatched life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        if (this.siteDashboard) {
          this.siteDashboard.remove();
          delete this.siteDashboard;
        }

        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        window.removeEventListener("jwt-login-refresh-error", this._tokenRefreshFailed.bind(this));
        window.removeEventListener("hax-store-ready", this._storeReadyToGo.bind(this));
        window.removeEventListener("haxcms-save-outline", this.saveOutline.bind(this));
        window.removeEventListener("haxcms-save-node", this.saveNode.bind(this));
        window.removeEventListener("haxcms-save-node-details", this.saveNodeDetails.bind(this));
        window.removeEventListener("haxcms-save-site-data", this.saveManifest.bind(this));
        window.removeEventListener("haxcms-publish-site", this.publishSite.bind(this));
        window.removeEventListener("haxcms-sync-site", this.syncSite.bind(this));
        window.removeEventListener("haxcms-git-revert-last-commit", this.revertCommit.bind(this));
        window.removeEventListener("json-outline-schema-active-item-changed", this._newActiveItem.bind(this));
        window.removeEventListener("json-outline-schema-active-body-changed", this._bodyChanged.bind(this));
        window.removeEventListener("haxcms-load-node-fields", this.loadNodeFields.bind(this));
        window.removeEventListener("haxcms-load-site-dashboard", this.loadSiteDashboard.bind(this));
        window.removeEventListener("haxcms-load-user-data", this.loadUserData.bind(this));
        window.removeEventListener("haxcms-create-node", this.createNode.bind(this));
        window.removeEventListener("haxcms-delete-node", this.deleteNode.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditor.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Load user data from backend
       */

    }, {
      key: "loadUserData",
      value: function loadUserData(e) {
        this.querySelector("#getuserdata").body = {
          jwt: this.jwt
        };
        this.querySelector("#getuserdata").generateRequest();
      }
      /**
       * Load and display node fields
       */

    }, {
      key: "loadNodeFields",
      value: function loadNodeFields(e) {
        this.__nodeFieldsInvoked = e.detail;
        var form = document.createElement("simple-fields-form");
        form.style.margin = "0 0 50px 0";
        form.setAttribute("autoload", "autoload");
        form.method = this.method;
        form.headers = {
          Authorization: "Bearer ".concat(this.jwt),
          Accept: "application/json",
          "Content-Type": "application/json"
        };
        form.body = {
          jwt: this.jwt,
          token: this.getFormToken,
          site: {
            name: this.manifest.metadata.site.name
          },
          node: {
            id: this.activeItem.id
          }
        };
        form.loadEndpoint = this.getNodeFieldsPath;
        this.__fieldsForm = form;
        var b1 = document.createElement("button");
        b1.appendChild(document.createTextNode("Save"));
        b1.classList.add("hax-modal-btn");
        b1.setAttribute("dialog-confirm", "dialog-confirm");
        b1.addEventListener("click", this._saveNodeFieldsTap.bind(this));
        var b2 = document.createElement("button");
        b2.appendChild(document.createTextNode("cancel"));
        b2.setAttribute("dialog-dismiss", "dialog-dismiss");
        b2.classList.add("hax-modal-btn");
        b2.classList.add("cancel");
        b2.addEventListener("click", function () {
          return _haxcmsSiteStore.store.playSound("error");
        });
        var b = document.createElement("div");
        b.appendChild(b1);
        b.appendChild(b2);
        window.dispatchEvent(new CustomEvent("simple-modal-show", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            title: "Edit " + _haxcmsSiteStore.store.activeTitle + " fields",
            styles: {
              "--simple-modal-titlebar-background": "orange",
              "--simple-modal-titlebar-color": "black",
              "--simple-modal-width": "50vw",
              "--simple-modal-min-width": "400px",
              "--simple-modal-z-index": "100000000",
              "--simple-modal-height": "80vh",
              "--simple-modal-min-height": "400px",
              "--simple-modal-titlebar-height": "80px"
            },
            elements: {
              content: form,
              buttons: b
            },
            invokedBy: this.__nodeFieldsInvoked,
            clone: false,
            modal: true
          }
        }));
      }
      /**
       * Load site fields
       */

    }, {
      key: "loadSiteDashboard",
      value: function loadSiteDashboard(e) {
        this.__siteFieldsInvoked = e.detail; // ensure it exists as we do this on the fly and clean up constantly

        if (!this.siteDashboard) {
          var builder = document.getElementsByTagName("haxcms-site-builder")[0];
          this.siteDashboard = document.createElement("haxcms-site-dashboard");
          this.siteDashboard.headers = {
            Authorization: "Bearer ".concat(this.jwt)
          };
          this.siteDashboard.loadEndpoint = this.getSiteFieldsPath;
          this.siteDashboard.method = this.method; // insert right before the builder, you sneaky thing you

          builder.parentNode.insertBefore(this.siteDashboard, builder);
        }

        this.siteDashboard.body = {
          jwt: this.jwt,
          token: this.getFormToken,
          site: {
            name: this.manifest.metadata.site.name
          }
        };
        this.siteDashboard.headers = {
          Authorization: "Bearer ".concat(this.jwt)
        };
        setTimeout(function () {
          _haxcmsSiteStore.store.dashboardOpened = !_haxcmsSiteStore.store.dashboardOpened;
        }, 300);
      }
    }, {
      key: "_schemaFormValueChanged",
      value: function _schemaFormValueChanged(e) {
        var customTag = {
          property: "custom-theme-tag",
          title: "Custom theme tag",
          description: "Tag that supplies the custom theme",
          inputMethod: "textfield",
          required: true,
          validationType: "text"
        }; // @todo figure out why this isn't adding a field in on the fly

        /*if (e.target.value.theme === "haxcms-custom-theme") {
          e.target.addField(customTag.property, customTag);
          e.target.value[customTag.property] = customTag.property;
        } else {
          e.target.removeField(customTag.property);
          delete e.target.value[customTag.property];
        }*/
      }
      /**
       * Save the fields as we get tapped
       */

    }, {
      key: "_saveNodeFieldsTap",
      value: function _saveNodeFieldsTap(e) {
        var values = this.__fieldsForm.submit();

        values.id = this.activeItem.id; // fire event with details for saving

        window.dispatchEvent(new CustomEvent("haxcms-save-node-details", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: values
        })); // fire event to close the modal

        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * Save the fields as we get tapped
       */

    }, {
      key: "_saveSiteFieldsTap",
      value: function _saveSiteFieldsTap(e) {
        // fire event with details for saving
        window.dispatchEvent(new CustomEvent("haxcms-save-site-data", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: this.querySelector("#siteform").submit()
        })); // fire event to close the modal

        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * create node event
       */

    }, {
      key: "createNode",
      value: function () {
        var _createNode = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(e) {
          var _this4 = this;

          var reqBody, evt;
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  if (!e.detail.values) {
                    _context4.next = 14;
                    break;
                  }

                  reqBody = e.detail.values; // ensure site name and jwt are set in request

                  reqBody.jwt = this.jwt;
                  reqBody.site = {
                    name: this.manifest.metadata.site.name
                  }; // store who sent this in-case of multiple instances

                  this._originalTarget = e.detail.originalTarget; // docxImport use the routine from app-hax

                  if (!reqBody.docximport) {
                    _context4.next = 10;
                    break;
                  }

                  _context4.next = 8;
                  return new Promise(function (res, rej) {
                    return _require.default(["../../../file-system-broker/lib/docx-file-system-broker.js"], res, rej);
                  }).then( /*#__PURE__*/function () {
                    var _ref = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(e) {
                      var broker, file, formData, structure, response;
                      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              // enable core services
                              (0, _microServices.enableServices)(["haxcms"]); // get the broker for docx selection

                              broker = window.FileSystemBroker.requestAvailability();
                              _context3.next = 4;
                              return broker.loadFile("docx");

                            case 4:
                              file = _context3.sent;
                              // tee up as a form for upload
                              formData = new FormData();
                              formData.append("method", reqBody.docximport); // this is a branch or site based importer

                              structure = "course";

                              if (_this4.manifest.metadata.build && _this4.manifest.metadata.structure) {
                                structure = _this4.manifest.metadata.structure;
                              }

                              formData.append("type", structure);
                              formData.append("parentId", reqBody.parent); // optional parent value, if set, this becomes the parent info for top level pages

                              formData.append("upload", file);
                              _context3.next = 14;
                              return _microFrontendRegistry.MicroFrontendRegistry.call("@haxcms/docxToSite", formData);

                            case 14:
                              response = _context3.sent;

                              if (!(response.status == 200 && response.data && response.data.contents != "")) {
                                _context3.next = 19;
                                break;
                              }

                              // @todo right here is where we need to interject our confirmation dialog
                              // workflow. We can take the items that just came back and visualize them
                              // using our outline / hierarchy visualization
                              reqBody.items = response.data.items;
                              _context3.next = 19;
                              return new Promise(function (res, rej) {
                                return _require.default(["../../../outline-designer/outline-designer.js"], res, rej);
                              }).then( /*#__PURE__*/function () {
                                var _ref2 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {
                                  var _styles;

                                  var outline, b1, b2, div;
                                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                                    while (1) {
                                      switch (_context2.prev = _context2.next) {
                                        case 0:
                                          outline = document.createElement("outline-designer");
                                          outline.items = response.data.items;
                                          outline.eventData = reqBody;
                                          outline.storeTools = true;
                                          b1 = document.createElement("button");
                                          b1.innerText = "Confirm";
                                          b1.classList.add("hax-modal-btn");
                                          b1.addEventListener('click', /*#__PURE__*/function () {
                                            var _ref3 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {
                                              var data, deleted, modified, added, sumChanges, confirmation, evt;
                                              return _regeneratorRuntime().wrap(function _callee$(_context) {
                                                while (1) {
                                                  switch (_context.prev = _context.next) {
                                                    case 0:
                                                      _context.next = 2;
                                                      return outline.getData();

                                                    case 2:
                                                      data = _context.sent;
                                                      deleted = 0;
                                                      modified = 0;
                                                      added = 0;
                                                      data.items.map(function (item) {
                                                        if (item.delete) {
                                                          deleted++;
                                                        } else if (item.new) {
                                                          added++;
                                                        } else if (item.modified) {
                                                          modified++;
                                                        }
                                                      });
                                                      sumChanges = "".concat(added > 0 ? "\u2023 ".concat(added, " new pages will be created\n") : '').concat(modified > 0 ? "\u2023 ".concat(modified, " pages will be updated\n") : '').concat(deleted > 0 ? "\u2023 ".concat(deleted, " pages will be deleted\n") : '');
                                                      confirmation = false; // no confirmation required if there are no tracked changes

                                                      if (sumChanges == '') {
                                                        confirmation = true;
                                                      } else {
                                                        confirmation = window.confirm("Saving will commit the following actions:\n".concat(sumChanges, "\nAre you sure?"));
                                                      }

                                                      if (confirmation) {
                                                        _this4.querySelector("#createajax").body = data;

                                                        _this4.querySelector("#createajax").generateRequest();

                                                        evt = new CustomEvent("simple-modal-hide", {
                                                          bubbles: true,
                                                          composed: true,
                                                          cancelable: true,
                                                          detail: {}
                                                        });
                                                        window.dispatchEvent(evt);
                                                      }

                                                    case 11:
                                                    case "end":
                                                      return _context.stop();
                                                  }
                                                }
                                              }, _callee);
                                            }));

                                            return function (_x4) {
                                              return _ref3.apply(this, arguments);
                                            };
                                          }());
                                          b2 = document.createElement("button");
                                          b2.innerText = "Cancel";
                                          b2.classList.add("hax-modal-btn");
                                          b2.classList.add("cancel");
                                          b2.addEventListener('click', function (e) {
                                            var evt = new CustomEvent("simple-modal-hide", {
                                              bubbles: true,
                                              composed: true,
                                              cancelable: true,
                                              detail: {}
                                            });
                                            window.dispatchEvent(evt);
                                          }); // button container

                                          div = document.createElement('div');
                                          div.appendChild(b1);
                                          div.appendChild(b2);

                                          _this4.dispatchEvent(new CustomEvent("simple-modal-show", {
                                            bubbles: true,
                                            cancelable: true,
                                            composed: true,
                                            detail: {
                                              title: "Confirm structure",
                                              elements: {
                                                content: outline,
                                                buttons: div
                                              },
                                              modal: true,
                                              styles: (_styles = {
                                                "--simple-modal-titlebar-background": "transparent",
                                                "--simple-modal-titlebar-color": "black",
                                                "--simple-modal-width": "90vw",
                                                "--simple-modal-min-width": "300px",
                                                "--simple-modal-z-index": "100000000",
                                                "--simple-modal-height": "90vh",
                                                "--simple-modal-min-height": "400px",
                                                "--simple-modal-titlebar-height": "64px"
                                              }, babelHelpers.defineProperty(_styles, "--simple-modal-titlebar-color", "black"), babelHelpers.defineProperty(_styles, "--simple-modal-titlebar-height", "80px"), babelHelpers.defineProperty(_styles, "--simple-modal-titlebar-background", "orange"), _styles)
                                            }
                                          }));

                                        case 17:
                                        case "end":
                                          return _context2.stop();
                                      }
                                    }
                                  }, _callee2);
                                }));

                                return function (_x3) {
                                  return _ref2.apply(this, arguments);
                                };
                              }());

                            case 19:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, _callee3);
                    }));

                    return function (_x2) {
                      return _ref.apply(this, arguments);
                    };
                  }());

                case 8:
                  _context4.next = 14;
                  break;

                case 10:
                  this.querySelector("#createajax").body = reqBody;
                  this.querySelector("#createajax").generateRequest();
                  evt = new CustomEvent("simple-modal-hide", {
                    bubbles: true,
                    composed: true,
                    cancelable: true,
                    detail: {}
                  });
                  window.dispatchEvent(evt);

                case 14:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function createNode(_x) {
          return _createNode.apply(this, arguments);
        }

        return createNode;
      }()
    }, {
      key: "_handleCreateResponse",
      value: function _handleCreateResponse(response) {
        this.dispatchEvent(new CustomEvent("haxcms-trigger-update", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: true
        }));
        this.dispatchEvent(new CustomEvent("haxcms-create-node-success", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            value: true,
            originalTarget: this._originalTarget
          }
        }));
      }
      /**
       * delete the node we just got
       */

    }, {
      key: "deleteNode",
      value: function deleteNode(e) {
        this.querySelector("#deleteajax").body = {
          jwt: this.jwt,
          site: {
            name: this.manifest.metadata.site.name
          },
          node: {
            id: e.detail.item.id
          }
        };
        this.querySelector("#deleteajax").generateRequest();
        var evt = new CustomEvent("simple-modal-hide", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {}
        });
        window.dispatchEvent(evt);
      }
      /**
       * node deleted response
       */

    }, {
      key: "_handleDeleteResponse",
      value: function _handleDeleteResponse(response) {
        var _this5 = this;

        // this will force ID to update and avoid a page miss
        // when we deleted the node
        window.history.replaceState({}, null, _haxcmsSiteStore.store.fallbackItemSlug()); // delay ensures the fallback has been moved to prior to
        // rebuild of the manifest which should be lacking the deleted ID

        setTimeout(function () {
          _this5.dispatchEvent(new CustomEvent("haxcms-trigger-update", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: true
          }));
        }, 100);
      }
      /**
       * Establish certain global settings in HAX once it claims to be ready to go
       */

    }, {
      key: "_storeReadyToGo",
      value: function _storeReadyToGo(event) {
        if (event.detail) {
          _haxStore.HAXStore.connectionRewrites.appendJwt = "jwt";
          _haxStore.HAXStore.haxTray.hidePreferencesButton = true;
        }
      }
      /**
       * notice publishing callback changing state
       */

    }, {
      key: "_publishingChanged",
      value: function _publishingChanged(newValue, oldValue) {
        if (newValue) {
          _haxcmsSiteStore.store.toast("Publishing...", 0, {
            hat: "random"
          });
        } else if (!newValue && oldValue) {
          _haxcmsSiteStore.store.toast("Publishing...", 2000, {
            hat: "random"
          });
        }
      }
      /**
       * react to manifest being changed
       */

    }, {
      key: "_manifestChanged",
      value: function _manifestChanged(newValue) {
        if (this.activeItem && newValue.metadata) {
          // set upload manager to point to this location in a more dynamic fashion
          _haxStore.HAXStore.connectionRewrites.appendUploadEndPoint = "siteName=" + newValue.metadata.site.name + "&nodeId=" + this.activeItem.id;
        }
      }
      /**
       * update the internal active item
       */

    }, {
      key: "_newActiveItem",
      value: function _newActiveItem(e) {
        this.activeItem = e.detail;
      }
      /**
       * active item changed
       */

    }, {
      key: "_activeItemChanged",
      value: function _activeItemChanged(newValue, oldValue) {
        if (newValue && this.manifest) {
          // set upload manager to point to this location in a more dynamic fashion
          _haxStore.HAXStore.connectionRewrites.appendUploadEndPoint = "siteName=" + this.manifest.metadata.site.name + "&nodeId=" + newValue.id;
        }
      }
      /**
       * handle update responses for nodes and outlines
       */

    }, {
      key: "_handleNodeResponse",
      value: function _handleNodeResponse(e) {
        // node response may include the item that got updated
        // it also may be a new path so let's ensure that's reflected
        if (e.detail.value && e.detail.value.data && e.detail.value.data.slug && this.activeItem.slug !== e.detail.value.data.slug) {
          window.history.replaceState({}, null, e.detail.value.data.slug);
        }

        _haxcmsSiteStore.store.toast("Page saved!", 3000, {
          hat: "random"
        });

        _haxcmsSiteStore.store.playSound("coin");

        this.dispatchEvent(new CustomEvent("haxcms-trigger-update", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: true
        })); // updates the node contents itself

        this.dispatchEvent(new CustomEvent("haxcms-trigger-update-node", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: true
        }));
      }
    }, {
      key: "_handleOutlineResponse",
      value: function _handleOutlineResponse(e) {
        var _this6 = this;

        // trigger a refresh of the data in node
        _haxcmsSiteStore.store.toast("Outline saved!", 3000, {
          hat: "random"
        });

        _haxcmsSiteStore.store.playSound("coin");

        setTimeout(function () {
          _this6.dispatchEvent(new CustomEvent("haxcms-trigger-update", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: true
          }));
        }, 100);
      }
    }, {
      key: "_handleManifestResponse",
      value: function _handleManifestResponse(e) {
        // trigger a refresh of the data in node
        _haxcmsSiteStore.store.toast("Site details saved, reloading to reflect changes!", 2000);

        _haxcmsSiteStore.store.playSound("coin");

        _haxcmsSiteStore.store.dashboardOpened = false;
        this.dispatchEvent(new CustomEvent("haxcms-trigger-update", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: true
        }));
        setTimeout(function () {
          window.location.reload();
        }, 2000);
      }
      /**
       * Tell the user we undid their last state of the site and trigger
       * everything to update to reflect this
       */

    }, {
      key: "_handleRevertResponse",
      value: function _handleRevertResponse(e) {
        // trigger a refresh of the data in node
        _haxcmsSiteStore.store.toast("Last save undone", 2000);

        _haxcmsSiteStore.store.playSound("error");

        this.dispatchEvent(new CustomEvent("haxcms-trigger-update", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: true
        }));
      }
      /**
       * Handle sync response that site may have changed or been updated
       */

    }, {
      key: "_handleSyncResponse",
      value: function _handleSyncResponse(e) {
        _haxcmsSiteStore.store.toast("Site synced", 2000, {
          hat: "random"
        });

        _haxcmsSiteStore.store.playSound("success"); // trigger a refresh of the data in node


        this.dispatchEvent(new CustomEvent("haxcms-trigger-update", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: true
        }));
        _haxcmsSiteStore.store.dashboardOpened = false;
      }
      /**
       * Publish response
       */

    }, {
      key: "_handlePublishResponse",
      value: function _handlePublishResponse(e) {
        var data = e.detail.response; // show the published response

        var content = document.createElement("span");
        content.innerHTML = "\n    <a href=\"".concat(data.url, "\" target=\"_blank\">\n      <button raised style=\"color:yellow;text-transform: none;font-weight: bold;\">\n      ").concat(data.label, "\n      </button>\n    </a>");
        var evt = new CustomEvent("haxcms-toast-show", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            text: data.response,
            duration: 10000,
            slot: content.cloneNode(true)
          }
        });
        window.dispatchEvent(evt);
        _haxcmsSiteStore.store.dashboardOpened = false;
      }
      /**
       * Save node event
       */

    }, {
      key: "saveNode",
      value: function () {
        var _saveNode = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(e) {
          var body;
          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (!this.saveNodePath) {
                    _context5.next = 14;
                    break;
                  }

                  _context5.next = 3;
                  return _haxStore.HAXStore.activeHaxBody.haxToContent();

                case 3:
                  body = _context5.sent;
                  _context5.t0 = this.jwt;
                  _context5.t1 = {
                    name: this.manifest.metadata.site.name
                  };
                  _context5.t2 = this.activeItem.id;
                  _context5.t3 = body;
                  _context5.next = 10;
                  return _haxStore.HAXStore.htmlToHaxElements(body);

                case 10:
                  _context5.t4 = _context5.sent;
                  _context5.t5 = {
                    id: _context5.t2,
                    body: _context5.t3,
                    schema: _context5.t4
                  };
                  this.querySelector("#nodeupdateajax").body = {
                    jwt: _context5.t0,
                    site: _context5.t1,
                    node: _context5.t5
                  };
                  this.querySelector("#nodeupdateajax").generateRequest();

                case 14:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function saveNode(_x5) {
          return _saveNode.apply(this, arguments);
        }

        return saveNode;
      }()
      /**
       * Save node event
       */

    }, {
      key: "saveNodeDetails",
      value: function saveNodeDetails(e) {
        // send the request
        if (this.saveNodePath) {
          this.querySelector("#nodeupdateajax").body = {
            jwt: this.jwt,
            site: {
              name: this.manifest.metadata.site.name
            },
            node: {
              id: e.detail.id,
              details: e.detail
            }
          };
          this.querySelector("#nodeupdateajax").generateRequest();
        }
      }
      /**
       * Save the outline based on an event firing.
       */

    }, {
      key: "saveOutline",
      value: function saveOutline(e) {
        if (this.saveOutlinePath) {
          this.querySelector("#outlineupdateajax").body = {
            jwt: this.jwt,
            site: {
              name: this.manifest.metadata.site.name
            },
            items: e.detail
          };
          this.querySelector("#outlineupdateajax").generateRequest();
        }
      }
      /**
       * Save the outline based on an event firing.
       */

    }, {
      key: "saveManifest",
      value: function saveManifest(e) {
        // now let's work on the outline
        var values = e.detail; // if we have a cssVariable selected then generate a hexCode off of it

        if (values.cssVariable) {
          values.hexCode = window.SimpleColorsStyles.colors[values.cssVariable.replace("--simple-colors-default-theme-", "").replace("-7", "")][6];
        } // add in our standard pieces


        values.jwt = this.jwt;

        if (values.site) {
          values.site.name = this.manifest.metadata.site.name;
        } else {
          values.site = {
            name: this.manifest.metadata.site.name
          };
        }

        if (this.saveManifestPath) {
          this.querySelector("#manifestupdateajax").body = values;
          this.querySelector("#manifestupdateajax").generateRequest();
        }
      }
      /**
       * Notice body of content has changed and import into HAX
       */

    }, {
      key: "_bodyChanged",
      value: function _bodyChanged(e) {
        if (_haxStore.HAXStore.activeHaxBody) {
          _haxStore.HAXStore.activeHaxBody.importContent(e.detail);
        }
      }
      /**
       * Save the outline based on an event firing.
       */

    }, {
      key: "publishSite",
      value: function publishSite(e) {
        if (this.publishSitePath) {
          this.querySelector("#publishajax").body = {
            jwt: this.jwt,
            site: {
              name: this.manifest.metadata.site.name
            }
          };
          this.querySelector("#publishajax").generateRequest();
        }
      }
      /**
       * Revert last commit
       */

    }, {
      key: "syncSite",
      value: function syncSite(e) {
        if (this.syncSitePath) {
          this.querySelector("#syncajax").body = {
            jwt: this.jwt,
            site: {
              name: _haxcmsSiteStore.store.manifest.metadata.site.name
            }
          };
          this.querySelector("#syncajax").generateRequest();
        }
      }
      /**
       * Revert last commit
       */

    }, {
      key: "revertCommit",
      value: function revertCommit(e) {
        if (this.revertSitePath) {
          this.querySelector("#revertajax").body = {
            jwt: this.jwt,
            site: {
              name: _haxcmsSiteStore.store.manifest.metadata.site.name
            }
          };
          this.querySelector("#revertajax").generateRequest();
        }
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "haxcms-site-editor";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          getUserDataPath: {
            type: String,
            attribute: "get-user-data-path"
          },

          /**
           * Allow method to be overridden, useful in local testing
           */
          method: {
            type: String
          },

          /**
           * JSON Web token, it'll come from a global call if it's available
           */
          jwt: {
            type: String
          },

          /**
           * end point for saving nodes
           */
          saveNodePath: {
            type: String,
            attribute: "save-node-path"
          },

          /**
           * end point for create new nodes
           */
          createNodePath: {
            type: String,
            attribute: "create-node-path"
          },

          /**
           * end point for delete nodes
           */
          deleteNodePath: {
            type: String,
            attribute: "delete-node-path"
          },

          /**
           * end point for saving manifest
           */
          saveManifestPath: {
            type: String,
            attribute: "save-manifest-path"
          },

          /**
           * end point for publishing
           */
          publishSitePath: {
            type: String,
            attribute: "publish-site-path"
          },

          /**
           * end point for revert
           */
          revertSitePath: {
            type: String,
            attribute: "revert-site-path"
          },
          appendTarget: {
            type: Object
          },
          appElement: {
            type: Object
          },

          /**
           * end point for sync
           */
          syncSitePath: {
            type: String,
            attribute: "sync-site-path"
          },

          /**
           * Publishing end point, this has CDN implications so show message
           */
          publishing: {
            type: Boolean
          },

          /**
           * end point for saving outline
           */
          saveOutlinePath: {
            type: String,
            attribute: "save-outline-path"
          },

          /**
           * appStore object from backend
           */
          appStore: {
            type: Object
          },

          /**
           * if the node is in an edit state or not
           */
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          },

          /**
           * Active item of the node being worked on, JSON outline schema item format
           */
          activeItem: {
            type: Object
          },

          /**
           * Outline of items in json outline schema format
           */
          manifest: {
            type: Object
          },
          getNodeFieldsPath: {
            type: String,
            attribute: "get-node-fields-path"
          },
          getSiteFieldsPath: {
            type: String,
            attribute: "save-site-fields-path"
          },
          getFormToken: {
            type: String,
            attribute: "get-form-token"
          },

          /**
           * Site dashboard element reference
           */
          siteDashboard: {
            type: Object
          }
        };
      }
    }]);
    return HAXCMSSiteEditor;
  }(_index.LitElement);

  _exports.HAXCMSSiteEditor = HAXCMSSiteEditor;
  customElements.define(HAXCMSSiteEditor.tag, HAXCMSSiteEditor);
});