define(["exports", "../../lit/index.js", "./lib/simple-fields-lite.js", "./lib/simple-fields-field.js"], function (_exports, _index, _simpleFieldsLite, _simpleFieldsField) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFields = void 0;

  var _templateObject_acc1a7308e0011ed99ce491205e67b1d, _templateObject2_acc1a7308e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
    * `simple-fields`
    * Uses JSON Schema to display a series of fields
    * 
   ### Styling
   `<simple-fields>` provides following custom properties
   for styling:
   
   Custom property | Description | Default
   ----------------|-------------|--------
   `--simple-fields-margin` | vertical margin around container | 16px
   `--simple-fields-margin-small` | smaller vertical margin above field itself | 8px
   `--simple-fields-border-radus` | default border-radius | 2px
   `--simple-fields-color` | text color | black
   `--simple-fields-error-color` | error text color | #b40000
   `--simple-fields-accent-color` | accent text/underline color | #3f51b5
   `--simple-fields-border-color` | border-/underline color | #999
   `--simple-fields-border-color-light` | used for range tracks | #ccc
   `--simple-fields-faded-error-color` | used for range tracks | #ffc0c0
   
   #### Field text
   Custom property | Description | Default
   ----------------|-------------|--------
   `--simple-fields-font-size` | font-size of field | 16px
   `--simple-fields-font-family` | font-size of field | sans-serif
   `--simple-fields-line-height` | line-height of field | 22px
   
   #### Detail text
   Custom property | Description | Default
   ----------------|-------------|--------
   `--simple-fields-detail-font-size` | font-size of field details | 12px
   `--simple-fields-detail-font-family` | font-size of field details | sans-serif
   `--simple-fields-detail-line-height` | line-height of field details | 22px
   
   #### Disabled Fields
   Custom property | Description | Default
   ----------------|-------------|--------
   `--simple-fields-disabled-color` | disabled text color | #999
   `--simple-fields-disabled-opacity` | opacity for disabled field | 0.7
   
   #### Radio Buttons and Checkboxes
   Custom property | Description | Default
   ----------------|-------------|--------
   `--simple-fields-radio-option-display` | display label with field (flex) or above (block) | flex
   `--simple-fields-radio-option-flex-wrap` | allow radio options to wrap to next line | wrap
   
   ### Configuring schemaConversion Property
   You can customise elements from JSON schema conversion by setting `schemaConversion` property.
   ```
   type: {                                       //For properties in "this.schema", define elements based on a property's "type"
     object: {                                   //Defines element used when property's "type" is an "object"
       format: {                                 //Optional: define elements for "object" properties by "format"
         "tabs": {                               //Defines element used for object properties when "format" is "tabs"
           element: "a11y-tabs"                  //Element to create, eg. "paper-input", "select", "simple-fields-array", etc.
           descriptionProperty: "description"    //Optional: element's property that sets its description, e.g. "description"
           descriptionSlot: "description"        //Optional: element's slot that contains its description, e.g. "description"
           errorProperty: "error"                //Optional: element's property that sets its error status, e.g. "error"
           errorChangedProperty: "error"         //Optional: event element fires when error status changes, e.g. "error-changed"
           errorMessageProperty: "errorMessage"  //Optional: element's property that sets its error message, e.g. "errorMessage"
           errorMessageSlot: "errorMessage"      //Optional: element's slot that contains its error message, e.g. "errorMessage"
           labelProperty: "label"                //Optional: element's property that sets its label, e.g. "label"
           labelSlot: "label"                    //Optional: element's slot that contains its label, e.g. "label"
           valueProperty: "value"                //Optional: element's property that gets its value, e.g. "value" or "checked"
           setValueProperty: "value"             //Optional: element's property that sets its value, e.g. "value" or "checked" (default is same as valueProperty)
           valueChangedProperty: "value-changed" //Optional: event element fires when value property changes, e.g. "value-changed" or "click"
           valueSlot: ""                         //Optional: element's slot that's used to set its value, e.g. ""
           description: ""                       //Optional: element that contains description, e.g. "p", "span", "paper-tooltip", etc.
           child: {                              //Optional: child elements to be appended
             element: "a11y-tab"                 //Optional: type of child element, eg. "paper-input", "select", "simple-fields-array", etc.
             attributes: {                       //Optional: sets child element's attributes based on this.schemaConversion
               disabled: true                    //Example: sets disabled to true  
             } 
             properties: {                       //Optional: sets child element's attributes based on this.schema properties
               icon: "iconName"                  //Example: sets child element's icon property to this.schema property's iconName 
             }, 
             slots: {                            //Optional: inserts schema properties in child element's slots
               label: "label",                   //Example: places schema property's label into child element's label slot
               "": "description"                 //Example: places schema property's description into child element's unnamed slot
             } 
           },
           attributes: {},
           properties: {},
           slots: {}
         }
       },
       defaultSettings: {                        //Default element used for object properties
         element: ""
         label: ""
         description: ""     
         attributes: {}       
         properties: {}       
         slots: {}           
       }
     }
   }
   ``` 
   ### Configuring fieldsConversion Property
   You can customise fields to JSON schema conversion by setting `fieldsConversion` property.
   ```
   defaultSettings: {            //default JSON schema type if no type is matched
     type: "string"              //sets JSON schema type to string
   },
   inputMethod: {                //for fields in "this.fields", define elements based on a property's "inputMethod"
     colorpicker: {              //settings if inputMethod is color picker
       defaultSettings: {        //default colorpicker settings
         type: "string",         //sets JSON schema type to string
         format: "color"         //sets JSON schema format to color
       }
     }
   }
   ``` 
    * @element simple-fields
    * @extends simple-fields-lite
    * @demo ./demo/index.html
    * @demo ./demo/schema.html Schema
    * @demo ./demo/conditional.html Conditional Logic
    * @demo ./demo/subschema.html Subschemas
    * @demo ./demo/form.html Form
    */
  var SimpleFields = /*#__PURE__*/function (_SimpleFieldsLite) {
    babelHelpers.inherits(SimpleFields, _SimpleFieldsLite);

    var _super = _createSuper(SimpleFields);

    function SimpleFields() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFields);
      _this = _super.call(this);
      _this.activeTabs = {};
      _this.__codeElements = [];
      _this.disableResponsive = false;
      setTimeout(function () {
        _this.addEventListener("a11y-tabs-active-changed", _this._handleActiveTab);
      }, 0);
      return _this;
    }
    /**
     * fields converted to JSON schema =
     *
     * @readonly
     * @returns object
     * @memberof SimpleFieldsLite
     */


    babelHelpers.createClass(SimpleFields, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_acc1a7308e0011ed99ce491205e67b1d || (_templateObject_acc1a7308e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div id=\"schema-fields\" aria-live=\"polite\" part=\"fields-list\">\n      <slot></slot>\n    </div>"])));
      } // haxProperty definition

    }, {
      key: "convertedSchema",
      get: function get() {
        var schema = {
          $schema: "http://json-schema.org/schema#",
          title: this.label,
          type: "object",
          required: [],
          properties: this.fieldsToSchema(this.fields)
        };
        return schema;
      }
      /**
       * gets JSON schema to form element conversion object
       *
       * @readonly
       * @memberof SimpleFields
       */

    }, {
      key: "schemaConversion",
      get: function get() {
        var _format;

        return this.elementizer || {
          defaultSettings: {
            element: "simple-fields-field",
            errorProperty: "errorMessage",
            invalidProperty: "invalid",
            noWrap: true,
            attributes: {
              type: "text"
            },
            properties: {
              minLength: "minlength",
              maxLength: "maxlength"
            }
          },
          format: {
            radio: {
              defaultSettings: {
                element: "simple-fields-field",
                noWrap: true,
                attributes: {
                  autofocus: true,
                  type: "radio"
                },
                properties: {
                  options: "options"
                },
                child: {
                  element: "simple-fields-array-item",
                  noWrap: true,
                  descriptionProperty: "description",
                  properties: {
                    previewBy: "previewBy"
                  }
                }
              }
            },
            select: {
              defaultSettings: {
                element: "simple-fields-field",
                noWrap: true,
                attributes: {
                  autofocus: true,
                  type: "select"
                },
                properties: {
                  options: "options",
                  items: "itemsList"
                }
              }
            },
            "simple-picker": {
              defaultSettings: {
                import: "@lrnwebcomponents/simple-picker/simple-picker.js",
                element: "simple-picker",
                attributes: {
                  autofocus: true,
                  justify: true
                },
                properties: {
                  options: "options",
                  justify: "justify"
                }
              }
            }
          },
          type: {
            array: {
              defaultSettings: {
                element: "simple-fields-array",
                noWrap: true,
                descriptionProperty: "description",
                child: {
                  element: "simple-fields-array-item",
                  noWrap: true,
                  descriptionProperty: "description",
                  properties: {
                    previewBy: "previewBy",
                    sortable: true
                  }
                }
              }
            },
            boolean: {
              defaultSettings: {
                element: "simple-fields-field",
                noWrap: true,
                attributes: {
                  autofocus: true,
                  type: "checkbox",
                  value: false
                }
              }
            },
            file: {
              defaultSettings: {
                element: "simple-fields-field",
                noWrap: true,
                attributes: {
                  autofocus: true,
                  type: "file"
                },
                properties: {
                  accepts: "accepts"
                }
              }
            },
            integer: {
              defaultSettings: {
                element: "simple-fields-field",
                noWrap: true,
                attributes: {
                  autofocus: true,
                  step: 1,
                  type: "number"
                },
                properties: {
                  minimum: "min",
                  maximum: "max",
                  multipleOf: "step"
                }
              }
            },
            "html-block": {
              defaultSettings: {
                import: "@lrnwebcomponents/simple-fields/lib/simple-fields-html-block.js",
                element: "simple-fields-html-block",
                noWrap: true,
                attributes: {
                  autofocus: false,
                  required: false
                }
              }
            },
            markup: {
              defaultSettings: {
                import: "@lrnwebcomponents/simple-fields/lib/simple-fields-code.js",
                element: "simple-fields-code",
                setValueProperty: "editorValue",
                noWrap: true,
                properties: {
                  theme: "theme"
                }
              },
              format: {
                "md-block": {
                  defaultSettings: {
                    element: "md-block",
                    setValueProperty: "source",
                    noWrap: true
                  }
                }
              }
            },
            number: {
              defaultSettings: {
                element: "simple-fields-field",
                noWrap: true,
                type: "number",
                attributes: {
                  autofocus: true,
                  type: "number"
                },
                properties: {
                  minimum: "min",
                  maximum: "max",
                  multipleOf: "step"
                }
              }
            },
            object: {
              defaultSettings: {
                element: "simple-fields-fieldset",
                noWrap: true
              },
              format: {
                tabs: {
                  defaultSettings: {
                    import: "@lrnwebcomponents/simple-fields/lib/simple-fields-tabs.js",
                    element: "simple-fields-tabs",
                    noWrap: true,
                    child: {
                      import: "@lrnwebcomponents/simple-fields/lib/simple-fields-tab.js",
                      element: "simple-fields-tab",
                      noWrap: true,
                      labelSlot: "label",
                      descriptionSlot: ""
                    },
                    properties: {
                      layoutBreakpoint: "layoutBreakpoint",
                      iconBreakpoint: "iconBreakpoint",
                      sticky: "sticky",
                      disableResponsive: this.disableResponsive
                    }
                  }
                },
                fields: {
                  defaultSettings: {
                    element: "simple-fields",
                    noWrap: true,
                    descriptionProperty: "description",
                    properties: {
                      schema: "schema"
                    }
                  }
                }
              }
            },
            string: {
              format: (_format = {
                alt: {
                  defaultSettings: {
                    element: "simple-fields-field",
                    noWrap: true,
                    attributes: {
                      autofocus: true,
                      required: true
                    }
                  }
                },
                color: {
                  defaultSettings: {
                    element: "simple-fields-field",
                    noWrap: true,
                    attributes: {
                      autofocus: true,
                      type: "color"
                    }
                  }
                },
                colorpicker: {
                  defaultSettings: {
                    import: "@lrnwebcomponents/simple-colors/lib/simple-colors-picker.js",
                    element: "simple-colors-picker",
                    attributes: {
                      autofocus: true,
                      justify: true
                    },
                    properties: {
                      justify: "justify"
                    }
                  }
                },
                combo: {
                  defaultSettings: {
                    import: "@lrnwebcomponents/simple-fields/lib/simple-fields-combo.js",
                    element: "simple-fields-combo",
                    noWrap: true,
                    attributes: {
                      autofocus: true,
                      justify: true
                    }
                  },
                  properties: {
                    autocomplete: "autocomplete",
                    justify: "justify"
                  }
                },
                date: {
                  defaultSettings: {
                    element: "simple-fields-field",
                    noWrap: true,
                    attributes: {
                      autofocus: true,
                      type: "date"
                    }
                  }
                },
                "date-time": {
                  defaultSettings: {
                    element: "simple-fields-field",
                    noWrap: true,
                    attributes: {
                      autofocus: true,
                      type: "datetime-local"
                    }
                  }
                }
              }, babelHelpers.defineProperty(_format, "date", {
                defaultSettings: {
                  element: "simple-fields-field",
                  noWrap: true,
                  attributes: {
                    autofocus: true,
                    type: "date"
                  }
                }
              }), babelHelpers.defineProperty(_format, "email", {
                defaultSettings: {
                  element: "simple-fields-field",
                  noWrap: true,
                  attributes: {
                    autofocus: true,
                    type: "email"
                  }
                }
              }), babelHelpers.defineProperty(_format, "fileupload", {
                defaultSettings: {
                  import: "@lrnwebcomponents/simple-fields/lib/simple-fields-upload.js",
                  element: "simple-fields-upload",
                  noWrap: true,
                  attributes: {
                    autofocus: true
                  }
                },
                properties: {
                  autocomplete: "autocomplete"
                }
              }), babelHelpers.defineProperty(_format, "iconpicker", {
                defaultSettings: {
                  import: "@lrnwebcomponents/simple-icon-picker/simple-icon-picker.js",
                  element: "simple-icon-picker",
                  attributes: {
                    autofocus: true,
                    justify: true
                  },
                  properties: {
                    justify: "justify",
                    options: "icons",
                    exclude: "exclude",
                    excludeSets: "excludeSets",
                    includeSets: "includeSets"
                  }
                }
              }), babelHelpers.defineProperty(_format, "month", {
                defaultSettings: {
                  element: "simple-fields-field",
                  noWrap: true,
                  attributes: {
                    autofocus: true,
                    type: "month"
                  }
                }
              }), babelHelpers.defineProperty(_format, "textarea", {
                defaultSettings: {
                  element: "simple-fields-field",
                  noWrap: true,
                  attributes: {
                    autofocus: true,
                    type: "textarea"
                  }
                }
              }), babelHelpers.defineProperty(_format, "time", {
                defaultSettings: {
                  element: "simple-fields-field",
                  noWrap: true,
                  attributes: {
                    autofocus: true,
                    type: "time"
                  }
                }
              }), babelHelpers.defineProperty(_format, "uri", {
                defaultSettings: {
                  element: "simple-fields-field",
                  noWrap: true,
                  attributes: {
                    autofocus: true,
                    type: "file"
                  }
                }
              }), babelHelpers.defineProperty(_format, "url", {
                defaultSettings: {
                  import: "@lrnwebcomponents/simple-fields/lib/simple-fields-url-combo.js",
                  element: "simple-fields-url-combo",
                  noWrap: true,
                  attributes: {
                    autofocus: true,
                    justify: true
                  },
                  properties: {
                    autocomplete: "autocomplete",
                    alwaysExpanded: "alwaysExpanded",
                    displayAs: "displayAs",
                    options: "options"
                  }
                }
              }), _format)
            }
          }
        };
      }
      /**
       * gets fields array to JSON schema conversion object
       *
       * @readonly
       * @memberof SimpleFields
       */

    }, {
      key: "fieldsConversion",
      get: function get() {
        return this.schematizer || {
          defaultSettings: {
            type: "string"
          },
          format: {
            "simple-fields": {
              defaultSettings: {
                type: "object",
                format: "simple-fields"
              }
            }
          },
          inputMethod: {
            alt: {
              defaultSettings: {
                type: "string",
                format: "alt"
              }
            },
            array: {
              defaultSettings: {
                type: "array"
              },
              properties: {
                label: "itemLabel"
              }
            },
            boolean: {
              defaultSettings: {
                type: "boolean"
              }
            },
            code: {
              defaultSettings: {
                type: "markup"
              }
            },
            "code-editor": {
              defaultSettings: {
                type: "markup"
              }
            },
            color: {
              defaultSettings: {
                type: "string",
                format: "color"
              }
            },
            colorpicker: {
              defaultSettings: {
                type: "string",
                format: "colorpicker"
              }
            },
            combo: {
              defaultSettings: {
                type: "string",
                format: "combo"
              }
            },
            "date-time": {
              defaultSettings: {
                type: "string",
                format: "date-time"
              }
            },
            datepicker: {
              defaultSettings: {
                type: "string",
                format: "date"
              }
            },
            fieldset: {
              defaultSettings: {
                type: "object"
              }
            },
            fileupload: {
              defaultSettings: {
                type: "string",
                format: "fileupload"
              }
            },
            haxupload: {
              defaultSettings: {
                type: "string",
                format: "fileupload"
              }
            },
            "html-block": {
              defaultSettings: {
                type: "html-block"
              }
            },
            iconpicker: {
              defaultSettings: {
                type: "string",
                format: "iconpicker"
              }
            },
            markup: {
              defaultSettings: {
                type: "markup"
              }
            },
            "md-block": {
              defaultSettings: {
                type: "markup"
              }
            },
            monthpicker: {
              defaultSettings: {
                type: "string",
                format: "month"
              }
            },
            number: {
              defaultSettings: {
                type: "number"
              }
            },
            object: {
              defaultSettings: {
                type: "object"
              }
            },
            select: {
              defaultSettings: {
                type: "string",
                format: "select"
              }
            },
            slider: {
              defaultSettings: {
                type: "number",
                format: "slider"
              }
            },
            tabs: {
              defaultSettings: {
                type: "object",
                format: "tabs"
              }
            },
            textarea: {
              defaultSettings: {
                type: "string",
                format: "textarea"
              }
            },
            timepicker: {
              defaultSettings: {
                type: "string",
                format: "time"
              }
            },
            url: {
              defaultSettings: {
                type: "string",
                format: "url"
              }
            },
            weekpicker: {
              defaultSettings: {
                type: "string",
                format: "week"
              }
            }
          }
        };
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFields.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFields.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (["fields", "fieldsConversion"].includes(propName)) _this2.schema = _this2.convertedSchema;
          if (propName === "__activeTabs" && _this2.activeTabs !== oldValue) _this2._handleActiveTabs();
        });
      }
      /**
       * updates the active tabs object
       *
       * @param {string} tabId, eg. 'settings.permisions.groups'
       * @memberof SimpleFields
       */

    }, {
      key: "setActiveTab",
      value: function setActiveTab(tabId) {
        var tabsId = tabId.replace(/\.[0-9a-z]+$/, ""),
            tabs = this.querySelector("#".concat(tabsId)),
            tab = tabs.querySelector("#".concat(tabId));
        if (tabs && tab) tabs.activeTab = tabId;
      }
      /**
       * sets active tabs by path, eg. 'settings/permissions/groups'
       *
       * @param {string} path, eg. 'settings/permissions/groups'
       * @memberof SimpleFields
       */

    }, {
      key: "setActivePath",
      value: function setActivePath(path) {
        var _this3 = this;

        var parts = path.split("/"),
            tabId = "";
        parts.forEach(function (part) {
          _this3.setActiveTab(part);

          tabId += part;
        });
      }
      /**
       * matches schema property to fieldsConversion settings
       * @param {object} field fields array item
       * @param {object} conversion section of fieldsConverstion to search
       * @param {object} settings closest current match's defaultSettings object
       * @returns {object}
       * @memberof SimpleFieldsLite
       */

    }, {
      key: "_convertField",
      value: function _convertField(field) {
        var _this4 = this;

        var conversion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.fieldsConversion;
        var settings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        //see which keys the field and the conversion have in common
        var fieldKeys = Object.keys(field || {}),
            convKeys = Object.keys(conversion || {}).filter(function (key) {
          return fieldKeys.includes(key);
        }); //start with default conversion settings

        if (conversion.defaultSettings) settings = conversion.defaultSettings; //on the matching keys check for more specific conversion settings

        convKeys.forEach(function (key) {
          var val = field[key],
              convData = conversion ? conversion[key] : undefined,
              convVal = !convData ? undefined : Array.isArray(val) ? convData[val[0]] : convData[val]; //if we have more specific settings get them recursively

          if (convVal) settings = _this4._convertField(field, convVal, convData, settings);
        });
        return settings;
      }
      /**
       * converts fields array to schema properties
       * @param {object} field field object to convert
       * @returns object schema properties
       * @memberof SimpleFieldsLite
       */

    }, {
      key: "_fieldToSchema",
      value: function _fieldToSchema(field) {
        var _this5 = this;

        var schema = {};
        Object.keys(field || {}).forEach(function (key) {
          if (!field.inputMethod && field.properties) field.inputMethod = "object";

          var conversion = _this5._convertField(field);

          if (conversion.type) schema.type = conversion.type;
          if (conversion.format) schema.format = conversion.format;

          if (key === "pattern") {
            if (field.validation != ".*") schema.pattern = field.validation;
          } else if (key === "properties") {
            if (conversion.type === "array" && Array.isArray(field.properties)) {
              schema.items = {
                type: "object",
                properties: _this5.fieldsToSchema(field.properties)
              };
            } else if (conversion.type === "array") {
              schema.items = _this5._fieldToSchema(field.properties);
            } else {
              schema.properties = _this5.fieldsToSchema(field.properties);
            }
            /*} else if (key === "slot") {
             schema[key] = !field[key] || field[key] === "" 
               ? "unnamed-slot-placeholder" 
               : field[key];*/

          } else if (!["items", "inputMethod", "property", "properties", "required", "type", "validation"].includes(key)) {
            schema[key] = field[key];
          }
        }); //sets a default code-editor theme

        if (schema.type == "markup" && !schema.theme) schema.theme = this.codeTheme;
        return schema;
      }
      /**
       * converts fields array to schema properties
       * @param {*} fields fields array to convert
       * @returns object schema properties
       * @memberof SimpleFieldsLite
       */

    }, {
      key: "fieldsToSchema",
      value: function fieldsToSchema(fields) {
        var _this6 = this;

        var schema = {};

        if (fields && fields.forEach) {
          fields.forEach(function (field) {
            var prop = !field.property ? "" : field.property;
            schema[prop] = _this6._fieldToSchema(field);
          });
        }

        return schema;
      }
      /**
       * handles active tabs changes
       *
       * @event "active-tabs-changed"
       * @memberof SimpleFields
       */

    }, {
      key: "_handleActiveTabs",
      value: function _handleActiveTabs() {
        this.dispatchEvent(new CustomEvent("active-tabs-changed", {
          bubbles: true,
          cancelable: true,
          composed: false,
          detail: this
        }));
      }
      /**
       * updates the active tabs object
       *
       * @param {event} e
       * @memberof SimpleFields
       */

    }, {
      key: "_handleActiveTab",
      value: function _handleActiveTab(e) {
        if (e && e.detail && e.detail.id) this.activeTabs[e.detail.id] = e.detail.activeTab;
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFields), "styles", this)), [(0, _index.css)(_templateObject2_acc1a7308e0011ed99ce491205e67b1d || (_templateObject2_acc1a7308e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --simple-picker-background-color: var(\n            --simple-fields-background-color,\n            transparent\n          );\n          --simple-picker-border-width: 0;\n          --simple-picker-focus-border-width: 0;\n          --simple-picker-display: block;\n          --simple-picker-listbox-border-width: 1px;\n          --simple-picker-listbox-outline: none;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n      "])))]);
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {};
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFields), "properties", this)), {}, {
          disableResponsive: {
            type: Boolean,
            attribute: "disable-responsive"
          },

          /**
           * Fields to convert to JSON Schema.
           */
          fields: {
            type: Array
          },

          /**
           * Conversion from fields array with inputMethods to JSON schema types and formats.
           * _See [Configuring fieldsConversion Property](configuring-the-fieldsconversion-property) above._
           */
          schematizer: {
            type: Object,
            attribute: "schematizer"
          },

          /**
           * Schema label
           */
          label: {
            type: String
          },

          /**
           * tracks all activeTabs as an object
           */
          __activeTabs: {
            type: Object,
            attribute: "active-path"
          },

          /**
           * default theme for code editor
           */
          codeTheme: {
            type: String,
            attribute: "code-theme"
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-fields";
      }
    }]);
    return SimpleFields;
  }(_simpleFieldsLite.SimpleFieldsLite);

  _exports.SimpleFields = SimpleFields;
  customElements.define(SimpleFields.tag, SimpleFields);
});