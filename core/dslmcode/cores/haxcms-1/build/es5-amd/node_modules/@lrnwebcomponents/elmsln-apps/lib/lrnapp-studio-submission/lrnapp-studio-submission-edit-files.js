define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../secure-request/secure-request.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-button.js", "../../../hax-iconset/lib/simple-hax-iconset.js", "../../../../@polymer/paper-dialog/paper-dialog.js", "../../../../@vaadin/vaadin-upload/vaadin-upload.js", "./lrnapp-studio-submission-edit-add-asset.js", "./lrnapp-studio-submission-edit-file.js"], function (_exports, _polymerElement, _polymerDom, _domRepeat, _domIf, _secureRequest, _simpleIcon, _simpleIcons, _simpleIconButton, _simpleHaxIconset, _paperDialog, _vaadinUpload, _lrnappStudioSubmissionEditAddAsset, _lrnappStudioSubmissionEditFile) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioSubmissionEditFiles = void 0;

  var _templateObject_b40bb4c0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappStudioSubmissionEditFiles = /*#__PURE__*/function (_SecureRequestXhr) {
    babelHelpers.inherits(LrnappStudioSubmissionEditFiles, _SecureRequestXhr);

    var _super = _createSuper(LrnappStudioSubmissionEditFiles);

    function LrnappStudioSubmissionEditFiles() {
      babelHelpers.classCallCheck(this, LrnappStudioSubmissionEditFiles);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappStudioSubmissionEditFiles, [{
      key: "_filesChanged",
      value: function _filesChanged(files) {}
    }, {
      key: "_addFile",
      value: function _addFile(e) {
        // @todo switch to singleton
        this.$.dialog.open();
      }
    }, {
      key: "_selectPage",
      value: function _selectPage(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var page = normalizedEvent.localTarget.getAttribute("data-page");
        this.set("selectedPage", page);
      }
    }, {
      key: "_handleImageUploadSuccess",
      value: function _handleImageUploadSuccess(e) {
        this.set("selectedPage", 0);
        var files = [];
        var response = e.detail.xhr.response; // normalize response string

        var response = JSON.parse(response); // get the newely created file

        if (response.data.file) {
          var file = response.data.file;

          if (this.files === null) {
            this.set("files", []);
          }

          this.push("files", file);
          this.$.dialog.close();
        }
      }
    }, {
      key: "_deleteImage",
      value: function _deleteImage(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var deleteIndex = normalizedEvent.localTarget.getAttribute("data-index");
        this.splice("files", Number(deleteIndex), 1);
      }
    }, {
      key: "_canUpload",
      value: function _canUpload() {
        var uploadUrl = this.uploadUrl;

        if (uploadUrl !== null) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "log",
      value: function log(property) {}
      /**
       * attached life cycle
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappStudioSubmissionEditFiles.prototype), "connectedCallback", this).call(this);
        var uploadUrl = this.generateUrl("/api/files");

        if (uploadUrl !== null) {
          this.set("uploadUrl", uploadUrl);
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_b40bb4c0809211edaa2833647dc78c6c || (_templateObject_b40bb4c0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          position: relative;\n          min-height: 200px;\n        }\n        #pages {\n          display: block;\n        }\n        .files__files {\n          display: flex;\n          flex-wrap: wrap;\n        }\n        .files__files > * {\n          margin-right: 16px;\n          min-width: 200px;\n        }\n        paper-dialog {\n          width: 50%;\n          width: 50vmax;\n          padding: 16px;\n        }\n      </style>\n\n      <div class=\"files__files\">\n        <template is=\"dom-repeat\" items=\"[[files]]\" as=\"file\">\n          <lrnapp-studio-submission-edit-file\n            file=\"[[file]]\"\n            on-deleted=\"_deleteImage\"\n            data-index$=\"[[index]]\"\n          ></lrnapp-studio-submission-edit-file>\n        </template>\n        <lrnapp-studio-submission-edit-add-asset\n          on-click=\"_addFile\"\n          icon=\"editor:attach-file\"\n        ></lrnapp-studio-submission-edit-add-asset>\n      </div>\n      <paper-dialog id=\"dialog\">\n        <h2>Add Files</h2>\n        <div class=\"files__upload\">\n          <template is=\"dom-if\" if=\"[[uploadUrl]]\">\n            <vaadin-upload\n              accept=\"[[fileTypes]]\"\n              target=\"[[uploadUrl]]\"\n              method=\"POST\"\n              form-data-name=\"file-upload\"\n              on-upload-success=\"_handleImageUploadSuccess\"\n            >\n              <div class=\"files__drop-label\">\n                <simple-icon icon=\"description\"></simple-icon>\n                Upload files here:\n              </div>\n            </vaadin-upload>\n          </template>\n        </div>\n        <div>\n          <button dialog-dismiss>Cancel</button>\n        </div>\n      </paper-dialog>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-submission-edit-files";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          files: {
            type: Array,
            notify: true,
            value: null
          },
          selectedPage: {
            type: String,
            value: 0
          },
          uploadUrl: {
            type: String,
            value: null,
            observer: "log"
          },
          fileTypes: {
            type: String,
            value: ""
          }
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_filesChanged(files)"];
      }
    }]);
    return LrnappStudioSubmissionEditFiles;
  }((0, _secureRequest.SecureRequestXhr)(_polymerElement.PolymerElement));

  _exports.LrnappStudioSubmissionEditFiles = LrnappStudioSubmissionEditFiles;
  customElements.define(LrnappStudioSubmissionEditFiles.tag, LrnappStudioSubmissionEditFiles);
});