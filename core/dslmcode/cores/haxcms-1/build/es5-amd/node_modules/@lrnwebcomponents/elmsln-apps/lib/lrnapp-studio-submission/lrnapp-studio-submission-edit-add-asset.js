define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js", "../../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _polymerElement, _simpleIcon, _simpleIcons, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioSubmissionEditAddAsset = void 0;

  var _templateObject_b4079610809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappStudioSubmissionEditAddAsset = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappStudioSubmissionEditAddAsset, _PolymerElement);

    var _super = _createSuper(LrnappStudioSubmissionEditAddAsset);

    function LrnappStudioSubmissionEditAddAsset() {
      babelHelpers.classCallCheck(this, LrnappStudioSubmissionEditAddAsset);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappStudioSubmissionEditAddAsset, null, [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_b4079610809211edaa2833647dc78c6c || (_templateObject_b4079610809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          cursor: pointer;\n        }\n        :host([display=\"box\"]) {\n          display: block;\n          width: 200px;\n          height: 200px;\n          background: lightgray;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n        }\n        :host([display=\"pill\"]) {\n          display: block;\n          background: lightgray;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n        }\n        simple-icon {\n          color: gray;\n          --simple-icon-height: 50px;\n          --simple-icon-width: 50px;\n        }\n        :host([display=\"pill\"]) simple-icon {\n          --simple-icon-height: 50px;\n          --simple-icon-width: 50px;\n        }\n      </style>\n      <button>\n        <simple-icon icon=\"[[icon]]\"></simple-icon>\n      </button>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-submission-edit-add-asset";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          icon: {
            type: String,
            value: "add"
          },

          /**
           * Change the display of the add asset element
           *
           * @type String Options: 'box', 'pill'
           */
          display: {
            type: String,
            value: "box",
            reflectToAttribute: true
          }
        };
      }
    }]);
    return LrnappStudioSubmissionEditAddAsset;
  }(_polymerElement.PolymerElement);

  _exports.LrnappStudioSubmissionEditAddAsset = LrnappStudioSubmissionEditAddAsset;
  customElements.define(LrnappStudioSubmissionEditAddAsset.tag, LrnappStudioSubmissionEditAddAsset);
});