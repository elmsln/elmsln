define(["exports", "../../../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxUserMenu = void 0;

  var _templateObject_772b9980809211edaa2833647dc78c6c, _templateObject2_772b9980809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AppHaxUserMenu = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(AppHaxUserMenu, _LitElement);

    var _super = _createSuper(AppHaxUserMenu);

    function AppHaxUserMenu() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxUserMenu);
      _this = _super.call(this);
      _this.isOpen = false;
      _this.icon = "account-circle";
      return _this;
    }

    babelHelpers.createClass(AppHaxUserMenu, [{
      key: "toggleMenu",
      value: function toggleMenu() {
        this.isOpen = !this.isOpen;
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_772b9980809211edaa2833647dc78c6c || (_templateObject_772b9980809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"entireComponent\">\n        <div class=\"menuToggle\" part=\"menuToggle\" @click=\"", "\">\n          <slot name=\"menuButton\"\n            ><simple-icon-lite icon=\"", "\"></simple-icon-lite\n          ></slot>\n        </div>\n\n        <div class=\"user-menu ", "\">\n          <div class=\"pre-menu\">\n            <slot name=\"pre-menu\"></slot>\n          </div>\n          <div class=\"main-menu\">\n            <slot name=\"main-menu\"></slot>\n          </div>\n          <div class=\"post-menu\">\n            <slot name=\"post-menu\"></slot>\n          </div>\n        </div>\n      </div>\n    "])), this.toggleMenu, this.icon, this.isOpen ? "open" : "");
      }
    }], [{
      key: "tag",
      get: // a convention I enjoy so you can change the tag name in 1 place
      function get() {
        return "app-hax-user-menu";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          isOpen: {
            type: Boolean,
            reflect: true,
            attribute: "is-open"
          },
          icon: {
            type: String,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return (0, _index.css)(_templateObject2_772b9980809211edaa2833647dc78c6c || (_templateObject2_772b9980809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      :host {\n        font-family: \"Press Start 2P\", sans-serif;\n        text-align: center;\n        display: inline-block;\n        margin: 0px;\n        padding: 0px;\n      }\n\n      .menuToggle {\n        cursor: pointer;\n      }\n\n      .user-menu {\n        display: none;\n      }\n\n      .user-menu.open {\n        display: block;\n        top: 50px;\n        right: 0px;\n        position: absolute;\n        border: 1px solid var(--app-hax-accent-color);\n        background-color: var(--app-hax-background-color);\n      }\n\n      .user-menu.open ::slotted(*) {\n        display: block;\n        width: 100%;\n        margin: 0;\n        font-size: 16px;\n        text-align: left;\n        font-family: \"Press Start 2P\", sans-serif;\n        color: var(--app-hax-accent-color);\n        background-color: var(--app-hax-background-color);\n      }\n\n      .user-menu.open .main-menu ::slotted(*:hover),\n      .user-menu.open .main-menu ::slotted(*:active),\n      .user-menu.open .main-menu ::slotted(*:focus) {\n        background-color: var(--app-hax-background-color-active);\n        color: var(--app-hax-background-color);\n      }\n\n      .user-menu ::slotted(button) {\n        cursor: pointer;\n      }\n\n      .user-menu ::slotted(*) simple-icon-lite {\n        padding-right: 16px;\n      }\n    "])));
      }
    }]);
    return AppHaxUserMenu;
  }(_index.LitElement);

  _exports.AppHaxUserMenu = AppHaxUserMenu;
  customElements.define(AppHaxUserMenu.tag, AppHaxUserMenu);
});