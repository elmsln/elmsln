define(["exports", "meta", "require", "../../lit/index.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button-lite.js"], function (_exports, meta, _require, _index, _simpleIcons, _simpleIconButtonLite) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ScrollButton = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);

  var _templateObject_711deac0809211edaa2833647dc78c6c, _templateObject2_711deac0809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `scroll-button`
   * `button to scroll to an area or back to top`
   * @demo demo/index.html
   * @element scroll-button
   */
  var ScrollButton = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(ScrollButton, _LitElement);

    var _super = _createSuper(ScrollButton);

    function ScrollButton() {
      var _this;

      babelHelpers.classCallCheck(this, ScrollButton);
      _this = _super.call(this);
      _this.icon = "icons:expand-less";
      _this.t = {
        backToTop: "Back to top"
      };
      window.dispatchEvent(new CustomEvent("i18n-manager-register-element", {
        detail: {
          context: babelHelpers.assertThisInitialized(_this),
          namespace: "scroll-button",
          localesPath: new URL("./locales", meta.url).href,
          updateCallback: "render",
          locales: ["es"]
        }
      }));
      _this._label = _this.t.backToTop;
      _this.label = "";
      _this.position = "top";
      new Promise(function (res, rej) {
        return _require.default(["../simple-tooltip/simple-tooltip.js"], res, rej);
      });
      return _this;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */


    babelHelpers.createClass(ScrollButton, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(ScrollButton.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(ScrollButton.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldvalue, propName) {
          // if other developer defined label, don't translate it
          if (propName === "t" && _this2.label === "") {
            _this2._label = _this2.t.backToTop;
          }

          if (propName === "label" && _this2.label !== "") {
            _this2._label = _this2.label;
          }
        });
      } // render function

    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_711deac0809211edaa2833647dc78c6c || (_templateObject_711deac0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <simple-icon-button-lite\n        @click=\"", "\"\n        id=\"btn\"\n        icon=\"", "\"\n        label=\"", "\"\n      ></simple-icon-button-lite>\n      <simple-tooltip for=\"btn\" position=\"", "\" offset=\"14\">\n        ", "\n      </simple-tooltip>"])), this.scrollEvent, this.icon, this._label, this.position, this._label);
      } // properties available to the custom element for data binding

    }, {
      key: "scrollEvent",
      value:
      /**
       * life cycle, element is afixed to the DOM
       */
      function scrollEvent(e) {
        if (this.target) {
          this.target.scrollIntoView({
            behavior: "smooth",
            block: "end",
            inline: "nearest"
          });
        } else {
          window.scrollTo({
            top: 0,
            left: 0,
            behavior: "smooth"
          });
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "scroll-button";
      } //styles function

    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_711deac0809211edaa2833647dc78c6c || (_templateObject2_711deac0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --scroll-button-z-index: 99;\n          z-index: var(--scroll-button-z-index);\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        simple-icon-button-lite {\n          background-color: var(\n            --scroll-button-background-color,\n            rgba(0, 0, 0, 0.6)\n          );\n          color: var(--scroll-button-color, white);\n        }\n\n        simple-icon-button-lite:hover,\n        simple-icon-button-lite:active,\n        simple-icon-button-lite:focus {\n          color: var(--scroll-button-background-color, rgba(0, 0, 0, 1));\n          background-color: var(--scroll-button-color, white);\n        }\n\n        simple-tooltip {\n          --simple-tooltip-background: var(\n            --scroll-button-tooltip-background-color,\n            #000000\n          );\n          --simple-tooltip-opacity: 1;\n          --simple-tooltip-text-color: var(\n            --scroll-button-tooltip-color,\n            #ffffff\n          );\n          --simple-tooltip-delay-in: 0;\n          --simple-tooltip-border-radius: 0;\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          target: {
            type: Object
          },
          icon: {
            type: String
          },
          label: {
            type: String
          },
          _label: {
            type: String
          },
          position: {
            type: String
          },
          t: {
            type: Object
          }
        };
      }
    }]);
    return ScrollButton;
  }(_index.LitElement);

  _exports.ScrollButton = ScrollButton;
  customElements.define(ScrollButton.tag, ScrollButton);
});