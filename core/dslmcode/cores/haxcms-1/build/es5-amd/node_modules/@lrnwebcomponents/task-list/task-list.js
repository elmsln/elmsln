define(["exports", "../../lit/index.js", "../schema-behaviors/schema-behaviors.js", "../utils/utils.js"], function (_exports, _index, _schemaBehaviors, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskList = void 0;

  var _templateObject_61b16670809211edaa2833647dc78c6c, _templateObject2_61b16670809211edaa2833647dc78c6c, _templateObject3_61b16670809211edaa2833647dc78c6c, _templateObject4_61b16670809211edaa2833647dc78c6c, _templateObject5_61b16670809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  if (!Element.prototype.replaceWith) {
    Element.prototype.replaceWith = _utils.ReplaceWithPolyfill;
  }

  if (!CharacterData.prototype.replaceWith) {
    CharacterData.prototype.replaceWith = _utils.ReplaceWithPolyfill;
  }

  if (!DocumentType.prototype.replaceWith) {
    DocumentType.prototype.replaceWith = _utils.ReplaceWithPolyfill;
  }
  /**
   * `task-list`
   * Visual listing of tasks with different design components that is
   * OER Schema capable!
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   * - task - a singular thing to accomplish
   * @element task-list
   */


  var TaskList = /*#__PURE__*/function (_SchemaBehaviors) {
    babelHelpers.inherits(TaskList, _SchemaBehaviors);

    var _super = _createSuper(TaskList);

    function TaskList() {
      var _this;

      babelHelpers.classCallCheck(this, TaskList);
      _this = _super.call(this);
      _this.tasks = [];
      _this.name = "Steps to completion";
      return _this;
    }

    babelHelpers.createClass(TaskList, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_61b16670809211edaa2833647dc78c6c || (_templateObject_61b16670809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"wrapper\">\n        <h3 id=\"name\" property=\"oer:name\" ?contenteditable=\"", "\">\n          ", "\n        </h3>\n        <ol ?contenteditable=\"", "\" id=\"tasks\">\n          ", "\n        </ol>\n      </div>\n    "])), this.editMode, this.name, this.editMode, this.tasks.map(function (task) {
          return (0, _index.html)(_templateObject2_61b16670809211edaa2833647dc78c6c || (_templateObject2_61b16670809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n              <li>\n                ", "\n              </li>\n            "])), task.link ? (0, _index.html)(_templateObject3_61b16670809211edaa2833647dc78c6c || (_templateObject3_61b16670809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n                      <a href=\"", "\" property=\"oer:task\"\n                        >", "</a\n                      >\n                    "])), task.link, task.name) : (0, _index.html)(_templateObject4_61b16670809211edaa2833647dc78c6c || (_templateObject4_61b16670809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <span property=\"oer:task\">", "</span> "])), task.name));
        }));
      }
      /**
       * Implements haxHooks to tie into life-cycle if hax exists.
       */

    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          activeElementChanged: "haxactiveElementChanged",
          inlineContextMenu: "haxinlineContextMenu"
        };
      }
      /**
       * double-check that we are set to inactivate click handlers
       * this is for when activated in a duplicate / adding new content state
       */

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        // flag for HAX to not trigger active on changes
        var ignoreAlign = false;

        if (this.__thereAreChanges) {
          this.alignState();
          ignoreAlign = true;
        }

        this.editMode = val;
        return ignoreAlign;
      }
    }, {
      key: "alignState",
      value: function alignState() {
        // make a clone so we can completely clean up the state here
        var clone = this.cloneNode(); // easy, name is flat

        clone.name = this.shadowRoot.querySelector("#name").innerText;
        var tasks = this.shadowRoot.querySelector("#tasks"); // update tasks

        clone.tasks = this.getChildOutline(tasks); // there are no longer changes

        clone.__thereAreChanges = false;
        clone.editMode = false;
        this.replaceWith(clone);
        this.remove();
      }
      /**
       * get a list of items as an array
       */

    }, {
      key: "haxinlineContextMenu",
      value: function haxinlineContextMenu(ceMenu) {
        ceMenu.ceButtons = [{
          icon: "icons:add",
          callback: "haxClickInlineAdd",
          label: "Add task"
        }, {
          icon: "icons:remove",
          callback: "haxClickInlineRemove",
          label: "Remove task"
        }];
      }
    }, {
      key: "haxClickInlineAdd",
      value: function haxClickInlineAdd(e) {
        var d = this.tasks;
        d.push({
          name: "Do this"
        });
        this.tasks = babelHelpers.toConsumableArray(d);
        return true;
      }
    }, {
      key: "haxClickInlineRemove",
      value: function haxClickInlineRemove(e) {
        if (this.tasks.length > 0) {
          var d = this.tasks;
          d.pop();
          this.tasks = babelHelpers.toConsumableArray(d);
          return true;
        }
      }
    }, {
      key: "getChildOutline",
      value: function getChildOutline(taskList) {
        var items = [];

        while (taskList.firstElementChild !== null) {
          // only work on things if they are valid HTML nodes
          if (babelHelpers.typeof(taskList.firstElementChild.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            var task = taskList.firstElementChild;
            items.push({
              name: task.innerText.trim(),
              link: task.firstElementChild && task.firstElementChild.tagName && task.firstElementChild.tagName === "A" ? task.firstElementChild.getAttribute("href") : null
            });
          }

          taskList.firstElementChild.remove();
        }

        return items;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "editMode" && _this2.shadowRoot) {
            if (!_this2[propName]) {
              if (_this2._observer) {
                _this2._observer.disconnect();
              }
            } else {
              _this2._observer = new MutationObserver(function (mutations) {
                _this2.__thereAreChanges = true;
              });

              _this2._observer.observe(_this2.shadowRoot.querySelector("#wrapper"), {
                childList: true,
                subtree: true,
                characterData: true
              });
            }
          }

          var notifiedProps = ["tasks"];

          if (notifiedProps.includes(propName)) {
            // notify
            var eventName = "".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), "-changed");

            _this2.dispatchEvent(new CustomEvent(eventName, {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (propName == "relatedResource") {
            _this2._resourceLink = _this2._generateResourceLink(_this2[propName]);
          }
        });
      }
    }, {
      key: "_generateResourceLink",
      value: function _generateResourceLink(relatedResource) {
        if (this._resourceLink) {
          document.head.removeChild(this._resourceLink);
        }

        var link = document.createElement("link");
        link.setAttribute("property", "oer:forComponent");
        link.setAttribute("content", relatedResource);
        document.head.appendChild(link);
        return link;
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        this.setAttribute("typeof", "oer:SupportingMaterial");
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject5_61b16670809211edaa2833647dc78c6c || (_templateObject5_61b16670809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          border: var(--task-list-border, 1px solid #eeeeee);\n          font-size: var(--task-list-font-size, 18px);\n          padding: var(--task-list-padding, 16px);\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "task-list";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(TaskList), "properties", this)), {}, {
          /**
           * Name of this task list
           */
          name: {
            type: String,
            reflect: true
          },
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          },

          /**
           * Related Resource ID
           */
          relatedResource: {
            type: String,
            attribute: "related-resource"
          },

          /**
           * Task list
           */
          tasks: {
            type: Array
          },
          _resourceLink: {
            type: Object
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Task list",
            description: "A list of tasks which is an ordered list",
            icon: "icons:list",
            color: "orange",
            groups: ["Content", "Instructional"],
            handles: [],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            configure: [{
              property: "name",
              title: "Name",
              description: "Name of the list",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "relatedResource",
              title: "Related resource",
              description: "A reference to the related Schema resource",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "tasks",
              title: "Tasks",
              description: "The tasks to be completed",
              inputMethod: "array",
              itemLabel: "label",
              properties: [{
                property: "name",
                title: "Name",
                description: "Name of the task",
                inputMethod: "textfield",
                required: true
              }, {
                property: "link",
                title: "Link",
                description: "Optional link",
                inputMethod: "textfield"
              }]
            }],
            advanced: []
          },
          saveOptions: {
            unsetAttributes: ["_resource-link"]
          }
        };
      }
    }]);
    return TaskList;
  }((0, _schemaBehaviors.SchemaBehaviors)(_index.LitElement));

  _exports.TaskList = TaskList;
  window.customElements.define(TaskList.tag, TaskList);
});