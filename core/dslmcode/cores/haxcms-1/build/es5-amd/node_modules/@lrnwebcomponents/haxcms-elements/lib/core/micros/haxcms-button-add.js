define(["exports", "../haxcms-site-store.js", "../../../../hax-body/lib/hax-store.js", "../utils/HAXCMSButton.js", "../../../../simple-toolbar/lib/simple-toolbar-button.js", "../../../../../mobx/dist/mobx.esm.js"], function (_exports, _haxcmsSiteStore, _haxStore, _HAXCMSButton, _simpleToolbarButton, _mobxEsm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSButtonAdd = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var HAXCMSButtonAdd = /*#__PURE__*/function (_SimpleToolbarButtonB) {
    babelHelpers.inherits(HAXCMSButtonAdd, _SimpleToolbarButtonB);

    var _super = _createSuper(HAXCMSButtonAdd);

    function HAXCMSButtonAdd() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSButtonAdd);
      _this = _super.call(this);
      _this.t = _this.t || {};
      _this.t.newPageAdded = "New page added";
      _this.t.newPage = "Page";
      _this.t.copy = "Copy";
      _this.t.newChildPage = "Child";
      _this.t.duplicatePage = "Duplicate";
      _this.t.docxImport = "Import .DOCX";
      _this.icon = "hax:add-page";
      _this.voiceCommand = "add page";
      _this.dark = false;
      _this.type = "sibling";
      _this.autoEdit = false;
      _this.showTextLabel = true;
      _this.iconPosition = "left";
      _this.alignHorizontal = "left";

      _this.addEventListener("click", _this.HAXCMSButtonClick);

      return _this;
    }

    babelHelpers.createClass(HAXCMSButtonAdd, [{
      key: "updated",
      value: function updated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSButtonAdd.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSButtonAdd.prototype), "updated", this).call(this, changedProperties);

        switch (this.type) {
          case "sibling":
            return this.label = this.t.newPage;

          case "child":
            this.icon = "hax:add-child-page";
            return this.label = this.t.newChildPage;

          case "duplicate":
            this.icon = "hax:duplicate";
            return this.label = this.t.duplicatePage;

          case "docximport":
            this.icon = "hax:file-docx";
            return this.label = this.t.docxImport;
        }

        this.icon = undefined;
        this.setAttribute("role", "menuitem");
      }
    }, {
      key: "render",
      value: function render() {
        return this.buttonTemplate;
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSButtonAdd.prototype), "connectedCallback", this).call(this);
        window.addEventListener("haxcms-create-node-success", this.HAXCMSButtonClickResponse.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("haxcms-create-node-success", this.HAXCMSButtonClickResponse.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSButtonAdd.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "HAXCMSButtonClick",
      value: function HAXCMSButtonClick() {
        _haxcmsSiteStore.store.playSound("click");

        var order = null;
        var title = this.t.newPage;
        var parent = null;
        var item = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.activeItem);

        if (item) {
          if (this.type === "sibling") {
            parent = item.parent;
            order = parseInt(item.order) + 1;
          } else if (this.type === "child") {
            parent = item.id; // @todo might need to check last child and add to end order wise there

            order = 0;
          } else if (this.type === "duplicate") {
            title = item.title + " " + this.t.copy;
            parent = item.parent;
            order = parseInt(item.order) + 1;
          } else if (this.type === "docximport") {
            parent = null;
            order = 0;
          }
        } // sanity fallback in case a translation system is bricked


        if (title === "") {
          title = "New";
        }

        var payload = {
          node: {
            title: title,
            location: ""
          },
          order: order,
          parent: parent
        }; // special flag for duplicating the content of an existing item

        if (this.type === "duplicate") {
          payload.node.duplicate = item.id;
        } else if (this.type === "docximport") {
          payload.docximport = "branch";
        } // wrapper on CustomEvent to ensure uniformity


        this.HAXCMSFireButtonEvent("haxcms-create-node", this, payload);
      }
    }, {
      key: "HAXCMSButtonClickResponse",
      value: function HAXCMSButtonClickResponse(e) {
        // only respond to this if the event was generated by this element
        // this helps avoid multiple instances of a button coliding
        if (this === e.detail.originalTarget) {
          if (this.autoEdit) {
            // force hax tray to open
            _haxStore.HAXStore.haxTray.collapsed = false; // @todo this implies a timing issue on response and the wiping of material
            // see https://github.com/elmsln/issues/issues/938

            setTimeout(function () {
              // force into edit mode
              _haxcmsSiteStore.store.editMode = true;
            }, 250);
          }
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "haxcms-button-add";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSButtonAdd), "styles", this)), babelHelpers.toConsumableArray(this.iconStyles), babelHelpers.toConsumableArray(this.labelStyles), babelHelpers.toConsumableArray(this.tooltipStyles), babelHelpers.toConsumableArray(this.simpleButtonCoreStyles), babelHelpers.toConsumableArray(this.simpleButtonLayoutStyles), babelHelpers.toConsumableArray(this.simpleButtonThemeStyles));
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSButtonAdd), "properties", this)), {}, {
          autoEdit: {
            type: Boolean,
            attribute: "auto-edit"
          },
          type: {
            type: String
          }
        });
      }
    }]);
    return HAXCMSButtonAdd;
  }((0, _simpleToolbarButton.SimpleToolbarButtonBehaviors)(_HAXCMSButton.HAXCMSButton));

  _exports.HAXCMSButtonAdd = HAXCMSButtonAdd;
  customElements.define(HAXCMSButtonAdd.tag, HAXCMSButtonAdd);
});