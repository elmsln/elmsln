define(["exports", "meta", "../../lit/index.js", "../utils/lib/remoteLinkBehavior.js", "../simple-icon/lib/simple-iconset.js", "../i18n-manager/lib/I18NMixin.js", "../simple-icon/simple-icon.js"], function (_exports, meta, _index, _remoteLinkBehavior, _simpleIconset, _I18NMixin2, _simpleIcon) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.StopNote = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_ad4703d08e0011ed99ce491205e67b1d, _templateObject2_ad4703d08e0011ed99ce491205e67b1d, _templateObject3_ad4703d08e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // register the iconset
  _simpleIconset.SimpleIconsetStore.registerIconset("stopnoteicons", "".concat(new URL("./stop-note.js", meta.url).href, "/../lib/svgs/stopnoteicons/"));
  /**
   * `stop-note`
   * `A note that directs people to an action item of different warning levels`
   * @demo demo/index.html
   * @element stop-note
   */


  var StopNote = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(StopNote, _I18NMixin);

    var _super = _createSuper(StopNote);

    function StopNote() {
      var _this;

      babelHelpers.classCallCheck(this, StopNote);
      _this = _super.call(this);
      _this.url = null;
      _this.title = "";
      _this.icon = "stopnoteicons:stop-icon";
      _this.t = {
        moreInformation: "More Information"
      };

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        basePath: meta.url,
        locales: ["es"]
      });

      return _this;
    }

    babelHelpers.createClass(StopNote, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_ad4703d08e0011ed99ce491205e67b1d || (_templateObject_ad4703d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"container\">\n        <div class=\"svg_wrap\">\n          <div class=\"svg\">\n            <simple-icon icon=\"", "\" no-colorize></simple-icon>\n          </div>\n        </div>\n        <div class=\"message_wrap\">\n          <div class=\"main_message\" id=\"title\">", "</div>\n          <div class=\"secondary_message\">\n            <slot></slot>\n            <slot name=\"message\"></slot>\n          </div>\n          ", "\n        </div>\n      </div>\n    "])), this.icon, this.title, this.url ? (0, _index.html)(_templateObject2_ad4703d08e0011ed99ce491205e67b1d || (_templateObject2_ad4703d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                <div class=\"link\">\n                  <a href=\"", "\" id=\"link\">\n                    ", " &gt;\n                  </a>\n                </div>\n              "])), this.url, this.t.moreInformation) : "");
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(StopNote.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(StopNote.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "url") {
            _this2.remoteLinkURL = _this2[propName];
          }
        });
      }
      /**
       * life cycle
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(StopNote.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(StopNote.prototype), "firstUpdated", this).call(this, changedProperties);
        this.remoteLinkTarget = this.shadowRoot.querySelector("#link");
      }
      /**
       * Implements haxHooks to tie into life-cycle if hax exists.
       */

    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          editModeChanged: "haxeditModeChanged",
          activeElementChanged: "haxactiveElementChanged"
        };
      }
      /**
       * Set a flag to test if we should block link clicking on the entire card
       * otherwise when editing in hax you can't actually edit it bc its all clickable.
       * if editMode goes off this helps ensure we also become clickable again
       */

    }, {
      key: "haxeditModeChanged",
      value: function haxeditModeChanged(val) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(StopNote.prototype), "haxeditModeChanged", this)) babelHelpers.get(babelHelpers.getPrototypeOf(StopNote.prototype), "haxeditModeChanged", this).call(this, val);
        this._haxstate = val;
      }
      /**
       * double-check that we are set to inactivate click handlers
       * this is for when activated in a duplicate / adding new content state
       */

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(StopNote.prototype), "haxactiveElementChanged", this)) babelHelpers.get(babelHelpers.getPrototypeOf(StopNote.prototype), "haxactiveElementChanged", this).call(this, el, val); // flag for HAX to not trigger active on changes but only when not locked

        var container = this.shadowRoot.querySelector("#title");

        if (val && this.getAttribute("data-hax-lock") === null) {
          container.setAttribute("contenteditable", true);
        } else {
          container.removeAttribute("contenteditable");
          this.title = container.innerText;
        }

        return false;
      }
    }, {
      key: "haxinlineContextMenu",
      value: function haxinlineContextMenu(ceMenu) {
        ceMenu.ceButtons = [{
          icon: "image:style",
          callback: "haxtoggleIcon",
          label: "Toggle icon"
        }];
      }
    }, {
      key: "haxtoggleIcon",
      value: function haxtoggleIcon(e) {
        var iconAry = ["stopnoteicons:stop-icon", "stopnoteicons:warning-icon", "stopnoteicons:confirm-icon", "stopnoteicons:book-icon"];
        var icon = iconAry[0];

        if (iconAry.lastIndexOf(this.icon) != iconAry.length - 1) {
          icon = iconAry[iconAry.lastIndexOf(this.icon) + 1];
        }

        this.icon = icon;
        return true;
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject3_ad4703d08e0011ed99ce491205e67b1d || (_templateObject3_ad4703d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          width: auto;\n          --background-color: #f7f7f7;\n          --accent-color: #d32f2f;\n          margin-bottom: 20px;\n        }\n\n        simple-icon {\n          --simple-icon-height: 100px;\n          --simple-icon-width: 100px;\n        }\n\n        :host([icon=\"stopnoteicons:stop-icon\"]) {\n          --accent-color: #d8261c;\n        }\n\n        :host([icon=\"stopnoteicons:warning-icon\"]) {\n          --accent-color: #ffeb3b;\n        }\n\n        :host([icon=\"stopnoteicons:confirm-icon\"]) {\n          --accent-color: #81c784;\n        }\n\n        :host([icon=\"stopnoteicons:book-icon\"]) {\n          --accent-color: #21a3db;\n        }\n\n        .container {\n          display: flex;\n          width: auto;\n        }\n\n        .message_wrap {\n          border-right: 7px solid var(--accent-color);\n          padding: 10px 25px;\n          flex: 1 1 auto;\n          background-color: var(--background-color);\n        }\n\n        .main_message {\n          font-size: 32px;\n          margin-top: 10px;\n        }\n\n        .secondary_message {\n          margin-top: 5px;\n          font-size: 19.2px;\n          width: 100%;\n        }\n\n        .link a {\n          margin-top: 5px;\n          font-size: 19.2px;\n          float: left;\n          clear: left;\n          text-decoration: none;\n        }\n\n        .svg {\n          display: flex;\n          justify-content: center;\n        }\n\n        .svg_wrap {\n          background-color: var(--accent-color);\n          padding: 5px;\n          width: auto;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "stop-note";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(StopNote), "properties", this) || {}), {}, {
          /**
           * Title Message
           */
          title: {
            type: String,
            reflect: true
          },

          /**
           * url to additional resources
           */
          url: {
            type: String
          },

          /**
           * Icon selected
           */
          icon: {
            type: String,
            reflect: true
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }]);
    return StopNote;
  }((0, _I18NMixin2.I18NMixin)((0, _remoteLinkBehavior.remoteLinkBehavior)(_index.LitElement)));

  _exports.StopNote = StopNote;
  customElements.define(StopNote.tag, StopNote);
});