define(["exports", "meta", "require", "../../../../lit/index.js", "../../../utils/utils.js", "../../../../mobx/dist/mobx.esm.js", "./haxcms-site-store.js", "../../../simple-progress/simple-progress.js", "../../../replace-tag/replace-tag.js", "../../../i18n-manager/lib/I18NMixin.js"], function (_exports, meta, _require, _index, _utils, _mobxEsm, _haxcmsSiteStore, _simpleProgress, _replaceTag, _I18NMixin2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSSiteBuilder = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);

  var _templateObject_b0292360809211edaa2833647dc78c6c, _templateObject2_b0292360809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // toggle store darkmode
  function darkToggle(e) {
    if (e.matches) {
      // dark mode
      _haxcmsSiteStore.store.darkMode = true;
    } else {
      // light mode
      _haxcmsSiteStore.store.darkMode = false;
    }
  }
  /**
   * `haxcms-site-builder`
   * `build the site and everything off of this`
   * @microcopy - the mental model for this element
   * - This is a factory element, it doesn't do much on its own visually
   * - it loads a site.json file and then utilizes this data in order to construct
   *   what theme it should load (element) in order to get everything off and running
   */


  var HAXCMSSiteBuilder = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(HAXCMSSiteBuilder, _I18NMixin);

    var _super = _createSuper(HAXCMSSiteBuilder);

    /**
     * ready life cycle
     */
    function HAXCMSSiteBuilder() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSSiteBuilder);
      _this = _super.call(this);

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        namespace: "haxcms",
        localesPath: new URL("../../locales", meta.url).href,
        locales: ["es"]
      });

      _this.disableFeatures = "";
      _this.isLoggedIn = false;
      _this.__disposer = [];
      _this.queryParams = {};
      _this.loading = false;
      _this.__imported = {};
      _this.themeLoaded = false;
      _this.outlineLocation = "";
      _this.activeItemLocation = "";
      new Promise(function (res, rej) {
        return _require.default(["./haxcms-site-router.js"], res, rej);
      }).then(function () {
        _haxcmsSiteStore.HAXcmsStore.storePieces.siteBuilder = babelHelpers.assertThisInitialized(_this);
      }); // support initial setup stuff with slots

      for (var i in _this.children) {
        if (_this.children[i].tagName && _this.children[i].getAttribute("slot")) {
          var item = _this.children[i].cloneNode(true);

          var key = item.getAttribute("slot");

          switch (key) {
            case "haxcms-site-editor-ui-prefix-avatar":
            case "haxcms-site-editor-ui-prefix-buttons":
            case "haxcms-site-editor-ui-suffix-buttons":
            case "haxcms-site-editor-ui-main-menu":
            case "haxcms-site-editor-ui-topbar-character-button":
              _haxcmsSiteStore.store.setupSlots[key].push(item);

              break;
          }
        }
      }

      window.addEventListener("hax-store-ready", _this.storeReady.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-trigger-update", _this._triggerUpdatedData.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("haxcms-trigger-update-node", _this._triggerUpdatedNode.bind(babelHelpers.assertThisInitialized(_this)));
      window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", darkToggle);
      (0, _mobxEsm.autorun)(function () {
        (0, _utils.localStorageSet)("app-hax-darkMode", (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.darkMode));

        if ((0, _mobxEsm.toJS)(_haxcmsSiteStore.store.darkMode)) {
          document.body.classList.add("dark-mode");
        } else {
          document.body.classList.remove("dark-mode");
        }
      });
      (0, _mobxEsm.autorun)(function () {
        _this.isLoggedIn = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.isLoggedIn);
      });
      return _this;
    }

    babelHelpers.createClass(HAXCMSSiteBuilder, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_b0292360809211edaa2833647dc78c6c || (_templateObject_b0292360809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <haxcms-site-router base-uri=\"", "\"></haxcms-site-router>\n      <simple-progress .disabled=\"", "\"></simple-progress>\n      <div id=\"slot\"><slot></slot></div>\n      <slot name=\"haxcms-site-editor-ui-prefix-avatar\"></slot>\n      <slot name=\"haxcms-site-editor-ui-prefix-buttons\"></slot>\n      <slot name=\"haxcms-site-editor-ui-suffix-buttons\"></slot>\n      <slot name=\"haxcms-site-editor-ui-main-menu\"></slot>\n      <slot name=\"haxcms-site-editor-ui-topbar-character-button\"></slot>\n      <simple-colors-polymer></simple-colors-polymer>\n    "])), this.baseURI, !this.loading);
      }
      /**
       * Simple "two way" data binding from the element below via events
       */

    }, {
      key: "_updateManifest",
      value: function _updateManifest(data) {
        this.manifest = _objectSpread({}, data);
      }
    }, {
      key: "_updateLoading",
      value: function _updateLoading(e) {
        this.loading = e.detail.value;
      }
    }, {
      key: "hashCode",
      value: function hashCode(s) {
        return s.split("").reduce(function (a, b) {
          a = (a << 5) - a + b.charCodeAt(0);
          return a & a;
        }, 0);
      } // normalize the application of IDs so that we can target parts
      // of the page for scroll and referencing in general via URL hash

    }, {
      key: "nodeNormalizeIDs",
      value: function nodeNormalizeIDs(node) {
        if (node.tagName && node.getAttribute("id") == null && ["H1", "H2", "H3", "H4", "H5", "H6"].includes(node.tagName)) {
          if (node.getAttribute("resource")) {
            node.setAttribute("id", node.getAttribute("resource"));
          } else {
            var id = node.tagName.toLowerCase() + "-" + this.hashCode(node.innerText);
            node.setAttribute("id", id);
          }
        }
      }
    }, {
      key: "_updateActiveItemContent",
      value: function _updateActiveItemContent(data) {
        var tmp = document.createElement("div");
        tmp.innerHTML = data;

        var _iterator = _createForOfIteratorHelper(tmp.childNodes),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var node = _step.value;
            this.nodeNormalizeIDs(node);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        data = tmp.innerHTML; // cheat to ensure we get a rebuild of the content in case
        // they only modified page title / other page-break based details

        this.activeItemContent = "";
        this.activeItemContent = data;
      }
      /**
       * Load Page data
       */

    }, {
      key: "loadPageData",
      value: function () {
        var _loadPageData = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var _this2 = this;

          var url;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!this.activeItemLocation) {
                    _context.next = 6;
                    break;
                  }

                  this.loading = true;
                  url = "".concat(this.outlineLocation).concat(this.activeItemLocation);

                  if (this._timeStamp != "") {
                    if (url.indexOf("?") != -1) {
                      url += "&".concat(this._timeStamp);
                    } else {
                      url += "?".concat(this._timeStamp);
                    }
                  }

                  _context.next = 6;
                  return fetch(url).then(function (response) {
                    if (response.ok) {
                      return response.text();
                    }
                  }).then(function (data) {
                    _this2._updateActiveItemContent(data);

                    _this2.loading = false;
                  }).catch(function (err) {
                    _this2.lastErrorChanged(err);
                  });

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function loadPageData() {
          return _loadPageData.apply(this, arguments);
        }

        return loadPageData;
      }()
      /**
       * Load JSON Outline Schema / site.json format
       */

    }, {
      key: "loadJOSData",
      value: function () {
        var _loadJOSData = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var _this3 = this;

          var url, data, headers;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!this.file) {
                    _context2.next = 15;
                    break;
                  }

                  this.loading = true;
                  url = "".concat(this.outlineLocation).concat(this.file);
                  _context2.prev = 3;
                  // if this is successful it means we were handed a JSON blob of the site itself
                  data = JSON.parse(this.file);

                  this._updateManifest(data);

                  this.loading = false;
                  _context2.next = 15;
                  break;

                case 9:
                  _context2.prev = 9;
                  _context2.t0 = _context2["catch"](3);

                  // weird looking but this is the typical use-case in which
                  // we got a file path and try to load it because the above silently failed
                  if (this._timeStamp && this._timeStamp != "") {
                    if (url.indexOf("?") != -1) {
                      url += "&".concat(this._timeStamp);
                    } else {
                      url += "?".concat(this._timeStamp);
                    }
                  }

                  headers = {
                    cache: "no-cache"
                  };
                  _context2.next = 15;
                  return fetch(url, headers).then(function (response) {
                    if (response.ok) {
                      return response.json();
                    } else {
                      _this3.lastErrorChanged(err);
                    }
                  }).then(function (data) {
                    _this3._updateManifest(data);

                    _this3.loading = false;
                  }).catch(function (err) {
                    _this3.lastErrorChanged(err);
                  });

                case 15:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[3, 9]]);
        }));

        function loadJOSData() {
          return _loadJOSData.apply(this, arguments);
        }

        return loadJOSData;
      }()
      /**
       * life cycle updated
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteBuilder.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteBuilder.prototype), "updated", this).call(this, changedProperties);
        } // track these so we can debounce if multiple values updated at once


        var loadOutline = false;
        var loadPage = false;
        changedProperties.forEach(function (oldValue, propName) {
          if (["outlineLocation", "activeItemLocation"].includes(propName) && _this4[propName] != "") {
            loadPage = true;
          }

          if (["outlineLocation", "file"].includes(propName) && _this4[propName] != "") {
            loadOutline = true;
          }

          if (propName == "_timeStamp") {
            loadOutline = true;
            loadPage = true;
          }

          if (propName == "dashboardOpened") {
            _this4._dashboardOpenedChanged(_this4[propName], oldValue);
          } else if (propName == "themeData") {
            _this4._themeChanged(_this4[propName], oldValue);
          } else if (propName == "themeName") {
            _this4._themeNameChanged(_this4[propName], oldValue);
          } else if (propName == "outlineLocation") {
            // fire an to match notify
            _this4.dispatchEvent(new CustomEvent("outline-location-changed", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: _this4[propName]
            }));
          } else if (propName == "manifest") {
            // fire an to match notify
            _this4.dispatchEvent(new CustomEvent("manifest-changed", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: _this4[propName]
            }));

            _this4._manifestChanged(_this4[propName], oldValue);
          } else if (propName == "activeItem") {
            // fire an to match notify
            _this4.dispatchEvent(new CustomEvent("active-item-changed", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: _this4[propName]
            }));

            _this4._activeItemChanged(_this4[propName], oldValue);
          } else if (propName == "activeItemContent") {
            // fire an to match notify
            _this4.dispatchEvent(new CustomEvent("active-item-content-changed", {
              bubbles: true,
              detail: _this4[propName]
            }));

            _this4._activeItemContentChanged(_this4[propName], oldValue);
          }
        });

        if (loadOutline && this.__ready) {
          this.loadJOSData();
        }

        if (loadPage && this.__ready) {
          this.loadPageData();
        }
      }
    }, {
      key: "_themeNameChanged",
      value: function _themeNameChanged(newValue) {
        if (newValue) {
          // drop old theme element if there is one
          if (_haxcmsSiteStore.store.themeElement) {
            _haxcmsSiteStore.store.themeElement.remove();
          } // wipe out what we got


          (0, _utils.wipeSlot)(this, "*");
          _haxcmsSiteStore.store.themeElement = document.createElement(newValue); // apply a class so that we can write generic CSS selectors in integrations

          _haxcmsSiteStore.store.themeElement.classList.add("haxcms-theme-element");

          this.appendChild(_haxcmsSiteStore.store.themeElement);
        }
      }
      /**
       * Alert there was an internal error in getting the file
       */

    }, {
      key: "lastErrorChanged",
      value: function lastErrorChanged(e) {
        if (e) {
          console.error(e); // not every error has a value if it just failed

          if (e.detail && e.detail.value) {
            // if we force reloads then let's do it now
            if (window && window.location && window.appSettings && window.appSettings.reloadOnError) {
              window.location.reload();
            }

            _haxcmsSiteStore.store.toast(e.detail.value.status + " " + e.detail.value.statusText, 5000, {
              fire: true
            });
          } else {
            // no detail is bad, this implies a server level connection error
            // if we force reloads then let's do it now
            if (window && window.location && window.appSettings && window.appSettings.reloadOnError) {
              window.location.reload();
            }
          }
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this5 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteBuilder.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteBuilder.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        this.__ready = true;
        _haxcmsSiteStore.store.appReady = true;
        window.dispatchEvent(new CustomEvent("haxcms-ready", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        })); // dyanmcially import the editor builder which figures out if we should have one
        // prettier-ignore

        new Promise(function (res, rej) {
          return _require.default(["./haxcms-editor-builder.js"], res, rej);
        }).then(function (response) {
          new Promise(function (res, rej) {
            return _require.default(["./haxcms-toast.js"], res, rej);
          });
          _this5.editorBuilder = document.createElement("haxcms-editor-builder"); // attach editor builder after we've appended to the screen

          if (_this5.parentNode) {
            _this5.parentNode.insertBefore(_this5.editorBuilder, _this5);
          } else {
            document.body.appendChild(_this5.editorBuilder);
          } // get fresh data if not published / demo which is a form of published


          if (_haxcmsSiteStore.HAXcmsStore.getApplicationContext() !== "published") {
            _this5._timeStamp = Math.floor(Date.now() / 1000);
          } else {
            _this5._timeStamp = "";
          }
        }).catch(function (error) {
          /* Error handling */
          console.warn(error);
        });
        window.dispatchEvent(new Event("resize"));
        setTimeout(function () {
          (0, _mobxEsm.autorun)(function (reaction) {
            _this5.dashboardOpened = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.dashboardOpened);

            _this5.__disposer.push(reaction);
          });
          (0, _mobxEsm.autorun)(function (reaction) {
            _this5.themeData = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.themeData);

            if (_this5.themeData) {
              // special support for "format" in the URL dictating the possible output format
              // this is for a11y, mobile, print and other possible output modes
              var urlParams = new URLSearchParams(window.location.search);
              var format = urlParams.get("format");

              if (format != null) {
                switch (format) {
                  case "print-page":
                    _this5.themeData.element = "haxcms-print-theme";
                    break;
                }
              }

              var disableFeatures = urlParams.get("disable-features");

              if (disableFeatures != null) {
                _this5.disableFeatures = disableFeatures;
              }
            }

            if (_this5.themeData && _this5.themeData.element !== _this5.themeName) {
              _this5.themeName = _this5.themeData.element;
            }

            _this5.__disposer.push(reaction);
          });
          (0, _mobxEsm.autorun)(function (reaction) {
            _this5.activeItem = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.activeItem);

            if (_this5.activeItem && _this5.activeItem.location) {
              _this5.activeItemLocation = _this5.activeItem.location;
            }

            _this5.__disposer.push(reaction);
          });
        }, 0);
      }
    }, {
      key: "_dashboardOpenedChanged",
      value: function _dashboardOpenedChanged(newValue, oldValue) {
        if (newValue) {
          this.setAttribute("aria-hidden", "aria-hidden");
          this.setAttribute("tabindex", "-1");
        } else if (!newValue && oldValue) {
          this.removeAttribute("aria-hidden");
          this.removeAttribute("tabindex");
        }
      }
      /**
       * Detached life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        window.removeEventListener("hax-store-ready", this.storeReady.bind(this));
        window.removeEventListener("haxcms-trigger-update", this._triggerUpdatedData.bind(this));
        window.removeEventListener("haxcms-trigger-update-node", this._triggerUpdatedNode.bind(this));
        window.matchMedia("(prefers-color-scheme: dark)").removeEventListener("change", darkToggle);
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteBuilder.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "storeReady",
      value: function storeReady(e) {
        // append UI element to body to avoid stack order issues
        if (_haxcmsSiteStore.store.cmsSiteEditor && _haxcmsSiteStore.store.cmsSiteEditor.instance && window.HaxStore.requestAvailability().activeHaxBody && _haxcmsSiteStore.store.activeItemContent) {
          window.HaxStore.requestAvailability().activeHaxBody.importContent(_haxcmsSiteStore.store.activeItemContent);
        }
      }
      /**
       * Find custom element tags and replace with replace-tag for performance gains based on device context
       */

    }, {
      key: "replaceTagReplacement",
      value: function replaceTagReplacement(html) {
        // all closing tags
        var myRegexp = /\<(\w+?\-\w*.*)\s*?\>/gim; // execute 1st match

        var match = myRegexp.exec(html);

        while (match != null) {
          var tag = match[1].replace("<", "").replace(">", "");

          if (tag.indexOf(" ")) {
            tag = tag.split(" ")[0];
          } // replace the matching custom element tag name with replace-tag


          if (tag.indexOf("-") != -1) {
            // shift the replacement over to with; leave everything else the same
            html = html.replace("<" + tag, '<replace-tag with="' + tag + '" '); // ensure a matching closing tag is also updated

            html = html.replace("</" + tag + ">", "</replace-tag>");
          } // execute again, which processes the next tag


          match = myRegexp.exec(html);
        }

        return html;
      }
      /**
       * React to content being loaded from a page.
       */

    }, {
      key: "_activeItemContentChanged",
      value: function _activeItemContentChanged(newValue, oldValue) {
        var _this6 = this;

        if (newValue) {
          var html = newValue; // only append if not empty

          if (html !== null && _haxcmsSiteStore.store.activeItem) {
            (0, _utils.wipeSlot)(_haxcmsSiteStore.store.themeElement, "*"); // force a page break w/ the relevant details in code
            // this allows the UI to be modified

            newValue = "<page-break\n        title=\"".concat(_haxcmsSiteStore.store.activeItem.title, "\"\n        parent=\"").concat(_haxcmsSiteStore.store.activeItem.parent, "\"\n        item-id=\"").concat(_haxcmsSiteStore.store.activeItem.id, "\"\n        slug=\"").concat(_haxcmsSiteStore.store.activeItem.slug, "\"\n        order=\"").concat(_haxcmsSiteStore.store.activeItem.order, "\"\n        break-type=\"site\"\n        ").concat(_haxcmsSiteStore.store.activeItem.metadata.locked ? 'locked="locked"' : "", "\n        ").concat(_haxcmsSiteStore.store.activeItem.metadata.published === false ? "" : 'published="published"', "\n        ></page-break>").concat(newValue);
            html = (0, _utils.encapScript)(newValue); // set in the store

            _haxcmsSiteStore.store.activeItemContent = html; // insert the content as quickly as possible, then work on the dynamic imports

            setTimeout(function () {
              if (_haxcmsSiteStore.store.themeElement.childNodes.length === 0) {
                var frag = document.createRange().createContextualFragment(_this6.replaceTagReplacement(html));

                _haxcmsSiteStore.store.themeElement.appendChild(frag);

                _this6.dispatchEvent(new CustomEvent("json-outline-schema-active-body-changed", {
                  bubbles: true,
                  composed: true,
                  cancelable: false,
                  detail: html
                }));
              } // if there are, dynamically import them but only if we don't have a global manager


              if (!window.WCAutoload && (0, _utils.varExists)(_this6.manifest, "metadata.node.dynamicElementLoader")) {
                var i;

                (function () {
                  var tagsFound = (0, _utils.findTagsInHTML)(html);
                  var basePath = new URL("./locales", meta.url).href;

                  var _loop = function _loop() {
                    var tagName = tagsFound[i];

                    if (_this6.manifest.metadata.node.dynamicElementLoader[tagName] && !window.customElements.get(tagName)) {
                      // prettier-ignore
                      new Promise(function (res, rej) {
                        return _require.default(["".concat(basePath, "../../../../").concat(_this6.manifest.metadata.node.dynamicElementLoader[tagName])], res, rej);
                      }).then(function (response) {//console.warn(tagName + ' dynamic import');
                      }).catch(function (error) {
                        /* Error handling */
                        console.warn(error);
                      });
                    }
                  };

                  for (i in tagsFound) {
                    _loop();
                  }
                })();
              } else if (window.WCAutoload) {
                setTimeout(function () {
                  window.WCAutoload.process();
                }, 0);
              }
            }, 5);
          }
        }
      }
      /**
       * Active item updated, let's request the content from it
       */

    }, {
      key: "_activeItemChanged",
      value: function _activeItemChanged(newValue, oldValue) {
        if (this.shadowRoot && newValue && babelHelpers.typeof(newValue.id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.queryParams.nodeId = newValue.id;
        } // we had something, now we don't. wipe out the content area of the theme
        else if (oldValue && !newValue) {
            // fire event w/ nothing, this is because there is no content
            this.dispatchEvent(new CustomEvent("json-outline-schema-active-body-changed", {
              bubbles: true,
              composed: true,
              cancelable: false,
              detail: null
            }));
          }
      }
      /**
       * got a message that we need to update our json manifest data
       */

    }, {
      key: "_triggerUpdatedData",
      value: function _triggerUpdatedData(e) {
        // get fresh data if not published
        if (this.editorBuilder) {
          this._timeStamp = Math.floor(Date.now() / 1000);
        } else {
          this._timeStamp = "";
        }
      }
      /**
       * got a message that we need to update our page content
       */

    }, {
      key: "_triggerUpdatedNode",
      value: function _triggerUpdatedNode(e) {
        // ensure we don't get a miss on initial load
        if (this.activeItem.location) {
          this.loadPageData();
        }
      }
      /**
       * notice manifest changes and ensure slot is rebuilt.
       */

    }, {
      key: "_manifestChanged",
      value: function _manifestChanged(newValue, oldValue) {
        if (newValue && newValue.metadata && newValue.items) {
          _haxcmsSiteStore.store.loadManifest(newValue, this);
        }
      }
      /**
       * notice theme changes and ensure slot is rebuilt.
       */

    }, {
      key: "_themeChanged",
      value: function _themeChanged(newValue, oldValue) {
        var _this7 = this;

        if (newValue) {
          this.themeLoaded = false;
          var theme = newValue; // create the 'theme' as a new element
          // weird but definition already here so we should be able
          // to just use this without an import, it's possible..

          if (babelHelpers.typeof(this.__imported[theme.element]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.themeLoaded = true;
          } else {
            // global will handle this
            if (window.WCAutoload) {
              this.__imported[theme.element] = theme.element;
              this.themeLoaded = true;
              setTimeout(function () {
                window.WCAutoload.process();
              }, 5);
            } else {
              // import the reference to the item dynamically, if we can
              try {
                // prettier-ignore
                new Promise(function (res, rej) {
                  return _require.default([new URL("./../../../../" + newValue.path, meta.url).href], res, rej);
                }).then(function (e) {
                  // add it into ourselves so it unpacks and we kick this off!
                  _this7.__imported[theme.element] = theme.element;
                  _this7.themeLoaded = true;
                });
              } catch (err) {
                // error in the event this is a double registration
                // also strange to be able to reach this but technically possible
                this.themeLoaded = true;
              }
            }
          }
        }
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_b0292360809211edaa2833647dc78c6c || (_templateObject2_b0292360809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          position: relative;\n        }\n        :host([is-logged-in]) {\n          max-height: calc(100vh - 48px);\n        }\n        :host #slot {\n          opacity: 0.2;\n          visibility: hidden;\n        }\n        :host([dashboard-opened]) {\n          display: inline-block !important;\n          margin-left: 50vw;\n          height: 100vh;\n          pointer-events: none;\n          opacity: 0.5;\n          width: 100vw;\n        }\n        :host([theme-loaded]) #slot {\n          opacity: 1;\n          visibility: visible;\n        }\n        simple-progress {\n          display: block;\n          width: 100%;\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          background-color: transparent;\n          z-index: 1000;\n          --simple-progress-active-color: var(\n            --haxcms-color,\n            rgba(255, 255, 255, 0.5)\n          );\n        }\n        simple-progress[disabled] {\n          display: none;\n        }\n      "])))];
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "haxcms-site-builder";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteBuilder), "properties", this)), {}, {
          activeItemLocation: {
            type: String,
            attribute: "active-item-location"
          },
          disableFeatures: {
            type: String,
            reflect: true,
            attribute: "disable-features"
          },
          _timeStamp: {
            type: String
          },
          isLoggedIn: {
            type: Boolean,
            reflect: true,
            attribute: "is-logged-in"
          },
          dashboardOpened: {
            type: Boolean,
            reflect: true,
            attribute: "dashboard-opened"
          },

          /**
           * queryParams
           */
          queryParams: {
            type: Object
          },

          /**
           * Loading status of the page to render.
           */
          loading: {
            type: Boolean,
            reflect: true
          },

          /**
           * support for alternate locations.
           */
          outlineLocation: {
            type: String,
            attribute: "outline-location"
          },

          /**
           * Manifest from file
           */
          manifest: {
            type: Object
          },

          /**
           * Theme, used to boot a design element
           */
          themeData: {
            type: Object
          },

          /**
           * Theme name, which we then use to setup the theme
           */
          themeName: {
            type: String
          },

          /**
           * Imported items so we can allow theme flipping dynamically
           */
          __imported: {
            type: Object
          },

          /**
           * theme loaded to indicate to the theme we have a theme ready to go
           */
          themeLoaded: {
            type: Boolean,
            reflect: true,
            attribute: "theme-loaded"
          },

          /**
           * Active item which is in JSON Outline Schema
           */
          activeItem: {
            type: Object
          },

          /**
           * Active item content
           */
          activeItemContent: {
            type: String
          },

          /**
           * Location of the site.json file
           */
          file: {
            type: String
          },

          /**
           * Injected by HAXcms
           */
          baseURI: {
            type: String,
            attribute: "base-uri"
          }
        });
      }
    }]);
    return HAXCMSSiteBuilder;
  }((0, _I18NMixin2.I18NMixin)(_index.LitElement)); // this global allows a backdoor into activating the HAXcms editor UI
  // this is only going to be visually enabled but it won't actually
  // be able to talk to the backend correctly bc the JWT won't exist
  // the endpoints are also fictional. also useful for testing purposes


  _exports.HAXCMSSiteBuilder = HAXCMSSiteBuilder;

  window.HAXme = function () {
    var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    if (context == null) {
      // fake a demo
      context = "demo"; // fake endpoints

      window.appSettings = {
        login: "dist/dev/login.json",
        logout: "dist/dev/logout.json",
        saveNodePath: "dist/dev/saveNode.json",
        saveManifestPath: "dist/dev/saveManifestPath.json",
        createNodePath: "dist/dev/saveNode.json",
        deleteNodePath: "dist/dev/saveNode.json",
        saveOutlinePath: "dist/dev/saveNode.json",
        publishSitePath: "dist/dev/saveNode.json",
        syncSitePath: "dist/dev/saveNode.json",
        getNodeFieldsPath: "dist/dev/getNodeFieldsPath.json",
        getSiteFieldsPath: "dist/dev/getSiteFieldsPath.json",
        revertSitePath: "dist/dev/saveNode.json",
        getFormToken: "adskjadshjudfu823u823u8fu8fij",
        appStore: {
          url: "dist/dev/appstore.json"
        },
        // add your custom theme here if testing locally and wanting to emulate the theme selector
        // this isn't really nessecary though
        themes: {
          "haxcms-dev-theme": {
            element: "haxcms-dev-theme",
            path: "@lrnwebcomponents/haxcms-elements/lib/haxcms-dev-theme.js",
            name: "Developer theme"
          }
        }
      };
    }

    if (context == "demo") {
      window.HAXCMSContext = true;
    } // apply context


    if (document.body) {
      document.body.getElementsByTagName("haxcms-editor-builder")[0].__appliedContext = false;
      document.body.getElementsByTagName("haxcms-editor-builder")[0].applyContext(context);
    }
  };

  customElements.define(HAXCMSSiteBuilder.tag, HAXCMSSiteBuilder);
});