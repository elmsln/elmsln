define(["exports", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/async.js", "../../@polymer/iron-pages/iron-pages.js", "../../@polymer/iron-ajax/iron-ajax.js", "../../@polymer/iron-list/iron-list.js", "../simple-tooltip/simple-tooltip.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button.js", "../hax-iconset/lib/simple-hax-iconset.js", "../simple-progress/simple-progress.js", "../../@polymer/app-layout/app-toolbar/app-toolbar.js", "../../@polymer/app-layout/app-header/app-header.js", "../item-overlay-ops/item-overlay-ops.js", "../lrnsys-outline/lrnsys-outline.js", "../simple-colors/lib/simple-colors-polymer.js", "../simple-modal/simple-modal.js", "../editable-list/editable-list.js", "./lib/sortable-list.js", "./lib/pagemap.js"], function (_exports, _polymerElement, async, _ironPages, _ironAjax, _ironList, _simpleTooltip, _simpleIcon, _simpleIcons, _simpleIconButton, _simpleHaxIconset, _simpleProgress, _appToolbar, _appHeader, _itemOverlayOps, _lrnsysOutline, _simpleColorsPolymer, _simpleModal, _editableList, _sortableList, _pagemap) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.OutlineDesigner = void 0;
  async = _interopRequireWildcard(async);

  var _templateObject_77e123504fbd11edb93baf2315d3222f;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `outline-designer`
   * @element outline-designer
   * `tools to modify and visualize JSON Outline Schema for editing`
   *
   * @microcopy - language worth noting:
   *  -
   * Feedback
   * color code lessons
  step down the hierarchy
  
  mode vs resolution (3 levels)
  
   *
  
   * @polymer
   * @demo demo/index.html
   */
  var OutlineDesigner = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(OutlineDesigner, _PolymerElement);

    var _super = _createSuper(OutlineDesigner);

    function OutlineDesigner() {
      babelHelpers.classCallCheck(this, OutlineDesigner);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(OutlineDesigner, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _polymerElement.html)(_templateObject_77e123504fbd11edb93baf2315d3222f || (_templateObject_77e123504fbd11edb93baf2315d3222f = babelHelpers.taggedTemplateLiteral([" <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        app-toolbar {\n          background-color: var(\n            --simple-colors-default-theme-light-blue-1,\n            #4285f4\n          );\n          color: var(--simple-colors-default-theme-grey-12, #222222);\n          margin: 20px 0;\n        }\n\n        #viewmode,\n        #detailsmode {\n          transition: 0.3s all ease;\n          -webkit-transition: 0.3s all ease;\n          -moz-transition: 0.3s all ease;\n          -ms-transition: 0.3s all ease;\n          -o-transition: 0.3s all ease;\n        }\n\n        .rotate-90 {\n          transform: rotate(90deg);\n          -webkit-transform: rotate(90deg);\n          -moz-transform: rotate(90deg);\n          -ms-transform: rotate(90deg);\n          -o-transform: rotate(90deg);\n        }\n\n        .breadcrumb-arrow:first-child {\n          display: none;\n        }\n\n        .breadcrumb-arrow {\n          color: var(\n            --breadcrumb-color1,\n            var(--simple-colors-default-theme-light-blue-9, rgb(67, 110, 144))\n          );\n          margin: -2px 6px 0 6px;\n        }\n\n        .breadcrumb {\n          text-decoration: none;\n          -webkit-tap-highlight-color: transparent;\n          background-color: transparent;\n          line-height: 34px;\n          font-size: 18px;\n          color: var(\n            --breadcrumb-color1,\n            var(--simple-colors-default-theme-light-blue-9, rgb(67, 110, 144))\n          );\n          opacity: 0.8;\n        }\n\n        simple-progress {\n          display: block;\n          width: 100%;\n          --simple-progress-active-color: rgba(255, 255, 255, 0.5);\n          --simple-progress-container-color: transparent;\n        }\n\n        .card-wrapper {\n          padding: 16px;\n        }\n\n        #sort .card-wrapper {\n          background: var(--simple-colors-default-theme-grey-3, #ddd);\n          display: inline-block;\n          float: left;\n          margin: 16px;\n          vertical-align: top;\n        }\n\n        div.card {\n          width: 250px;\n          height: 300px;\n          display: block;\n          visibility: visible;\n          opacity: 1;\n          box-shadow: 0 5px 5px rgba(0, 0, 0, 0.7);\n        }\n\n        #addbutton {\n          opacity: 0.6;\n          background-color: var(--simple-colors-default-theme-grey-3, #ddd);\n        }\n\n        .add-button {\n          width: 200px;\n          height: 200px;\n          margin: auto;\n          display: flex;\n        }\n\n        div.card.expanded {\n          min-height: 300px;\n        }\n\n        iron-list {\n          flex: 1 1 auto;\n        }\n\n        .low-detail,\n        .mid-detail,\n        .high-detail {\n          visibility: visible;\n          opacity: 1;\n          transition: 0.6s all ease;\n          -webkit-transition: 0.6s all ease;\n          -moz-transition: 0.6s all ease;\n          -ms-transition: 0.6s all ease;\n          -o-transition: 0.6s all ease;\n        }\n\n        :host([details-mode=\"low\"]) .mid-detail,\n        :host([details-mode=\"low\"]) .high-detail {\n          visibility: hidden;\n          opacity: 0;\n        }\n\n        :host([details-mode=\"mid\"]) .high-detail {\n          visibility: hidden;\n          opacity: 0;\n        }\n\n        :host([details-mode=\"mid\"]) .mid-detail {\n          visibility: visible;\n          opacity: 1;\n        }\n\n        div.card.card-low-detail {\n          width: 150px;\n          height: 150px;\n        }\n\n        div.card.card-mid-detail {\n          width: 250px;\n          height: 250px;\n        }\n\n        div.card.card-high-detail {\n          width: 250px;\n          height: 300px;\n        }\n\n        #minimaparea {\n          position: fixed;\n          top: 125px;\n          right: 0;\n          width: 100px;\n          height: 100%;\n          z-index: 100;\n          visibility: hidden;\n          opacity: 0;\n          transition: 0.3s all linear;\n          background-color: transparent;\n          -webkit-transition: 0.3s all linear;\n          -moz-transition: 0.3s all linear;\n          -ms-transition: 0.3s all linear;\n          -o-transition: 0.3s all linear;\n        }\n\n        #minimaparea.show-minimap {\n          background-color: white;\n          opacity: 0.5;\n          visibility: visible;\n        }\n\n        #minimaparea.show-minimap:hover {\n          opacity: 0.9;\n        }\n\n        .tf-tree {\n          transition: 0.3s all ease;\n          font-size: 16px;\n          overflow: auto;\n        }\n\n        .tf-tree * {\n          transition: 0.3s all ease;\n          box-sizing: border-box;\n          margin: 0;\n          padding: 0;\n        }\n\n        .tf-tree ul {\n          display: inline-flex;\n        }\n\n        .tf-tree li {\n          align-items: center;\n          display: flex;\n          flex-direction: column;\n          flex-wrap: wrap;\n          padding: 0 1em;\n          position: relative;\n        }\n\n        .tf-tree li ul {\n          margin: 2em 0;\n        }\n\n        .tf-tree li li:before {\n          border-top: 0.0625em solid #000;\n          content: \"\";\n          display: block;\n          height: 0.0625em;\n          left: -0.03125em;\n          position: absolute;\n          top: -1.03125em;\n          width: 100%;\n        }\n\n        .tf-tree li li:first-child:before {\n          left: calc(50% - 0.03125em);\n          max-width: calc(50% + 0.0625em);\n        }\n\n        .tf-tree li li:last-child:before {\n          left: auto;\n          max-width: calc(50% + 0.0625em);\n          right: calc(50% - 0.03125em);\n        }\n\n        .tf-tree li li:only-child:before {\n          display: none;\n        }\n\n        .tf-tree li li:only-child > .tf-nc:before,\n        .tf-tree li li:only-child > .tf-node-content:before {\n          height: 1.0625em;\n          top: -1.0625em;\n        }\n\n        .tf-tree .tf-nc,\n        .tf-tree .tf-node-content {\n          border: 0.0625em solid #000;\n          display: inline-block;\n          padding: 0.5em 1em;\n          position: relative;\n        }\n\n        .tf-tree .tf-nc:before,\n        .tf-tree .tf-node-content:before {\n          top: -1.03125em;\n        }\n\n        .tf-tree .tf-nc:after,\n        .tf-tree .tf-nc:before,\n        .tf-tree .tf-node-content:after,\n        .tf-tree .tf-node-content:before {\n          border-left: 0.0625em solid #000;\n          content: \"\";\n          display: block;\n          height: 1em;\n          left: calc(50% - 0.03125em);\n          position: absolute;\n          width: 0.0625em;\n        }\n\n        .tf-tree .tf-nc:after,\n        .tf-tree .tf-node-content:after {\n          top: calc(100% + 0.03125em);\n        }\n\n        .tf-tree .tf-nc:only-child:after,\n        .tf-tree .tf-node-content:only-child:after,\n        .tf-tree > ul > li > .tf-nc:before,\n        .tf-tree > ul > li > .tf-node-content:before {\n          display: none;\n        }\n\n        .tf-tree.tf-gap-sm li {\n          padding: 0 0.6em;\n        }\n\n        .tf-tree.tf-gap-sm li > .tf-nc:before,\n        .tf-tree.tf-gap-sm li > .tf-node-content:before {\n          height: 0.6em;\n          top: -0.6em;\n        }\n\n        .tf-tree.tf-gap-sm li > .tf-nc:after,\n        .tf-tree.tf-gap-sm li > .tf-node-content:after {\n          height: 0.6em;\n        }\n\n        .tf-tree.tf-gap-sm li ul {\n          margin: 1.2em 0;\n        }\n\n        .tf-tree.tf-gap-sm li li:before {\n          top: -0.63125em;\n        }\n\n        .tf-tree.tf-gap-sm li li:only-child > .tf-nc:before,\n        .tf-tree.tf-gap-sm li li:only-child > .tf-node-content:before {\n          height: 0.6625em;\n          top: -0.6625em;\n        }\n\n        .tf-tree.tf-gap-lg li {\n          padding: 0 1.5em;\n        }\n\n        .tf-tree.tf-gap-lg li > .tf-nc:before,\n        .tf-tree.tf-gap-lg li > .tf-node-content:before {\n          height: 1.5em;\n          top: -1.5em;\n        }\n\n        .tf-tree.tf-gap-lg li > .tf-nc:after,\n        .tf-tree.tf-gap-lg li > .tf-node-content:after {\n          height: 1.5em;\n        }\n\n        .tf-tree.tf-gap-lg li ul {\n          margin: 3em 0;\n        }\n\n        .tf-tree.tf-gap-lg li li:before {\n          top: -1.53125em;\n        }\n\n        .tf-tree.tf-gap-lg li li:only-child > .tf-nc:before,\n        .tf-tree.tf-gap-lg li li:only-child > .tf-node-content:before {\n          height: 1.5625em;\n          top: -1.5625em;\n        }\n\n        .tf-tree li.tf-dotted-children .tf-nc:after,\n        .tf-tree li.tf-dotted-children .tf-nc:before,\n        .tf-tree li.tf-dotted-children .tf-node-content:after,\n        .tf-tree li.tf-dotted-children .tf-node-content:before {\n          border-left-style: dotted;\n        }\n\n        .tf-tree li.tf-dotted-children li:before {\n          border-top-style: dotted;\n        }\n\n        .tf-tree li.tf-dotted-children > .tf-nc:before,\n        .tf-tree li.tf-dotted-children > .tf-node-content:before {\n          border-left-style: solid;\n        }\n\n        .tf-tree li.tf-dashed-children .tf-nc:after,\n        .tf-tree li.tf-dashed-children .tf-nc:before,\n        .tf-tree li.tf-dashed-children .tf-node-content:after,\n        .tf-tree li.tf-dashed-children .tf-node-content:before {\n          border-left-style: dashed;\n        }\n\n        .tf-tree li.tf-dashed-children li:before {\n          border-top-style: dashed;\n        }\n\n        .tf-tree li.tf-dashed-children > .tf-nc:before,\n        .tf-tree li.tf-dashed-children > .tf-node-content:before {\n          border-left-style: solid;\n        }\n\n        .tf-label {\n          transition: 0.3s all ease;\n          cursor: pointer;\n        }\n\n        .node-high-detail li img {\n          height: 50px;\n          position: static;\n        }\n\n        .node-high-detail li .tf-label {\n          z-index: 1;\n          position: relative;\n          font-size: 1.75em;\n          padding: 8px;\n          background-color: rgba(250, 250, 250, 0.8);\n        }\n\n        .node-low-detail .tf-nc {\n          height: 32px;\n          width: 32px;\n          background-color: var(\n            --simple-colors-default-theme-light-blue-7,\n            dodgerblue\n          );\n          border-color: var(\n            --simple-colors-default-theme-light-blue-7,\n            dodgerblue\n          );\n          padding: 0;\n          border-radius: 50%;\n          overflow: hidden;\n          -webkit-border-radius: 50%;\n          -moz-border-radius: 50%;\n          -ms-border-radius: 50%;\n          -o-border-radius: 50%;\n        }\n\n        .node-low-detail .tf-nc:before,\n        .node-low-detail .tf-nc:after {\n          border-left-color: var(\n            --simple-colors-default-theme-light-blue-7,\n            dodgerblue\n          );\n          border-left-width: 2px;\n        }\n\n        .node-low-detail li li:before {\n          border-top-color: var(\n            --simple-colors-default-theme-light-blue-7,\n            dodgerblue\n          );\n          border-top-width: 2px;\n        }\n      </style>\n      <style include=\"simple-colors-shared-styles-polymer\"></style>\n      <iron-ajax\n        auto=\"[[outlineSchemaUrl]]\"\n        url=\"[[outlineSchemaUrl]]\"\n        handle-as=\"json\"\n        last-response=\"{{manifest}}\"\n        loading=\"{{__loading}}\"\n      >\n      </iron-ajax>\n      <app-header reveals>\n        <app-toolbar>\n          View: [[viewModeLabel]]\n          <simple-icon-button\n            on-click=\"_toggleViewMode\"\n            id=\"viewmode\"\n            icon=\"[[viewModeIcon]]\"\n          ></simple-icon-button>\n          <simple-tooltip for=\"viewmode\">[[viewModeLabel]]</simple-tooltip>\n          Detail: [[detailsModeLabel]]\n          <simple-icon-button\n            on-click=\"_toggleDetailsMode\"\n            id=\"detailsmode\"\n            icon=\"[[detailsModeIcon]]\"\n          ></simple-icon-button>\n          <simple-tooltip for=\"detailsmode\"\n            >[[detailsModeLabel]]</simple-tooltip\n          >\n          <div main-title class=\"flex layout breadcrumb_layout\">\n            <simple-icon\n              class=\"breadcrumb-arrow\"\n              icon=\"icons:chevron-right\"\n            ></simple-icon>\n            <a class=\"breadcrumb\" id=\"main\">[[manifest.title]]</a>\n\n            <simple-icon\n              class=\"breadcrumb-arrow\"\n              icon=\"icons:chevron-right\"\n            ></simple-icon>\n            <a class=\"breadcrumb\" id=\"second\">Lesson 2</a>\n\n            <simple-icon\n              class=\"breadcrumb-arrow\"\n              icon=\"icons:chevron-right\"\n            ></simple-icon>\n            <a class=\"breadcrumb\" id=\"third\">Math Basics</a>\n          </div>\n          <div>\n            <simple-icon-button\n              on-click=\"_toggleMiniMap\"\n              id=\"minimap\"\n              icon=\"device:gps-fixed\"\n              title=\"Toggle outline mini map\"\n            ></simple-icon-button>\n            <simple-tooltip for=\"helpbutton\">Toggle mini-map</simple-tooltip>\n            <simple-icon-button\n              id=\"helpbutton\"\n              icon=\"icons:help\"\n              title=\"help\"\n            ></simple-icon-button>\n            <simple-tooltip for=\"helpbutton\">Help</simple-tooltip>\n          </div>\n          <simple-progress\n            indeterminate\n            disabled$=\"[[!__loading]]\"\n          ></simple-progress>\n        </app-toolbar>\n      </app-header>\n      <iron-pages selected=\"[[selectedView]]\">\n        <section id=\"listpage\">\n          <iron-list id=\"ironlist\" items=\"[[manifest.items]]\" as=\"item\" grid>\n            <template>\n              <div class=\"card-wrapper\">\n                <item-overlay-ops\n                  fixed-height=\"140\"\n                  data-item-id$=\"[[item.id]]\"\n                  add=\"\"\n                  edit=\"\"\n                  remove=\"\"\n                  duplicate=\"\"\n                  move=\"\"\n                  edit-mode=\"\"\n                >\n                  <div\n                    class$=\"card-[[detailsMode]]-detail card\"\n                    heading=\"[[item.title]]\"\n                    image=\"[[item.metadata.image]]\"\n                    elevation=\"2\"\n                    animated-shadow=\"false\"\n                  >\n                    <div class=\"card-content mid-detail\">\n                      [[item.description]]\n                    </div>\n                    <div class=\"card-actions high-detail\">\n                      <editable-list\n                        edit-mode=\"[[editMode]]\"\n                        items=\"[[manifest.items]]\"\n                      >\n                        <editable-list-item>[[item.title]]</editable-list-item>\n                      </editable-list>\n                      <ul>\n                        <li>Page 1</li>\n                        <li>Page 2</li>\n                        <li>Page 3</li>\n                      </ul>\n                    </div>\n                  </div>\n                </item-overlay-ops>\n              </div>\n            </template>\n          </iron-list>\n        </section>\n        <section id=\"outlinepage\">\n          <lrnsys-outline\n            id=\"outline\"\n            items=\"[[manifest.items]]\"\n            title=\"[[manifest.title]]\"\n          ></lrnsys-outline>\n        </section>\n        <section id=\"treepage\">\n          <div class$=\"node-[[detailsMode]]-detail tf-tree\">\n            <ul>\n              <template\n                is=\"dom-repeat\"\n                items=\"[[manifest.items]]\"\n                as=\"item\"\n                mutable-data\n              >\n                <li>\n                  <span class=\"tf-nc\">\n                    <div class=\"tf-label\" id$=\"item-tip-[[item.id]]\">\n                      [[item.title]]\n                    </div>\n                    <simple-tooltip for$=\"item-tip-[[item.id]]\"\n                      >[[item.title]]</simple-tooltip\n                    >\n                    <img\n                      loading=\"lazy\"\n                      src=\"[[item.metadata.image]]\"\n                      class=\"high-detail\"\n                    />\n                  </span>\n                </li>\n              </template>\n            </ul>\n          </div>\n        </section>\n        <section id=\"sortpage\">\n          <sortable-list\n            id=\"sort\"\n            sortable=\".card-wrapper\"\n            on-sort-finish=\"_onSortFinish\"\n            dragging=\"{{dragging}}\"\n          >\n            <template\n              is=\"dom-repeat\"\n              items=\"[[manifest.items]]\"\n              as=\"item\"\n              mutable-data\n            >\n              <div class=\"card-wrapper\">\n                <div\n                  class$=\"card-[[detailsMode]]-detail card\"\n                  data-item-id$=\"[[item.id]]\"\n                  heading=\"[[item.title]]\"\n                  image=\"[[item.metadata.image]]\"\n                  elevation=\"2\"\n                  animated-shadow=\"false\"\n                >\n                  <div class=\"card-content mid-detail\">\n                    [[item.description]]\n                  </div>\n                  <div class=\"card-actions high-detail\"></div>\n                </div>\n              </div>\n            </template>\n          </sortable-list>\n        </section>\n      </iron-pages>\n      <canvas id=\"minimaparea\"></canvas>\n      <slot></slot>"])));
      } // properties available to the custom element for data binding

    }, {
      key: "connectedCallback",
      value:
      /**
       * life cycle, element is afixed to the DOM
       */
      function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(OutlineDesigner.prototype), "connectedCallback", this).call(this);
        this.shadowRoot.querySelector("#ironlist").addEventListener("item-overlay-op-changed", this._overlayOpChanged.bind(this));
        this.shadowRoot.querySelector("#ironlist").addEventListener("item-overlay-option-selected", this._overlayOpSelected.bind(this));
        (0, _pagemap.pagemap)(this.shadowRoot.querySelector("#minimaparea"), {
          viewport: null,
          styles: {
            "ul,ol,li": "rgba(0, 0, 0, 0.08)",
            "h1,h2,h3,h4,h5,h6,a": "rgba(0, 0, 0, 0.10)",
            "lrnsys-outline-item": "rgba(0, 0, 0, 0.08)",
            "p,section": "rgba(0, 0, 0, 0.02)"
          },
          back: "rgba(0, 0, 0, 0.02)",
          view: "rgba(0, 0, 0, 0.05)",
          drag: "rgba(0, 0, 0, 0.10)",
          interval: null
        });
      }
      /**
       * life cycle, element is removed from the DOM
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(OutlineDesigner.prototype), "disconnectedCallback", this).call(this);
        this.shadowRoot.querySelector("#ironlist").removeEventListener("item-overlay-op-changed", this._overlayOpChanged.bind(this));
        this.shadowRoot.querySelector("#ironlist").removeEventListener("item-overlay-option-selected", this._overlayOpSelected.bind(this));
      }
    }, {
      key: "_toggleMiniMap",
      value: function _toggleMiniMap(e) {
        this.miniMap = !this.miniMap;
      }
    }, {
      key: "_miniMapChanged",
      value: function _miniMapChanged(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          if (newValue) {
            this.shadowRoot.querySelector("#minimap").icon = "device:gps-fixed";
            this.shadowRoot.querySelector("#minimaparea").classList.add("show-minimap");
          } else {
            this.shadowRoot.querySelector("#minimap").icon = "device:gps-off";
            this.shadowRoot.querySelector("#minimaparea").classList.remove("show-minimap");
          }
        }
      }
      /**
       * toggle between view modes
       */

    }, {
      key: "_toggleViewMode",
      value: function _toggleViewMode(e) {
        switch (this.viewMode) {
          case "cards":
            this.viewMode = "outline";
            break;

          case "outline":
            this.outlineData = this.shadowRoot.querySelector("#outline").getData();
            this.viewMode = "tree";
            break;

          case "tree":
            this.viewMode = "drag";
            break;

          case "drag":
            this.viewMode = "cards";
            break;
        }
      }
      /**
       * toggle between details mode
       */

    }, {
      key: "_toggleDetailsMode",
      value: function _toggleDetailsMode(e) {
        switch (this.detailsMode) {
          case "low":
            this.detailsMode = "mid";
            break;

          case "mid":
            this.detailsMode = "high";
            break;

          case "high":
            this.detailsMode = "low";
            break;
        }
      } // Observer details mode for changes

    }, {
      key: "_detailsModeChanged",
      value: function _detailsModeChanged(newValue, oldValue) {
        var _this = this;

        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          switch (newValue) {
            case "low":
              this.detailsModeIcon = "icons:apps";
              this.detailsModeLabel = "Low";
              break;

            case "mid":
              this.detailsModeIcon = "icons:view-module";
              this.detailsModeLabel = "Medium";
              break;

            case "high":
              this.detailsModeIcon = "icons:view-carousel";
              this.detailsModeLabel = "High";
              break;
          } // fire resize event if iron-list is visible


          if (this.selectedView === 0) {
            setTimeout(function () {
              _this.shadowRoot.querySelector("#ironlist").dispatchEvent(new CustomEvent("iron-resize", {
                bubbles: true,
                cancelable: true,
                composed: true,
                detail: true
              }));

              window.dispatchEvent(new Event("resize"));
            }, 50);
          }
        }
      }
      /**
       * Sorting of items has finished, meaning drag drop complete
       */

    }, {
      key: "_onSortFinish",
      value: function _onSortFinish(e) {
        // @todo ensure items align with what's been drag and drop reordered
        console.log(e.detail);
      }
      /**
       * overlay operation changed
       */

    }, {
      key: "_overlayOpChanged",
      value: function _overlayOpChanged(e) {
        console.log(e.detail);

        switch (e.detail.operation) {
          case "add":
            // @todo execute adding an item after here
            console.log("add item");
            console.log(e.detail.element.getAttribute("data-item-id"));
            break;

          case "edit":
            // @todo execute edit item here
            console.log("edit item");
            console.log(e.detail.element.getAttribute("data-item-id"));
            break;
        }
      }
      /**
       * Option selected in overlay by the user
       */

    }, {
      key: "_overlayOpSelected",
      value: function _overlayOpSelected(e) {
        console.log(e.detail);

        switch (e.detail.operation) {
          case "move":
            if (e.detail.option === "option1") {
              // @todo execute move left
              console.log("move left");
            } else if (e.detail.option === "option2") {
              // @todo execute move right
              console.log("move right");
            }

            console.log(e.detail.element.getAttribute("data-item-id"));
            break;

          case "duplicate":
            if (e.detail.option === "option1") {
              // @todo execute duplicate
              console.log("duplicate");
              console.log(e.detail.element.getAttribute("data-item-id"));
            }

            break;

          case "remove":
            if (e.detail.option === "option1") {
              // @todo execute delete
              console.log("remove");
              console.log(e.detail.element.getAttribute("data-item-id"));
            }

            break;
        }
      } // Observer layoutMode for changes

    }, {
      key: "_viewModeChanged",
      value: function _viewModeChanged(newValue, oldValue) {
        var _this2 = this;

        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          switch (newValue) {
            case "cards":
              this.shadowRoot.querySelector("#viewmode").classList.add("rotate-90");
              this.selectedView = 0;
              this.viewModeIcon = "icons:view-module";
              this.viewModeLabel = "Card view";
              setTimeout(function () {
                _this2.shadowRoot.querySelector("#ironlist").dispatchEvent(new CustomEvent("iron-resize", {
                  bubbles: true,
                  cancelable: true,
                  composed: true,
                  detail: true
                }));

                window.dispatchEvent(new Event("resize"));
              }, 100);
              break;

            case "outline":
              this.shadowRoot.querySelector("#viewmode").classList.remove("rotate-90");
              this.selectedView = 1;
              this.viewModeIcon = "icons:view-list";
              this.viewModeLabel = "Outline view";
              break;

            case "tree":
              this.shadowRoot.querySelector("#viewmode").classList.add("rotate-90");
              this.selectedView = 2;
              this.viewModeIcon = "social:share";
              this.viewModeLabel = "Tree view";
              break;

            case "drag":
              this.shadowRoot.querySelector("#viewmode").classList.remove("rotate-90");
              this.selectedView = 3;
              this.viewModeIcon = "icons:touch-app";
              this.viewModeLabel = "Draggable cards";
              break;
          }
        }
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(OutlineDesigner), "properties", this)), {}, {
          /**
           * Which layout to the outline to display
           */
          viewMode: {
            name: "viewMode",
            type: String,
            value: "cards",
            observer: "_viewModeChanged"
          },

          /**
           * Icon for the selected view mode
           */
          viewModeIcon: {
            name: "viewModeIcon",
            type: String
          },

          /**
           * Label for the selected view mode
           */
          viewModeLabel: {
            name: "viewModeLabel",
            type: String
          },

          /**
           * Which layout to the outline to display
           */
          detailsMode: {
            name: "detailsMode",
            type: String,
            value: "mid",
            reflectToAttribute: true,
            observer: "_detailsModeChanged"
          },

          /**
           * Icon for the selected view mode
           */
          detailsModeIcon: {
            name: "detailsModeIcon",
            type: String
          },

          /**
           * Label for the selected view mode
           */
          detailsModeLabel: {
            name: "detailsModeLabel",
            type: String
          },

          /**
           * Data binding to show the selected view
           */
          selectedView: {
            name: "selectedView",
            type: Number
          },

          /**
           * Whether or not we are in an editing state
           */
          editMode: {
            name: "editMode",
            type: Boolean,
            value: false,
            reflectToAttribute: true,
            observer: "_editModeChanged"
          },

          /**
           * Whether or to show the mini map
           */
          miniMap: {
            name: "miniMap",
            type: Boolean,
            value: true,
            reflectToAttribute: true,
            observer: "_miniMapChanged"
          },

          /**
           * end point / JSON to load
           */
          outlineSchemaUrl: {
            name: "outlineSchemaUrl",
            type: String,
            value: false
          },

          /**
           * JSON outline schema manifest
           */
          manifest: {
            name: "manifest",
            type: Object,
            notify: true
          },

          /**
           * Data in outline format
           */
          outlineData: {
            name: "outlineData",
            type: Object,
            notify: true
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "outline-designer";
      }
    }]);
    return OutlineDesigner;
  }(_polymerElement.PolymerElement);

  _exports.OutlineDesigner = OutlineDesigner;
  window.customElements.define("outline-designer", OutlineDesigner);
});