define(["exports", "../../lit/index.js", "../simple-colors/simple-colors.js", "../simple-toast/simple-toast.js", "../fullscreen-behaviors/fullscreen-behaviors.js", "../anchor-behaviors/anchor-behaviors.js", "../responsive-utility/responsive-utility.js", "../utils/utils.js", "../absolute-position-behavior/absolute-position-behavior.js", "../simple-tooltip/simple-tooltip.js", "../simple-search/simple-search.js", "../simple-range-input/simple-range-input.js", "../simple-fields/lib/simple-fields-field.js", "./lib/a11y-media-play-button.js", "./lib/a11y-media-state-manager.js", "./lib/a11y-media-button.js", "./lib/a11y-media-transcript-cue.js", "./lib/a11y-media-youtube.js"], function (_exports, _index, _simpleColors, _simpleToast, _fullscreenBehaviors, _anchorBehaviors, _responsiveUtility, _utils, _absolutePositionBehavior, _simpleTooltip, _simpleSearch, _simpleRangeInput, _simpleFieldsField, _a11yMediaPlayButton, _a11yMediaStateManager, _a11yMediaButton, _a11yMediaTranscriptCue, _a11yMediaYoutube) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yMediaPlayer = void 0;

  var _templateObject_9e25b9508e0011ed99ce491205e67b1d, _templateObject2_9e25b9508e0011ed99ce491205e67b1d, _templateObject3_9e25b9508e0011ed99ce491205e67b1d, _templateObject4_9e25b9508e0011ed99ce491205e67b1d, _templateObject5_9e25b9508e0011ed99ce491205e67b1d, _templateObject6_9e25b9508e0011ed99ce491205e67b1d, _templateObject7_9e25b9508e0011ed99ce491205e67b1d, _templateObject8_9e25b9508e0011ed99ce491205e67b1d, _templateObject9_9e25b9508e0011ed99ce491205e67b1d, _templateObject10_9e25b9508e0011ed99ce491205e67b1d, _templateObject11_9e25b9508e0011ed99ce491205e67b1d, _templateObject12_9e25b9508e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
    * `a11y-media-player`
    * an accessible video player
    * 
   ### Styling
   `<a11y-media-player>` provides the following basic custom properties
   for styling:
   
   #### Basic Styling
   
   Custom property | Description | Default
   ----------------|-------------|----------
   `--a11y-media-color` | default text color | `--simple-colors-default-theme-grey-11`
   `--a11y-media-bg-color` | default background color | `--simple-colors-default-theme-grey-2`
   `--a11y-media-border-color` | default border color | `--simple-colors-default-theme-grey-3`
   `--a11y-media-hover-color` | text color when hovering | `--simple-colors-default-theme-grey-12`
   `--a11y-media-hover-bg-color` | background color when hovering | `--simple-colors-default-theme-grey-2`
   `--a11y-media-accent-color` | accent color | `--simple-colors-default-theme-accent-9`
   `--a11y-media-faded-accent-color` | accent color when faded | `--simple-colors-default-theme-accent-8`
   `--a11y-media-disabled-color` | color for disabled items | `--simple-colors-default-theme-grey-5`
   `--a11y-media-transcript-color` | default text color of transcript | `--simple-colors-default-theme-grey-7`
   `--a11y-media-transcript-bg-color` | default background color of transcript | `--simple-colors-default-theme-grey-1`
   `--a11y-media-transcript-accent-color` | default accent color of transcript | `--simple-colors-default-theme-accent-8`
   `--a11y-media-transcript-faded-accent-color` | accent color of transcript, faded | `--simple-colors-default-theme-accent-10`
   `--a11y-media-transcript-cue-color` | text color of transcript cue | `--simple-colors-fixed-theme-grey-12`
   `--a11y-media-transcript-cue-bg-color` | background color of transcript cue  | `--simple-colors-fixed-theme-grey-1`
   `--a11y-media-transcript-active-cue-color` | text color of active transcript cue  | `--simple-colors-fixed-theme-grey-12`
   `--a11y-media-transcript-active-cue-bg-color` | background color of active transcript cue  | `--simple-colors-fixed-theme-accent-1`
   `--a11y-media-transcript-focused-cue-color` | text color of focused transcript cue  | `--simple-colors-fixed-theme-grey-12`
   `--a11y-media-transcript-focused-cue-bg-color` | background color of focused transcript cue  | `--simple-colors-fixed-theme-grey-2`
   `--a11y-media-transcript-match-color` | text color of matched term in transcript search  | `--simple-colors-fixed-theme-grey-1`
   `--a11y-media-transcript-match-bg-color` | background color of matched term in transcript search | `--simple-colors-fixed-theme-accent-10`
   `--a11y-media-transcript-match-border-color` | border color of matched term in transcript search | `--simple-colors-fixed-theme-accent-12`
   
   #### Controls
   Custom property | Description | Default 
   ----------------|-------------|----------
   `--a11y-media-scrollbar-width` | default width of scrollbars | `5px`
   `--a11y-media-controls-font-family` | font-family of controls
   
   #### Buttons
   Custom property | Description | Default
   ----------------|-------------|----------
   `--a11y-media-button-color` | button text color | `--a11y-media-color`
   `--a11y-media-button-bg-color` | button background color | `--a11y-media-bg-color`
   `--a11y-media-button-hover-color` | button text color when hovering | `--a11y-media-accent-color`
   `--a11y-media-button-hover-bg-color` | button background color when hovering | `--a11y-media-hover-bg-color`
   `--a11y-media-button-disabled-color` | button text color when disabled | `--a11y-media-disabled-color`
   `--a11y-media-button-toggle-color` | button text color when toggled | `--a11y-media-faded-accent-color`
   
   #### Sliders
   Custom property | Description | Default
   ----------------|-------------|----------
   `--simple-range-input-active-color` | slider color when active | `--a11y-media-accent-color`
   `--simple-range-input-secondary-color` | slider color for buffering | `--a11y-media-faded-accent-color`
   `--simple-range-input-pin-color` | slider pin color | `--a11y-media-bg-color`
   `--simple-range-input-pin-start-color` | slider pin color in start position | `--a11y-media-bg-color`
   `--simple-range-input-pin-end-color` | slider pin color in end position | `--a11y-media-bg-color`
   `--simple-range-input-knob-color` | slider knob color | `--a11y-media-accent-color`
   `--simple-range-input-knob-start-color` | slider knob color in start position | `--a11y-media-accent-color`
   `--simple-range-input-knob-end-color` | slider knob color in end position | `--a11y-media-bg-accent-color`
   `--simple-range-input-knob-border-color` | slider knob border color | `--a11y-media-accent-color`
   `--simple-range-input-knob-start-border-color` | slider knob border color in start position | `--a11y-media-bg-color`
   `--simple-range-input-knob-end-border-color` | slider knob border color in end position | `--a11y-media-bg-color`
   
   #### Settings Menu
   Custom property | Description | Default
   ----------------|-------------|----------
   `--a11y-media-settings-menu-color` | settings menu text color | `--a11y-media-color`
   `--a11y-media-settings-menu-bg-color` | settings menu background color | `--a11y-media-bg-color`
   `--a11y-media-settings-menu-hover-color` | settings menu text color when hovering | `--a11y-media-hover-color`
   `--a11y-media-settings-menu-hover-bg-color` | settings menu background color when hovering | `--a11y-media-hover-bg-color`
   
   #### Link Sharing Toast
   Custom property | Description | Default
   ----------------|-------------|----------
   `--simple-toast-color` | toast text color | `--a11y-media-color`
   `--simple-toast-background-color` | toast background color | `--a11y-media-bg-color`
    *
    * @element a11y-media-player
    * @extends SimpleColors
    * @demo ./demo/index.html video demo
    * @demo ./demo/audio.html audio demo
    * @demo ./demo/youtube.html YouTube demo
    */
  var A11yMediaPlayer = /*#__PURE__*/function (_FullscreenBehaviors) {
    babelHelpers.inherits(A11yMediaPlayer, _FullscreenBehaviors);

    var _super = _createSuper(A11yMediaPlayer);

    function A11yMediaPlayer() {
      var _this;

      babelHelpers.classCallCheck(this, A11yMediaPlayer);
      _this = _super.call(this);
      window.ResponsiveUtility.requestAvailability();
      window.A11yMediaStateManager.requestAvailability();
      _this.__playerReady = false;
      _this.audioOnly = false;
      _this.autoplay = false;
      _this.allowConcurrent = false;
      _this.cc = false;
      _this.darkTranscript = false;
      _this.disableFullscreen = false;
      _this.disableInteractive = false;
      _this.disablePrintButton = false;
      _this.disableSearch = false;
      _this.disableScroll = false;
      _this.disableSeek = false;
      _this.hideElapsedTime = false;
      _this.hideTimestamps = false;
      _this.hideTranscript = false;
      _this.id = null;
      _this.lang = "en";
      _this.learningMode = false;
      _this.linkable = false;
      _this.localization = {};
      _this.loop = false;
      _this.mediaTitle = "";
      _this.mediaLang = "en";
      _this.muted = false;
      _this.hideYoutubeLink = false;
      _this.preload = "metadata";
      _this.playbackRate = 1;
      _this.search = null;
      _this.standAlone = false;
      _this.responsiveSize = "sm";
      _this.captionsTrack = null;
      _this.transcriptTrack = null;
      _this.sources = [];
      _this.stackedLayout = false;
      _this.sticky = false;
      _this.stickyCorner = "top-right";
      _this.tracks = [];
      _this.volume = 70;
      _this.width = null;
      _this.youtubeId = null;
      _this.__cues = [];
      _this.__currentTime = 0;
      _this.__captionsOption = -1;
      _this.__loadedTracks = null;
      _this.__playing = false;
      _this.__settingsOpen = false;
      _this.__transcriptOption = -1;

      _this.querySelectorAll("video,audio").forEach(function (html5) {
        html5.addEventListener("loadedmetadata", function (e) {
          _this.__preloadedDuration = html5.duration;
        });
      });

      return _this;
    }
    /** -------------------------- CALACULATED PROPERTIES ----------------- */

    /**
     * gets anchors from page and uses their timecodes
     * @readonly
     * @returns {number} media width divided by height
     */


    babelHelpers.createClass(A11yMediaPlayer, [{
      key: "render",
      value: // render function
      function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_9e25b9508e0011ed99ce491205e67b1d || (_templateObject_9e25b9508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div class=\"sr-only\" ?hidden=\"", "\">\n        ", "\n      </div>\n      <div id=\"player-section\">\n        <div\n          id=\"player-and-controls\"\n          .style=\"", "\"\n          ?audio-no-thumb=\"", "\"\n        >\n          <div id=\"player\" .style=\"", "\">\n            <a11y-media-play-button\n              id=\"playbutton\"\n              action=\"", "\"\n              label=\"", "\"\n              @button-click=\"", "\"\n              ?audio-only=\"", "\"\n              ?disabled=\"", "\"\n              youtube-id=\"", "\"\n            >\n            </a11y-media-play-button>\n            <div id=\"html5\">\n              <slot></slot>\n            </div>\n            ", "\n            ", "\n          </div>\n        </div>\n        <div id=\"progresslabel\" class=\"sr-only\">\n          ", "\n        </div>\n        <simple-range-input\n          id=\"slider\"\n          class=\"screen-only\"\n          aria-labelledby=\"progresslabel\"\n          min=\"0\"\n          .max=\"", "\"\n          step=\"1\"\n          @value-changed=\"", "\"\n          @immediate-value-changed=\"", "\"\n          .value=\"", "\"\n          ?disabled=\"", "\"\n        >\n        </simple-range-input>\n        <div id=\"controls\" controls=\"innerplayer\">\n          <div id=\"controls-left\">\n            <a11y-media-button\n              accent-color=\"", "\"\n              ?dark=\"", "\"\n              icon=\"", "\"\n              label=\"", "\"\n              @click=\"", "\"\n            ></a11y-media-button>\n            <a11y-media-button\n              accent-color=\"", "\"\n              ?dark=\"", "\"\n              class=\"hide-flex hide-full-xs\"\n              icon=\"", "\"\n              label=\"", "\"\n              ?disabled=\"", "\"\n              ?hidden=\"", "\"\n              @click=\"", "\"\n            ></a11y-media-button>\n            <a11y-media-button\n              accent-color=\"", "\"\n              ?dark=\"", "\"\n              class=\"hide-flex hide-full-xs\"\n              icon=\"", "\"\n              label=\"", "\"\n              ?disabled=\"", "\"\n              ?hidden=\"", "\"\n              @click=\"", "\"\n            ></a11y-media-button>\n            <a11y-media-button\n              accent-color=\"", "\"\n              ?dark=\"", "\"\n              class=\"hide-flex\"\n              icon=\"", "\"\n              label=\"", "\"\n              ?disabled=\"", "\"\n              ?hidden=\"", "\"\n              @click=\"", "\"\n            ></a11y-media-button>\n            <div\n              id=\"volume-and-mute\"\n              @focus=\"", "\"\n              @blur=\"", "\"\n            >\n              <a11y-media-button\n                accent-color=\"", "\"\n                ?dark=\"", "\"\n                id=\"mute\"\n                icon=\"", "\"\n                label=\"", "\"\n                @click=\"", "\"\n              ></a11y-media-button>\n              <simple-range-input\n                id=\"volume\"\n                accent-color=\"", "\"\n                ?dark=\"", "\"\n                aria-labelledby=\"volume-slider-label\"\n                label=\"", "\"\n                min=\"0\"\n                max=\"100\"\n                pin\n                step=\"10\"\n                value=\"", "\"\n                @value-changed=\"", "\"\n                ?hidden=\"", "\"\n              ></simple-range-input>\n            </div>\n            <span\n              aria-live=\"polite\"\n              class=\"play-status control-bar hide-full-xs\"\n            >\n              <span id=\"statbar\">", "</span>\n            </span>\n          </div>\n          <div id=\"controls-right\">\n            <a11y-media-button\n              accent-color=\"", "\"\n              ?dark=\"", "\"\n              icon=\"", "\"\n              label=\"", "\"\n              ?disabled=\"", "\"\n              ?hidden=\"", "\"\n              ?toggle=\"", "\"\n              @click=\"", "\"\n            >\n            </a11y-media-button>\n            <a11y-media-button\n              accent-color=\"", "\"\n              ?dark=\"", "\"\n              class=\"hide-full-xs\"\n              controls=\"transcript\"\n              icon=\"", "\"\n              label=\"", "\"\n              ?disabled=\"", "\"\n              ?hidden=\"", "\"\n              ?toggle=\"", "\"\n              @click=\"", "\"\n            >\n            </a11y-media-button>\n            <a11y-media-button\n              accent-color=\"", "\"\n              ?dark=\"", "\"\n              class=\"hide-full-sm\"\n              icon=\"", "\"\n              label=\"", "\"\n              ?disabled=\"", "\"\n              ?hidden=\"", "\"\n              @click=\"", "\"\n            ></a11y-media-button>\n            <a11y-media-button\n              accent-color=\"", "\"\n              ?dark=\"", "\"\n              icon=\"", "\"\n              label=\"", "\"\n              ?hidden=\"", "\"\n              ?toggle=\"", "\"\n              @click=\"", "\"\n            >\n            </a11y-media-button>\n            <a11y-media-button\n              accent-color=\"", "\"\n              ?dark=\"", "\"\n              id=\"settings-button\"\n              class=\"hide-sticky\"\n              controls=\"settings\"\n              icon=\"", "\"\n              label=\"", "\"\n              @click=\"", "\"\n            ></a11y-media-button>\n            ", "\n          </div>\n          <absolute-position-behavior\n            id=\"settings\"\n            auto\n            fit-to-visible-bounds\n            for=\"settings-button\"\n            offset=\"10\"\n            position-align=\"end\"\n            position=\"top\"\n            ?hidden=\"", "\"\n          >\n            <div class=\"setting\" ?hidden=\"", "\">\n              <div class=\"setting-text\">\n                ", "\n              </div>\n              <simple-fields-field\n                id=\"cc_tracks\"\n                class=\"setting-control\"\n                value=\"", "\"\n                .options=\"", "\"\n                ?hidden=\"", "\"\n                ?disabled=\"", "\"\n                @value-changed=\"", "\"\n                type=\"select\"\n              >\n              </simple-fields-field>\n            </div>\n            <div\n              class=\"setting\"\n              ?hidden=\"", "\"\n            >\n              <div class=\"setting-text\">\n                ", "\n              </div>\n              <simple-fields-field\n                id=\"transcript_tracks\"\n                class=\"setting-control\"\n                .value=\"", "\"\n                .options=\"", "\"\n                ?hidden=\"", "\"\n                ?disabled=\"", "\"\n                @value-changed=\"", "\"\n                type=\"select\"\n              >\n              </simple-fields-field>\n            </div>\n            <div\n              class=\"setting\"\n              ?hidden=\"", "\"\n            >\n              <div id=\"print-label\" class=\"setting-text\">\n                ", "\n              </div>\n              <a11y-media-button\n                accent-color=\"", "\"\n                ?dark=\"", "\"\n                aria-labelledby=\"print-label\"\n                class=\"setting-control\"\n                icon=\"", "\"\n                ?disabled=\"", "\"\n                ?hidden=\"", "\"\n                @click=\"", "\"\n              >\n              </a11y-media-button>\n            </div>\n            <div\n              class=\"setting\"\n              ?hidden=\"", "\"\n            >\n              <div id=\"download-label\" class=\"setting-text\">\n                ", "\n              </div>\n              <a11y-media-button\n                accent-color=\"", "\"\n                ?dark=\"", "\"\n                aria-labelledby=\"download-label\"\n                class=\"setting-control\"\n                icon=\"", "\"\n                ?disabled=\"", "\"\n                ?hidden=\"", "\"\n                @click=\"", "\"\n              >\n              </a11y-media-button>\n            </div>\n            <div class=\"setting\">\n              <div id=\"loop-label\" class=\"setting-text\">\n                ", "\n              </div>\n              <simple-fields-field\n                type=\"checkbox\"\n                id=\"loop\"\n                class=\"setting-control\"\n                aria-labelledby=\"loop-label\"\n                @value-change=\"", "\"\n                ?value=\"", "\"\n              >\n              </simple-fields-field>\n            </div>\n            <div class=\"setting\">\n              <div id=\"speed-label\" class=\"setting-text\">\n                ", "\n              </div>\n              <simple-range-input\n                id=\"speed\"\n                aria-labelledby=\"speed-label\"\n                class=\"setting-slider setting-control\"\n                min=\"0.5\"\n                max=\"2.5\"\n                pin\n                step=\"0.25\"\n                value=\"", "\"\n                @value-changed=\"", "\"\n              >\n              </simple-range-input>\n            </div>\n          </absolute-position-behavior>\n        </div>\n        <div\n          aria-hidden=\"true\"\n          class=\"screen-only media-caption\"\n          ?hidden=\"", "\"\n        >\n          ", "\n        </div>\n        <div class=\"print-only media-caption\">", "</div>\n      </div>\n      ", "\n      <div\n        id=\"transcript-section\"\n        ?hidden=\"", "\"\n      >\n        <div id=\"transcript-and-controls\" ?hidden=\"", "\">\n          <div id=\"searchbar\">\n            <div id=\"searching\">\n              <simple-search\n                id=\"simplesearch\"\n                controls=\"transcript\"\n                next-button-icon=\"", "\"\n                next-button-label=\"", "\"\n                prev-button-icon=\"", "\"\n                prev-button-label=\"", "\"\n                search-input-icon=\"", "\"\n                search-input-label=\"", "\"\n                selector=\".searchable\"\n                ?disabled=\"", "\"\n                ?hidden=\"", "\"\n              >\n              </simple-search>\n            </div>\n            <div id=\"scrolling\">\n              <a11y-media-button\n                accent-color=\"", "\"\n                ?dark=\"", "\"\n                id=\"scroll\"\n                controls=\"transcript\"\n                icon=\"", "\"\n                label=\"", "\"\n                ?toggle=\"", "\"\n                @click=\"", "\"\n              >\n              </a11y-media-button>\n            </div>\n            <div\n              id=\"printing\"\n              ?hidden=\"", "\"\n              ?disabled=\"", "\"\n            >\n              <a11y-media-button\n                accent-color=\"", "\"\n                ?dark=\"", "\"\n                id=\"download\"\n                controls=\"transcript\"\n                icon=\"", "\"\n                label=\"", "\"\n                @click=\"", "\"\n              >\n              </a11y-media-button>\n              <a11y-media-button\n                accent-color=\"", "\"\n                ?dark=\"", "\"\n                id=\"print\"\n                controls=\"transcript\"\n                icon=\"", "\"\n                label=\"", "\"\n                @click=\"", "\"\n              >\n              </a11y-media-button>\n            </div>\n          </div>\n          <div id=\"transcript\" aria-live=\"polite\">\n            <a id=\"transcript-desc\" class=\"sr-only\" href=\"#bottom\">\n              ", "\n            </a>\n            ", "\n          </div>\n        </div>\n      </div>\n      <div id=\"bottom\" class=\"sr-only\"></div>"])), !this.mediaCaption, this.mediaCaption, this.mediaMaxWidth, this.audioNoThumb, this.playerStyle, this.__playing ? "pause" : "play", this._getLocal(this.localization, this.__playing ? "pause" : "play", "label"), this.togglePlay, this.audioOnly, this.audioNoThumb, this.youtubeId, this.videoId && this.__playerReady ? (0, _index.html)(_templateObject2_9e25b9508e0011ed99ce491205e67b1d || (_templateObject2_9e25b9508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                  <a11y-media-youtube\n                    id=\"youtube-", "\"\n                    class=\"", "\"\n                    lang=\"", "\"\n                    preload=\"", "\"\n                    .t=\"", "\"\n                    video-id=\"", "\"\n                    playback-rate=\"", "\"\n                    @timeupdate=\"", "\"\n                    ?hidden=", "\n                  >\n                  </a11y-media-youtube>\n                "])), this.id, this.__currentTime > 0.3 || this.__seeking ? "" : "hidden", this.mediaLang, this.t ? "auto" : this.preload, this.t, this.videoId, this.playbackRate, this._handleTimeUpdate, !this.isYoutube) : "", Object.keys(this.captionCues || []).length === 0 || !this.showCustomCaptions ? (0, _index.html)(_templateObject3_9e25b9508e0011ed99ce491205e67b1d || (_templateObject3_9e25b9508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([""]))) : (0, _index.html)(_templateObject4_9e25b9508e0011ed99ce491205e67b1d || (_templateObject4_9e25b9508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                  <div id=\"cc-custom\" aria-live=\"polite\" class=\"screen-only\">\n                    <div id=\"cc-text\">\n                      ", "\n                    </div>\n                  </div>\n                "])), !this.captionCues ? "" : Object.keys(this.captionCues).map(function (key) {
          return (0, _index.html)(_templateObject5_9e25b9508e0011ed99ce491205e67b1d || (_templateObject5_9e25b9508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["", ""])), _this2.captionCues[key].text ? _this2.captionCues[key].text : "");
        })), this._getLocal(this.localization, "seekSlider", "label"), this.duration, this._handleSliderChanged, this._handleSliderDragging, this.__currentTime, this.disableSeek, this.accentColor, this.dark, this._getLocal(this.localization, this.__playing ? "pause" : "play", "icon"), this._getLocal(this.localization, this.__playing ? "pause" : "play", "label"), this.togglePlay, this.accentColor, this.dark, this._getLocal(this.localization, "rewind", "icon"), this._getLocal(this.localization, "rewind", "label"), this.disableSeek || this.currentTime <= 0, this.disableSeek, function (e) {
          _this2.rewind();
        }, this.accentColor, this.dark, this._getLocal(this.localization, "forward", "icon"), this._getLocal(this.localization, "forward", "label"), this.disableSeek || this.currentTime >= this.duration, this.disableSeek, function (e) {
          _this2.forward();
        }, this.accentColor, this.dark, this._getLocal(this.localization, "restart", "icon"), this._getLocal(this.localization, "restart", "label"), this.disableSeek, this.responsiveSize === "xs" || this.responsiveSize === "sm" || this.disableSeek, this.restart, function (e) {
          return _this2.__volumeSlider = true;
        }, function (e) {
          return _this2.__volumeSlider = false;
        }, this.accentColor, this.dark, this._getLocal(this.localization, this.muted ? "unmute" : "mute", "icon"), this._getLocal(this.localization, this.muted ? "unmute" : "mute", "label"), function (e) {
          _this2.toggleMute();
        }, this.accentColor, this.dark, this._getLocal(this.localization, "volume", "label"), this.muted ? 0 : this.volume, this._handleVolumeChanged, this.responsiveSize === "xs", this.status, this.accentColor, this.dark, this._getLocal(this.localization, "captions", "icon"), this._getLocal(this.localization, "captions", "label"), !this.hasCaptions, !this.hasCaptions, this.captionsTrackKey > -1, function (e) {
          return _this2.toggleCC();
        }, this.accentColor, this.dark, this._getLocal(this.localization, "transcript", "icon"), this._getLocal(this.localization, "transcript", "label"), !this.hasCaptions || this.learningMode, !this.hasCaptions || this.standAlone || this.height && this.responsiveSize.indexOf("s") > -1 || this.learningMode, this.transcriptTrackKey > -1, function (e) {
          return _this2.toggleTranscript();
        }, this.accentColor, this.dark, this._getLocal(this.localization, "copyLink", "icon"), this._getLocal(this.localization, "copyLink", "label"), !this.linkable || this.learningMode, !this.linkable || this.learningMode, this._handleCopyLink, this.accentColor, this.dark, this._getLocal(this.localization, "fullscreen", "icon"), this._getLocal(this.localization, "fullscreen", "label"), this.audioNoThumb || !this.fullscreenButton, this.fullscreen, function (e) {
          return _this2.toggleFullscreen();
        }, this.accentColor, this.dark, this._getLocal(this.localization, "settings", "icon"), this._getLocal(this.localization, "settings", "label"), function (e) {
          return _this2.toggleSettings();
        }, this.isYoutube ? (0, _index.html)(_templateObject6_9e25b9508e0011ed99ce491205e67b1d || (_templateObject6_9e25b9508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <a11y-media-button\n                  accent-color=\"", "\"\n                  ?dark=\"", "\"\n                  class=\"hide-sticky\"\n                  icon=\"mdi-social:youtube\"\n                  label=\"Open on YouTube\"\n                  ?hidden=\"", "\"\n                  @click=\"", "\"\n                ></a11y-media-button>"])), this.accentColor, this.dark, this.learningMode || this.hideYoutubeLink, this.goToYoutube) : "", !this.__settingsOpen, !this.hasCaptions, this._getLocal(this.localization, "captions", "label"), this.captionsTrackKey, this.captionsPicker, !this.hasCaptions, !this.hasCaptions, this.selectCaptionByKeyEvent, !this.hasCaptions || this.learningMode, this._getLocal(this.localization, "transcript", "label"), this.transcriptTrackKey, this.transcriptPicker, !this.hasCaptions || this.learningMode, !this.hasCaptions || this.learningMode, this.selectTranscriptByKeyEvent, !this.hasCaptions || this.learningMode, this._getLocal(this.localization, "print", "label"), this.accentColor, this.dark, this._getLocal(this.localization, "print", "icon"), this.noPrinting || this.learningMode, this.noPrinting || this.learningMode, this.print, !this.hasCaptions || this.learningMode, this._getLocal(this.localization, "download", "label"), this.accentColor, this.dark, this._getLocal(this.localization, "download", "icon"), this.noPrinting || this.learningMode, this.noPrinting || this.learningMode, this.download, this._getLocal(this.localization, "loop", "label"), this.toggleLoop, this.loop, this._getLocal(this.localization, "speed", "label"), this.playbackRate, this._handleSpeedChanged, !this.mediaCaption, this.mediaCaption, this.printCaption, this.poster ? (0, _index.html)(_templateObject7_9e25b9508e0011ed99ce491205e67b1d || (_templateObject7_9e25b9508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<img\n            id=\"print-thumbnail\"\n            aria-hidden=\"true\"\n            .src=\"", "\"\n          />"])), this.poster) : "", this.standAlone || !this.hasCaptions, this.hideTranscript, this._getLocal(this.localization, "nextResult", "icon"), this._getLocal(this.localization, "nextResult", "label"), this._getLocal(this.localization, "prevResult", "icon"), this._getLocal(this.localization, "prevResult", "label"), this._getLocal(this.localization, "search", "icon"), this._getLocal(this.localization, "search", "label"), this.disableSearch, this.disableSearch, this.accentColor, this.dark, this._getLocal(this.localization, "autoScroll", "icon"), this._getLocal(this.localization, "autoScroll", "label"), !this.disableScroll, function (e) {
          return _this2.disableScroll = !_this2.disableScroll;
        }, this.disablePrintButton, this.disablePrintButton, this.accentColor, this.dark, this._getLocal(this.localization, "download", "icon"), this._getLocal(this.localization, "download", "label"), this.download, this.accentColor, this.dark, this._getLocal(this.localization, "print", "icon"), this._getLocal(this.localization, "print", "label"), this.print, this._getLocal(this.localization, "transcript", "skip"), this.transcriptCues.length > 0 ? (0, _index.html)(_templateObject8_9e25b9508e0011ed99ce491205e67b1d || (_templateObject8_9e25b9508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                  <div class=\"transcript-from-track\">\n                    ", "\n                  </div>\n                "])), this.transcriptCues.map(function (cue, index) {
          return (0, _index.html)(_templateObject9_9e25b9508e0011ed99ce491205e67b1d || (_templateObject9_9e25b9508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                        <a11y-media-transcript-cue\n                          controls=\"html5\"\n                          end=\"", "\"\n                          lang=\"", "\"\n                          role=\"button\"\n                          start=\"", "\"\n                          tabindex=\"0\"\n                          @click=\"", "\"\n                          @active-changed=\"", "\"\n                          ?active=\"", "\"\n                          ?disabled=\"", "\"\n                          ?hide-timestamps=\"", "\"\n                        >\n                          <span class=\"searchable\">", "</span>\n                        </a11y-media-transcript-cue>\n                      "])), _this2._getHHMMSS(cue.endTime, _this2.media.duration), cue.track.language, _this2._getHHMMSS(cue.endTime, _this2.media.duration), function (e) {
            return _this2._handleCueSeek(cue);
          }, _this2._setActiveCue, cue.track.activeCues && cue.track.activeCues[0] === cue, _this2.disableInteractive || _this2.disableSeek || _this2.duration === 0, _this2.hideTimestamps, cue.text);
        })) : (0, _index.html)(_templateObject10_9e25b9508e0011ed99ce491205e67b1d || (_templateObject10_9e25b9508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div id=\"loading\" class=\"transcript-from-track\">\n                  ", "\n                </div>"])), this.status));
      } // properties available to the custom element for data binding

    }, {
      key: "anchor",
      get: function get() {
        var anchor = window.AnchorBehaviors;
        return {
          target: anchor ? anchor.getTarget(this) : false,
          params: anchor ? anchor.params : {}
        };
      }
      /**
       * the aspect ratio of the media, or if unknown, `16/9`
       * @readonly
       * @returns {number} media width divided by height
       */

    }, {
      key: "aspect",
      get: function get() {
        var aspect = this.media && this.media.aspectRatio ? this.media.aspectRatio : 16 / 9;
        this.width !== null ? this.width : "100%";
        this.style.maxWidth = this.width;
        return aspect;
      }
      /**
       * returns true if an attribute is set to a value
       * @readonly
       * @returns {boolean} Should height of audio/thumbnail area be set to 0?
       */

    }, {
      key: "audioNoThumb",
      get: function get() {
        return this.audioOnly && (this.thumbnailSrc === null || this.thumbnailSrc === undefined);
      }
      /**
       * returns buffered media
       * @readonly
       * @returns {number} seconds of buffered media
       */

    }, {
      key: "buffered",
      get: function get() {
        return this.media && this.media.buffered && this.media.buffered > 0 ? this.media.buffered : 0;
      }
      /**
       * gets caption cues that should be visible for custom captions
       * @readonly
       * @returns {array} array of cues
       */

    }, {
      key: "captionCues",
      get: function get() {
        var _this3 = this;

        var cues = !this.captionsTrack || !this.captionsTrack.cues ? [] : this.isYoutube ? Object.keys(this.captionsTrack.cues).map(function (key) {
          var cue = _this3.captionsTrack.cues[key];
          if (cue.startTime <= _this3.currentTime && cue.endTime >= _this3.currentTime) return cue;
          return {};
        }) : this.captionsTrack.activeCues;
        return cues;
      }
      /**
       * gets options for captions picker
       *
       * @readonly
       * @memberof A11yMediaPlayer
       */

    }, {
      key: "captionsPicker",
      get: function get() {
        var _this4 = this;

        var options = {};
        options[-1] = this._getLocal(this.localization, "captions", "off");
        Object.keys(this.loadedTracks && this.loadedTracks.textTracks ? this.loadedTracks.textTracks : {}).forEach(function (key) {
          options[key] = _this4.loadedTracks.textTracks[key].label || _this4.loadedTracks.textTracks[key].language;
        });
        return options;
      }
      /**
       * `key` of selected textTrack based on `captionsTrack` and `cc` values
       */

    }, {
      key: "captionsTrackKey",
      get: function get() {
        return !this.cc ? -1 : this._getTrackId(this.captionsTrack);
      }
      /**
       * returns cues array
       */

    }, {
      key: "cues",
      get: function get() {
        return this.__cues;
      }
      /**
       * returns media duration
       * @readonly
       * @returns {number} media duration in seconds
       */

    }, {
      key: "duration",
      get: function get() {
        var duration = this.media && this.media.duration && this.media.duration > 0 ? this.media.duration : this.__preloadedDuration ? this.__preloadedDuration : 0;
        return duration;
      }
      /**
       * determines if player is in flex-layout mode
       * @returns {boolean} Is the video in flex layout mode?
       */

    }, {
      key: "flexLayout",
      get: function get() {
        return this.hasCaptions && !this.standAlone && !this.hideTranscript && !this.audioNoThumb && !this.stackedLayout;
      }
      /**
       * determines if parent is wide enough for full flex-layout mode
       * @returns {boolean}
       */

    }, {
      key: "fullFlex",
      get: function get() {
        return this.flexLayout && this.responsiveSize !== "xs" && this.responsiveSize !== "sm";
      }
      /**
       * whether or not the fullscreen mode is be disabled
       * @returns {boolean}
       */

    }, {
      key: "fullscreenButton",
      get: function get() {
        return this.fullscreenEnabled && !this.disableFullscreen && !this.audioNoThumb;
      }
      /**
       * whether the media has any tracks
       *
       * @readonly
       * @returns {boolean}
       */

    }, {
      key: "hasCaptions",
      get: function get() {
        return this.cues.length > 1;
      }
      /**
       * whether media is YouTube
       * @readonly
       * @returns {boolean}
       */

    }, {
      key: "isYoutube",
      get: function get() {
        return this.youtubeId ? true : false;
      }
      /**
       * HTML `audio` or `video` tag where textTracks, if any, can be found
       * @readonly
       * @returns {object} HTML tag
       */

    }, {
      key: "loadedTracks",
      get: function get() {
        return this.__loadedTracks;
      }
      /**
       * object that contains default localization
       *
       * @readonly
       * @returns {object} default localization object
       */

    }, {
      key: "localizationDefaults",
      get: function get() {
        return {
          audio: {
            label: "Audio",
            notSupported: "HTML5 video is not supported."
          },
          autoScroll: {
            label: "Scroll Transcript",
            icon: "swap-vert"
          },
          captions: {
            label: "Closed Captions",
            icon: "av:closed-caption",
            off: "Off"
          },
          download: {
            label: "Download Transcript",
            icon: "file-download"
          },
          forward: {
            label: "Forward",
            icon: "av:fast-forward"
          },
          fullscreen: {
            label: "Fullscreen",
            icon: "fullscreen"
          },
          copyLink: {
            label: "Copy Media Link",
            icon: "link"
          },
          closeLink: {
            label: "Close",
            icon: "close"
          },
          loading: {
            label: "Loading..."
          },
          loop: {
            label: "Loop Playback"
          },
          mute: {
            label: "Mute",
            icon: "av:volume-up"
          },
          nextResult: {
            label: "Next",
            icon: "arrow-forward"
          },
          pause: {
            label: "Pause",
            icon: "av:pause"
          },
          play: {
            label: "Play",
            icon: "av:play-arrow"
          },
          prevResult: {
            label: "Previous",
            icon: "arrow-back"
          },
          print: {
            label: "Print Transcript",
            icon: "print"
          },
          restart: {
            label: "Restart",
            icon: "av:replay"
          },
          rewind: {
            label: "Backward",
            icon: "av:fast-rewind"
          },
          search: {
            label: "Search the transcript.",
            icon: "search"
          },
          seekSlider: {
            label: "Seek Slider"
          },
          settings: {
            label: "Settings",
            icon: "settings"
          },
          speed: {
            label: "Speed %"
          },
          transcript: {
            label: "Transcript",
            icon: "description",
            loading: "Loading the transcript(s)...",
            off: "Off",
            skip: "Skip to the transcript."
          },
          unmute: {
            label: "Unmute",
            icon: "av:volume-off"
          },
          video: {
            label: "Video",
            notSupported: "HTML5 video is not supported."
          },
          volume: {
            label: "Volume"
          },
          youTubeLoading: {
            label: "Loading...",
            startLoading: "Press play."
          },
          youTubeTranscript: {
            label: "Transcript will load once media plays."
          }
        };
      }
      /**
       * media used for playback
       * @readonly
       */

    }, {
      key: "media",
      get: function get() {
        return this.isYoutube ? this.youtube : this.loadedTracks;
      }
      /**
       * gets media caption
       * @readonly
       * @returns {string} the media caption
       */

    }, {
      key: "mediaCaption",
      get: function get() {
        var audioLabel = this._getLocal(this.localization, "audio", "label"),
            hasMediaTitle = this.mediaTitle !== undefined && this.mediaTitle !== null && this.mediaTitle !== "";

        if (this.audioOnly && hasMediaTitle) {
          return this.mediaTitle + " (" + audioLabel + ")";
        } else if (this.audioOnly) {
          return audioLabel;
        } else if (hasMediaTitle) {
          return this.mediaTitle;
        } else {
          return undefined;
        }
      }
      /**
       * gets media media time if set
       * @readonly
       * @returns {number} end time in seconds
       */

    }, {
      key: "mediaEnd",
      get: function get() {
        return this.mediaSeekable && this.media.seekable.end(0) ? this.media.seekable.end(0) : false;
      }
      /**
       * `style` for `#player-and-controls`
       * @readonly
       * @returns {string} value for style attribute
       */

    }, {
      key: "mediaMaxWidth",
      get: function get() {
        var maxWidth = this.fullscreen || this.audioNoThumb ? "unset" : "calc(".concat(this.aspect * 100, "vh - ").concat(this.aspect * 80, "px)");
        return "max-width:".concat(maxWidth, ";");
      }
      /**
       * whether media has a seekable time range
       * @readonly
       * @returns {boolean}
       */

    }, {
      key: "mediaSeekable",
      get: function get() {
        return this.media && this.media.seekable ? this.media.seekable.length > 0 : false;
      }
      /**
       * gets media start time
       * @readonly
       * @returns {number} start time in seconds
       */

    }, {
      key: "mediaStart",
      get: function get() {
        return this.mediaSeekable && this.media.seekable.start(0) ? this.media.seekable.start(0) : 0;
      }
      /**
       * whether media is currently playing
       * @readonly
       * @returns {boolean}
       */

    }, {
      key: "playing",
      get: function get() {
        return this.__playing;
      }
      /**
       * `style` for `#player`
       * @readonly
       * @returns {string} value for style attribute
       */

    }, {
      key: "playerStyle",
      get: function get() {
        var height = this.audioNoThumb ? "60px" : "unset",
            paddingTop = this.fullscreen || this.audioNoThumb || this.height ? "unset" : "".concat(100 / this.aspect, "%"),
            thumbnail = this.poster && (this.isYoutube || this.audioOnly) ? "background-image:url(".concat(this.poster, ");") : "";
        return "height:".concat(height, ";padding-top:").concat(paddingTop, ";").concat(thumbnail);
      }
      /**
       * `poster`  image for video
       * @readonly
       * @returns {string} url for poster image
       */

    }, {
      key: "poster",
      get: function get() {
        var thumbnail = this.thumbnailSrc ? this.thumbnailSrc : this.media && !this.media.poster ? this.media.poster : false;
        return !this.thumbnailSrc && this.youtubeId ? "https://img.youtube.com/vi/".concat(this.youtubeId.replace(/[\?&].*/, ""), "/hqdefault.jpg") : thumbnail;
      }
      /**
       * gets print caption
       * @readonly
       * @returns {string} the media caption when the page is printed
       */

    }, {
      key: "printCaption",
      get: function get() {
        var audioLabel = this._getLocal(this.localization, "audio", "label"),
            videoLabel = this._getLocal(this.localization, "video", "label"),
            hasMediaTitle = this.mediaTitle !== undefined && this.mediaTitle !== null && this.mediaTitle !== "";

        if (this.audioOnly && hasMediaTitle) {
          return this.mediaTitle + " (" + audioLabel + ")";
        } else if (this.audioOnly) {
          return audioLabel;
        } else if (hasMediaTitle) {
          return this.mediaTitle + " (" + videoLabel + ")";
        } else {
          return videoLabel;
        }
      }
      /**
       * returns the current playback progress or slider position
       * @readonly
       * @returns {number} media duration in seconds
       */

    }, {
      key: "currentTime",
      get: function get() {
        var slider = this.shadowRoot ? this.shadowRoot.querySelector("#slider") : false;
        var currentTime = slider && !slider.disabled && slider.dragging ? this.shadowRoot.querySelector("#slider").immediateValue : this.__currentTime;
        return currentTime;
      }
      /**
       * gets the link for sharing the video at a specific timecode
       * @readonly
       * @returns {string} url for sharing the video
       */

    }, {
      key: "shareLink",
      get: function get() {
        var url = window.location.href.split(/[#?]/)[0],
            id = this.id ? "?id=".concat(this.id) : "",
            currentTime = id !== "" && this.currentTime && this.currentTime !== 0 ? "&t=".concat(this.currentTime) : "";
        return "".concat(url).concat(id).concat(currentTime);
      }
      /**
       * Show custom CC (for audio and YouTube)?
       * @returns {boolean} Should the player show custom CC?
       */

    }, {
      key: "showCustomCaptions",
      get: function get() {
        return (this.isYoutube || this.audioOnly) && this.hasCaptions && this.cc;
      }
      /**
       * gets playback status text
       *
       * @readonly
       * @returns {string} status, as either a localized loading message or progress/duration
       */

    }, {
      key: "status",
      get: function get() {
        return this.duration > 0 ? (0, _index.html)(_templateObject11_9e25b9508e0011ed99ce491205e67b1d || (_templateObject11_9e25b9508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          ", "/", "\n        "])), this._getHHMMSS(this.currentTime, this.duration), this._getHHMMSS(this.duration)) : !this.isYoutube ? this._getLocal(this.localization, "loading", "label") : this.__playing ? this._getLocal(this.localization, "youTubeLoading", "label") : this._getLocal(this.localization, "youTubeLoading", "startLoading");
      }
      /**
       * Show custom CC (for audio and YouTube)?
       * @returns {boolean} Should the player show custom CC?
       */

    }, {
      key: "stickyMode",
      get: function get() {
        return this.sticky && this.stickyCorner !== "none";
      }
      /**
       * gets initial timecode parameter
       * @readonly
       * @returns {array} array of cues
       */

    }, {
      key: "t",
      get: function get() {
        var t = this._getSeconds(this.anchor.params.t || this.anchor.params.start || "0s");

        if (this.anchor && this.anchor.target === this) return t;
        if (this.videoData) return this.videoData.t || this.videoData.start;
      }
      /**
       * gets transcript cues that should be visible
       * @readonly
       * @returns {array} array of cues
       */

    }, {
      key: "transcriptCues",
      get: function get() {
        var _this5 = this;

        var cues = !this.cues ? [] : this.cues.slice();
        return cues.filter(function (cue) {
          return cue.track === _this5.transcriptTrack;
        });
      }
      /**
       * gets options for transcript picker
       *
       * @readonly
       * @memberof A11yMediaPlayer
       */

    }, {
      key: "transcriptPicker",
      get: function get() {
        var _this6 = this;

        var options = {};
        options[-1] = this._getLocal(this.localization, "transcript", "off");
        Object.keys(this.loadedTracks && this.loadedTracks.textTracks ? this.loadedTracks.textTracks : {}).forEach(function (key) {
          options[key] = _this6.loadedTracks.textTracks[key].label || _this6.loadedTracks.textTracks[key].language;
        });
        return options;
      }
      /**
       * `key` of selected textTrack based on `transcriptTrack` and `hide-transcript` values
       */

    }, {
      key: "transcriptTrackKey",
      get: function get() {
        return this.hideTranscript ? -1 : this._getTrackId(this.transcriptTrack);
      }
    }, {
      key: "videoData",
      get: function get() {
        var _this7 = this;

        if (this.youtubeId) {
          var videoData = this.youtubeId.split(/[\?\&]/),
              params = {};
          params.videoId = videoData[0];
          videoData.forEach(function (param, index) {
            if (index > 0) {
              var data = param.split(/=/);
              params[data[0]] = _this7._getSeconds(data[1]);
            }
          });
          return params;
        }
      }
    }, {
      key: "videoId",
      get: function get() {
        if (this.videoData) return this.videoData.videoId;
      }
      /**
       * youtube embed element
       * @readonly
       * @returns {object} a11y-media-youtube element
       */

    }, {
      key: "youtube",
      get: function get() {
        return this.shadowRoot.querySelector("a11y-media-youtube") !== null ? this.shadowRoot.querySelector("a11y-media-youtube") : false;
      }
    }, {
      key: "_setAttribute",
      value: function _setAttribute(attr, val) {
        if (!val) {
          this.removeAttribute(attr);
        } else {
          this.setAttribute(attr, val);
        }
      }
      /**
       * @param {map} changedProperties the properties that have changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this8 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(A11yMediaPlayer.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(A11yMediaPlayer.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "learningMode") {
            _this8.disableSeek = _this8[propName];
            _this8.hideTranscript = _this8[propName];
          }

          var change = function change(params) {
            return params.includes(propName);
          },
              mediaChange = function mediaChange(param) {
            return change(["__loadedTracks", "youtubeId", "media", param]);
          },
              flexChange = change(["standAlone", "hideTranscript", "audioNoThumb", "stackedLayout", "__cues"]),
              media = _this8.media ? _this8.media : _this8.__loadedTracks;

          if (propName === "id" && _this8.id === null) _this8.id = "a11y-media-player" + Date.now();
          if (change(["media", "muted"])) _this8._handleMuteChanged();
          if (change(["media", "volume"])) _this8.setVolume(_this8.volume);
          if (change(["media", "autoplay"]) && _this8.autoplay) _this8.play();
          /* updates captions */

          if (propName === "__captionsOption") _this8._captionsOptionChanged();
          if (change(["cc", "captionsTrack"])) _this8._captionsChanged();
          /* updates layout */

          if (flexChange) _this8._setAttribute("flex-layout", _this8.flexLayout);
          if (flexChange || propName === "responsiveSize") _this8._setAttribute("full-flex", _this8.fullFlex);
          if (change(["sticky", "sticky-corner", "__playing"])) _this8._setAttribute("sticky-mode", _this8.stickyMode && _this8.__playing);

          if (change(["height"])) {
            _this8.style.setProperty("--a11y-media-player-height", _this8.height ? _this8.height : "unset");

            _this8.style.setProperty("--a11y-media-transcript-max-height", _this8.height ? "146px" : "unset");
          }
          /* updates media */


          if (_this8.media !== null) {
            if (mediaChange("cc")) _this8._setAttribute("cc", _this8.cc, _this8.__loadedTracks);
            if (mediaChange("isYoutube") && _this8.__loadedTracks) _this8.__loadedTracks.hidden === _this8.isYoutube;
            if (mediaChange("mediaLang")) _this8._setAttribute("lang", _this8.mediaLang, media);
            if (mediaChange("loop")) _this8._setAttribute("loop", _this8.loop, media);
            if (mediaChange("playbackRate")) _this8._setAttribute("playbackRate", _this8.playbackRate, media);
            if (mediaChange("isYoutube")) _this8._setAttribute("poster", !_this8.isYoutube ? _this8.thumbnailSrc : false, _this8.__loadedTracks);
            if (change(["isYoutube", "poster", "media", "audioOnly"]) && _this8.poster && !_this8.isYoutube && !_this8.audioOnly && !_this8.media.poster) _this8.media.poster = _this8.poster;
          }

          _this8.dispatchEvent(new CustomEvent("".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), "-changed"), {
            detail: {
              value: _this8[propName]
            }
          }));
        });
      }
      /**
       * updates track mode & `__captionsOption` when `captionsTrack` or `cc` changes
       */

    }, {
      key: "_captionsChanged",
      value: function _captionsChanged() {
        var _this9 = this;

        var ccNum = -1;
        Object.keys(this.loadedTracks.textTracks).forEach(function (key) {
          var showing = _this9.cc && _this9.loadedTracks.textTracks[key] === _this9.captionsTrack;
          _this9.loadedTracks.textTracks[key].mode = showing ? "showing" : "hidden";
          if (showing) ccNum = key;
        });
        this.__captionsOption = ccNum;
      }
      /**
       * updates track mode & `captionsTrack` when `__captionsOption` changes
       */

    }, {
      key: "_captionsOptionChanged",
      value: function _captionsOptionChanged() {
        var _this10 = this;

        this.cc = this.__captionsOption > -1;
        Object.keys(this.loadedTracks.textTracks).forEach(function (key) {
          var showing = parseInt(key) == parseInt(_this10.__captionsOption);
          _this10.loadedTracks.textTracks[key].mode = showing ? "showing" : "hidden";
          if (showing) _this10.captionsTrack = _this10.loadedTracks.textTracks[key];
        });
      }
      /**
       * handles mute change
       */

    }, {
      key: "_handleMuteChanged",
      value: function _handleMuteChanged() {
        if (this.media) {
          this.media.muted = this.muted;
        }
        /**
         * Fires when closed caption is toggled
         * @event mute-changed
         */


        this.dispatchEvent(new CustomEvent("mute-changed", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * gets download data for the active transcript
       * @param {string} the title of the media
       */

    }, {
      key: "download",
      value: function download() {
        var _this11 = this;

        var a = document.createElement("a"),
            title = this.mediaTitle && this.mediaTitle.trim() != "" ? "".concat(this.mediaTitle, " (").concat(this._getLocal(this.localization, "transcript", "label"), ")") : this._getLocal(this.localization, "transcript", "label"),
            filename = title.replace(/[^\w\d]/g, ""),
            cues = this.transcriptTrack.cues,
            data = Object.keys(cues).map(function (key) {
          return "".concat(_this11._getHHMMSS(cues[key].startTime), " - ").concat(_this11._getHHMMSS(cues[key].endTime), ": \t").concat(cues[key].text.replace(/[\n\r\s*]/g, " "), "\n");
        }).join("");
        a.setAttribute("href", "data:text/plain;charset=UTF-8," + encodeURIComponent(title + "\n" + data));
        a.setAttribute("download", filename + ".txt");
        a.style.display = "none";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        /**
         * Fires when transcript is downloaded
         * @event transcript-downloaded
         */

        this.dispatchEvent(new CustomEvent("transcript-downloaded", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * takes the user to YouTube
       */

    }, {
      key: "goToYoutube",
      value: function goToYoutube() {
        window.open("https://www.youtube.com/watch?v=".concat(this.youtubeId));
      }
      /**
       * prints the active transcript
       * @param {string} the title of the media
       */

    }, {
      key: "print",
      value: function print() {
        var _this12 = this;

        var cues = this.transcriptTrack.cues,
            title = this.mediaTitle && this.mediaTitle.trim() != "" ? "".concat(this.mediaTitle, " (").concat(this._getLocal(this.localization, "transcript", "label"), ")") : this._getLocal(this.localization, "transcript", "label"),
            print = window.open("", "", "left=0,top=0,width=552,height=477,toolbar=0,scrollbars=0,status =0");
        print.document.body.innerHTML = "\n     <h1>".concat(title, "</h1>\n     ").concat(Object.keys(cues).map(function (key) {
          return "<div style=\"display: table-row;\">\n         ".concat(_this12.hideTimestamps ? "" : "\n             <span style=\"display: table-cell;\n               font-size: 80%;\n               padding: 0 16px;\n               white-space: nowrap;\n               font-family: monospace;\">\n               ".concat(_this12._getHHMMSS(cues[key].startTime), " - \n               ").concat(_this12._getHHMMSS(cues[key].endTime), ":\n             </span>"), "\n         <span style=\"display: table-cell; line-height: 200%;\">\n           ").concat(cues[key].text, "\n         </span>\n       </div>");
        }).join(""), "\n     ");
        print.document.close();
        print.focus();
        print.print();
        print.addEventListener("afterprint", function (event) {
          print.close();
        });
        /**
         * Fires when transcript is printed
         * @event transcript-printed
         */

        this.dispatchEvent(new CustomEvent("transcript-printed", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * plays the media
       */

    }, {
      key: "play",
      value: function play() {
        this.__playing = true;
        if (this.media && this.media.play) this.media.play();
        /**
         * Fires when media plays
         * @event play
         */

        this.dispatchEvent(new CustomEvent("play", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
        /**
         * DEPRECATED: Fires when media plays
         * @event a11y-player-playing
         */

        window.dispatchEvent(new CustomEvent("a11y-player-playing", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * pauses the media
       */

    }, {
      key: "pause",
      value: function pause() {
        this.__playing = false;
        if (this.media && this.media.pause) this.media.pause();
        /**
         * Fires when media pauses
         * @event pause
         */

        this.dispatchEvent(new CustomEvent("pause", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * stops the media
       */

    }, {
      key: "stop",
      value: function stop() {
        this.pause();
        this.seek(0);
        /**
         * Fires when media stops
         * @event stop
         */

        window.dispatchEvent(new CustomEvent("stop", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * restarts the media
       */

    }, {
      key: "restart",
      value: function restart() {
        this.seek(0);
        this.play();
        /**
         * Fires when media retarts
         * @event restart
         */

        window.dispatchEvent(new CustomEvent("restart", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * seeks media backward at a set increment
       * @param {float} the elepsed time, in seconds
       */

    }, {
      key: "rewind",
      value: function rewind(amt) {
        amt = amt !== undefined ? amt : this.duration / 20;
        this.seek(this.currentTime - amt, 0);
        /**
         * Fires when media moves backward
         * @event backward
         */

        window.dispatchEvent(new CustomEvent("backward", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * seeks media forward at a set increment
       * @param {float} the elepsed time, in seconds
       */

    }, {
      key: "forward",
      value: function forward(amt) {
        amt = amt !== undefined ? amt : this.duration / 20;
        this.seek(this.currentTime + amt);
        /**
         * Fires when media moves forward
         * @event forward
         */

        window.dispatchEvent(new CustomEvent("forward", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * seeks to a specific time
       * @param {float} the time, in seconds, to seek
       */

    }, {
      key: "seek",
      value: function seek() {
        var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

        if (this.mediaSeekable) {
          this.media.seek(Math.max(0, Math.min(time, this.duration)));

          this._handleTimeUpdate();
          /**
           * Fires when media seeks
           * @event seek
           */


          window.dispatchEvent(new CustomEvent("seek", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: this
          }));
        }
      }
      /**
       * Event version for Lit version requirements
       */

    }, {
      key: "selectCaptionByKeyEvent",
      value: function selectCaptionByKeyEvent(e) {
        this.selectCaptionByKey(e.detail.value);
      }
      /**
       * selects `captionsTrack` by key and adjusts `cc` accordingly
       */

    }, {
      key: "selectCaptionByKey",
      value: function selectCaptionByKey(id) {
        id = parseInt(id);
        if (id > -1) this.captionsTrack = this.loadedTracks.textTracks[id];
        this.cc = id > -1;
      }
      /**
       * Event version for Lit version requirements
       */

    }, {
      key: "selectTranscriptByKeyEvent",
      value: function selectTranscriptByKeyEvent(e) {
        this.selectTranscriptByKey(e.detail.value);
      }
      /**
       * selects `transcriptTrack` by key and adjusts `hideTranscript` accordingly
       */

    }, {
      key: "selectTranscriptByKey",
      value: function selectTranscriptByKey(id) {
        id = parseInt(id);
        if (id > -1) this.transcriptTrack = this.loadedTracks.textTracks[id];
        this.hideTranscript = id < 0;
      }
      /**
       * media tag where sources and tracks can be found
       * @readonly
       */

    }, {
      key: "getloadedTracks",
      value: function getloadedTracks() {
        var _this13 = this;

        var media = this.querySelector("audio,video"),
            crossorigin = media ? media.getAttribute("crossorigin") : undefined,
            primary = null,
            sourceVideo = this.source && !this.source && this.source.match(/webm|ogv|mov|mp4$/),
            sourcesVideo = (this.sources || []).filter(function (source) {
          return "".concat(source.type || "").concat(source.kind || "").match(/video|mp4|webm|ogv/);
        }).length > 0,
            hasVideo = this.isYoutube || sourceVideo || sourcesVideo;

        if (media) {
          if (!crossorigin) media.setAttribute("crossorigin", this.crossorigin);
          media.removeAttribute("autoplay");
          media.removeAttribute("controls");
          media.setAttribute("preload", "metadata");
        }

        if (!this.youtubeId) {
          var iframeSrc = this.querySelector("iframe") && this.querySelector("iframe") ? this.querySelector("iframe").src : false,
              yt = iframeSrc ? iframeSrc.match(/youtube(-\w*)*.com/) || iframeSrc.src.match(/youtu.be/) : false;

          if (yt && iframeSrc) {
            this.youtubeId = iframeSrc.replace(/.*\//g, "");
            hasVideo = true;
            this.querySelector("iframe").remove();
          }
        }

        if (!media) {
          primary = document.createElement(this.querySelectorAll('source[type*="audio"]').length > 0 || !hasVideo ? "audio" : "video");
          if (!crossorigin) primary.setAttribute("crossorigin", this.crossorigin);
          primary.setAttribute("preload", "metadata");
          this.querySelectorAll("source,track").forEach(function (node) {
            if (node.parentNode === _this13) primary.appendChild(node);
          });
          this.appendChild(primary);
        } else {
          primary = media;
        }

        this.audioOnly = primary.tagName === "AUDIO";
        primary.style.width = "100%";
        primary.style.maxWidth = "100%";
        /* handle deprecated tracks */

        (this.tracks || []).forEach(function (track) {
          var node = document.createElement("track");
          Object.keys(track).forEach(function (key) {
            return node.setAttribute(key, track[key]);
          });
          primary.appendChild(node);
        });
        /* handle deprecated sources */

        (this.sources || []).forEach(function (source) {
          var node = document.createElement("source");
          Object.keys(source).forEach(function (key) {
            return node.setAttribute(key, source[key]);
          });
          primary.appendChild(node);
        });
        /* provides a seek function for primary media */

        primary.seek = function (time) {
          return primary.currentTime = time;
        };

        this._addSourcesAndTracks(primary, primary);

        return primary;
      }
      /**
       * selects a specific transcript track
       * @param {track} track text track
       */

    }, {
      key: "_getTrack",
      value: function _getTrack(track) {
        if (!track) {
          var defaultTracks = this.loadedTracks.textTracks.filter(function (track) {
            return track.default === true;
          });
          return defaultTracks ? defaultTracks[0].track : this.loadedTracks.textTracks[0].track;
        }

        return track;
      }
      /**
       * selects a specific track as transcript
       * @param {track} track text track
       */

    }, {
      key: "selectTranscript",
      value: function selectTranscript(track) {
        this.transcriptTrack = this._getTrack(track);
      }
      /**
       * set speed/playback rate of media
       * @param {float} the playback rate, where 1 = 100%
       */

    }, {
      key: "setPlaybackRate",
      value: function setPlaybackRate(value) {
        value = value !== null ? value : 1;
        this.media.playbackRate = value !== null ? value : 1;
        /**
         * Fires when video playback rate changes
         * @event playback-rate-changed
         */

        window.dispatchEvent(new CustomEvent("playback-rate-changed", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * set volume of media
       * @param {integer} the volume level from 0-100
       */

    }, {
      key: "setVolume",
      value: function setVolume() {
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 70;
        this.volume = Math.max(0, Math.min(value, 100));

        if (this.media) {
          this.media.volume = value / 100;
        }
        /**
         * Fires when video volume changes
         * @event volume-changed
         */


        window.dispatchEvent(new CustomEvent("volume-changed", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * toggles captions
       * @param {boolean} Toggle CC on? `true` is on, `false` is off, and `null` toggles based on current state.
       */

    }, {
      key: "toggleCC",
      value: function toggleCC(mode) {
        this.cc = babelHelpers.typeof(mode) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) ? !this.cc : mode;
        /**
         * Fires when closed caption is toggled
         * @event cc-toggle
         */

        window.dispatchEvent(new CustomEvent("cc-toggle", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * element to make fullscreen, can be overidden
       *
       * @readonly
       */

    }, {
      key: "fullscreenTarget",
      get: function get() {
        return this.shadowRoot && this.shadowRoot.querySelector("#player-section") ? this.shadowRoot.querySelector("#player-section") : this;
      }
      /**
       * toggles fullscreen
       * @param {boolean} Toggle fullscreen on? `true` is on, `false` is off, and `null` toggles based on current state.
       */

    }, {
      key: "toggleFullscreen",
      value: function toggleFullscreen(mode) {
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yMediaPlayer.prototype), "toggleFullscreen", this).call(this, mode);
        /**
         * Fires when fullscreen is toggled
         * @event fullscreen-toggle
         */

        window.dispatchEvent(new CustomEvent("fullscreen-toggle", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * toggles looping
       * @param {boolean} Toggle looping on? `true` is on, `false` is off, and `null` toggles based on current state.
       */

    }, {
      key: "toggleLoop",
      value: function toggleLoop(mode) {
        this.loop = mode === undefined ? !this.loop : mode;
        this.media.loop = mode === true;
        /**
         * Fires when looping is toggled
         * @event loop-toggle
         */

        window.dispatchEvent(new CustomEvent("loop-toggle", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * toggles play
       * @param {boolean} Toggle play/pause? `true` is on, `false` is off, and `null` toggles based on current state.
       */

    }, {
      key: "togglePlay",
      value: function togglePlay() {
        if (this.__playing) {
          this.pause();
        } else {
          this.play();
        }
        /**
         * Fires when play/pause is toggled
         * @event play-toggle
         */


        window.dispatchEvent(new CustomEvent("play-toggle", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * toggles mute
       * @param {boolean} Toggle mute on? `true` is on, `false` is off, and `null` toggles based on current state.
       */

    }, {
      key: "toggleMute",
      value: function toggleMute(mode) {
        this.muted = babelHelpers.typeof(mode) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) ? !this.muted : mode;
        /**
         * Fires when mute is toggled
         * @event muted-toggle
         */

        window.dispatchEvent(new CustomEvent("muted-toggle", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
    }, {
      key: "toggleSettings",
      value: function toggleSettings(mode) {
        mode = mode === undefined ? !this.__settingsOpen : mode;
        this.__settingsOpen = mode;
        /**
         * Fires when video's settings menu is toggled
         * @event settings-toggled
         */

        this.dispatchEvent(new CustomEvent("settings-toggled", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * toggles sticky attribute
       * @param {boolean} Toggle sticky mode on? `true` is on, `false` is off, and `null` toggles based on current state.
       */

    }, {
      key: "toggleSticky",
      value: function toggleSticky(mode) {
        mode = mode === undefined ? !this.sticky : mode; //only toggle if not already in correct mode

        if (this.sticky === mode) return;
        this.sticky = mode;
        /**
         * Fires when video's sticky behavior is toggled
         * @event player-sticky
         */

        this.dispatchEvent(new CustomEvent("player-sticky", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * toggles transcript
       * @param {boolean} Toggle transcript on? `true` is on, `false` is off, and `null` toggles based on current state.
       */

    }, {
      key: "toggleTranscript",
      value: function toggleTranscript(mode) {
        mode = mode === undefined ? this.hideTranscript : mode;
        if (mode && !this.selectTranscriptByKey > -1) this.selectTranscriptByKey(0);
        this.hideTranscript = !mode;
        /**
         * Fires when transcript toggles
         * @event transcript-toggle
         */

        this.dispatchEvent(new CustomEvent("transcript-toggle", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
      /**
       * loads a track's cue metadata
       * @param {object} HTML audio or video object
       */

    }, {
      key: "_addSourcesAndTracks",
      value: function _addSourcesAndTracks(media) {
        var _this14 = this;

        media.style.width = "100%";
        media.style.maxWidth = "100%";
        Object.keys(media.textTracks).forEach(function (track) {
          return _this14._onAddTrack(media.textTracks[track]);
        });

        media.textTracks.onremovetrack = function (e) {
          return _this14._onRemoveTrack(e.track);
        };

        media.textTracks.onaddtrack = function (e) {
          return _this14._onAddTrack(e.track);
        };

        var d = media.querySelector("track[default]") ? media.querySelector("track[default]") : media.querySelector("track"),
            defaultTrack = Object.keys(media.textTracks).find(function (key) {
          return d.label === media.textTracks[key].label && d.kind === media.textTracks[key].kind && d.srclang === media.textTracks[key].scrlang;
        }) || 0;
        this.captionsTrack = media.textTracks[defaultTrack];
        if (!this.hideTranscript) this.transcriptTrack = this.captionsTrack;

        this._handleTimeUpdate();
      }
      /**
       * handles closing the share link toast
       */

    }, {
      key: "_handleCloseLink",
      value: function _handleCloseLink() {
        if (this.shadowRoot.querySelector("#link") && this.shadowRoot.querySelector("#link").close) this.shadowRoot.querySelector("#link").close();
      }
      /**
       * handles copying the share link
       */

    }, {
      key: "_handleCopyLink",
      value: function _handleCopyLink() {
        var el = document.createElement("textarea");
        this.pause();
        el.value = this.shareLink;
        document.body.appendChild(el);
        el.select();
        document.execCommand("copy");
        document.body.removeChild(el);

        _simpleToast.SimpleToastStore.showSimpleToast({
          detail: {
            duration: 3000,
            text: "Copied to clipboard: ".concat(this.shareLink)
          }
        });
      }
      /**
       * handles the seek function when a transcript cue is activated
       *
       * @param {event} e seek event
       */

    }, {
      key: "_handleCueSeek",
      value: function _handleCueSeek(cue) {
        if (!this.standAlone) {
          this.seek(cue.startTime);
        }
      }
      /**
       * handles media metadata when media is loaded
       */

    }, {
      key: "_handleMediaLoaded",
      value: function _handleMediaLoaded(e) {
        this._handleTimeUpdate();

        if (!this.youtubeId && this.anchor.target === this) {
          this.seek(this._getSeconds(this.anchor.params.t || this.anchor.params.start || "0s"));
        }
      }
      /**
       * sets search the simple-search element
       * @param {event} e searchbar event
       */

    }, {
      key: "_handleSearchAdded",
      value: function _handleSearchAdded(e) {
        this.search = e.detail;
      }
      /**
       * handles speed slider change thhat sets playback rate
       * @param {event} e slider event
       */

    }, {
      key: "_handleSpeedChanged",
      value: function _handleSpeedChanged(e) {
        var target = (0, _utils.normalizeEventPath)(e)[0];
        this.setPlaybackRate(target.value);
      }
      /**
       * handles duration slider dragging with a mouse
       * @param {event} e slider start event
       */

    }, {
      key: "_handleSliderDragging",
      value: function _handleSliderDragging(e) {
        var _this15 = this;

        var slider = this.shadowRoot ? this.shadowRoot.querySelector("#slider") : false;

        if (slider && !slider.disabled && slider.dragging) {
          if (this.__playing && slider.dragging) {
            var startDrag = setInterval(function () {
              if (!slider.dragging) {
                _this15.play();

                clearInterval(startDrag);
              }
            });
            this.pause();
          }
        }
      }
      /**
       * handles duration slider dragging with a mouse
       * @param {event} e slider start event
       */

    }, {
      key: "_handleSliderChanged",
      value: function _handleSliderChanged(e) {
        var slider = this.shadowRoot ? this.shadowRoot.querySelector("#slider") : false;

        if (!this.playing || slider.immediateValue == this.__currentTime) {
          this.seek(slider.immediateValue);
        }
      }
      /**
       * handles time updates
       */

    }, {
      key: "_handleTimeUpdate",
      value: function _handleTimeUpdate() {
        var _this16 = this;

        if (!this.__wait) {
          /* update current time with media's current time property */
          this.__currentTime = this.media && this.media.currentTime && this.media.currentTime > 0 ? this.media.currentTime : 0;
          this.__wait = true;
          setTimeout(function () {
            _this16.__wait = false;
          }, 1000);
        }
      }
      /**
       * gets `key` of given track
       *
       * @param {object} track textTrack
       * @returns {number} key
       */

    }, {
      key: "_getTrackId",
      value: function _getTrackId(track) {
        var _this17 = this;

        return this.loadedTracks ? Object.keys(this.loadedTracks.textTracks).find(function (key) {
          return _this17.loadedTracks.textTracks[key] === track;
        }) || -1 : -1;
      }
      /**
       * handles volume slider change
       * @param {event} e volume change event
       */

    }, {
      key: "_handleVolumeChanged",
      value: function _handleVolumeChanged(e) {
        var target = (0, _utils.normalizeEventPath)(e)[0];
        this.volume = target.value;
      }
      /**
       * adds a track's cues to cues array
       * @param {object} textTrack
       */

    }, {
      key: "_onAddTrack",
      value: function _onAddTrack(track) {
        var _this18 = this;

        if (this.captionsTrack === null) this.captionsTrack = track;
        if (track) track.mode = "hidden";
        var loadCueData = setInterval(function () {
          if (track.cues && track.cues.length > 0) {
            clearInterval(loadCueData);
            var cues = Object.keys(track.cues).map(function (key) {
              return track.cues[key];
            });

            _this18._onRemoveTrack(track); //prevents duplicate tracks


            _this18.__cues = _this18.cues.concat(cues).sort(function (a, b) {
              var start = a.startTime - b.startTime,
                  end = a.endTime - b.endTime;
              return start !== 0 ? start : end !== 0 ? end : a.track - b.track;
            });
          }
        });
      }
      /**
       * removes a track's cues from cues array
       * @param {object} textTrack
       */

    }, {
      key: "_onRemoveTrack",
      value: function _onRemoveTrack(track) {
        var _this19 = this;

        if (this.loadedTracks && this.loadedTracks.textTracks) Object.keys(this.loadedTracks.textTracks).filter(function (textTrack) {
          return _this19.loadedTracks.textTracks[textTrack] !== track;
        });
        this.__cues = this.cues ? this.cues.filter(function (cue) {
          return cue.track !== track;
        }) : [];
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this20 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(A11yMediaPlayer.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(A11yMediaPlayer.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        this.style.setProperty("--a11y-media-transcript-max-height", this.height ? "146px" : "unset");
        this.__loadedTracks = this.getloadedTracks();

        this._handleMediaLoaded();

        this.__loadedTracks.addEventListener("loadedmetadata", function (e) {
          return _this20._handleMediaLoaded(e);
        });

        this.__loadedTracks.addEventListener("timeupdate", function (e) {
          _this20._handleTimeUpdate(e);
        });
        /**
         * Fires player needs the size of parent container to add responsive styling
         * @event responsive-element
         */


        window.dispatchEvent(new CustomEvent("responsive-element", {
          detail: {
            element: this,
            attribute: "responsive-size",
            relativeToParent: true,
            sm: 400,
            md: 700,
            lg: 1000,
            xl: 1500
          }
        }));
        /**
         * Fires when a new player is ready for a11y-media-state-manager
         * @event a11y-player
         */

        window.dispatchEvent(new CustomEvent("a11y-player", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
        this.__playerReady = true;
      }
      /**
       * on a cue.onenter event scrolls the first active cue to position
       * @param {event} e onenter event
       */

    }, {
      key: "_setActiveCue",
      value: function _setActiveCue(e) {
        var cue = e.detail.element,
            transcript = cue.parentNode,
            offset = transcript !== null && transcript !== undefined ? transcript.offsetTop : 0;

        if (!this.disableScroll) {
          //javascript scrolling from:  https://stackoverflow.com/questions/8917921/cross-browser-javascript-not-jquery-scroll-to-top-animation#answer-8918062
          var scrollingTo = function scrollingTo(element, to, duration) {
            if (duration <= 0) return;
            var difference = to - element.scrollTop;
            var perTick = difference / duration * 10;
            setTimeout(function () {
              element.scrollTop = element.scrollTop + perTick;
              if (element.scrollTop === to) return;
              scrollingTo(element, to, duration - 10);
            }, 10);
          };

          scrollingTo(cue.parentNode.parentNode, cue.offsetTop - offset, 250);
        }
      }
      /**
       * handles transcript scroll toggle
       * @param {event} e scroll event
       */

    }, {
      key: "_transcriptScroll",
      value: function _transcriptScroll(e) {
        this.disableScroll = !this.disableScroll;
      }
      /**
       * converts time in millesconds to HH:MM:SS
       *
       * @param {float} the progress, in seconds
       * @param {float} the duration, in seconds
       * @returns {string} a human-readable string of progress/duration in HH:MM:SS
       *
       */

    }, {
      key: "_getHHMMSS",
      value: function _getHHMMSS(val, max) {
        val = parseFloat(val);
        max = max === undefined ? val : parseFloat(max);

        var a = function a(val) {
          return val < 10 ? "0".concat(val) : val;
        },
            b = function b(val, i, none) {
          return max >= i ? a(Math.floor(val / i)) + ":" : none;
        },
            c = function c(val) {
          return val < 100 ? val + "0" : val;
        };

        return b(val, 3600, "") + b(val % 3600, 60, "00:") + a(Math.round(val % 60));
      }
      /**
       * returns time in seconds of a string, such as 00:00:00.0, 0h0m0.0s, or 0hh0mm0.0ss
       * @param {string} time
       * @returns {float} seconds
       */

    }, {
      key: "_getSeconds",
      value: function _getSeconds() {
        var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var units = time.replace(/[hm]{1,2}&?/g, ":0").replace(/[s]{1,2}$/g, "").split(/:/),
            hh = units.length > 2 ? parseInt(units[units.length - 3]) : 0,
            mm = units.length > 1 ? parseInt(units[units.length - 2]) : 0,
            ss = units.length > 0 ? parseFloat(units[units.length - 1]) : 0;
        return hh * 3600 + mm * 60 + ss;
      }
      /**
       * gets the localization by compaing the localization set to the defaults
       *
       * @param {object} the localization object
       * @param {string} the key to search for
       * @param {string} the subkey to search for
       * @returns {string} the default value for [key][subkey], unless localization[key][subkey] exists
       */

    }, {
      key: "_getLocal",
      value: function _getLocal(localization, key, subkey) {
        var local = "";

        if (localization !== undefined && localization[key] !== undefined && localization[key][subkey] !== undefined) {
          local = localization[key][subkey];
        } else if (this.localizationDefaults !== undefined && this.localizationDefaults[key] !== undefined && this.localizationDefaults[key][subkey] !== undefined) {
          local = this.localizationDefaults[key][subkey];
        }

        return local;
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(A11yMediaPlayer), "styles", this)), [(0, _index.css)(_templateObject12_9e25b9508e0011ed99ce491205e67b1d || (_templateObject12_9e25b9508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          overflow: hidden;\n          width: calc(100% - 2px);\n          font-family: var(--simple-fields-font-family, sans-serif);\n          --a11y-media-player-height: unset;\n          --a11y-media-color: var(\n            --simple-colors-default-theme-grey-11,\n            #111111\n          );\n          --a11y-media-bg-color: var(\n            --simple-colors-default-theme-grey-2,\n            #eeeeee\n          );\n          --a11y-media-border-color: var(\n            --simple-colors-default-theme-grey-3,\n            #dddddd\n          );\n          --a11y-media-hover-color: var(\n            --simple-colors-default-theme-grey-12,\n            #000000\n          );\n          --a11y-media-hover-bg-color: var(\n            --simple-colors-default-theme-grey-2,\n            #eeeeee\n          );\n          --a11y-media-accent-color: var(\n            --simple-colors-default-theme-accent-9,\n            #333333\n          );\n          --a11y-media-faded-accent-color: var(\n            --simple-colors-default-theme-accent-8,\n            #444444\n          );\n          --a11y-media-disabled-color: var(\n            --simple-colors-default-theme-grey-5,\n            #bbbbbb\n          );\n          border: 1px solid\n            var(\n              --a11y-media-border-color,\n              var(--simple-colors-default-theme-grey-3)\n            );\n\n          --a11y-media-settings-menu-color: var(--a11y-media-color);\n          --a11y-media-settings-menu-bg-color: var(--a11y-media-bg-color);\n          --a11y-media-settings-menu-hover-color: var(--a11y-media-hover-color);\n          --a11y-media-settings-menu-hover-bg-color: var(\n            --a11y-media-hover-bg-color\n          );\n          --simple-fields-accent-color: var(--a11y-media-accent-color);\n          --simple-fields-background-color: var(--a11y-media-bg-color);\n          --simple-fields-color: var(--a11y-media-color);\n          --simple-fields-border-color: var(--a11y-media-border-color);\n          --simple-fields-border-color-light: var(\n            --a11y-media-border-color-light,\n            var(--a11y-media-border-color)\n          );\n\n          --a11y-media-button-color: var(--a11y-media-color);\n          --a11y-media-button-bg-color: var(--a11y-media-bg-color);\n          --a11y-media-button-hover-color: var(--a11y-media-accent-color);\n          --a11y-media-button-hover-bg-color: var(--a11y-media-hover-bg-color);\n          --a11y-media-button-disabled-color: var(--a11y-media-disabled-color);\n          --a11y-media-button-toggle-color: var(\n            --a11y-media-faded-accent-color\n          );\n\n          --simple-range-input-bg: var(--a11y-media-accent-color);\n          --simple-range-input-color: var(--a11y-media-color);\n          --simple-range-input-track-height: 4px;\n          --simple-range-input-pin-height: 10px;\n\n          --simple-toast-color: var(--a11y-media-color);\n          --simple-toast-background-color: var(--a11y-media-bg-color);\n\n          --a11y-media-transcript-color: var(\n            --simple-colors-default-theme-grey-7,\n            #666666\n          );\n          --a11y-media-transcript-bg-color: var(\n            --simple-colors-default-theme-grey-1,\n            #ffffff\n          );\n          --a11y-media-transcript-accent-color: var(\n            --simple-colors-default-theme-accent-8,\n            #444444\n          );\n          --a11y-media-transcript-faded-accent-color: var(\n            --simple-colors-default-theme-accent-10,\n            #222222\n          );\n          --a11y-media-transcript-cue-color: var(\n            --simple-colors-fixed-theme-grey-12,\n            #000000\n          );\n          --a11y-media-transcript-cue-bg-color: var(\n            --simple-colors-fixed-theme-grey-1,\n            #ffffff\n          );\n          --a11y-media-transcript-active-cue-color: var(\n            --simple-colors-fixed-theme-grey-12,\n            #000000\n          );\n          --a11y-media-transcript-active-cue-bg-color: var(\n            --simple-colors-fixed-theme-accent-1,\n            #ffffff\n          );\n          --a11y-media-transcript-focused-cue-color: var(\n            --simple-colors-fixed-theme-grey-12,\n            #000000\n          );\n          --a11y-media-transcript-focused-cue-bg-color: var(\n            --simple-colors-fixed-theme-grey-2,\n            #eeeeee\n          );\n          --a11y-media-transcript-match-color: var(\n            --simple-colors-fixed-theme-grey-1,\n            #ffffff\n          );\n          --a11y-media-transcript-match-bg-color: var(\n            --simple-colors-fixed-theme-accent-10,\n            #222222\n          );\n          --a11y-media-transcript-match-border-color: var(\n            --simple-colors-fixed-theme-accent-12,\n            #000000\n          );\n        }\n\n        :host([dark]) {\n          border: 1px solid var(--simple-colors-default-theme-grey-1, #000000);\n        }\n\n        :host([dark-transcript]) {\n          --a11y-media-transcript-bg-color: var(\n            --simple-colors-dark-theme-grey-1,\n            #000000\n          );\n          --a11y-media-transcript-cue-color: var(\n            --simple-colors-dark-theme-grey-12,\n            #ffffff\n          );\n          --a11y-media-transcript-cue-bg-color: var(\n            --simple-colors-dark-theme-grey-1,\n            #000000\n          );\n          --a11y-media-transcript-active-cue-color: var(\n            --simple-colors-dark-theme-accent-10,\n            #dddddd\n          );\n          --a11y-media-transcript-active-cue-bg-color: var(\n            --simple-colors-dark-theme-grey-1,\n            #000000\n          );\n          --a11y-media-transcript-match-color: var(\n            --simple-colors-dark-theme-grey-1,\n            #000000\n          );\n          --a11y-media-transcript-match-bg-color: var(\n            --simple-colors-dark-theme-accent-10,\n            #dddddd\n          );\n          --a11y-media-transcript-match-border-color: var(\n            --simple-colors-dark-theme-accent-12,\n            #ffffff\n          );\n          --a11y-media-transcript-focused-cue-color: var(\n            --simple-colors-dark-theme-grey-12,\n            #ffffff\n          );\n          --a11y-media-transcript-focused-cue-bg-color: var(\n            --simple-colors-dark-theme-grey-2,\n            #111111\n          );\n        }\n\n        :host *::-webkit-scrollbar {\n          width: var(--a11y-media-scrollbar-width, 5px);\n        }\n\n        :host([hidden]),\n        *[hidden] {\n          display: none !important;\n        }\n\n        :host([height]) {\n          height: calc(var(--a11y-media-player-height) - 2px);\n          max-height: calc(var(--a11y-media-player-height) - 2px);\n          overflow: unset;\n        }\n\n        :host([height]) #player-section {\n          max-height: var(--a11y-media-player-height);\n        }\n\n        :host([height]) #player-and-controls {\n          max-height: calc(100% - 32px - 44px);\n        }\n\n        :host([height]) #player {\n          height: calc(100% - 32px - 44px);\n          padding-top: unset;\n        }\n\n        :host,\n        #player-section {\n          color: var(--a11y-media-hover-color);\n          background-color: var(--a11y-media-bg-color);\n        }\n\n        :host > * {\n          transition: all 0.5s;\n        }\n\n        :host,\n        #player-section,\n        #player,\n        #transcript-section,\n        #transcript-and-controls {\n          display: flex;\n          flex-flow: column;\n          align-items: stretch;\n          align-content: stretch;\n        }\n\n        #captionlink:link {\n          text-decoration: none;\n        }\n\n        #player-and-controls,\n        #player,\n        #player > *,\n        #cc-custom,\n        #cc-text,\n        #slider,\n        #controls,\n        #player-section,\n        #transcript-section,\n        #transcript-and-controls {\n          width: 100%;\n        }\n\n        #transcript-and-controls > * {\n          width: calc(100% - 1px);\n        }\n\n        :host > *,\n        #player-and-controls,\n        #player,\n        #player > *,\n        #cc-text {\n          flex: 1 1 auto;\n        }\n\n        #controls,\n        #searchbar {\n          flex: 0 0 44px;\n        }\n\n        #player-and-controls {\n          margin: 0 auto;\n          display: flex;\n        }\n\n        #player {\n          height: 400px;\n          position: relative;\n          background-size: cover;\n          background-position: center;\n        }\n\n        #player > * {\n          position: absolute;\n          top: 0;\n          left: 0;\n          height: 100%;\n        }\n\n        #playbutton,\n        #slider,\n        #controls {\n          z-index: 2;\n        }\n\n        #html5 {\n          min-width: 100px;\n          display: flex;\n          align-items: stretch;\n        }\n\n        :host([audio-only]) #playbutton {\n          opacity: 0;\n        }\n\n        #slider {\n          flex: 0 0 32px;\n          height: 32px;\n          background-color: var(--a11y-media-bg-color);\n          --simple-range-input-pin-height: 15px;\n        }\n\n        a11y-media-youtube {\n          opacity: 1;\n          transition: opacity 0.5s;\n        }\n\n        a11y-media-youtube.hidden {\n          opacity: 0;\n        }\n\n        #cc-custom:not([hidden]) {\n          font-size: 20px;\n          transition: font-size 0.25s;\n          display: flex;\n        }\n\n        #cc-text {\n          align-self: flex-end;\n          font-family: sans-serif;\n          color: white;\n          margin: 4px 10px;\n          padding: 0.15em 4px;\n          background-color: black;\n          background-color: rgba(0, 0, 0, 0.8);\n          transition: all 0.5s;\n        }\n\n        #player-and-controls[audio-no-thumb] #cc-text {\n          align-self: center;\n          color: var(--a11y-media-color);\n          background-color: transparent;\n        }\n\n        #controls {\n          display: block;\n          width: 100%;\n          max-width: 100%;\n          height: 44px;\n          max-height: 44px;\n          position: relative;\n          color: var(--a11y-media-color);\n          background-color: var(--a11y-media-bg-color);\n          --primary-text-color: var(--a11y-media-settings-menu-color);\n        }\n\n        #controls-left {\n          position: absolute;\n          left: 0;\n          min-width: 200px;\n        }\n\n        #controls-right {\n          position: absolute;\n          right: 0;\n          top: 0;\n        }\n\n        absolute-position-behavior {\n          background-color: var(--a11y-media-settings-menu-bg-color);\n          color: var(--a11y-media-settings-menu-color);\n          border: 1px solid\n            var(\n              --a11y-media-border-color,\n              var(--simple-colors-default-theme-grey-3)\n            );\n          max-height: 200px;\n          overflow-y: scroll;\n          overflow-x: hidden;\n        }\n\n        absolute-position-behavior::-webkit-scrollbar-track {\n          background-color: var(--a11y-media-settings-menu-bg-color);\n        }\n\n        absolute-position-behavior::-webkit-scrollbar-thumb {\n          background-color: var(--a11y-media-settings-menu-color);\n        }\n\n        absolute-position-behavior .setting {\n          min-height: 42px;\n          padding: 2px 10px;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n\n        absolute-position-behavior simple-field-field {\n          margin-top: 0 !important;\n          margin-bottom: 0 !important;\n          background-color: var(--a11y-media-settings-menu-bg-color);\n          color: var(--a11y-media-settings-menu-color);\n        }\n\n        .setting-text {\n          margin-right: 1em;\n          font-family: var(--a11y-media-controls-font-family);\n        }\n\n        .setting-control {\n          max-width: 110px;\n        }\n\n        .setting-slider {\n          flex: 0 0 110px;\n          margin-left: -15px;\n          margin-right: -15px;\n        }\n\n        #loop {\n          flex: 0 0 40px;\n        }\n\n        #loop-label {\n          flex: 1 1 auto;\n        }\n\n        .play-status {\n          border: none;\n          position: relative;\n          font-size: 85%;\n          font-family: var(--a11y-media-controls-font-family);\n        }\n\n        .play-status.control-bar {\n          padding: 8px 13px 8px;\n        }\n\n        :host([hide-play-status]) .play-status {\n          display: none;\n        }\n\n        #volume-and-mute {\n          display: inline-block;\n          position: relative;\n        }\n\n        #volume {\n          position: absolute;\n          left: 30px;\n          top: 0px;\n          width: 0;\n          height: 40px;\n          overflow: hidden;\n          transition: width 0.5s;\n          z-index: 3;\n          border-radius: 4px;\n          background-color: var(--a11y-media-bg-color);\n        }\n\n        #volume:active,\n        #volume:focus,\n        #volume:hover,\n        #volume.focus,\n        #volume-and-mute:active #volume,\n        #volume-and-mute:focus #volume,\n        #volume-and-mute:hover #volume {\n          overflow: visible;\n          width: 100px;\n        }\n\n        :host([responsive-size=\"xs\"]) #volume:active,\n        :host([responsive-size=\"xs\"]) #volume:focus,\n        :host([responsive-size=\"xs\"]) #volume:hover,\n        :host([responsive-size=\"xs\"]) #volume.focus,\n        :host([responsive-size=\"xs\"]) #volume-and-mute:active #volume,\n        :host([responsive-size=\"xs\"]) #volume-and-mute:focus #volume,\n        :host([responsive-size=\"xs\"]) #volume-and-mute:hover #volume,\n        :host([width]) #volume:active,\n        :host([width]) #volume:focus,\n        :host([width]) #volume:hover,\n        :host([width]) #volume.focus,\n        :host([width]) #volume-and-mute:active #volume,\n        :host([width]) #volume-and-mute:focus #volume,\n        :host([width]) #volume-and-mute:hover #volume {\n          top: 0px;\n        }\n\n        #print-thumbnail {\n          width: 100%;\n          margin: 0;\n          display: block;\n          border-top: 1px solid #aaaaaa;\n        }\n\n        .media-caption:not(:empty) {\n          width: calc(100% - 30px);\n          padding: 5px 15px;\n        }\n\n        .media-type {\n          font-style: italic;\n        }\n\n        #searchbar {\n          display: flex;\n          align-items: stretch;\n          justify-content: space-between;\n          height: 44px;\n          max-height: 44px;\n          min-height: 44px;\n          width: 100%;\n          color: var(--a11y-media-color);\n          background-color: var(--a11y-media-transcript-bg-color);\n          --simple-fields-color: var(--a11y-media-color);\n          --a11y-media-button-bg-color: var(--a11y-media-transcript-bg-color);\n          --a11y-media-button-hover-bg-color: var(\n            --a11y-media-transcript-bg-color\n          );\n          --simple-search-input-background-color: var(\n            --a11y-media-transcript-bg-color\n          );\n          --simple-search-input-text-color: var(--a11y-media-color);\n          --simple-search-input-line-color: var(--a11y-media-accent-color);\n          --simple-search-input-placeholder-color: var(--a11y-media-color);\n          --simple-search-button-color: var(--a11y-media-accent-color);\n          --simple-search-button-hover-color: var(\n            --a11y-media-faded-accent-color\n          );\n          --simple-search-button-bg-color: var(\n            --a11y-media-transcript-bg-color\n          );\n          --simple-search-button-border-color: var(\n            --a11y-media-transcript-bg-color\n          );\n          --simple-search-button-hover-border-color: var(\n            --a11y-media-transcript-bg-color\n          );\n          --simple-search-button-disabled-color: var(\n            --a11y-media-disabled-color\n          );\n          --simple-search-button-disabled-bg-color: var(\n            --a11y-media-transcript-bg-color\n          );\n          --simple-search-button-disabled-border-color: var(\n            --a11y-media-border-color\n          );\n          --simple-search-padding: 0 15px;\n        }\n\n        :host([dark]) #searchbar {\n          background-color: var(--a11y-media-bg-color);\n          --a11y-media-button-bg-color: var(--a11y-media-bg-color);\n          --a11y-media-button-hover-bg-color: var(--a11y-media-bg-color);\n          --simple-search-input-background-color: var(--a11y-media-bg-color);\n          --simple-search-button-bg-color: var(--a11y-media-bg-color);\n          --simple-search-button-border-color: var(--a11y-media-bg-color);\n          --simple-search-button-hover-border-color: var(--a11y-media-bg-color);\n          --simple-search-button-disabled-bg-color: var(--a11y-media-bg-color);\n        }\n\n        #searching {\n          flex-grow: 2;\n        }\n\n        #autoscroll {\n          padding-right: 8px;\n        }\n\n        #scrolling,\n        #printing {\n          display: flex;\n          align-items: center;\n        }\n\n        #transcript-section {\n          padding: 0 1px 0 0;\n        }\n\n        #transcript-and-controls {\n          flex: 1 0 194px;\n        }\n\n        #transcript {\n          flex: 1 0 150px;\n          max-height: var(--a11y-media-transcript-max-height, unset);\n          overflow-y: scroll;\n          color: var(--a11y-media-transcript-cue-color);\n          background-color: var(--a11y-media-transcript-cue-bg-color);\n          border-left: 1px solid var(--a11y-media-transcript-bg-color);\n        }\n\n        #transcript::-webkit-scrollbar-track {\n          background-color: var(--a11y-media-transcript-cue-bg-color);\n        }\n\n        #transcript::-webkit-scrollbar-thumb {\n          background-color: var(--a11y-media-transcript-cue-color);\n        }\n\n        .transcript-from-track {\n          display: table;\n          width: calc(100% - 30px);\n          padding: 0 15px 15px;\n          color: var(--a11y-media-transcript-cue-color);\n          background-color: var(--a11y-media-transcript-cue-bg-color);\n          font-size: var(--a11y-media-transcript-cue-font-size, 14px);\n          line-height: var(--a11y-media-transcript-cue-line-height, 28px);\n        }\n\n        .transcript-from-track[hideTimestamps] {\n          display: block;\n        }\n\n        .sr-only {\n          position: absolute;\n          left: -9999px;\n          font-size: 0;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n\n        absolute-position-behavior:not(:defined),\n        simple-tooltip:not(:defined) {\n          display: none;\n        }\n\n        ::slotted(iframe) {\n          display: none;\n        }\n        @media screen {\n          :host([full-flex]) {\n            flex-flow: row;\n            padding: 0;\n          }\n\n          :host([full-flex]) #player-section {\n            max-width: 50%;\n            flex: 1 0 auto;\n          }\n\n          :host([full-flex]) #transcript-section {\n            min-width: 50%;\n            flex: 0 1 auto;\n          }\n\n          :host([full-flex]) #transcript {\n            position: absolute;\n            top: 44px;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            overflow-y: scroll;\n          }\n\n          #transcript-and-controls {\n            position: relative;\n          }\n\n          :host([sticky-mode]) #player-section {\n            position: fixed;\n            top: 5px;\n            right: 5px;\n            width: 200px;\n            max-width: 200px;\n            z-index: 999999;\n            border: 1px solid var(--a11y-media-bg-color);\n            box-shadow: 1px 1px 20px 1px rgba(125, 125, 125);\n            border-radius: 3.2px;\n          }\n\n          :host([fullscreen]) #player-section {\n            width: 100%;\n            height: 100vh;\n            max-width: 100vw;\n            position: absolute;\n            position: sticky;\n            left: 0;\n            top: 0;\n            z-index: 100000;\n            transition: all 0.5s;\n          }\n\n          :host([dark][sticky-mode]) #player-section {\n            border: 1px solid var(--a11y-media-bg-color);\n          }\n\n          :host([sticky][sticky-corner=\"top-left\"]) #player-section {\n            right: unset;\n            left: 5px;\n          }\n\n          :host(:not([no-height]):not([stacked-layout]):not([responsive-size=\"xs\"]):not([responsive-size=\"sm\"]))\n            #player-and-controls.totop {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 200px !important;\n            z-index: 9999;\n          }\n\n          :host([sticky][sticky-corner=\"bottom-left\"]) #player-and-controls {\n            top: unset;\n            right: unset;\n            bottom: 5px;\n          }\n\n          :host([sticky][sticky-corner=\"bottom-right\"]) #player-and-controls {\n            top: unset;\n            bottom: 5px;\n          }\n\n          :host([sticky-mode]) .screen-only.media-caption,\n          :host([responsive-size=\"xs\"]) .screen-only.media-caption {\n            display: none;\n          }\n\n          :host([sticky-mode]) #player-and-controls[audio-no-thumb] {\n            max-height: 0px;\n            overflow: hidden;\n          }\n\n          :host([sticky-mode]) .hide-sticky,\n          :host([sticky-mode]) .hide-full-xs,\n          :host([sticky-mode]) .hide-full-sm,\n          :host([sticky-mode]) .hide-flex,\n          :host([width]) .hide-full-xs,\n          :host([width]) .hide-full-sm,\n          :host([width]) .hide-full-flex,\n          :host([responsive-size=\"xs\"]) .hide-full-xs,\n          :host([responsive-size=\"xs\"]) .hide-full-sm,\n          :host([responsive-size=\"xs\"]) .hide-full-flex,\n          :host([responsive-size=\"sm\"]) .hide-full-sm,\n          :host([responsive-size=\"sm\"]) .hide-full-flex,\n          :host([flex-layout]) .hide-flex {\n            display: none;\n          }\n\n          :host([responsive-size=\"xl\"]) #cc-custom {\n            font-size: 16px;\n          }\n\n          :host([responsive-size=\"lg\"]) #cc-custom,\n          :host([flex-layout][responsive-size=\"xl\"]) #cc-custom {\n            font-size: 14px;\n          }\n\n          :host([responsive-size=\"md\"]) #cc-custom,\n          :host([flex-layout][responsive-size=\"lg\"]) #cc-custom {\n            font-size: 12px;\n          }\n\n          :host([responsive-size=\"xs\"]) #cc-custom,\n          :host([width]) #cc-custom,\n          :host([flex-layout][responsive-size=\"md\"]) #cc-custom,\n          :host([flex-layout][responsive-size=\"sm\"]) #cc-custom {\n            font-size: 10px;\n          }\n\n          :host([sticky-mode]) #cc-custom,\n          :host([flex-layout][width]) #cc-custom,\n          :host([flex-layout][responsive-size=\"xs\"]) #cc-custom {\n            display: none;\n          }\n\n          .media-caption {\n            color: var(--a11y-media-bg-color);\n            background-color: var(--a11y-media-accent-color);\n          }\n\n          #audio-only {\n            text-align: center;\n            font-style: italic;\n            width: 100%;\n            line-height: 160%;\n          }\n\n          #print-thumbnail,\n          .print-only {\n            width: 0;\n            display: none;\n          }\n        }\n\n        @media print {\n          :host,\n          :host([dark]) {\n            outline: 1px solid #aaaaaa;\n            background-color: #ffffff;\n          }\n\n          .screen-only,\n          #searchbar,\n          #print-thumbnail:not([src]),\n          :host(:not([thumbnail-src])) #player {\n            display: none;\n          }\n\n          .media-caption {\n            background-color: #cccccc;\n            color: #000000;\n            font-size: 120%;\n          }\n\n          #transcript {\n            padding: 0 15px 5px;\n            color: #000;\n            background-color: #ffffff;\n            border-top: 1px solid #aaa;\n          }\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(A11yMediaPlayer), "properties", this)), {}, {
          __playerReady: {
            type: Boolean
          },

          /**
           * Allow this media to play concurrently with other a11y-media-players?
           * Default is to pause this a11y-media-player when other a11y-media-player starts playing.
           */
          allowConcurrent: {
            attribute: "allow-concurrent",
            type: Boolean
          },

          /**
           * Is this an audio file?
           */
          audioOnly: {
            attribute: "audio-only",
            type: Boolean,
            reflect: true
          },

          /**
           * autoplay is an option,
           * but generally not recommended for a11y
           */
          autoplay: {
            attribute: "autoplay",
            type: Boolean
          },

          /**
           * the selected track
           */
          captionsTrack: {
            attribute: "captions-track",
            type: Object
          },

          /**
           * show closed captions
           */
          cc: {
            attribute: "cc",
            type: Boolean
          },

          /**
           * current time for video playback
           */
          currentTime: {
            type: Number
          },

          /**
           * crossorigin attribute for <video> and <audio> tags
           */
          crossorigin: {
            attribute: "crossorigin",
            type: String
          },

          /**
           * disable transcript print button
           */
          disablePrintButton: {
            attribute: "disable-print-button",
            type: Boolean
          },

          /**
           * disable transcript search feature
           */
          disableSearch: {
            attribute: "disable-search",
            type: Boolean
          },

          /**
           * disable autoscrolling as transcript plays
           */
          disableScroll: {
            attribute: "disable-scroll",
            type: Boolean
          },

          /**
           * disables seeking
           */
          disableSeek: {
            attribute: "disable-seek",
            type: Boolean
          },

          /**
           * Use dark theme on transcript? Default is false, even when player is dark.
           */
          darkTranscript: {
            attribute: "dark-transcript",
            type: Boolean
          },

          /**
           * disable fullscreen option
           */
          disableFullscreen: {
            attribute: "disable-fullscreen",
            type: Boolean
          },

          /**
           * disable interactive mode that makes the transcript clickable
           */
          disableInteractive: {
            attribute: "disable-interactive",
            type: Boolean
          },

          /**
           * The height of the media player.
           */
          height: {
            attribute: "height",
            type: String
          },

          /**
           * Hide elapsed time?
           */
          hideElapsedTime: {
            attribute: "hide-elapsed-time",
            type: Boolean
          },

          /**
           * show cue's start and end time
           */
          hideTimestamps: {
            attribute: "hide-timestamps",
            type: Boolean
          },

          /**
           * initially hide the transcript?
           */
          hideTranscript: {
            attribute: "hide-transcript",
            type: Boolean,
            reflect: true
          },

          /**
           * initially hide the transcript?
           */
          id: {
            attribute: "id",
            type: String,
            reflect: true
          },

          /**
           * Language
           */
          lang: {
            attribute: "lang",
            type: String
          },

          /**
           * Learning mode
           */
          learningMode: {
            attribute: "learning-mode",
            type: Boolean
          },

          /**
           * has link button
           */
          linkable: {
            attribute: "linkable",
            type: Boolean
          },

          /**
           * custom localization settings
           */
          localization: {
            attribute: "localization",
            type: Object
          },

          /**
           * Loop the video?
           */
          loop: {
            attribute: "loop",
            type: Boolean
          },

          /**
          * Dash.js manifest source?
          * /
          "manifest": {
          "attribute": "manifest",
          "type": String
          },
          /**
          * the language of the media (if different from user interface language)
          */
          mediaLang: {
            attribute: "media-lang",
            type: String
          },

          /**
           * optional title of media (shows when printed)
           */
          mediaTitle: {
            attribute: "media-title",
            type: String
          },

          /**
           * Is audio muted?
           */
          muted: {
            attribute: "muted",
            type: Boolean
          },

          /**
           * Open on YouTube button
           */
          hideYoutubeLink: {
            type: Boolean,
            attribute: "hide-youtube-link"
          },

          /**
           * Playback rate where `1` is normal speed, `0.`5 is half-speed, and `2` is double speed
           */
          playbackRate: {
            attribute: "playback-rate",
            type: Number
          },

          /**
           * Preload `none`, `metadata`, or `auto`.
           */
          preload: {
            attribute: "preload",
            type: String,
            reflect: true
          },

          /**
           * Size of the a11y media element for responsive styling
           */
          responsiveSize: {
            attribute: "responsive-size",
            type: String,
            reflect: true
          },

          /**
           * the search tool for the transcript
           */
          search: {
            attribute: "search",
            type: Object
          },

          /**
           * Is stand-alone player (without transcript)?
           */
          standAlone: {
            attribute: "stand-alone",
            type: Boolean,
            reflect: true
          },
          source: {
            type: String,
            reflect: true
          },

          /**
           * DEPRECATED: array ouf sources
           */
          sources: {
            attribute: "sources",
            type: Array
          },

          /**
           * stacked layout instead of side-by-side?
           */
          stackedLayout: {
            attribute: "stacked-layout",
            type: Boolean
          },

          /**
           * Is the video currently sticky, i.e. it is fixed to the corner when playing but scrolled off screen?
           */
          sticky: {
            attribute: "sticky",
            type: Boolean,
            reflect: true
          },

          /**
           * When playing but scrolled off screen, to which corner does it "stick":
           * top-left, top-right, bottom-left, bottom-right, or none?
           * Default is "top-right". "None" disables stickiness.
           */
          stickyCorner: {
            attribute: "sticky-corner",
            type: String,
            reflect: true
          },

          /**
           * Source of optional thumbnail image
           * Highly recommended for Safari.
           */
          thumbnailSrc: {
            attribute: "thumbnail-src",
            type: String,
            reflect: true
          },

          /**
           * DEPRECATED: array of tracks.
           */
          tracks: {
            attribute: "tracks",
            type: Array
          },

          /**
           * the selected track for the transcript
           */
          transcriptTrack: {
            attribute: "transcript-track",
            type: Object
          },

          /**
           * Range is 0 to 100. Default should not be loud enough to overpower screen readers.
           */
          volume: {
            attribute: "volume",
            type: Number
          },

          /**
           * The width of the media player.
           */
          width: {
            attribute: "width",
            type: String
          },

          /**
           * the id for the video
           */
          youtubeId: {
            attribute: "youtube-id",
            reflect: true,
            type: String
          },

          /**
           * current playback in seconds
           */
          __currentTime: {
            type: Number
          },

          /**
           * the index of the selected closed captions
           */
          __captionsOption: {
            type: Number
          },

          /**
           * array of cues provided to readOnly `get cues`
           */
          __cues: {
            type: Array
          },

          /**
           * media captions/transcript tracks array  provided to readOnly `get loadedTracks`
           */
          __loadedTracks: {
            type: Object
          },

          /**
           * media playing status readOnly `get playing`
           */
          __playing: {
            type: Boolean
          },

          /**
           * temporarily duration in seconds until fully loaded
           */
          __preloadedDuration: {
            type: Number
          },

          /**
           * Is settings menu toggle open?
           */
          __settingsOpen: {
            type: Boolean
          },

          /**
           * the index of the selected transcript
           */
          __transcriptOption: {
            type: Number
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "a11y-media-player";
      }
    }]);
    return A11yMediaPlayer;
  }((0, _fullscreenBehaviors.FullscreenBehaviors)(_simpleColors.SimpleColors));

  _exports.A11yMediaPlayer = A11yMediaPlayer;
  customElements.define(A11yMediaPlayer.tag, A11yMediaPlayer);
});