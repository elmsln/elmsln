define(["exports", "../../../../../lit/index.js", "../../core/haxcms-site-store.js", "../../../../../mobx/dist/mobx.esm.js", "../query/site-query-menu-slice.js"], function (_exports, _index, _haxcmsSiteStore, _mobxEsm, _siteQueryMenuSlice) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteChildrenBlock = void 0;

  var _templateObject_c3311df0809211edaa2833647dc78c6c, _templateObject2_c3311df0809211edaa2833647dc78c6c, _templateObject3_c3311df0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `site-children-block`
   * `Child pages of whatever is active`
   * @demo demo/index.html
   */
  var SiteChildrenBlock = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(SiteChildrenBlock, _LitElement);

    var _super = _createSuper(SiteChildrenBlock);

    function SiteChildrenBlock() {
      var _this;

      babelHelpers.classCallCheck(this, SiteChildrenBlock);
      _this = _super.call(this);
      _this.__disposer = [];
      _this.dynamicMethodology = "active";
      _this.start = 1;
      _this.end = 1000;
      _this.fixedId = false;
      _this.noink = false;
      _this.__items = [];
      return _this;
    }

    babelHelpers.createClass(SiteChildrenBlock, [{
      key: "resultChanged",
      value: function resultChanged(e) {
        this.__items = babelHelpers.toConsumableArray(e.detail);
      } // render function

    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_c3311df0809211edaa2833647dc78c6c || (_templateObject_c3311df0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"wrapper\">\n        <site-query-menu-slice\n          @result-changed=\"", "\"\n          dynamic-methodology=\"", "\"\n          start=\"", "\"\n          end=\"", "\"\n          parent=\"", "\"\n          ?fixed-id=\"", "\"\n        ></site-query-menu-slice>\n        ", "\n      </div>\n    "])), this.resultChanged, this.dynamicMethodology, this.start, this.end, this.parent, this.fixedId, this.__items.map(function (item) {
          return (0, _index.html)(_templateObject2_c3311df0809211edaa2833647dc78c6c || (_templateObject2_c3311df0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n            <div class=\"spacing\">\n              <a\n                data-id=\"", "\"\n                class=\"link\"\n                tabindex=\"-1\"\n                href=\"", "\"\n              >\n                <button noink=\"", "\">\n                  <div class=\"indent indent-", "\"></div>\n                  ", "\n                </button>\n              </a>\n            </div>\n          "])), item.id, item.slug, _this2.noink, item.indent, item.title);
        }));
      }
    }, {
      key: "_activeIdChanged",
      value:
      /**
       * When active ID changes, see if we know what to highlight automatically
       */
      function _activeIdChanged(newValue) {
        var _this3 = this;

        if (newValue) {
          var el = null; //ensure that this level is included

          if (this.shadowRoot.querySelector('[data-id="' + newValue + '"]')) {
            el = this.shadowRoot.querySelector('[data-id="' + newValue + '"]');
          } else {
            (function () {
              var tmpItem = _this3.manifest.items.find(function (i) {
                return i.id == newValue;
              }); // fallback, maybe there's a child of this currently active


              while (el === null && tmpItem && tmpItem.parent != null) {
                // take the parent object of this current item
                tmpItem = _this3.manifest.items.find(function (i) {
                  return i.id == tmpItem.parent;
                }); // see if IT lives in the dom, if not, keep going until we run out

                if (tmpItem && _this3.shadowRoot.querySelector('[data-id="' + tmpItem.id + '"]')) {
                  el = _this3.shadowRoot.querySelector('[data-id="' + tmpItem.id + '"]');
                }
              }
            })();
          }

          if (this._prevEl) {
            this._prevEl.classList.remove("active");
          }

          if (el) {
            el.classList.add("active");
            this._prevEl = el;
          }
        } else {
          // shouldn't be possible but might as well list
          if (this._prevEl) {
            this._prevEl.classList.remove("active");
          }
        }
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteChildrenBlock.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "__items") {
            _this4.dispatchEvent(new CustomEvent("".concat(_this4[propName], "-changed"), {
              detail: _this4[propName]
            }));
          }

          if (propName === "_activeId" && _this4.shadowRoot) {
            _this4._activeIdChanged(_this4[(propName, oldValue)]);
          }
        });
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this5 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteChildrenBlock.prototype), "connectedCallback", this).call(this);
        (0, _mobxEsm.autorun)(function (reaction) {
          _this5.editMode = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.editMode);

          _this5.__disposer.push(reaction);
        });
        (0, _mobxEsm.autorun)(function (reaction) {
          _this5.manifest = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.manifest);

          _this5.__disposer.push(reaction);
        }); // minor timing thing to ensure store has picked active
        // needed if routes set on first paint or lifecycles miss

        setTimeout(function () {
          (0, _mobxEsm.autorun)(function (reaction) {
            _this5.activeId = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.activeId);

            _this5.__disposer.push(reaction);
          });
        }, 250);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        // clean up state
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteChildrenBlock.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "site-children-block";
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: true,
          gizmo: {
            title: "HAXcms: child block",
            description: "Dynamic block to show child of the current page",
            icon: "av:call-to-action",
            color: "grey",
            groups: ["haxcms"],
            handles: [],
            meta: {
              author: "HAXTheWeb core team",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [],
            advanced: [{
              property: "dynamicMethodology",
              title: "Dynamic method",
              description: "How to calculate the children relative to this element",
              inputMethod: "select",
              options: {
                active: "Active children",
                parent: "Parent's children",
                ancestor: "All children from the highest ancestor"
              }
            }, {
              property: "start",
              title: "Start level",
              inputMethod: "number"
            }, {
              property: "end",
              title: "End level",
              inputMethod: "number"
            }]
          },
          demoSchema: [{
            tag: "site-children-block",
            properties: {},
            content: ""
          }]
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject3_c3311df0809211edaa2833647dc78c6c || (_templateObject3_c3311df0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --site-children-block-indent: 16px;\n          --site-children-block-link-active-bg: rgba(255, 255, 255, 0.1);\n          transition: 0.2s opacity linear;\n          opacity: 1;\n        }\n        :host([edit-mode]) {\n          opacity: 0.2;\n          pointer-events: none;\n        }\n        .link {\n          display: block;\n          color: var(--site-children-block-link-color, #444444);\n        }\n        button {\n          text-transform: unset;\n          min-width: unset;\n          width: 100%;\n          margin: 0;\n          border-radius: 0;\n          justify-content: flex-start;\n          background-color: transparent;\n          border: none;\n          color: inherit;\n        }\n\n        .active {\n          color: var(--site-children-block-link-active-color, #000000);\n          background-color: var(--site-children-block-link-active-bg);\n        }\n        .spacing .indent {\n          display: inline-flex;\n        }\n        .indent-1 {\n          margin-left: calc(var(--site-children-block-indent) * 1);\n        }\n        .indent-2 {\n          margin-left: calc(var(--site-children-block-indent) * 2);\n        }\n        .indent-3 {\n          margin-left: calc(var(--site-children-block-indent) * 3);\n        }\n        .indent-4 {\n          margin-left: calc(var(--site-children-block-indent) * 4);\n        }\n        .indent-5 {\n          margin-left: calc(var(--site-children-block-indent) * 5);\n        }\n        .indent-6 {\n          margin-left: calc(var(--site-children-block-indent) * 6);\n        }\n        .indent-7 {\n          margin-left: calc(var(--site-children-block-indent) * 7);\n        }\n        .indent-8 {\n          margin-left: calc(var(--site-children-block-indent) * 8);\n        }\n        .indent-9 {\n          margin-left: calc(var(--site-children-block-indent) * 9);\n        }\n        .indent-10 {\n          margin-left: calc(var(--site-children-block-indent) * 10);\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * How we should obtain the parent who's children we should show
           * options are direct, above, or root
           */
          dynamicMethodology: {
            type: String,
            attribute: "dynamic-methodology"
          },

          /**
           * starting level for the menu items
           */
          start: {
            type: Number
          },

          /**
           * ending level for the menu items
           */
          end: {
            type: Number
          },

          /**
           * parent for the menu id
           */
          parent: {
            type: String
          },

          /**
           * Use this boolean to force this to fix to 1 parent
           * Otherwise it will dynamically update (default behavior)
           */
          fixedId: {
            type: Boolean,
            attribute: "fixed-id"
          },

          /**
           * to control ink on the buttons
           */
          noink: {
            type: Boolean
          },

          /**
           * just to bind data between things
           */
          __items: {
            type: Array
          },

          /**
           * acitvely selected item
           */
          activeId: {
            type: String,
            attribute: "active-id"
          },
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          }
        };
      }
    }]);
    return SiteChildrenBlock;
  }(_index.LitElement);

  _exports.SiteChildrenBlock = SiteChildrenBlock;
  customElements.define(SiteChildrenBlock.tag, SiteChildrenBlock);
});