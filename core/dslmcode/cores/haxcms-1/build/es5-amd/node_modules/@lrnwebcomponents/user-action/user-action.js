define(["exports", "meta", "./lib/UserActionBroker.js"], function (_exports, meta, _UserActionBroker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.UserAction = void 0;
  meta = _interopRequireWildcard(meta);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
    * `user-action`
    * @element user-action
    * `track user actions and allow them to talk to xAPI stores easily`
    *
    * @microcopy - language worth noting:
    *  -
    *
   
    * @demo demo/index.html
    */
  var UserAction = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(UserAction, _HTMLElement);

    var _super = _createSuper(UserAction);

    /**
     * life cycle
     */
    function UserAction() {
      var _this;

      babelHelpers.classCallCheck(this, UserAction);
      _this = _super.call(this);
      _this.tag = UserAction.tag;
      _this.fired = false;
      _this.track = "visibility";
      _this.eventname = "user-engagement";
      _this.every = false;
      _this.demo = false;
      _this.visiblelimit = 0.5;
      return _this;
    }

    babelHelpers.createClass(UserAction, [{
      key: "every",
      get: function get() {
        return this.getAttribute("every");
      },
      set: function set(val) {
        if (val) {
          this.setAttribute("every", val);
        }
      }
    }, {
      key: "demo",
      get: function get() {
        return this.getAttribute("demo");
      },
      set: function set(val) {
        if (val) {
          this.setAttribute("demo", val);
        }
      }
      /**
       * life cycle, element is afixed to the DOM
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        this.__ready = true;
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(attr, oldValue, newValue) {
        if (attr === "track" && newValue) {
          switch (newValue) {
            // visibility isn't a real event and needs a complex solution
            case "visibility":
              // set an interaction observer
              this.observer = new IntersectionObserver(this.handleIntersectionCallback.bind(this), {
                rootMargin: "0px",
                threshold: [0.0, 0.25, 0.5, 0.75, 1.0]
              });
              this.observer.observe(this);
              break;

            default:
              this.addEventListener(newValue, this.userActionEvent.bind(this));
              break;
          }
        }
      }
      /**
       * Handle this being visible
       */

    }, {
      key: "handleIntersectionCallback",
      value: function handleIntersectionCallback(entries) {
        var _iterator = _createForOfIteratorHelper(entries),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var entry = _step.value;

            if (Number(entry.intersectionRatio).toFixed(2) >= this.visiblelimit) {
              if (this.__ready) {
                this.userActionEvent({
                  detail: "visible"
                });
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      /**
       * Redirect event we were monitoring into a trackable event
       */

    }, {
      key: "userActionEvent",
      value: function userActionEvent(e) {
        if (!this._haxstate && (!this.fired || this.every) && _UserActionBroker.UABroker.valid(this.track)) {
          _UserActionBroker.UABroker.fire(this.eventname, this.track, e, this, this.demo);

          this.fired = true;
        } else if (!_UserActionBroker.UABroker.valid(this.track)) {
          console.warn(this.track + " was not valid");
        }
      }
      /**
       * haxProperties integration via file reference
       */

    }, {
      key: "haxHooks",
      value:
      /**
       * Implements haxHooks to tie into life-cycle if hax exists.
       */
      function haxHooks() {
        return {
          editModeChanged: "haxeditModeChanged",
          activeElementChanged: "haxactiveElementChanged",
          gizmoRegistration: "haxgizmoRegistration"
        };
      }
      /**
       * Supply translations for the UI elements of HAX in meme-maker
       */

    }, {
      key: "haxgizmoRegistration",
      value: function haxgizmoRegistration(store) {
        window.dispatchEvent(new CustomEvent("i18n-manager-register-element", {
          detail: {
            namespace: "user-action.haxProperties",
            localesPath: new URL("./locales", meta.url).href,
            locales: ["es"]
          }
        }));
      }
      /**
       * double-check that we are set to inactivate click handlers
       * this is for when activated in a duplicate / adding new content state
       */

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        if (val) {
          this._haxstate = val;
        }
      }
      /**
       * Set a flag to test if we should block link clicking on the entire card
       * otherwise when editing in hax you can't actually edit it bc its all clickable.
       * if editMode goes off this helps ensure we also become clickable again
       */

    }, {
      key: "haxeditModeChanged",
      value: function haxeditModeChanged(val) {
        this._haxstate = val;
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "user-action";
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        return ["track", "eventname", "every", "demo"];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }]);
    return UserAction;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.UserAction = UserAction;
  customElements.define(UserAction.tag, UserAction);
});