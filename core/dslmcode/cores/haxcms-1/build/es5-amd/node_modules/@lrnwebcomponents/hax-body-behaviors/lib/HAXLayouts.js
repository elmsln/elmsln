define(["exports", "../../../lit/index.js", "../../utils/utils.js", "../../schema-behaviors/schema-behaviors.js", "../../absolute-position-behavior/absolute-position-behavior.js"], function (_exports, _index, _utils, _schemaBehaviors, _absolutePositionBehavior) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxLayoutBehaviors = void 0;

  var _templateObject_d6f2bd508e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var HaxLayoutBehaviors = function HaxLayoutBehaviors(SuperClass) {
    return /*#__PURE__*/function (_SchemaBehaviors) {
      babelHelpers.inherits(_class, _SchemaBehaviors);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.ready = false;
        _this.haxLayoutContainer = true;
        return _this;
      }
      /**
       * life cycle
       */


      babelHelpers.createClass(_class, [{
        key: "firstUpdated",
        value: function firstUpdated(changedProperties) {
          var _this2 = this;

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this).call(this, changedProperties);
          setTimeout(function () {
            _this2.ready = true;
          }, 100);
        }
      }, {
        key: "updated",
        value: function updated(changedProperties) {
          var _this3 = this;

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this).call(this, changedProperties);
          changedProperties.forEach(function (oldValue, propName) {
            if (propName === "dataHaxRay" && _this3.shadowRoot) {
              if (_this3[propName]) {
                // apply handlers to the columns themselves
                _this3.addEventListener("drop", _this3._dropEvent.bind(_this3));

                var containers = babelHelpers.toConsumableArray(_this3.shadowRoot.querySelectorAll("drag-enabled")),
                    slots = babelHelpers.toConsumableArray(_this3.shadowRoot.querySelectorAll("slot"));
                containers.forEach(function (container) {
                  container.addEventListener("dragenter", _this3._dragEnter.bind(_this3));
                  container.addEventListener("dragleave", _this3._dragLeave.bind(_this3));
                });
                slots.forEach(function (slot) {
                  return slot.addEventListener("slotchange", _this3._slotMonitor.bind(_this3));
                });
                _this3.observer = new MutationObserver(function (mutations) {
                  if (!_this3.__sorting) {
                    mutations.forEach(function (mutation) {
                      // this implies something was added dynamically or drag and drop
                      // from outside this element or dragging between grid plates
                      // so we need to disconnect the handlers from here and pick them
                      // up in the new plate
                      mutation.addedNodes.forEach(function (node) {
                        if (node.tagName && node !== _this3) {
                          // verify this has a slot set otherwise we need to set one on the fly
                          // otherwise this won't show up. This could be incorrectly formed HTML
                          // DOM that was pushed in via an outside system or edge cases of things
                          // dropping in without a slot set in anyway
                          // validate slot name, otherwise force it to col-1
                          if (node.parentElement && node.parentElement.tagName !== "HAX-BODY" && !_this3.validateElementSlot(node) && _this3.validElementSlots().length > 0) {
                            node.setAttribute("slot", _this3.validElementSlots()[0]);
                          }
                        }
                      });
                    });

                    _this3.__sortChildren();
                  }
                });

                _this3.observer.observe(_this3, {
                  childList: true
                });
              } else {
                if (_this3.observer) {
                  _this3.observer.disconnect();
                }

                _this3.removeEventListener("drop", _this3._dropEvent.bind(_this3));

                var _containers = babelHelpers.toConsumableArray(_this3.shadowRoot.querySelectorAll("drag-enabled")),
                    _slots = babelHelpers.toConsumableArray(_this3.shadowRoot.querySelectorAll("slot"));

                _containers.forEach(function (container) {
                  container.removeEventListener("dragenter", _this3._dragEnter.bind(_this3));
                  container.removeEventListener("dragleave", _this3._dragLeave.bind(_this3));
                });

                _slots.forEach(function (slot) {
                  return slot.removeEventListener("slotchange", _this3._slotMonitor.bind(_this3));
                });
              }
            } // if any of these changed, update col widths


            if (["responsiveSize", "layout", "layouts", "disableResponsive"].includes(propName)) {
              clearTimeout(_this3.__calcWidthLock);
              _this3.__calcWidthLock = setTimeout(function () {
                _this3.__columnWidths = _this3._getColumnWidths(_this3.responsiveSize, _this3.layout, _this3.layouts, _this3.disableResponsive);
              }, 0);
            }

            switch (propName) {
              // observer, ensure we are sized correctly after widths change
              case "__columnWidths":
                // widths changed because of layout somehow, wait for the resize transition
                // to have processed, then fire a resize event which we are listening
                _this3.resize();

                break;

              case "disableResponsive":
                // fire an event that this is a core piece of the system
                _this3.dispatchEvent(new CustomEvent("disable-responsive-changed", {
                  detail: _this3[propName]
                }));

                break;
            }
          });
          this.haxLayoutContainer = true;
        }
      }, {
        key: "_dragEnter",
        value: function _dragEnter(e) {
          e.target.classList.add("hax-hovered");
        }
      }, {
        key: "_dragLeave",
        value: function _dragLeave(e) {
          e.target.classList.remove("hax-hovered");
        }
      }, {
        key: "_dropEvent",
        value: function _dropEvent(e) {
          this.querySelectorAll(".hax-hovered").forEach(function (el) {
            el.classList.remove("hax-hovered");
          });
          this.shadowRoot.querySelectorAll(".hax-hovered").forEach(function (el) {
            el.classList.remove("hax-hovered");
          });
        }
      }, {
        key: "_getSlotOrder",
        value: function _getSlotOrder(item) {
          var slot = item.getAttribute("slot"),
              container = this.shadowRoot.querySelector("[slot=".concat(slot, "]")),
              order = parseInt(container.getAttribute("data-layout-order") || -1);
          return order;
        }
        /**
         * Use slot events to track which slots have nodes and apply to the shadowRoot
         * column wrappers. This helps with trasitions and animations
         */

      }, {
        key: "_slotMonitor",
        value: function _slotMonitor(e) {
          // sanity, we have a local slot
          var eventPath = (0, _utils.normalizeEventPath)(e);

          if (eventPath[0] && eventPath[0].assignedNodes && eventPath[0].assignedNodes().length && eventPath[0].parentNode && eventPath[0].parentNode.classList) {
            // has nodes so we can make sure to track this elsewhere
            eventPath[0].parentNode.classList.add("has-nodes");
          } else if (eventPath[0].parentNode && eventPath[0].parentNode.classList) {
            eventPath[0].parentNode.classList.remove("has-nodes");
          }
        }
        /**
         * Determines if the item can move a set number of slots.
         *
         * @param {object} the item
         * @param {number} -1 for left or +1 for right
         * @returns {boolean} if the item can move a set number of slots
         */

      }, {
        key: "canMoveSlot",
        value: function canMoveSlot(item, before) {
          var dir = before ? -1 : 1,
              order = this.this._getSlotOrder(item),
              containers = babelHelpers.toConsumableArray(this.shadowRoot.querySelectorAll("[data-layout-order]")).map(function (container) {
            return parseInt(container.getAttribute("data-layout-order") || -1);
          }).sort(function (a, b) {
            return a - b;
          }),
              dest = order[1] + dir;

          return dest >= containers[0] && dest <= containers[containers.length - 1];
        }
        /**
         * Moves an item a set number of slots.
         *
         * @param {object} the item
         * @param {number} -1 for left or +1 for right
         */

      }, {
        key: "moveSlot",
        value: function moveSlot(item, before) {
          var dir = before ? -1 : 1,
              order = this.this._getSlotOrder(item),
              dest = order[1] + dir,
              container = this.shadowRoot.querySelector("[data-layout-order=".concat(dest, "]")),
              slot = container.getAttribute("data-layout-slotname");

          item.setAttribute("slot", slot);
        }
        /**
         * Validate the slot name
         */

      }, {
        key: "validateElementSlot",
        value: function validateElementSlot(node) {
          return this.validElementSlots().includes(node.getAttribute("slot"));
        }
      }, {
        key: "validElementSlots",
        value: function validElementSlots() {
          return this.shadowRoot ? babelHelpers.toConsumableArray(this.shadowRoot.querySelectorAll("[data-layout-order]")).map(function (container) {
            return container.getAttribute("data-layout-slotname");
          }) : [];
        }
        /**
         * Sort children based on slot order
         */

      }, {
        key: "__sortChildren",
        value: function () {
          var _sortChildren = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var _this4 = this;

            var children;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    this.__sorting = true;
                    _context.prev = 1;
                    // select all direct children w/ a slot attribute and convert to an Array
                    children = Array.prototype.reduce.call(this.querySelectorAll("[slot]"), function (acc, e) {
                      return acc;
                    }, []); // sort the children by slot id being low to high

                    children = children.sort(function (a, b) {
                      if (this._getSlotOrder(a) < this._getSlotOrder(b)) {
                        return -1;
                      }

                      return 1;
                    }); // loop through and append these back into the grid plate.
                    // which will put them in the right order

                    _context.next = 6;
                    return children.forEach(function (el) {
                      // sanity check that we only move things that are a direct child
                      if (el.parentNode === _this4) {
                        _this4.appendChild(el);
                      }
                    });

                  case 6:
                    _context.next = 11;
                    break;

                  case 8:
                    _context.prev = 8;
                    _context.t0 = _context["catch"](1);
                    console.warn(_context.t0);

                  case 11:
                    this.__sorting = false;

                  case 12:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[1, 8]]);
          }));

          function __sortChildren() {
            return _sortChildren.apply(this, arguments);
          }

          return __sortChildren;
        }()
      }], [{
        key: "styles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(_class), "styles", this) || []), [(0, _index.css)(_templateObject_d6f2bd508e0011ed99ce491205e67b1d || (_templateObject_d6f2bd508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          :host {\n            display: block;\n            --hax-layout-slotted-active-outline-color: var(\n              --hax-contextual-action-hover-color\n            );\n          }\n          :host([ready]) [data-layout-slotname] {\n            transition: var(\n              --hax-layout-container-transition,\n              0.5s width ease-in-out,\n              0.5s padding ease-in-out,\n              0.5s margin ease-in-out\n            );\n          }\n          :host([data-hax-ray]) [data-layout-slotname].not-shown {\n            display: block;\n            opacity: 0.4;\n            width: 0;\n          }\n          :host([data-hax-ray]) [data-layout-slotname].not-shown.has-nodes {\n            width: 100%;\n            transition: none;\n          }\n          :host([data-hax-ray]) .not-shown:hover {\n            opacity: 1;\n          }\n          :host([data-hax-ray]) .not-shown:hover::before {\n            content: \"Hidden by layout\";\n            position: sticky;\n            display: inline-flex;\n            background-color: black;\n            color: white;\n            padding: 0px 8px;\n            font-size: 12px;\n            line-height: 16px;\n            margin: 12px 13px;\n            float: right;\n            width: 124px;\n          }\n          /** this implies hax editing state is available **/\n          :host([data-hax-ray]) ::slotted(*) {\n            outline: var(--hax-layout-slotted-outline-width, 0px)\n              var(--hax-layout-slotted-outline-style, solid)\n              var(\n                --hax-layout-slotted-outline-color,\n                var(--hax-layout-slotted-faded-color, #eeeeee)\n              );\n            outline-offset: var(--hax-layout-slotted-outline-offset, 0px);\n          }\n          :host([data-hax-ray])\n            ::slotted([contenteditable][data-hax-ray]:empty)::before {\n            content: attr(data-hax-ray);\n            opacity: 0.2;\n            transition: 0.2s all ease-in-out;\n          }\n          :host([data-hax-ray]) ::slotted(*:hover) {\n            outline: var(--hax-layout-slotted-hover-outline-width, 0px)\n              var(--hax-layout-slotted-hover-outline-style, solid)\n              var(\n                --hax-layout-slotted-hover-outline-color,\n                var(--hax-layout-accent-color, #009dc7)\n              );\n          }\n          :host([data-hax-ray]) ::slotted(.hax-active) {\n            outline: var(--hax-layout-slotted-active-outline-width, 1px)\n              var(--hax-layout-slotted-active-outline-style, solid)\n              var(\n                --hax-layout-slotted-active-outline-color,\n                var(--hax-layout-slotted-faded-color, #eeeeee)\n              );\n          }\n          :host([data-hax-ray]) [data-layout-slotname] {\n            outline: var(--hax-layout-container-outline-width, 0px)\n              var(--hax-layout-container-outline-style, solid)\n              var(\n                --hax-layout-container-outline-color,\n                var(--hax-layout-slotted-faded-color, #eeeeee)\n              );\n            outline-offset: var(--hax-layout-container-outline-offset, 2px);\n          }\n          :host([data-hax-ray]) [data-layout-slotname]:hover {\n            outline: var(--hax-layout-container-hover-outline-width, 0px)\n              var(--hax-layout-container-hover-outline-style, solid)\n              var(\n                --hax-layout-container-hover-outline-color,\n                var(--hax-layout-slotted-faded-color, #eeeeee)\n              );\n          }\n          :host([data-hax-ray]) ::slotted(*.hax-hovered)::before {\n            outline: var(--hax-layout-slotted-active-outline-width, 1px)\n              var(--hax-layout-slotted-active-outline-style, solid)\n              var(\n                --hax-layout-slotted-active-outline-color,\n                var(--hax-layout-slotted-faded-color, #eeeeee)\n              );\n            background-color: inherit;\n            content: \" \";\n            width: 100%;\n            display: block;\n            position: relative;\n            margin: -10px 0 0 0;\n            z-index: 2;\n            height: 10px;\n          }\n          :host([data-hax-ray]) ::slotted(img.hax-hovered),\n          :host([data-hax-ray]) ::slotted(*.hax-hovered)::before {\n            background-color: var(\n              --hax-layout-slotted-active-outline-color,\n              var(--hax-layout-accent-color, #009dc7)\n            ) !important;\n            outline: var(--hax-layout-slotted-active-outline-width, 1px)\n              var(--hax-layout-slotted-active-outline-style, solid)\n              var(\n                --hax-layout-slotted-active-outline-color,\n                var(--hax-layout-accent-color, #009dc7)\n              );\n          }\n\n          @media screen and (min-color-index: 0) and(-webkit-min-device-pixel-ratio:0) {\n            :host([data-hax-ray]) ::slotted(*.hax-hovered) {\n              background-color: var(\n                --hax-layout-slotted-active-outline-color,\n                var(--hax-layout-accent-color, #009dc7)\n              ) !important;\n              outline: var(--hax-layout-slotted-active-outline-width, 1px)\n                var(--hax-layout-slotted-active-outline-style, solid)\n                var(\n                  --hax-layout-slotted-active-outline-color,\n                  var(--hax-layout-accent-color, #009dc7)\n                );\n            }\n          }\n        "])))]);
        }
      }, {
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this) || {}), {}, {
            ready: {
              type: Boolean,
              reflect: true
            },
            dataHaxRay: {
              type: String,
              reflect: true,
              attribute: "data-hax-ray"
            },
            haxLayoutContainer: {
              type: Boolean,
              reflect: true,
              attribute: "hax-layout-container"
            }
          });
        }
      }, {
        key: "haxProperties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "haxProperties", this) || {}), {}, {
            type: "grid",
            contentEditable: true
          });
        }
      }]);
      return _class;
    }((0, _schemaBehaviors.SchemaBehaviors)(SuperClass));
  };

  _exports.HaxLayoutBehaviors = HaxLayoutBehaviors;
});