define(["exports", "require", "../../../lit/index.js"], function (_exports, _require, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GameShowQuizModal = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_9e6c4670809211edaa2833647dc78c6c, _templateObject2_9e6c4670809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `game-show-quiz-modal`
   * @element game-show-quiz-modal
   * `Modal for the quiz show`
   *  @microcopy - the mental model for this element
   *  - game show - a display board in the style of Jeopardy
   */
  var GameShowQuizModal = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(GameShowQuizModal, _LitElement);

    var _super = _createSuper(GameShowQuizModal);

    function GameShowQuizModal() {
      var _this;

      babelHelpers.classCallCheck(this, GameShowQuizModal);
      _this = _super.call(this);
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-dialog/paper-dialog.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(GameShowQuizModal, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_9e6c4670809211edaa2833647dc78c6c || (_templateObject_9e6c4670809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <paper-dialog modal>\n        <h2>", "</h2>\n        <div class=\"content\"><slot name=\"content\"></slot></div>\n        <div class=\"buttons\"><slot name=\"buttons\"></slot></div>\n      </paper-dialog>\n    "])), this.title);
      }
      /**
       * Basic bridge to the toggle function in paper-dialog
       */

    }, {
      key: "toggle",
      value: function toggle() {
        this.shadowRoot.querySelector("paper-dialog").toggle();
        setTimeout(function () {
          window.dispatchEvent(new Event("resize"));
        }, 100);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_9e6c4670809211edaa2833647dc78c6c || (_templateObject2_9e6c4670809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        paper-dialog:not(:defined) {\n          display: none;\n        }\n        paper-dialog {\n          min-width: 60%;\n          top: 2%;\n          bottom: 2%;\n          margin: 0;\n          padding: 0;\n          left: 8%;\n          right: 8%;\n          position: fixed;\n          overflow: hidden;\n        }\n        .content {\n          font-size: 16px;\n          overflow: scroll;\n          min-height: 60vh;\n          height: 80vh;\n          margin: 0;\n          padding: 0;\n        }\n        h2 {\n          font-size: 24px;\n          background-color: var(--game-show-bg-color);\n          color: var(--game-show-text-color);\n          margin: 0;\n          padding: 8px;\n          text-align: center;\n        }\n        .buttons {\n          font-size: 20px;\n          font-weight: bold;\n          background-color: var(--game-show-bg-color);\n          bottom: 0;\n          position: absolute;\n          left: 0;\n          right: 0;\n        }\n        .buttons ::slotted(*) {\n          width: 50%;\n          margin: 0 auto;\n          color: var(--game-show-bg-color);\n          background-color: var(--game-show-text-color);\n        }\n        .buttons ::slotted(*[disabled]) {\n          background: #eaeaea;\n          color: #a8a8a8;\n        }\n        .buttons ::slotted(#continue) {\n          color: var(--simple-colors-default-theme-blue-11);\n          background-color: var(--simple-colors-default-theme-blue-1);\n        }\n        @media screen and (max-width: 600px) {\n          paper-dialog {\n            top: 0;\n            bottom: 0;\n            left: 0;\n            right: 0;\n          }\n          h2 {\n            font-size: 20px;\n          }\n          .buttons {\n            font-size: 12px;\n          }\n          .buttons ::slotted(*) {\n            width: 100%;\n          }\n          .content {\n            font-size: 12px;\n          }\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "game-show-quiz-modal";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          title: {
            type: String
          }
        };
      }
    }]);
    return GameShowQuizModal;
  }(_index.LitElement);

  _exports.GameShowQuizModal = GameShowQuizModal;
  window.customElements.define(GameShowQuizModal.tag, GameShowQuizModal);
});