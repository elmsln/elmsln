define(["exports", "../../../lit/index.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-lite.js"], function (_exports, _index, _simpleIcons, _simpleIconLite) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EbookButton = void 0;

  var _templateObject_9d182820809211edaa2833647dc78c6c, _templateObject2_9d182820809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var EbookButton = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(EbookButton, _LitElement);

    var _super = _createSuper(EbookButton);

    function EbookButton() {
      var _this;

      babelHelpers.classCallCheck(this, EbookButton);
      _this = _super.call(this);
      _this.link = "";
      _this.title = "";
      _this.icon = "icons:book";
      return _this;
    }

    babelHelpers.createClass(EbookButton, [{
      key: "haxHooks",
      value:
      /**
       * Implements haxHooks to tie into life-cycle if hax exists.
       */
      function haxHooks() {
        return {
          editModeChanged: "haxeditModeChanged",
          activeElementChanged: "haxactiveElementChanged"
        };
      }
      /**
       * double-check that we are set to inactivate click handlers
       * this is for when activated in a duplicate / adding new content state
       */

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        if (val) {
          this._haxstate = val;
        }
      }
      /**
       * Set a flag to test if we should block link clicking on the entire card
       * otherwise when editing in hax you can't actually edit it bc its all clickable.
       * if editMode goes off this helps ensure we also become clickable again
       */

    }, {
      key: "haxeditModeChanged",
      value: function haxeditModeChanged(val) {
        this._haxstate = val;
      }
      /**
       * special support for HAX since the whole card is selectable
       */

    }, {
      key: "_clickLink",
      value: function _clickLink(e) {
        if (this._haxstate) {
          // do not do default
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
        }
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_9d182820809211edaa2833647dc78c6c || (_templateObject_9d182820809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"button wrapper\">\n        <a\n          href=\"", "\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          @click=\"", "\"\n        >\n          <button id=\"book\">\n            <simple-icon-lite icon=\"", "\"></simple-icon-lite>\n            <div class=\"title\">", "</div>\n          </button>\n        </a>\n      </div>\n    "])), this.link, this._clickLink, this.icon, this.title);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          link: {
            type: String
          },
          title: {
            type: String
          },
          icon: {
            type: String
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Ebook button",
            description: "A button that links to an Ebook.",
            icon: "icons:book",
            color: "blue",
            groups: ["education", "link"],
            handles: [{
              type: "link",
              source: "link",
              title: "title"
            }],
            meta: {
              author: "HAXTheWeb core team"
            }
          },
          settings: {
            configure: [{
              property: "title",
              title: "Title",
              description: "The title of the button.",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "link",
              title: "Link",
              description: "The link to redirect to on click.",
              inputMethod: "textfield",
              icon: "editor:insert-link"
            }, {
              property: "icon",
              title: "Icon",
              description: "Icon to represent this link",
              inputMethod: "textfield",
              icon: "editor:insert-link"
            }],
            advanced: []
          },
          demoSchema: [{
            tag: "ebook-button",
            properties: {
              title: "Access Ebook",
              icon: "icons:book"
            },
            content: ""
          }]
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_9d182820809211edaa2833647dc78c6c || (_templateObject2_9d182820809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n          --paper-button-click-state: #000;\n          --paper-button-title: #000;\n          --link-color: #aeaeae;\n        }\n\n        button {\n          min-height: 48px;\n          text-transform: none;\n          padding: 10px 25px 10px 0;\n        }\n\n        button:active,\n        button:focus,\n        button:hover {\n          color: var(--paper-button-click-state);\n          outline: 2px solid black;\n          cursor: pointer;\n        }\n\n        simple-icon-lite {\n          height: 55px;\n          width: 55px;\n          margin-right: 5px;\n        }\n\n        .title {\n          color: var(--paper-button-title);\n          font-size: 16px;\n          font-weight: bold;\n          display: inline-flex;\n        }\n        a,\n        a:-webkit-any-link {\n          display: block;\n          color: var(--link-color);\n          text-decoration: none;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "ebook-button";
      }
    }]);
    return EbookButton;
  }(_index.LitElement);

  _exports.EbookButton = EbookButton;
  customElements.define(EbookButton.tag, EbookButton);
});