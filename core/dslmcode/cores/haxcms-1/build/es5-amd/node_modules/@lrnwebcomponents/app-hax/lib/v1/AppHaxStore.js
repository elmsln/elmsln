define(["exports", "require", "../../../utils/utils.js", "../../../../mobx/dist/mobx.esm.js", "../../../replace-tag/lib/PerformanceDetect.js"], function (_exports, _require, _utils, _mobxEsm, _PerformanceDetect) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.store = void 0;
  _require = _interopRequireWildcard(_require);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  (0, _mobxEsm.configure)({
    enforceActions: false,
    useProxies: "ifavailable"
  }); // strict mode off

  var Store = /*#__PURE__*/function () {
    function Store() {
      babelHelpers.classCallCheck(this, Store);
      this.badDevice = null;
      this.evaluateBadDevice();
      this.location = null;
      this.token = null;
      this.items = null;
      this.refreshSiteList = true;
      this.createSiteSteps = false;
      this.appSettings = window.appSettings || {}; // defer to local if we have it for JWT

      if (this.appSettings.jwt) {
        (0, _utils.localStorageSet)("jwt", this.appSettings.jwt);
      }

      this.jwt = (0, _utils.localStorageGet)("jwt", null); // placeholder for when the actual API Backend gets plugged in here

      this.AppHaxAPI = {};
      this.newSitePromiseList = [function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../i18n-manager/lib/I18NMixin.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../wc-autoload/wc-autoload.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../replace-tag/replace-tag.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../utils/utils.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../grid-plate/grid-plate.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../simple-fields/simple-fields.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../../mobx/dist/mobx.esm.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../h-a-x/h-a-x.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/haxcms-site-store.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/haxcms-site-router.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/haxcms-site-builder.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/HAXCMSLitElementTheme.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/haxcms-site-editor.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/haxcms-editor-builder.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/haxcms-site-editor-ui.js"], res, rej);
        });
      }];
      this.appEl = null;
      this.appReady = false;
      this.soundStatus = (0, _utils.localStorageGet)("app-hax-soundStatus", true); // If user is new, make sure they are on step 1

      this.appMode = "search";
      this.activeSiteOp = null;
      this.activeSiteId = null;
      this.baseRoutes = [{
        path: "createSite-step-1",
        component: "fake",
        step: 1,
        name: "step-1",
        label: "New Journey",
        statement: "What sort of journey is it?",
        title: "Step 1: Create"
      }, {
        path: "createSite-step-2",
        component: "fake",
        step: 2,
        name: "step-2",
        label: "Structure",
        statement: "How is this organized?",
        title: "Step 2: Structure"
      }, {
        path: "createSite-step-3",
        component: "fake",
        step: 3,
        name: "step-3",
        label: "Theme select",
        statement: "What your :structure feels like?",
        title: "Step 3: Theme"
      }, {
        path: "createSite-step-4",
        component: "fake",
        step: 4,
        name: "step-4",
        label: "Name",
        statement: "What do you want to call your :structure?",
        title: "Step 4: Name"
      }, {
        path: "createSite-step-5",
        component: "fake",
        step: 5,
        name: "step-5",
        label: "Building..",
        statement: "Getting your :structure ready to launch",
        title: "Step 5: Building site"
      }, {
        path: "home",
        component: "fake",
        name: "home",
        label: "Welcome back",
        statement: "Let's go on a HAX Journey",
        title: "Home"
      }, {
        path: "index.html",
        component: "fake",
        name: "home",
        label: "Welcome back",
        statement: "Let's go on a HAX Journey",
        title: "Home"
      }, {
        path: "index.php",
        component: "fake",
        name: "home",
        label: "Welcome back",
        statement: "Let's go on a HAX Journey",
        title: "Home"
      }, {
        path: "search",
        component: "fake",
        name: "search",
        label: "Search",
        statement: "Discover active adventures",
        title: "Search sites"
      }, {
        path: "/",
        component: "fake",
        name: "welcome",
        label: "Welcome",
        statement: "Let's build something awesome!",
        title: "Home"
      }, {
        path: "/(.*)",
        component: "fake",
        name: "404",
        label: "404 :[",
        statement: "it's not you.. it's me",
        title: "FoUr Oh FoUr"
      }];
      this.routes = this.baseRoutes;
      this.siteReady = false;
      this.manifest = {};
      this.searchTerm = "";
      this.user = {
        name: ""
      };
      this.site = !(0, _utils.localStorageGet)("app-hax-site") ? {
        structure: null,
        type: null,
        theme: null,
        name: null
      } : (0, _utils.localStorageGet)("app-hax-site");
      this.step = this.stepTest(null);
      this.darkMode = !(0, _utils.localStorageGet)("app-hax-darkMode") ? false : (0, _utils.localStorageGet)("app-hax-darkMode");
      (0, _mobxEsm.makeObservable)(this, {
        // internal state for routing
        location: _mobxEsm.observable.ref,
        // router location in url
        routes: _mobxEsm.observable,
        // routes that are valid
        // internal state requirements
        appSettings: _mobxEsm.observable,
        // endpoint connections to the backend app
        appReady: _mobxEsm.observable,
        // all ready to paint
        appMode: _mobxEsm.observable,
        // mode the app is in. search, create, etc
        createSiteSteps: _mobxEsm.observable,
        // if we're making a site or in another part of app
        step: _mobxEsm.observable,
        // step that we're on in our build
        site: _mobxEsm.observable,
        // information about the site being created
        newSitePromiseList: _mobxEsm.observable,
        items: _mobxEsm.observable,
        // site items / structure from a docx micro if option selected
        // user related data
        jwt: _mobxEsm.observable,
        // JSON web token
        token: _mobxEsm.observable,
        // XSS prevention token
        manifest: _mobxEsm.observable,
        // sites the user has access to
        user: _mobxEsm.observable,
        // user object like name after login
        // user preferences
        searchTerm: _mobxEsm.observable,
        // current search term for filtering own list of sites
        darkMode: _mobxEsm.observable,
        // dark mode pref
        soundStatus: _mobxEsm.observable,
        // toggle sounds on and off
        activeItem: _mobxEsm.computed,
        // active item is route
        isNewUser: _mobxEsm.computed,
        // if they are new so we can auto kick to createSiteSteps if needed
        isLoggedIn: _mobxEsm.computed,
        // basic bool for logged in
        badDevice: _mobxEsm.observable,
        // if we have a terrible device or not based on detected speeds
        activeSiteOp: _mobxEsm.observable,
        // active operation for sites if working with them
        activeSiteId: _mobxEsm.observable,
        // active Item if working w/ sites
        activeSite: _mobxEsm.computed,
        // activeSite from ID
        siteReady: _mobxEsm.observable,
        // implied that we had a site and then it got built and we can leave app
        refreshSiteList: _mobxEsm.observable // used to force state to refresh sitelisting

      });
    }

    babelHelpers.createClass(Store, [{
      key: "setPageTitle",
      value: function setPageTitle(title) {
        if (document.querySelector("title")) {
          document.querySelector("title").innerText = "HAX: ".concat(title);
        }
      } // refresh

    }, {
      key: "refreshSiteListing",
      value: function refreshSiteListing() {
        this.refreshSiteList = false; // @todo this causes a reactive feedbackloop in

        this.refreshSiteList = true;
      } // filter to just get data about THIS site

    }, {
      key: "activeSite",
      get: function get() {
        var _this = this;

        if (this.activeSiteId && this.manifest && this.manifest.items) {
          var sites = this.manifest.items.filter(function (item) {
            return item.id === _this.activeSiteId;
          });

          if (sites.length === 1) {
            return sites.pop();
          }

          return null;
        }
      } // see if this device is poor

    }, {
      key: "evaluateBadDevice",
      value: function () {
        var _evaluateBadDevice = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _PerformanceDetect.DeviceDetails.badDevice();

                case 2:
                  this.badDevice = _context.sent;

                  if (this.badDevice === true) {
                    this.soundStatus = false;
                  }

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function evaluateBadDevice() {
          return _evaluateBadDevice.apply(this, arguments);
        }

        return evaluateBadDevice;
      }() // validate if they are on the right step via state
      // otherwise we need to force them to the correct step

    }, {
      key: "stepTest",
      value: function stepTest(current) {
        if (this.site.structure === null && current !== 1) {
          return 1;
        } else if (this.site.structure !== null && this.site.type === null && current !== 2) {
          return 2;
        } else if (this.site.structure !== null && this.site.type !== null && this.site.theme === null && current !== 3) {
          return 3;
        } else if (this.site.structure !== null && this.site.type !== null && this.site.theme !== null && this.site.name === null && current !== 4) {
          return 4;
        } else if (this.site.structure !== null && this.site.type !== null && this.site.theme !== null && this.site.name !== null) {
          return 5;
        }

        return current;
      }
    }, {
      key: "isLoggedIn",
      get: function get() {
        if (this.appReady && this.AppHaxAPI) {
          return this.jwt !== "null" && this.jwt;
        }
      }
    }, {
      key: "isNewUser",
      get: function get() {
        if (this.manifest && this.manifest.items) {
          return this.manifest.items.length === 0;
        }
      } // site{ structure, type, theme } (course, portfolio, buz, colors)

    }, {
      key: "activeItem",
      get: function get() {
        var _this2 = this;

        if (this.routes.length > 0 && this.location && this.location.route) {
          if (this.createSiteSteps) {
            var routeItem = this.routes.find(function (item) {
              if (item.step === undefined || item.step !== _this2.step) {
                return false;
              }

              return true;
            });
            return routeItem;
          } else {
            return this.location.route;
          }
        }
      } // centralize toast messages

    }, {
      key: "toast",
      value: function toast(msg) {
        var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3000;
        var extras = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        window.dispatchEvent(new CustomEvent("app-hax-toast-show", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: _objectSpread({
            text: msg,
            duration: duration
          }, extras)
        }));
      }
    }]);
    return Store;
  }();
  /**
   * Central store
   */


  var store = new Store();
  _exports.store = store;
});