define(["exports", "../../../../lit/index.js", "../../simple-colors.js"], function (_exports, _index, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.simpleColorsSwatchInfo = void 0;

  var _templateObject_ea0cb9408e0011ed99ce491205e67b1d, _templateObject2_ea0cb9408e0011ed99ce491205e67b1d, _templateObject3_ea0cb9408e0011ed99ce491205e67b1d, _templateObject4_ea0cb9408e0011ed99ce491205e67b1d, _templateObject5_ea0cb9408e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-colors-swatch-info`
   * `A tool to document of all the colors in simple-colors`
   *
  ### Styling
  See demo of "all of the colors" (`demo/colors.html`) for styling.
   * 
   * @extends SimpleColors
  
   * @demo ./demo/colors.html demo
   * @see "../../simple-colors.js"
   * @see "../simple-colors-picker.js"
   */
  var simpleColorsSwatchInfo = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(simpleColorsSwatchInfo, _SimpleColors);

    var _super = _createSuper(simpleColorsSwatchInfo);

    function simpleColorsSwatchInfo() {
      var _this;

      babelHelpers.classCallCheck(this, simpleColorsSwatchInfo);
      _this = _super.call(this);
      _this.swatchId = "grey_0";
      _this.swatchName = "grey-1";
      return _this;
    }
    /**
     * properties available to the custom element for data binding
     */


    babelHelpers.createClass(simpleColorsSwatchInfo, [{
      key: "render",
      value: // render function
      function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_ea0cb9408e0011ed99ce491205e67b1d || (_templateObject_ea0cb9408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <table\n        summary=\"Each row represents a CSS variable or class with a description of what it does without the dark attribute and with the attribute.\"\n      >\n        <caption>\n          CSS Variables and Classes for ", "\n        </caption>\n        <thead>\n          <tr>\n            <th scope=\"col\">Variable Name</th>\n            <th scope=\"col\">Color</th>\n            <th scope=\"col\">With <tt>dark</tt> Attribute</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th scope=\"row\">\n              --simple-colors-default-theme-", "\n            </th>\n            <td style=\"", "\">default color</td>\n            <td style=\"", "\">inverted color</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">--simple-colors-fixed-theme-", "</th>\n            <td style=\"", "\">default color</td>\n            <td style=\"", "\">fixed color</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <table\n        summary=\"A list of colors that meet WCAG 2.0 AA contrast requirements. Each contains all the contrasting shades for a given color, based on whether or not the text is regular or large.\"\n      >\n        <caption>\n          WCAG 2.0 AA Contrast with ", "\n        </caption>\n        <thead>\n          <tr>\n            <th scope=\"col\">Color Name</th>\n            <th scope=\"col\">Regular Text</th>\n            <th scope=\"col\">Large Text*</th>\n          </tr>\n        </thead>\n        <tbody>\n          ", "\n        </tbody>\n      </table>\n      <p>\n        <small\n          >* Large text is defined as bold text at least 14pt or normal text at\n          least 18pt</small\n        >\n      </p>\n    "])), this.swatchName, this.swatchName, this._getBg(this.swatchId), this._getInverseBg(this.swatchId), this.swatchName, this._getBg(this.swatchId), this._getBg(this.swatchId), this.swatchName, this._getOptions(this.colors).map(function (color) {
          return (0, _index.html)(_templateObject2_ea0cb9408e0011ed99ce491205e67b1d || (_templateObject2_ea0cb9408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n              <tr>\n                <th scope=\"row\">", "</th>\n                <td>\n                  ", "\n                </td>\n                <td>\n                  ", "\n                </td>\n              </tr>\n            "])), color, _this2._getAa(_this2.swatchId, color).map(function (contrast) {
            return (0, _index.html)(_templateObject3_ea0cb9408e0011ed99ce491205e67b1d || (_templateObject3_ea0cb9408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                        <span\n                          class=\"contrast\"\n                          style=\"", "\"\n                          >", "-", "</span\n                        >\n                      "])), _this2._getContrastBg(color, contrast), color, contrast);
          }), _this2._getAaLarge(_this2.swatchId, color).map(function (contrast) {
            return (0, _index.html)(_templateObject4_ea0cb9408e0011ed99ce491205e67b1d || (_templateObject4_ea0cb9408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                        <span\n                          class=\"contrast\"\n                          style=\"", "\"\n                          >", "-", "</span\n                        >\n                      "])), _this2._getContrastBg(color, contrast), color, contrast);
          }));
        }));
      }
    }, {
      key: "_getAa",
      value:
      /**
       * given a particular swatch/shade of color,
       * returns all shades of another color that are WCAG 2.0AA-compliant
       *
       * @param {string} a swatch id (`color_index`)
       * @param {string} another color's name, eg. `pink`
       * @param {boolean} get contrasting shades that work for large text? eg. (bold && >= 14pt) || >= 18pt
       * @returns {array} the array indexes for the contrasting shades
       */
      function _getAa(swatchId, color) {
        var aaLarge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var data = swatchId.split("_"),
            index = parseInt(data[1]);
        return this.getContrastingShades(false, data[0], index, color);
      }
      /**
       * given a particular swatch/shade of color,
       * returns all shades of another color that are
       * large text-WCAG 2.0AA-compliant, eg. (bold && >= 14pt) || >= 18pt
       *
       * @param {string} a swatch id (`color_index`)
       * @param {string} another color's name, eg. `pink`
       * @returns {array} the array indexes for the contrasting shades
       */

    }, {
      key: "_getAaLarge",
      value: function _getAaLarge(swatchId, color) {
        return this._getAa(swatchId, color, true);
      }
      /**
       * gets a style where swatch color is the background-color,
       * eg. `background: var(--simple-colors-default-theme-red-11); color: var(--simple-colors-default-theme-grey-1);`
       *
       * @param {string} a swatch id (`color_index`)
       * @returns {string} the style
       */

    }, {
      key: "_getBg",
      value: function _getBg(swatchId) {
        var inverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var colors = this._getColors(swatchId, inverse);

        return "background: " + colors[0] + "; color: " + colors[1] + ";";
      }
      /**
       * gets a style where swatch color is the background-color in dark mode,
       * eg. `background: var(--simple-colors-default-theme-red-2); color: var(--simple-colors-default-theme-grey-12);`
       *
       * @param {string} a swatch id (`color_index`)
       * @returns {string} the style
       */

    }, {
      key: "_getInverseBg",
      value: function _getInverseBg(swatchId) {
        return this._getBg(swatchId, true);
      }
      /**
       * gets the list of color names from the colors object
       *
       * @param {object} the colors object
       * @returns {array} the array of color names
       */

    }, {
      key: "_getOptions",
      value: function _getOptions(obj) {
        return Object.keys(obj);
      }
      /**
       * gets a background color based on a color and a shade
       *
       * @param {string} a color name, eg. `red`
       * @param  {number} the shade, eg., `11`
       * @returns {string} the style, eg. `background: var(--simple-colors-default-theme-red-11); color: var(--simple-colors-default-theme-grey-1);`
       */

    }, {
      key: "_getContrastBg",
      value: function _getContrastBg(color, shade) {
        return this._getBg(color + "_" + (parseInt(shade) - 1));
      }
      /**
       * given a swatch id, gets the color variable
       * and a variable for the highest contrasting grey
       *
       * @param {string} swatchId (`color_index`)
       * @param {boolean} inverse the color for dark mode?
       * @returns {array} the color variables ([color, contrasting color])
       */

    }, {
      key: "_getColors",
      value: function _getColors(swatchId) {
        var inverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var data = swatchId.split("_"),
            index = inverse ? 11 - parseInt(data[1]) : parseInt(data[1]);
        return [this.colors[data[0]][index], this.colors.grey[index > 5 ? 0 : 11]];
      }
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}

    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(simpleColorsSwatchInfo), "styles", this)), [(0, _index.css)(_templateObject5_ea0cb9408e0011ed99ce491205e67b1d || (_templateObject5_ea0cb9408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          margin: 15px 0;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host table {\n          width: 100%;\n          border: 1px solid black;\n          border-radius: 3px;\n          border-collapse: collapse;\n          margin: 0 0 15px;\n        }\n        :host table caption {\n          font-weight: bold;\n          background-color: #222;\n          color: white;\n        }\n        :host table th {\n          background-color: #e0e0e0;\n        }\n        :host table caption,\n        :host table th,\n        :host table td {\n          padding: 5px;\n          border: 1px solid black;\n          text-align: left;\n          line-height: 160%;\n        }\n        :host table td span {\n          padding: 5px;\n          white-space: nowrap;\n          margin: 5px 0;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The id of the swatch (`color_index`)
           */
          swatchId: {
            attribute: "swatch-id",
            type: String,
            reflect: true
          },

          /**
           * The swatch name (`color-shade`)
           */
          swatchName: {
            attribute: "swatch-name",
            type: String,
            reflect: true
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-colors-swatch-info";
      }
    }]);
    return simpleColorsSwatchInfo;
  }(_simpleColors.SimpleColors);

  _exports.simpleColorsSwatchInfo = simpleColorsSwatchInfo;
  customElements.define(simpleColorsSwatchInfo.tag, simpleColorsSwatchInfo);
});