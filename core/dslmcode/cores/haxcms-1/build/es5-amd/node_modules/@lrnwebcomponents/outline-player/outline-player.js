define(["exports", "require", "../../lit/index.js", "../haxcms-elements/lib/core/HAXCMSLitElementTheme.js", "../simple-colors/simple-colors.js", "../haxcms-elements/lib/core/haxcms-site-store.js", "../../mobx/dist/mobx.esm.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button-lite.js", "../../@polymer/polymer/lib/elements/custom-style.js"], function (_exports, _require, _index, _HAXCMSLitElementTheme, _simpleColors, _haxcmsSiteStore, _mobxEsm, _simpleIcon, _simpleIcons, _simpleIconButtonLite, _customStyle) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.OutlinePlayer = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_6efb0ac0809211edaa2833647dc78c6c, _templateObject2_6efb0ac0809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `outline-player`
   * @element outline-player
   * `A basic outline presentation`
   *
   * @demo demo/index.html
   */
  var OutlinePlayer = /*#__PURE__*/function (_SimpleColorsSuper) {
    babelHelpers.inherits(OutlinePlayer, _SimpleColorsSuper);

    var _super = _createSuper(OutlinePlayer);

    /**
     * HTMLElement
     */
    function OutlinePlayer() {
      var _this;

      babelHelpers.classCallCheck(this, OutlinePlayer);
      _this = _super.call(this);
      _this.__disposer = [];
      _this.closed = false;
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/app-layout/app-drawer/app-drawer.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/app-layout/app-drawer-layout/app-drawer-layout.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/navigation/site-breadcrumb.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/navigation/site-menu.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/navigation/site-menu-button.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/site/site-print-button.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/site/site-title.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/active-item/site-active-title.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/active-item/site-git-corner.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/layout/site-modal.js"], res, rej);
      });
      return _this;
    }
    /**
     * Delay importing site-search until we click to open it directly
     */


    babelHelpers.createClass(OutlinePlayer, [{
      key: "siteModalClick",
      value: function siteModalClick(e) {
        // prettier-ignore
        new Promise(function (res, rej) {
          return _require.default(["../haxcms-elements/lib/ui-components/site/site-search.js"], res, rej);
        }).then(function (m) {
          // weird looking but forces focus when it opens the search form
          window.SimpleModal.requestAvailability().querySelector("site-search").shadowRoot.querySelector("simple-fields-field").focus();
        });
      } // render function

    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_6efb0ac0809211edaa2833647dc78c6c || (_templateObject_6efb0ac0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <site-git-corner part=\"git-corner-btn\"></site-git-corner>\n      <custom-style>\n        <style>\n          app-drawer {\n            --app-drawer-content-container: {\n              overflow: hidden;\n            }\n          }\n        </style>\n      </custom-style>\n      <app-drawer-layout\n        .narrow=\"", "\"\n        @narrow-changed=\"", "\"\n      >\n        <nav>\n          <app-drawer\n            id=\"drawer\"\n            swipe-open=\"\"\n            slot=\"drawer\"\n            .opened=\"", "\"\n            @opened-changed=\"", "\"\n          >\n            <site-menu></site-menu>\n          </app-drawer>\n        </nav>\n        <div id=\"content\">\n          <header>\n            <div class=\"nav-btns\">\n              <simple-icon-button-lite\n                icon=\"menu\"\n                @click=\"", "\"\n              ></simple-icon-button-lite>\n              <site-modal\n                @site-modal-click=\"", "\"\n                ?disabled=\"", "\"\n                id=\"searchmodalbtn\"\n                icon=\"icons:search\"\n                title=\"Search site\"\n                button-label=\"Search\"\n                part=\"search-btn\"\n              >\n                <site-search></site-search>\n              </site-modal>\n              <site-print-button part=\"print-btn\"></site-print-button>\n              <site-menu-button\n                type=\"prev\"\n                position=\"bottom\"\n              ></site-menu-button>\n              <site-menu-button\n                type=\"next\"\n                position=\"bottom\"\n              ></site-menu-button>\n            </div>\n            <site-breadcrumb part=\"page-breadcrumb\"></site-breadcrumb>\n            <site-active-title part=\"page-title\"></site-active-title>\n            <div><slot name=\"title\"></slot></div>\n          </header>\n          <main>\n            <article id=\"contentcontainer\">\n              <section id=\"slot\"><slot></slot></section>\n            </article>\n          </main>\n        </div>\n      </app-drawer-layout>\n    "])), this.narrow, this._narrowChanged, this.opened, this._openedChanged, this._toggleMenu, this.siteModalClick, this.editMode);
      }
    }, {
      key: "_narrowChanged",
      value: function _narrowChanged(e) {
        this.narrow = e.detail.value;
      }
    }, {
      key: "_openedChanged",
      value: function _openedChanged(e) {
        this.opened = e.detail.value;
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "updated",
      value:
      /**
       * LitElement properties changed
       */
      function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(OutlinePlayer.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(OutlinePlayer.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "activeId") {
            _this2._activeIdChanged(_this2[propName], oldValue);
          }

          if (propName == "closed") {
            _this2.dispatchEvent(new CustomEvent("closed-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
      /**
       * Link menu button to open and closing the side panel.
       */

    }, {
      key: "_toggleMenu",
      value: function _toggleMenu(e) {
        this.shadowRoot.querySelector("#drawer").toggle(); // allow styling to trigger based on open status

        this.closed = !this.shadowRoot.querySelector("#drawer").opened; // kind of silly it doesn't just work this way but
        // app-panel doesn't make any assumptions about how
        // to handle the layout when it closes
        // trick browser into thinking we just reized

        window.dispatchEvent(new Event("resize"));
      }
      /**
       * active id has changed.
       */

    }, {
      key: "_activeIdChanged",
      value: function _activeIdChanged(newValue, oldValue) {
        // close menu if it's narrow and something new is picked
        if (this.opened && this.narrow) {
          this.shadowRoot.querySelector("#drawer").toggle();
        }

        window.scrollTo({
          top: 0,
          left: 0,
          behavior: "smooth"
        });
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(OutlinePlayer.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(OutlinePlayer.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        (0, _mobxEsm.autorun)(function (reaction) {
          _this3.activeId = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.activeId);

          _this3.__disposer.push(reaction);
        });
      }
      /**
       * HTMLElement
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(OutlinePlayer.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement style render
       */
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(OutlinePlayer), "styles", this)), [(0, _index.css)(_templateObject2_6efb0ac0809211edaa2833647dc78c6c || (_templateObject2_6efb0ac0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-family: libre baskerville;\n          position: relative;\n          overflow: hidden;\n          --outline-player-min-height: 100vh;\n          --app-drawer-width: 300px;\n          --outline-player-dark: #222222;\n          --outline-player-light: #f8f8f8;\n          background-color: var(--outline-player-light);\n        }\n\n        simple-icon-button-lite:not(:defined),\n        site-breadcrumb:not(:defined),\n        site-rss-button:not(:defined),\n        site-print-button:not(:defined),\n        site-menu-button:not(:defined),\n        site-modal:not(:defined),\n        site-git-corner:not(:defined),\n        site-menu-button:not(:defined) {\n          display: none;\n        }\n\n        :host([closed]) {\n          --app-drawer-width: 0px;\n        }\n\n        :host,\n        :host * ::slotted(*) {\n          line-height: 1.8;\n        }\n        :host ul,\n        :host * ::slotted(ul),\n        :host ol,\n        :host * ::slotted(ol) {\n          padding-left: 20px;\n          margin-left: 20px;\n        }\n        :host ul,\n        :host * ::slotted(ul) {\n          list-style-type: disc;\n        }\n        :host li,\n        :host * ::slotted(li) {\n          margin-bottom: 6px;\n        }\n\n        h1 {\n          font-size: 36px;\n        }\n\n        h2 {\n          font-size: 32px;\n        }\n\n        h3 {\n          font-size: 28px;\n        }\n\n        p {\n          line-height: 26px;\n          min-height: 26px;\n        }\n\n        a,\n        a:visited,\n        a:active {\n          color: #000;\n        }\n\n        a:hover {\n          color: #2196f3;\n        }\n\n        ul li {\n          padding-bottom: 24px;\n          line-height: 1.5;\n          color: #424242;\n          max-width: 448px;\n        }\n\n        ul li:last-child {\n          padding-bottom: 16px;\n        }\n\n        app-drawer-layout {\n          min-height: 100vh;\n          min-height: -moz-available; /* WebKit-based browsers will ignore this. */\n          min-height: -webkit-fill-available; /* Mozilla-based browsers will ignore this. */\n          min-height: fill-available;\n          /* if the user has set a specific value then override the defaults */\n          min-height: var(--outline-player-min-height);\n        }\n\n        outline-player-navigation {\n          --outline-player-dark: var(--outline-player-dark);\n        }\n\n        div[main-title] {\n          margin-left: 8px;\n          font-size: 16px;\n          line-height: 22px;\n          overflow-wrap: break-word;\n          text-overflow: ellipsis;\n          display: inline-block;\n          word-break: break-word;\n        }\n        #content {\n          padding: 8px 8px 8px 64px;\n        }\n\n        /* Required for HAX */\n        :host([edit-mode]) #slot {\n          display: none !important;\n        }\n        :host([edit-mode]) #contentcontainer {\n          padding: 32px 8px 8px 8px;\n        }\n        #contentcontainer {\n          max-width: 840px;\n          display: block;\n          margin: 40px;\n          padding: 0 16px 16px 16px;\n          flex: none;\n          transition: 0.5s opacity ease-in-out;\n        }\n        #contentcontainer h-a-x {\n          margin: 0;\n        }\n        site-menu-button {\n          display: inline-flex;\n        }\n        site-print-button {\n          display: inline-flex;\n        }\n        site-active-title {\n          --site-active-title-margin: 0px;\n          --site-active-title-padding: 0px;\n          margin: 0 0 0 24px;\n          padding: 0;\n          display: block;\n        }\n        @media screen and (max-width: 640px) {\n          #content {\n            padding: 8px 8px 8px 8px;\n          }\n        }\n        app-drawer {\n          box-shadow: 0 0 6px -3px var(--outline-player-dark);\n          overflow: hidden;\n          --app-drawer-scrim-background: rgba(80, 80, 80, 0.8);\n          z-index: 1000000;\n        }\n        .nav-btns {\n          display: flex;\n        }\n        .nav-btns site-menu-button,\n        .nav-btns site-print-button,\n        .nav-btns site-modal,\n        .nav-btns simple-icon-button-lite {\n          display: inline-flex;\n          height: 32px;\n          width: 32px;\n          margin: 0 16px;\n          padding: 0;\n        }\n        site-menu {\n          height: calc(100vh - 64px);\n          color: #000000;\n          padding: 0;\n          background-color: #ffffff;\n          --site-menu-active-color: rgba(0, 0, 0, 0.1);\n          --site-menu-scrolltrack-bg-color: rgba(0, 0, 0, 0.3);\n          --site-menu-bg-shadow: rgba(0, 0, 0, 0.3);\n          --site-menu-bg-color: #fafafa;\n          --site-menu-padding: 0;\n          --site-menu-background-color: #ffffff;\n          --site-menu-color: #000000;\n          --site-menu-container-padding: 0;\n          --site-menu-container-background-color: #ffffff;\n          --site-menu-container-color: #000000;\n          --site-menu-item-active-item-color: #000000;\n        }\n        site-menu-button {\n          --site-menu-button-button-hover-background-color: rgba(0, 0, 0, 0.2);\n        }\n        site-breadcrumb {\n          display: block;\n          margin: 24px 24px 0;\n        }\n        :host([responsive-size=\"xs\"]) site-breadcrumb,\n        :host([responsive-size=\"sm\"]) site-breadcrumb {\n          display: none;\n        }\n        :host([responsive-size=\"xs\"]) site-git-corner {\n          display: none;\n        }\n      "])))]);
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "outline-player";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(OutlinePlayer), "properties", this)), {}, {
          opened: {
            type: Boolean,
            reflect: true
          },
          closed: {
            type: Boolean,
            reflect: true
          },
          activeId: {
            type: String
          },
          narrow: {
            type: Boolean,
            reflect: true
          }
        });
      }
    }]);
    return OutlinePlayer;
  }((0, _simpleColors.SimpleColorsSuper)(_HAXCMSLitElementTheme.HAXCMSLitElementTheme));

  _exports.OutlinePlayer = OutlinePlayer;
  customElements.define(OutlinePlayer.tag, OutlinePlayer);
});