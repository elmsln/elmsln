define(["exports", "meta", "../../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleLoginCamera = void 0;
  meta = _interopRequireWildcard(meta);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Inspiration from https://github.com/wanoo21/MyCamera
   */
  var SimpleLoginCamera = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(SimpleLoginCamera, _HTMLElement);

    var _super = _createSuper(SimpleLoginCamera);

    function SimpleLoginCamera() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleLoginCamera);
      _this = _super.call(this);

      if (window.WCGlobalBasePath) {
        _this.basePath = window.WCGlobalBasePath;
      } else {
        _this.basePath = new URL("./../../../", meta.url).href;
      }

      _this.t = {
        record: "Record",
        pause: "Pause record",
        stopSave: "Stop & Save",
        clickToTakePhoto: "Click to take photo"
      };
      window.dispatchEvent(new CustomEvent("i18n-manager-register-element", {
        detail: {
          context: babelHelpers.assertThisInitialized(_this),
          namespace: "simple-login",
          localesPath: new URL("../locales", meta.url).href,
          updateCallback: "render",
          locales: ["es"]
        }
      }));
      var location = "".concat(_this.basePath, "msr/MediaStreamRecorder.min.js");
      window.ESGlobalBridge.requestAvailability().load("msr", location);
      window.addEventListener("es-bridge-msr-loaded", _this._msrLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      _this.template = document.createElement("template");
      _this._shadow = _this.attachShadow({
        mode: "closed"
      });

      _this.render();

      _this._video = _this._shadow.querySelector("video");
      _this._error = _this._shadow.querySelector("p");
      _this._record = _this._shadow.querySelector("button.record");
      _this._pauseRecord = _this._shadow.querySelector("button.pause-record");
      document.addEventListener("DOMContentLoaded", _this.documentLoaded.bind(babelHelpers.assertThisInitialized(_this)));

      if (!_this.hasAttribute("record")) {
        _this._record.remove();

        _this._pauseRecord.remove();
      } else {
        _this._record.addEventListener("click", function () {
          if (!_this._record.hasAttribute("recording")) {
            _this._record.innerText = _this.t.stopSave;

            _this._record.setAttribute("recording", "");

            return _this._startRecording();
          } else {
            _this._record.innerText = _this.t.record;

            _this._record.removeAttribute("recording");

            return _this._stopRecording();
          }
        });

        _this._pauseRecord.addEventListener("click", function () {
          if (!_this._pauseRecord.hasAttribute("resume")) {
            _this._pauseRecord.innerText = "Resume record";

            _this._pauseRecord.setAttribute("resume", "");

            return _this._pauseRecording();
          } else {
            _this._pauseRecord.innerText = "Pause record";

            _this._pauseRecord.removeAttribute("resume");

            return _this._resumeRecording();
          }
        });
      }

      return _this;
    }

    babelHelpers.createClass(SimpleLoginCamera, [{
      key: "render",
      value: function render() {
        this._shadow.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this._shadow.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "_startRecording",
      value: function _startRecording() {
        this._pauseRecord.removeAttribute("hidden");

        this.MediaStreamRecorder.start(100);
      }
    }, {
      key: "_stopRecording",
      value: function _stopRecording() {
        this._pauseRecord.setAttribute("hidden", "");

        this._pauseRecord.removeAttribute("resume");

        this.MediaStreamRecorder.stop();
      }
    }, {
      key: "_pauseRecording",
      value: function _pauseRecording() {
        this._record.setAttribute("disabled", "");

        this.MediaStreamRecorder.pause();
      }
    }, {
      key: "_resumeRecording",
      value: function _resumeRecording() {
        this._record.removeAttribute("disabled");

        this.MediaStreamRecorder.resume();
      }
    }, {
      key: "_saveVideo",
      value: function _saveVideo(blob) {
        var type = blob.type.split("/").pop();
        this.MediaStreamRecorder.save(blob, "my-camera-".concat(new Date().toISOString().replace(/:|\./g, "-"), ".").concat(type));
      }
    }, {
      key: "_cameraStream",
      value: function _cameraStream() {
        if (!navigator.mediaDevices.getUserMedia) {
          return Promise.reject(new Error("getUserMedia is not implemented in this browser"));
        }

        return navigator.mediaDevices.getUserMedia({
          video: {
            width: {
              min: 320,
              ideal: 1280,
              max: 1920
            },
            height: {
              min: 240,
              ideal: 720,
              max: 1080
            },
            facingMode: "user"
          },
          audio: this.hasAttribute("audio")
        });
      }
    }, {
      key: "takeASnap",
      value: function takeASnap() {
        var canvas = document.createElement("canvas"); // create a canvas

        var ctx = canvas.getContext("2d"); // get its context

        canvas.width = this._video.videoWidth; // set its size to the one of the video

        canvas.height = this._video.videoHeight;
        ctx.drawImage(this._video, 0, 0); // the video

        return new Promise(function (res, rej) {
          canvas.toBlob(res, "image/jpeg"); // request a Blob from the canvas
        });
      }
    }, {
      key: "renderImage",
      value: function renderImage(blob) {
        // uses the <a download> to download a Blob
        var img = document.createElement("img");
        img.src = URL.createObjectURL(blob);
        return img;
      }
    }, {
      key: "imageBlob",
      value: function imageBlob(blob) {
        return blob;
      }
    }, {
      key: "download",
      value: function download(blob) {
        // uses the <a download> to download a Blob
        var a = document.createElement("a");
        a.href = URL.createObjectURL(blob);
        a.download = "screenshot.jpg";
        document.body.appendChild(a);
        a.click();
      }
    }, {
      key: "_addVideoAtributes",
      value: function _addVideoAtributes() {
        this._video.autoplay = this.hasAttribute("autoplay");
        this._video.controls = this.hasAttribute("controls");
      }
    }, {
      key: "_msrLoaded",
      value: function _msrLoaded(e) {
        var _this2 = this;

        this._applyMSR();

        this._shadow.querySelector("#wrapper").addEventListener("click", function () {
          _this2.dispatchEvent(new CustomEvent("site-listing-video-activate", {
            detail: _this2,
            bubbles: true,
            composed: true
          }));
        });
      }
    }, {
      key: "_applyMSR",
      value: function () {
        var _applyMSR2 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var _this3 = this;

          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  window.addEventListener("site-listing-video-activate", /*#__PURE__*/babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return _this3._cameraStream();

                          case 3:
                            _this3._video.srcObject = _context.sent;
                            window.stream = _this3._video.srcObject;

                            _this3._addVideoAtributes();

                            if (_this3.hasAttribute("record")) {
                              _this3.MediaStreamRecorder = new MediaStreamRecorder(_this3._video.srcObject); // this.MediaStreamRecorder.mimeType = 'video/webm';

                              _this3.MediaStreamRecorder.ondataavailable = _this3._saveVideo.bind(_this3);
                            }

                            setTimeout(function () {
                              _this3.dispatchEvent(new CustomEvent("simple-login-camera-icon-click", {
                                detail: _this3,
                                bubbles: true,
                                composed: true
                              }));
                            }, 100);

                            _this3._error.remove();

                            _context.next = 26;
                            break;

                          case 11:
                            _context.prev = 11;
                            _context.t0 = _context["catch"](0);

                            _this3._video.remove();

                            _this3._record.remove();

                            _this3._pauseRecord.remove();

                            if (!(_context.t0.name === "ConstraintNotSatisfiedError")) {
                              _context.next = 20;
                              break;
                            }

                            _this3._error.innerText = "The resolution is not supported by your device.";
                            _context.next = 26;
                            break;

                          case 20:
                            if (!(_context.t0.name === "NotAllowedError")) {
                              _context.next = 24;
                              break;
                            }

                            _this3._error.innerText = "Permissions have not been granted to use your camera and " + "microphone, you need to allow the page access to your devices in " + "order for the demo to work.";
                            _context.next = 26;
                            break;

                          case 24:
                            _this3._error.innerText = _context.t0.message;
                            throw Error(_context.t0);

                          case 26:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, null, [[0, 11]]);
                  })));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function _applyMSR() {
          return _applyMSR2.apply(this, arguments);
        }

        return _applyMSR;
      }()
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        if (window.ESGlobalBridge.requestAvailability().imports["msr"] === true) {
          this._applyMSR();
        }

        this._t = _objectSpread({}, this.t);
      }
      /**
       * Try to apply when fully loaded dom
       */

    }, {
      key: "documentLoaded",
      value: function documentLoaded(e) {
        if (window.ESGlobalBridge.requestAvailability().imports["msr"] === true) {
          this._applyMSR();
        }
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        document.removeEventListener("DOMContentLoaded", this.documentLoaded.bind(this));
        window.removeEventListener("es-bridge-msr-loaded", this._msrLoaded.bind(this));
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(name, oldValue, newValue) {// console.log(newValue);
        // console.log(name);
        // console.log(typeof newValue);
        // // if (newValue === '' || newValue === null) return;
        // if (newValue || newValue === null) {
        //   this.setAttribute(name, '');
        // } else {
        //   this.removeAttribute(name);
        // }
        // this._addVideoAtributes();
      }
    }, {
      key: "html",
      get: function get() {
        return "\n      <style>\n        :host {\n          display: flex;\n        }\n        #wrapper {\n          overflow: hidden;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          flex-direction: column;\n          flex-wrap: wrap;\n          position: relative;\n          background-color: var(--simple-login-camera-background, var(--background-color, #ccc));\n        }\n        video {\n          margin-left: calc(100% * var(--simple-login-camera-aspect, 1) / 2 - 177.77777777777% / 2);          \n          width: calc(177.77777777777% / var(--simple-login-camera-aspect, 1));\n          background-color: rgba(0, 0, 0, 0);\n        }\n        .error {\n          color: black;\n          background-color: white;\n          font-size: 26px;\n          text-align: center;\n          padding: 10px;\n          position: absolute;\n        }\n        .custom-controls {\n          top: 8px;\n          right: 8px;\n          position: absolute;\n        }\n        .custom-controls button {\n          padding: 8px 10px;\n        }\n        [hidden] {\n          display: none;\n        }\n      </style>\n      <div id=\"wrapper\" part=\"wrapper\">\n        <video part=\"video\"></video>\n        <p class=\"error\" part=\"error\">".concat(this.t.clickToTakePhoto, "</p>\n        <div class=\"custom-controls\" part=\"controls\">\n          <button class=\"record\" part=\"record\">").concat(this.t.record, "</button>\n          <button class=\"pause-record\" hidden part=\"pause\">").concat(this.t.pause, "</button>\n        </div>\n      </div>\n    ");
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-login-camera";
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        return ["autoplay", "controls", "audio"];
      }
    }]);
    return SimpleLoginCamera;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement)); // only show this element if we're on a secure environment


  _exports.SimpleLoginCamera = SimpleLoginCamera;

  if (navigator.mediaDevices) {
    customElements.define(SimpleLoginCamera.tag, SimpleLoginCamera);
  }
});