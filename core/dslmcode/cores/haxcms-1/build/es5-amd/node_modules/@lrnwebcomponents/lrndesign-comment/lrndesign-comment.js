define(["exports", "../../@polymer/polymer/polymer-element.js", "../lrndesign-avatar/lrndesign-avatar.js", "../../@github/time-elements/dist/index.js"], function (_exports, _polymerElement, _lrndesignAvatar, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignComment = void 0;

  var _templateObject_6c2e5630809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrndesign-comment`
   * @element lrndesign-comment
   * A LRN element
   *
   * @demo demo/index.html
   */
  var LrndesignComment = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrndesignComment, _PolymerElement);

    var _super = _createSuper(LrndesignComment);

    function LrndesignComment() {
      babelHelpers.classCallCheck(this, LrndesignComment);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrndesignComment, null, [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_6c2e5630809211edaa2833647dc78c6c || (_templateObject_6c2e5630809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        .comment-left {\n          float: left;\n          display: inline-block;\n        }\n        .comment-right {\n          display: inline-block;\n        }\n      </style>\n      <div class=\"comment-container\">\n        <div class=\"comment-left\"><lrndesign-avatar></lrndesign-avatar></div>\n        <div class=\"comment-right\">\n          <div class=\"row-1\">\n            <span>{{name}}</span>\n            <relative-time datetime$=\"{{date}}\"> </relative-time>\n          </div>\n          <div class=\"row-2\"><slot></slot></div>\n          <div class=\"row-3\">{{links}}</div>\n        </div>\n      </div>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrndesign-comment";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          avatar: {
            type: Object,
            reflectToAttribute: true,
            notify: true
          },
          name: {
            type: String,
            reflectToAttribute: true,
            notify: true
          },
          date: {
            type: String,
            value: "2014-04-01T00:00:00.000Z",
            reflectToAttribute: true,
            notify: true
          },
          links: {
            type: Object,
            notify: true
          }
        };
      }
    }]);
    return LrndesignComment;
  }(_polymerElement.PolymerElement);

  _exports.LrndesignComment = LrndesignComment;
  customElements.define(LrndesignComment.tag, LrndesignComment);
});