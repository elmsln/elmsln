define(["exports", "../../../lit/index.js", "../../simple-colors/simple-colors.js", "./simple-icon-button-lite.js", "./simple-icons.js", "../simple-icon.js"], function (_exports, _index, _simpleColors, _simpleIconButtonLite, _simpleIcons, _simpleIcon) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleIconButton = void 0;

  var _templateObject_dde0e1008e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   *
   * @class SimpleIconButtonBehaviors
   */
  var SimpleIconButton = /*#__PURE__*/function (_SimpleIconButtonBeha) {
    babelHelpers.inherits(SimpleIconButton, _SimpleIconButtonBeha);

    var _super = _createSuper(SimpleIconButton);

    function SimpleIconButton() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleIconButton);
      _this = _super.call(this);
      _this.accentColor = "grey";
      _this.contrast = 4;
      _this.dark = false;
      return _this;
    } // render function


    babelHelpers.createClass(SimpleIconButton, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_dde0e1008e0011ed99ce491205e67b1d || (_templateObject_dde0e1008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <button\n        ?autofocus=\"", "\"\n        .aria-labelledby=\"", "\"\n        .aria-pressed=\"", "\"\n        controls=\"", "\"\n        part=\"button\"\n        ?disabled=\"", "\"\n        form=\"", "\"\n        label=\"", "\"\n        aria-label=\"", "\"\n        name=\"", "\"\n        .type=\"", "\"\n        value=\"", "\"\n      >\n        <simple-icon\n          part=\"icon\"\n          icon=\"", "\"\n          accent-color=\"", "\"\n          contrast=\"", "\"\n          ?dark=\"", "\"\n          ?no-colorize=\"", "\"\n        ></simple-icon>\n      </button>\n    "])), this.autofocus, this.ariaLabelledby, this.toggles || this.toggled ? "true" : this.toggles ? "false" : undefined, this.controls, this.disabled, this.form, this.label, this.label, this.fieldName, this.type, this.value, this.icon, this.accentColor, this.contrast, this.dark, this.noColorize);
      } // properties available to the custom element for data binding

    }], [{
      key: "tag",
      get:
      /**
       * This is a convention, not the standard
       */
      function get() {
        return "simple-icon-button";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleIconButton), "properties", this)), {}, {
          contrast: {
            type: Number,
            reflect: true
          }
        });
      }
    }]);
    return SimpleIconButton;
  }((0, _simpleIconButtonLite.SimpleIconButtonBehaviors)(_simpleColors.SimpleColors));

  _exports.SimpleIconButton = SimpleIconButton;
  customElements.define(SimpleIconButton.tag, SimpleIconButton);
});