define(["exports", "../../../../lit/index.js", "./rich-text-editor-prompt-button.js"], function (_exports, _index, _richTextEditorPromptButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorLink = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-link`
   * a link button for rich text editor
   *
   * @customElement
   * @lit-html
   * @lit-element
   * @extends RichTextEditorPromptButtonBehaviors
   * @extends LitElement
   * @element rich-text-editor-link
   * @demo ./demo/buttons.html
   */
  var RichTextEditorLink = /*#__PURE__*/function (_RichTextEditorPrompt) {
    babelHelpers.inherits(RichTextEditorLink, _RichTextEditorPrompt);

    var _super = _createSuper(RichTextEditorLink);

    function RichTextEditorLink() {
      var _thisSuper, _thisSuper2, _this;

      babelHelpers.classCallCheck(this, RichTextEditorLink);
      _this = _super.call(this);
      _this.fields = [].concat(babelHelpers.toConsumableArray(babelHelpers.get((_thisSuper = babelHelpers.assertThisInitialized(_this), babelHelpers.getPrototypeOf(RichTextEditorLink.prototype)), "fields", _thisSuper)), [{
        property: "href",
        title: "Link",
        inputMethod: "url",
        autoValidate: true
      }]);
      _this.command = "createLink";
      _this.icon = "link";
      _this.label = "Link";
      _this.toggledCommand = "unlink";
      _this.toggledLabel = "Edit link";
      _this.toggles = "true";
      _this.tagsList = "a";
      _this.value = _objectSpread(_objectSpread({}, babelHelpers.get((_thisSuper2 = babelHelpers.assertThisInitialized(_this), babelHelpers.getPrototypeOf(RichTextEditorLink.prototype)), "value", _thisSuper2)), {}, {
        href: null
      });
      _this.shortcutKeys = "ctrl+k";
      return _this;
    }

    babelHelpers.createClass(RichTextEditorLink, [{
      key: "render",
      value: // render function for template
      function render() {
        return babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink.prototype), "render", this).call(this);
      } // properties available to the custom element for data binding

    }, {
      key: "defaultFields",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink.prototype), "fields", this)), [{
          property: "href",
          title: "Link",
          inputMethod: "url",
          autoValidate: true
        }]);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "allowTarget") {
            _this2.fields = !_this2.allowTarget ? babelHelpers.toConsumableArray(_this2.defaultFields) : [].concat(babelHelpers.toConsumableArray(_this2.defaultFields), [{
              property: "target",
              title: "Target",
              inputMethod: "textfield"
            }]);
          }
        });
      }
      /**
       * overrides RichTextEditorPromptButtonBehaviors
       * so that href property determines
       * whether or not to link or unlink
       *
       * @readonly
       * @memberof RichTextEditorLink
       */

    }, {
      key: "promptCommandVal",
      get: function get() {
        return this.getPropValue("href") || undefined;
      }
      /**
       * overrides RichTextEditorPromptButtonBehaviors
       * so that isToggled is based on toggled property
       *
       * @readonly
       * @memberof RichTextEditorLink
       */

    }, {
      key: "isToggled",
      get: function get() {
        return this.toggled;
      }
      /**
       * overrides RichTextEditorPromptButtonBehaviors
       * to customize for getting link innerHTML & href properties
       *
       * @param {object} node selected node
       * @memberof RichTextEditorLink
       */

    }, {
      key: "getValue",
      value: function getValue() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink.prototype), "getValue", this).call(this)), {}, {
          target: !!this.allowTarget && !!this.targetedNode && this.targetedNode.getAttribute ? this.targetedNode.getAttribute("target") : undefined,
          href: !!this.targetedNode && this.targetedNode.getAttribute ? this.targetedNode.getAttribute("href") : undefined
        });
      }
      /**
       * overrides RichTextEditorPromptButtonBehaviors
       * sets toggle based on whether the selected node has a href
       *
       * @memberof RichTextEditorLink
       */

    }, {
      key: "setToggled",
      value: function setToggled() {
        this.toggled = !!this.getPropValue("href");
      }
    }, {
      key: "updateSelection",
      value: function updateSelection() {
        var range = this.range,
            target = !this.value || !this.value.target || !this.value.href ? undefined : this.value.target;
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink.prototype), "updateSelection", this).call(this);
        if (!target) return;
        range.commonAncestorContainer.children[0].setAttribute("target", target);
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "rich-text-editor-link";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink), "properties", this)), {}, {
          /**
           * allow user to set a target attribute for link
           */
          allowTarget: {
            type: Boolean
          }
        });
      }
    }]);
    return RichTextEditorLink;
  }((0, _richTextEditorPromptButton.RichTextEditorPromptButtonBehaviors)(_index.LitElement));

  _exports.RichTextEditorLink = RichTextEditorLink;
  customElements.define(RichTextEditorLink.tag, RichTextEditorLink);
});