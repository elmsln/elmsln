define(["exports", "meta", "require", "./haxcms-site-store.js"], function (_exports, meta, _require, _haxcmsSiteStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSEditorBuilder = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `haxcms-editor-builder`
   * Figure out what our context is and setup based on that
   *
   * @microcopy - the mental model for this element
   * - something called us asking to provide an authoring solution
   * - we need to decide based on environment if this supports php, nodejs, beaker, a demo or none
   */
  var HAXCMSEditorBuilder = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(HAXCMSEditorBuilder, _HTMLElement);

    var _super = _createSuper(HAXCMSEditorBuilder);

    /**
     * ready life cycle
     */
    function HAXCMSEditorBuilder() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSEditorBuilder);
      _this = _super.call(this);
      window.HAXCMS.requestAvailability().storePieces.editorBuilder = babelHelpers.assertThisInitialized(_this);

      _this.applyContext();

      window.addEventListener("haxcms-site-editor-loaded", _this.editorLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      return _this;
    }

    babelHelpers.createClass(HAXCMSEditorBuilder, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSEditorBuilder.prototype), "connectedCallback", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSEditorBuilder.prototype), "connectedCallback", this).call(this);
        }

        this.dispatchEvent(new CustomEvent("haxcms-editor-builder-ready", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("haxcms-site-editor-loaded", this.editorLoaded.bind(this));

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSEditorBuilder.prototype), "disconnectedCallback", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSEditorBuilder.prototype), "disconnectedCallback", this).call(this);
        }
      }
    }, {
      key: "editorLoaded",
      value: function editorLoaded(e) {
        var _this2 = this;

        if (!_haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement) {
          // prettier-ignore
          new Promise(function (res, rej) {
            return _require.default(["./haxcms-site-editor-ui.js"], res, rej);
          }).then(function () {
            _haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement = document.createElement("haxcms-site-editor-ui");

            for (var key in _haxcmsSiteStore.store.setupSlots) {
              switch (key) {
                case "haxcms-site-editor-ui-prefix-avatar":
                case "haxcms-site-editor-ui-prefix-buttons":
                case "haxcms-site-editor-ui-suffix-buttons":
                case "haxcms-site-editor-ui-main-menu":
                case "haxcms-site-editor-ui-topbar-character-button":
                  for (var key2 in _haxcmsSiteStore.store.setupSlots[key]) {
                    _haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement.appendChild(_haxcmsSiteStore.store.setupSlots[key][key2]);
                  }

                  break;
              }
            }

            if (_this2.parentNode) {
              _this2.parentNode.insertBefore(_haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement, _this2);
            } else {
              document.body.appendChild(_haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement);
            } // forces a nice fade in transition


            setTimeout(function () {
              _haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement.painting = false;
            }, 5);
          });
        }
      }
    }, {
      key: "applyContext",
      value: function applyContext() {
        var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        if (!this.__appliedContext) {
          this.__appliedContext = true; // this allows forced context

          if (context == null) {
            context = window.HAXCMS.requestAvailability().getApplicationContext();
          }

          if (["php", "nodejs", "desktop"].includes(context)) {
            // append this script to global scope to show up via window
            // this is a unique case since it's server side generated in HAXCMS
            var script = document.createElement("script"); // IF we're in a live environment this will always be 2 levels back

            if (window.appSettings && window.appSettings.connectionSettings) {
              script.src = window.appSettings.connectionSettings;
            } else {
              script.src = "../../system/api/connectionSettings";
            }

            fetch(script.src).then(function (response) {
              if (response.status != 404) {
                document.documentElement.appendChild(script);
              }
            });
          } // dynamic import if this isn't published tho we'll double check
          // that it's valid later


          if (!["published", "11ty"].includes(context)) {
            var basePath = new URL("./haxcms-editor-builder.js", meta.url).href + "/../"; // import and set the tag based on the context

            _haxcmsSiteStore.store.cmsSiteEditorBackend.tag = "haxcms-backend-".concat(context); // delay import slightly to ensure global scope is there

            new Promise(function (res, rej) {
              return _require.default(["".concat(basePath, "backends/").concat(_haxcmsSiteStore.store.cmsSiteEditorBackend.tag, ".js")], res, rej);
            }).then(function (e) {
              if (!_haxcmsSiteStore.store.cmsSiteEditorBackend.instance) {
                _haxcmsSiteStore.store.cmsSiteEditorBackend.instance = document.createElement(_haxcmsSiteStore.store.cmsSiteEditorBackend.tag);
                document.body.appendChild(_haxcmsSiteStore.store.cmsSiteEditorBackend.instance);
              }
            });
          }
        }
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "haxcms-editor-builder";
      }
    }]);
    return HAXCMSEditorBuilder;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.HAXCMSEditorBuilder = HAXCMSEditorBuilder;
  customElements.define(HAXCMSEditorBuilder.tag, HAXCMSEditorBuilder);
});