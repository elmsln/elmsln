define(["exports", "../../../lit/index.js", "../lrndesign-chart.js", "../../simple-colors/simple-colors.js"], function (_exports, _index, _lrndesignChart, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignLine = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrndesign-line`
   * a line chart
   *
   * @element lrndesign-line
   * @extends LrndesignChart
   * @extends SimpleColors
   * @see ../lrndesign-chart.js
   * @demo ./demo/line.html
   *
   */
  var LrndesignLine = /*#__PURE__*/function (_LrndesignChart) {
    babelHelpers.inherits(LrndesignLine, _LrndesignChart);

    var _super = _createSuper(LrndesignLine);

    function LrndesignLine() {
      var _this;

      babelHelpers.classCallCheck(this, LrndesignLine);
      _this = _super.call(this);

      _this.setProperties();

      return _this;
    }

    babelHelpers.createClass(LrndesignLine, [{
      key: "options",
      get:
      /**
       * gets options as an array
       * @returns {array} options
       * @readonly
       * @memberof LrndesignChart
       */
      function get() {
        return _objectSpread(_objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignLine.prototype), "options", this)), this.lineBarOptions), {}, {
          areaBase: this.areaBase,
          fullWidth: this.fullWidth,
          lineSmooth: this.lineSmooth,
          showArea: this.showArea,
          showLine: this.showLine,
          showPoint: this.showPoint
        });
      }
      /**
       * gets axis title options
       * @readonly
       */

    }, {
      key: "pointLabels",
      get: function get() {
        return this.showPointLabels ? {
          labelOffset: {
            x: this.pointLabelsOffsetX,
            y: this.pointLabelsOffsetY
          },
          textAnchor: ["start", "end", "middle"].includes(this.pointLabelsAnchor) ? this.pointLabelsAnchor : "middle",
          labelInterpolationFnc: this.pointLabelFunction || undefined
        } : undefined;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if ((propName === "showPointLabels" || propName.indexOf("pointLabel") > -1) && propName !== "pluginPointLabels" && _this2[propName] !== oldValue) {
            _this2.pluginPointLabels = _this2.pointLabels;
          }
        });
        if (babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignLine.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignLine.prototype), "updated", this).call(this, changedProperties);
      }
      /**
       * Overrides default properties with line-specific properties.
       */

    }, {
      key: "setProperties",
      value: function setProperties() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignLine.prototype), "setProperties", this).call(this);
        this.setBarLineProperties();
        this.areaBase = 0;
        this.fullWidth = false;
        this.lineSmooth = true;
        this.showArea = false;
        this.showLine = true;
        this.showPoint = true;
        this.showPointLabels = false;
        this.pointLabelsAnchor = "middle";
        this.pointLabelsOffsetX = 0;
        this.pointLabelsOffsetY = -10;
        this.type = "line";
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignLine), "properties", this)), babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignLine), "lineBarProperties", this)), {}, {
          /**
           * The base for the area chart that will be used
           * to close the area shape (is normally 0).
           */
          areaBase: {
            attribute: "area-base",
            type: Number
          },

          /**
           * When set to true, the last grid line on the x-axis
           * is not drawn and the chart elements will expand
           * to the full available width of the chart.
           * For the last label to be drawn correctly
           * you might need to add chart padding or offset the
           * last label with a draw event handler.
           */
          fullWidth: {
            attribute: "full-width",
            type: Boolean
          },

          /**
           * Specify if the lines should be smoothed.
           * This value can be true or false where true
           * will result in smoothing using the default
           * smoothing interpolation function Chartist.
           * Interpolation.cardinal and false results in
           * Chartist.Interpolation.none.
           * You can also choose other smoothing /
           * interpolation functions available in the Chartist.
           * Interpolation module, or write your own
           * interpolation function. Check the examples
           * for a brief description..
           */
          lineSmooth: {
            attribute: "line-smooth",
            type: Boolean
          },

          /**
           * If the line chart should draw an area.
           */
          showArea: {
            attribute: "show-area",
            type: Boolean
          },

          /**
           * If the line should be drawn or not.
           */
          showLine: {
            attribute: "show-line",
            type: Boolean
          },

          /**
           * If the line should be drawn or not.
           */
          showPoint: {
            attribute: "show-point",
            type: Boolean
          },

          /**
           * Optional point labels
           */
          showPointLabels: {
            attribute: "show-point-labels",
            type: Boolean
          },

          /**
           * Optional anchor for point labels
           */
          pointLabelsAnchor: {
            attribute: "point-labels-anchor",
            type: String
          },

          /**
           * Optional x-offset for point labels
           */
          pointLabelsOffsetX: {
            attribute: "point-labels-offset-x",
            type: Number
          },

          /**
           * Optional y-offset for point labels
           */
          pointLabelsOffsetY: {
            attribute: "point-labels-offset-y",
            type: Number
          },

          /**
           * Optional interpolation function for point labels
           */
          pointLabelFunction: {}
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "lrndesign-line";
      } // haxProperty definition

    }, {
      key: "haxProperties",
      get: function get() {
        var haxProps = babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignLine), "haxProperties", this),
            lineBar = babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignLine), "lineBarHaxProperties", this),
            lineConfig = [{
          property: "showArea",
          title: "Show Area",
          inputMethod: "boolean"
        }, {
          property: "showLine",
          title: "Show Link",
          inputMethod: "boolean"
        }, {
          property: "showPoint",
          title: "Show Point",
          inputMethod: "boolean"
        }, {
          property: "fullWidth",
          title: "Full Width",
          inputMethod: "boolean"
        }, {
          property: "showPointLabels",
          title: "Show Point Labels",
          inputMethod: "boolean"
        }],
            lineAdvanced = [{
          property: "pointLabelsAnchor",
          title: "Show Point Labels",
          inputMethod: "select",
          options: {
            middle: "Middle",
            start: "Start",
            end: "End"
          }
        }, {
          property: "pointLabelsOffsetX",
          title: "Point Labels X-Offset",
          inputMethod: "number"
        }, {
          property: "pointLabelsOffsetY",
          title: "Point Labels Y-Offset",
          inputMethod: "number"
        }, {
          property: "lineSmooth",
          title: "Line Smooth",
          inputMethod: "boolean"
        }, {
          property: "areaBase",
          title: "Area Base",
          description: "\n            The base for the area chart that will be used\n            to close the area shape (is normally 0).\n          ",
          inputMethod: "number"
        }];
        haxProps.gizmo.title = "Link Chart";
        haxProps.gizmo.icon = "editor:show-chart";
        haxProps.settings.configure = haxProps.settings.configure.concat(lineBar.gridBackground, lineConfig, lineBar.padding);
        haxProps.settings.advanced = haxProps.settings.advanced.concat(lineBar.minMax, lineAdvanced, lineBar.xAxis, lineBar.yAxis);
        return haxProps;
      }
    }]);
    return LrndesignLine;
  }((0, _lrndesignChart.LrndesignChart)(_simpleColors.SimpleColors));
  /**
   * life cycle, element is removed from the DOM
   */
  //disconnectedCallback() {}


  _exports.LrndesignLine = LrndesignLine;
  customElements.define(LrndesignLine.tag, LrndesignLine);
});