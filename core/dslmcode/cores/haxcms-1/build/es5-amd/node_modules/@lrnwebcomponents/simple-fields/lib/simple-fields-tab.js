define(["exports", "../../../lit/index.js", "./simple-fields-fieldset.js", "../../a11y-tabs/lib/a11y-tab.js"], function (_exports, _index, _simpleFieldsFieldset, _a11yTab) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsTab = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-fields-tab` takes in a JSON schema of type array and builds a form,
   * exposing a `value` property that represents an array described by the schema.
   *
   * @customElement
   * @group simple-fields
   * @element simple-fields-tab
   * @extends simple-fields-fieldset
   * @class SimpleFieldsTab
   * @extends {A11yTab}
   */
  var SimpleFieldsTab = /*#__PURE__*/function (_A11yTab) {
    babelHelpers.inherits(SimpleFieldsTab, _A11yTab);

    var _super = _createSuper(SimpleFieldsTab);

    function SimpleFieldsTab() {
      babelHelpers.classCallCheck(this, SimpleFieldsTab);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(SimpleFieldsTab, null, [{
      key: "tag",
      get: function get() {
        return "simple-fields-tab";
      }
    }, {
      key: "styles",
      get: function get() {
        return babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsTab), "styles", this));
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsTab), "properties", this)), _simpleFieldsFieldset.SimpleFieldsFieldsetBehaviors.properties);
      }
    }]);
    return SimpleFieldsTab;
  }(_a11yTab.A11yTab);

  _exports.SimpleFieldsTab = SimpleFieldsTab;
  customElements.define(SimpleFieldsTab.tag, SimpleFieldsTab);
});