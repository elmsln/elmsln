define(["exports", "../../../@polymer/polymer/polymer-element.js"], function (_exports, _polymerElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PaperFilterDialog = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var PaperFilterDialog = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(PaperFilterDialog, _PolymerElement);

    var _super = _createSuper(PaperFilterDialog);

    function PaperFilterDialog() {
      babelHelpers.classCallCheck(this, PaperFilterDialog);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(PaperFilterDialog, [{
      key: "open",
      value: // Public methods

      /**
       * Opens the filter dialog
       */
      function open() {
        // Attach dialog to the body to ensure it's on top of all existing overlays
        // XXX - Known issue: this generates addEventListener errors from a11y
        document.body.appendChild(this); // Wait until dialog is added to the DOM (required for Safari)

        setTimeout(function () {
          this.shadowRoot.querySelector("#dialog").open(); // Clone selected filters, so it can be changed without touching the external property

          this._selectedFilters = Object.assign({}, this.selectedFilters);
        }.bind(this), 1);
      }
    }, {
      key: "close",
      value: function close() {
        this.shadowRoot.querySelector("#dialog").close();
      }
      /**
       * Handles if the user taps on a filter
       */

    }, {
      key: "_tapSelectFilter",
      value: function _tapSelectFilter(e) {
        this.shadowRoot.querySelector("#selector").select(e.model.filter);

        this._preselectFilterValues();
      }
      /**
       * Separate function for unit testing
       */

    }, {
      key: "_preselectFilterValues",
      value: function _preselectFilterValues() {
        // Check all values that are selected
        var selectedValueIds = this._selectedFilters[this._selectedFilter.id];

        var isSelected = function isSelected(value) {
          return Boolean(selectedValueIds) && selectedValueIds.indexOf(value.id) >= 0;
        };

        this._selectedFilterValues = this._selectedFilter.values.map(function (value) {
          return Object.assign({}, value, {
            selected: isSelected(value)
          });
        });
      }
    }, {
      key: "_tapReset",
      value: function _tapReset(e) {
        this._selectedFilters = {};
      }
    }, {
      key: "_tapApply",
      value: function _tapApply(e) {
        this.selectedFilters = this._selectedFilters;
        this.dispatchEvent(new CustomEvent("save", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: true
        }));
      }
    }, {
      key: "_tapSelectValues",
      value: function _tapSelectValues(e) {
        // Captured IDs of the selected items
        var selectedValues = this._selectedFilterValues.filter(function (value) {
          return value.selected;
        }).map(function (value) {
          return value.id;
        });

        this._selectedFilters = Object.assign({}, this._selectedFilters, babelHelpers.defineProperty({}, this._selectedFilter.id, selectedValues));
        this.shadowRoot.querySelector("#selector").deselect(this._selectedFilter);
      }
      /**
       * True if any filter was set
       * @param  {[type]} selectedFilters  [description]
       * @return {[type]}                   [description]
       */

    }, {
      key: "_hasSelectedFilters",
      value: function _hasSelectedFilters(selectedFilters) {
        // Iterate until we find a filter that is selected
        for (selectedFilter in selectedFilters) {
          if (selectedFilters[selectedFilter].length > 0) {
            return true;
          }
        }

        return false;
      } // Returns the concated names of the selected values for a specific filter

    }, {
      key: "_getSelectedValuesNames",
      value: function _getSelectedValuesNames(filter, _selectedFilters) {
        var selectedValueIds = _selectedFilters[filter.id];

        if (!filter.values || !selectedValueIds) {
          return this.noValuesLabel;
        } // Capture names of all selected values


        var names = filter.values.filter(function (value) {
          // Only consider values that are selected
          return selectedValueIds.indexOf(value.id) >= 0;
        }).map(function (value) {
          // Capture name of the selected value
          return value.name;
        });
        return names.length > 0 ? names.join(", ") : this.noValuesLabel;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "paper-filter-dialog";
      }
      /**
       * Fired when the user requests to save the filter selection
       *
       * @event save
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * All filters from which the user can choose
           */
          filters: Array,

          /**
           * All filters that have been selected by the user, e.g. `{ age: [ "child", "teen" ] }`
           */
          selectedFilters: {
            type: Object,
            notify: true,
            value: {}
          },

          /**
           * Text for the reset button. Use this property to localize the element.
           */
          resetButton: {
            type: String,
            value: "Reset"
          },

          /**
           * Text for the save button. Use this property to localize the element.
           */
          saveButton: {
            type: String,
            value: "Save filters"
          },

          /**
           * Label shown if no values are selected for a filter. Use this property to localize the element.
           */
          noValuesLabel: {
            type: String,
            value: "No filters yet"
          },

          /**
           * Internal copy that is changed. Copied back to original variable only once the user clicks on [Apply]
           */
          _selectedFilters: {
            type: Object,
            value: {}
          },
          _selectedFilter: Object,
          _selectedFilterValues: {
            type: Array,
            value: []
          }
        };
      }
    }]);
    return PaperFilterDialog;
  }(_polymerElement.PolymerElement);

  _exports.PaperFilterDialog = PaperFilterDialog;
  customElements.define(PaperFilterDialog.tag, PaperFilterDialog);
});