define(["exports", "meta", "../../lit/index.js", "../es-global-bridge/es-global-bridge.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button.js"], function (_exports, meta, _index, _esGlobalBridge, _simpleIcon, _simpleIcons, _simpleIconButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RssItems = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_61492ec0809211edaa2833647dc78c6c, _templateObject2_61492ec0809211edaa2833647dc78c6c, _templateObject3_61492ec0809211edaa2833647dc78c6c, _templateObject4_61492ec0809211edaa2833647dc78c6c, _templateObject5_61492ec0809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rss-items`
   * `visualize RSS items`
   * 
   * Example:
    ```html
    <rss-items
      url="https://content.therapychat.com/rss.xml"
      max="4"
      auto
    ></rss-items>
    ```
   * It will retrieve the items from the url automatically.
   * @demo demo/index.html
   * @element rss-items
   */
  var RssItems = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(RssItems, _LitElement);

    var _super = _createSuper(RssItems);

    function RssItems() {
      var _this;

      babelHelpers.classCallCheck(this, RssItems);
      _this = _super.call(this);
      _this.items = [];
      _this.auto = false;
      _this.max = 10;
      _this.maxExcerptLength = 100;
      _this.maxTitleLength = 50;
      _this.readMoreAnchorText = "Read more";
      _this.readMoreImageAlt = "";
      _this.showReadMore = false;
      var name = "x2js";
      var basePath = new URL("./", meta.url).href;
      var location = "".concat(basePath, "lib/x2js.js");
      window.ESGlobalBridge.requestAvailability().load(name, location);
      window.addEventListener("es-bridge-".concat(name, "-loaded"), _this._x2jsLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      return _this;
    }

    babelHelpers.createClass(RssItems, [{
      key: "render",
      value: // render function
      function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_61492ec0809211edaa2833647dc78c6c || (_templateObject_61492ec0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" ", ""])), this.items.map(function (item) {
          return (0, _index.html)(_templateObject2_61492ec0809211edaa2833647dc78c6c || (_templateObject2_61492ec0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        <article>\n          ", "\n          <a href=\"", "\" title=\"", "\">\n            <span class=\"title\"\n              >", "</span\n            >\n          </a>\n          <div class=\"excerpt\">\n            ", "\n          </div>\n          ", "\n        </article>\n      "])), item.imageSrc ? (0, _index.html)(_templateObject3_61492ec0809211edaa2833647dc78c6c || (_templateObject3_61492ec0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n                <a\n                  class=\"thumbnail-container\"\n                  href=\"", "\"\n                  title=\"", "\"\n                >\n                  <img\n                    class=\"thumbnail\"\n                    src=\"", "\"\n                    alt=\"", "\"\n                    loading=\"lazy\"\n                  />\n                </a>\n              "])), item.link, item.title, item.imageSrc, item.title) : "", item.link, item.title, _this2._truncateText(item.title, _this2.maxTitleLength), _this2._truncateText(item.excerpt, _this2.maxExcerptLength), _this2.showReadMore ? (0, _index.html)(_templateObject4_61492ec0809211edaa2833647dc78c6c || (_templateObject4_61492ec0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n                <a\n                  tabindex=\"-1\"\n                  href=\"", "\"\n                  class=\"read-more\"\n                  title=\"", "\"\n                  >", "\n                  <simple-icon-button\n                    icon=\"icons:arrow-forward\"\n                    class=\"read-more-icon\"\n                    alt=\"", "\"\n                  ></simple-icon-button>\n                </a>\n              "])), item.link, item.title, _this2.readMoreAnchorText, _this2.readMoreImageAlt) : "");
        }));
      } // haxProperty definition

    }, {
      key: "initRequest",
      value:
      /**
       * Init ajax request to get rss.
       */
      function initRequest() {
        var _this3 = this;

        fetch(this.url).then(function (response) {
          if (response.ok) return response.text();
        }).then(function (str) {
          return new window.DOMParser().parseFromString(str, "text/xml");
        }).then(function (xml) {
          _this3.xml = {};
          setTimeout(function () {
            _this3.xml = xml;
          }, 0);
        });
      }
    }, {
      key: "_maxChanged",
      value: function _maxChanged(newValue) {
        if (this.xml && newValue && this._x2js && this.__ready) {
          this.xmlToItems(this.xml);
        }
      }
      /**
       * Receives a xml and set this.items as json.
       * @param {Object} xml XML element.
       */

    }, {
      key: "xmlToItems",
      value: function xmlToItems(newValue) {
        if (newValue && this._x2js && this.__ready) {
          // parse xml to json and get items
          var conversor = new X2JS();
          var json = conversor.xml2json(newValue);

          if (json) {
            var items = json.rss ? json.rss.channel.item : [];

            if (json.channel && json.channel.item) {
              items = json.channel.item;
            } // truncate with this.max and parse items


            items = this.max === undefined ? items : items.splice(0, this.max);
            this.items = babelHelpers.toConsumableArray(this._parseItems(items));
          }
        }
      }
    }, {
      key: "_urlChanged",
      value: function _urlChanged(newValue) {
        if (newValue && this._x2js && this.__ready) {
          this.initRequest();
        }
      }
      /**
       * Parse items by getting excerpt and image source.
       * @param {Array} items RSS items.
       */

    }, {
      key: "_parseItems",
      value: function _parseItems(items) {
        var _this4 = this;

        return items.map(function (item) {
          item.excerpt = _this4._getItemExcerpt(item);
          item.imageSrc = _this4._getItemImageScr(item);
          return item;
        });
      }
      /**
       * Get excerpt from item description.
       * @param {Object} item Item where find excerpt.
       */

    }, {
      key: "_getItemExcerpt",
      value: function _getItemExcerpt(item) {
        var element = document.createElement("div");
        element.innerHTML = item.description;
        return element.textContent.trim();
      }
      /**
       * Get image source from item description.
       * @param {Object} item Item where find image.
       */

    }, {
      key: "_getItemImageScr",
      value: function _getItemImageScr(item) {
        if (item.thumbnail && item.thumbnail._url) {
          return item.thumbnail._url;
        } else {
          var element = document.createElement("div");
          element.innerHTML = item.description;
          var image = element.querySelector("img") || {};
          return image.src || "";
        }
      }
      /**
       * Truncate a text and concatenate with ellipsis if needed.
       * @param {String} text Text to truncate.
       * @param {Number} maxLength Max length of the text.
       * @return {String} Truncated text.
       */

    }, {
      key: "_truncateText",
      value: function _truncateText(text, maxLength) {
        if (text) {
          return maxLength && text.length > maxLength ? text.substr(0, maxLength) + "..." : text;
        }
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this5 = this;

        changedProperties.forEach(function (oldValue, propName) {
          var notifiedProps = ["items"];

          if (notifiedProps.includes(propName)) {
            // notify
            var eventName = "".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), "-changed");

            _this5.dispatchEvent(new CustomEvent(eventName, {
              detail: {
                value: _this5[propName]
              }
            }));
          }

          if (propName == "max") {
            _this5._maxChanged(_this5[propName], oldValue);
          }

          if (propName == "url") {
            _this5._urlChanged(_this5[propName], oldValue);
          }

          if (propName == "xml") {
            _this5.xmlToItems(_this5[propName], oldValue);
          }
        });
      }
    }, {
      key: "_x2jsLoaded",
      value: function _x2jsLoaded(e) {
        this._x2js = true;

        if (this.__ready) {
          this.initRequest();
        }
      }
      /**
       * life cycle, element is afixed to the DOM
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        this.__ready = true;

        if (this._x2js) {
          this.initRequest();
        }
      }
      /**
       * life cycle, element is removed from the DOM
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-".concat(name, "-loaded"), this._x2jsLoaded.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(RssItems.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject5_61492ec0809211edaa2833647dc78c6c || (_templateObject5_61492ec0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host([hidden]) {\n          display: none;\n        }\n\n        :host {\n          display: flex;\n          flex-wrap: wrap;\n          flex-direction: row;\n          align-items: flex-start;\n          justify-content: space-between;\n        }\n\n        :host * {\n          box-sizing: border-box;\n        }\n\n        h3,\n        p {\n          margin: 0;\n        }\n\n        a {\n          color: var(--primary-color, inherit);\n          text-decoration: none;\n        }\n\n        article {\n          margin-bottom: 2em;\n        }\n\n        .thumbnail-container {\n          display: block;\n          overflow: hidden;\n          width: 100%;\n          height: 180px;\n        }\n\n        .thumbnail {\n          width: 100%;\n          height: 100%;\n          transition: transform 0.5s ease-out;\n        }\n\n        .thumbnail-container:hover .thumbnail,\n        .thumbnail-container:focus .thumbnail {\n          transform: scale3d(1.3, 1.3, 1);\n        }\n\n        .title {\n          min-height: 3em;\n          margin: 1em 0 0.5em;\n        }\n\n        .excerpt {\n          min-height: 6em;\n          margin: 0.5em 0 2em;\n        }\n\n        @media (max-width: 599px) {\n          .title,\n          .excerpt {\n            min-height: 0;\n          }\n        }\n\n        @media (min-width: 600px) {\n          article {\n            flex: 1 1 40%;\n            margin-right: 2em;\n          }\n\n          article:nth-of-type(2n),\n          article:last-of-type {\n            margin-right: 0;\n          }\n        }\n\n        @media (min-width: 900px) {\n          article {\n            flex: 1 1 30%;\n          }\n\n          article:nth-of-type(2n) {\n            margin-right: 2em;\n          }\n\n          article:nth-of-type(3n) {\n            margin-right: 0;\n          }\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Rss feed",
            description: "visualize RSS items",
            icon: "communication:rss-feed",
            color: "orange",
            groups: ["RSS"],
            handles: [{
              type: "rss",
              source: "source"
            }],
            meta: {
              author: "btopro",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "url",
              title: "Feed URL",
              description: "URL to the XML feed",
              inputMethod: "textfield"
            }, {
              property: "max",
              title: "Max items",
              description: "Max number of feed items to display",
              inputMethod: "number"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RssItems), "properties", this)), {}, {
          /**
           * If true init rss request.
           */
          auto: {
            type: Boolean
          },

          /**
           * The retrieved items array.
           */
          items: {
            type: Array
          },

          /**
           * Max number of items to show. If it is undefined shows all items.
           */
          max: {
            type: Number
          },

          /**
           * Max length for item excerpts. If the excerpt exceeds this length it will be trimed and will have an ellipsis appended.
           */
          maxExcerptLength: {
            type: Number,
            attribute: "max-excerpt-length"
          },

          /**
           * Max length for item titles. If the title exceeds this length it will be trimed and will have an ellipsis appended.
           */
          maxTitleLength: {
            type: Number,
            attribute: "max-title-length"
          },

          /**
           * Read more anchor text.
           */
          readMoreAnchorText: {
            type: Boolean,
            attribute: "read-more-anchor-text"
          },

          /**
           * Read more image alternative text.
           */
          readMoreImageAlt: {
            type: Boolean,
            attribute: "read-more-image-alt"
          },

          /**
           * If true the items elements will display a read more link.
           */
          showReadMore: {
            type: Boolean,
            attribute: "show-read-more"
          },

          /**
           * The URL of the RSS.
           */
          url: {
            type: String
          },
          xml: {
            type: Object
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "rss-items";
      }
    }]);
    return RssItems;
  }(_index.LitElement);

  _exports.RssItems = RssItems;
  window.customElements.define(RssItems.tag, RssItems);
});