define(["exports", "../../../lit/index.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _index, _simpleIconLite, _simpleIcons, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsUrlComboItem = void 0;

  var _templateObject_ddd018208e0011ed99ce491205e67b1d, _templateObject2_ddd018208e0011ed99ce491205e67b1d, _templateObject3_ddd018208e0011ed99ce491205e67b1d, _templateObject4_ddd018208e0011ed99ce491205e67b1d, _templateObject5_ddd018208e0011ed99ce491205e67b1d, _templateObject6_ddd018208e0011ed99ce491205e67b1d, _templateObject7_ddd018208e0011ed99ce491205e67b1d, _templateObject8_ddd018208e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-fields-url-combo-item`
   * `displays a selectable list of resources as a grid or combobox`
   * @demo demo/index.html
   * @element simple-fields-url-combo-item
   */
  var SimpleFieldsUrlComboItem = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(SimpleFieldsUrlComboItem, _LitElement);

    var _super = _createSuper(SimpleFieldsUrlComboItem);

    /**
     * HTMLElement
     */
    function SimpleFieldsUrlComboItem() {
      babelHelpers.classCallCheck(this, SimpleFieldsUrlComboItem);
      return _super.call(this);
    }
    /**
     * LitElement ready
     */


    babelHelpers.createClass(SimpleFieldsUrlComboItem, [{
      key: "render",
      value: // Template return function
      function render() {
        return (0, _index.html)(_templateObject_ddd018208e0011ed99ce491205e67b1d || (_templateObject_ddd018208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["", "", ""])), this.previewTemplate, this.labelTemplate);
      }
      /**
       * default list of icons by file extension
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       */

    }, {
      key: "iconTypes",
      get: function get() {
        return {
          anchor: "hax:anchor",
          page: "lrn:content",
          pdf: "hax:file-pdf",
          doc: "hax:file-doc",
          docx: "hax:file-docx",
          ppt: "hax:file-ppt",
          pptx: "hax:file-ppt",
          csv: "hax:file-csv",
          xls: "hax:file-xls",
          xlsx: "hax:file-xls",
          url: "icons:language",
          file: "hax:file-blank",
          mp4: "av:movie",
          mov: "av:movie",
          webm: "av:movie",
          mp3: "av:volume-up",
          wav: "av:volume-up",
          html: "icons:language",
          tel: "communication:phone",
          email: "icons:mail"
        };
      }
      /**
       * default site location
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {object}
       */

    }, {
      key: "currentLocation",
      get: function get() {
        return window.location;
      }
      /**
       * URL object from value string
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {object}
       */

    }, {
      key: "resourceURL",
      get: function get() {
        var url = new URL(this.value || "./", this.currentLocation);
        return url;
      }
      /**
       * whether or not value is local to current site
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {boolean}
       */

    }, {
      key: "isLocal",
      get: function get() {
        return !!this.resourceURL.hostname && this.resourceURL.hostname == this.currentLocation.hostname;
      }
      /**
       * whether or not value on same as current location
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {boolean}
       */

    }, {
      key: "isSamePage",
      get: function get() {
        return this.isLocal && "".concat(this.resourceURL.pathname).concat(this.resourceURL.search) === "".concat(this.currentLocation.pathname).concat(this.currentLocation.search);
      }
      /**
       * whether or not value is an anchor on current page
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {boolean}
       */

    }, {
      key: "isAnchor",
      get: function get() {
        return this.isSamePage && !!this.resourceURL.hash;
      }
      /**
       * value's file extension
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {string}
       */

    }, {
      key: "fileExtension",
      get: function get() {
        var pathname = !!this.resourceURL && !!this.resourceURL.pathname ? this.resourceURL.pathname : "",
            parts = pathname.match(/\.\w+$/),
            extension = parts && parts[0] ? parts[0].replace(/^\./, "") : !!this.type ? this.type : "";
        return (extension || "").toLowerCase();
      }
      /**
       * file extensions of images that can be previewed on the web
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {string}
       */

    }, {
      key: "imageTypes",
      get: function get() {
        return ["gif", "svg", "png", "jpg", "jpeg"];
      }
      /**
       * file extensions of web pages
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {string}
       */

    }, {
      key: "pageTypes",
      get: function get() {
        return ["html", "htm", "php", ""];
      }
      /**
       * whether value is a web page
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {boolean}
       */

    }, {
      key: "isPage",
      get: function get() {
        return this.pageTypes.includes(this.fileExtension);
      }
      /**
       * whether value is an email address
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {boolean}
       */

    }, {
      key: "isEmail",
      get: function get() {
        return !!this.resourceURL && this.resourceURL.protocol === "mailto:";
      }
      /**
       * whether value is a phone number
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {boolean}
       */

    }, {
      key: "isPhone",
      get: function get() {
        return !!this.resourceURL && this.resourceURL.protocol === "tel:";
      }
      /**
       * whether value is an image
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {boolean}
       */

    }, {
      key: "isImage",
      get: function get() {
        return this.imageTypes.includes(this.fileExtension);
      }
      /**
       * gets url for preview thumbnail
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {string}
       */

    }, {
      key: "previewSrc",
      get: function get() {
        return !!this.preview && this.preview.trim() !== "" ? this.preview : // not sure we want images auto loading
        //: this.isImage && !!this.value && this.value !== ""
        //? this.value
        undefined;
      }
      /**
       * icon name for item based
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {string}
       */

    }, {
      key: "iconName",
      get: function get() {
        return !!this.icon && this.icon.trim() !== "" ? this.icon : this.isAnchor ? this.iconTypes["anchor"] : this.isLocal && this.isPage ? this.iconTypes["page"] : this.isPage ? this.iconTypes["html"] : this.isEmail ? this.iconTypes["email"] : this.isPhone ? this.iconTypes["tel"] : !!this.fileExtension && this.fileExtension !== "" ? this.iconTypes[this.fileExtension] : this.iconTypes["file"];
      }
      /**
       * icon template of item
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {object}
       */

    }, {
      key: "iconTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject2_ddd018208e0011ed99ce491205e67b1d || (_templateObject2_ddd018208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<simple-icon-lite\n      part=\"preview\"\n      icon=\"", "\"\n    ></simple-icon-lite>"])), this.iconName);
      }
      /**
       * preview image template of item
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {object}
       */

    }, {
      key: "imageTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject3_ddd018208e0011ed99ce491205e67b1d || (_templateObject3_ddd018208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<span\n      part=\"preview\"\n      style=\"background-image: url(", ")\"\n    ></span>"])), this.previewSrc);
      }
      /**
       * preview template, based on preview or icon by default;
       * if none is provided, template based on previewSrc or iconName
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {object}
       */

    }, {
      key: "previewTemplate",
      get: function get() {
        return !!this.preview && this.preview !== "" ? this.imageTemplate : !!this.icon && this.icon !== "" ? this.iconTemplate : !!this.previewSrc && this.previewSrc !== "" ? this.imageTemplate : !!this.iconName && this.iconName !== "" ? this.iconTemplate : "";
      }
      /**
       * label template for item
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {object}
       */

    }, {
      key: "labelTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject4_ddd018208e0011ed99ce491205e67b1d || (_templateObject4_ddd018208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<span part=\"label\">\n      ", "\n      ", "\n    </span>"])), this.primaryLabelTemplate, !!this.name && this.name.trim() !== "" ? this.secondaryLabelTemplate : "");
      }
      /**
       * primary label template with item name or value
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {object}
       */

    }, {
      key: "primaryLabelTemplate",
      get: function get() {
        return !!this.name && this.name.trim() !== "" ? (0, _index.html)(_templateObject5_ddd018208e0011ed99ce491205e67b1d || (_templateObject5_ddd018208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<span part=\"label-primary\">", "</span>"])), this.name) : !!this.value && this.value.trim() !== "" ? (0, _index.html)(_templateObject6_ddd018208e0011ed99ce491205e67b1d || (_templateObject6_ddd018208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<span part=\"label-primary\">", "</span>"])), this.value) : "";
      }
      /**
       * secondary label template with item value
       *
       * @readonly
       * @memberof SimpleFieldsUrlComboItem
       * @returns {object}
       */

    }, {
      key: "secondaryLabelTemplate",
      get: function get() {
        return !!this.value && this.value.trim() !== "" ? (0, _index.html)(_templateObject7_ddd018208e0011ed99ce491205e67b1d || (_templateObject7_ddd018208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<span part=\"label-secondary\">", "</span>"])), this.value) : "";
      } // properties available to the custom element for data binding

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {}
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        changedProperties.forEach(function (oldValue, propName) {});
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject8_ddd018208e0011ed99ce491205e67b1d || (_templateObject8_ddd018208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: flex;\n          align-items: center;\n          padding: var(--simple-fields-button-padding, 2px);\n          font-size: var(--simple-fields-detail-font-size, 12px);\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n        *[part=\"preview\"] {\n          width: var(--simple-fields-url-combo-preview-size, 26px);\n          height: var(--simple-fields-url-combo-preview-size, 26px);\n          --simple-icon-height: var(\n            --simple-fields-url-combo-preview-size,\n            26px\n          );\n          --simple-icon-width: var(\n            --simple-fields-url-combo-preview-size,\n            26px\n          );\n          margin-right: var(--simple-fields-button-padding, 2px);\n        }\n        span[part=\"preview\"] {\n          background-position: center;\n          background-size: cover;\n          background-repeat: no-repeat;\n          border-radius: var(--simple-fields-border-radius, 2px);\n        }\n        span[part=\"label\"] {\n          max-width: 100%;\n          flex: 1 1 auto;\n        }\n        span[part=\"label\"] span {\n          display: block;\n          line-height: 100%;\n          margin: 0;\n          overflow-wrap: break-word;\n          word-wrap: break-word;\n        }\n        span[part=\"label-secondary\"] {\n          font-size: var(--simple-fields-meta-font-size, 10px);\n          opacity: var(--simple-fields-meta-opacity, unset);\n          color: var(--simple-fields-meta-color);\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsUrlComboItem), "properties", this)), {}, {
          /**
           * human readable name, label, text, or title of resource
           */
          name: {
            name: "name",
            type: String,
            reflectToAttribute: true
          },

          /**
           * optional: preferred icon for resource
           */
          icon: {
            name: "icon",
            type: String,
            reflectToAttribute: true
          },

          /**
           * optional: preferred url for thumbnail image preview of resource
           */
          preview: {
            name: "preview",
            type: String,
            reflectToAttribute: true
          },

          /**
           * optional: preferred resource file type
           */
          type: {
            name: "type",
            type: String,
            reflectToAttribute: true
          },

          /**
           * url, src, id, filename or other unique value for resource
           */
          value: {
            name: "value",
            type: String,
            reflectToAttribute: true
          }
        });
      }
      /**
       * Convention we use
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-fields-url-combo-item";
      }
    }]);
    return SimpleFieldsUrlComboItem;
  }(_index.LitElement);

  _exports.SimpleFieldsUrlComboItem = SimpleFieldsUrlComboItem;
  customElements.define(SimpleFieldsUrlComboItem.tag, SimpleFieldsUrlComboItem);
});