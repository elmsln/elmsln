define(["exports", "../../../lit/index.js", "./simple-toolbar-button.js"], function (_exports, _index, _simpleToolbarButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleToolbarMoreButton = void 0;

  var _templateObject_de875a308e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-toolbar-more-button`
   * a more button to toggle collapsed buttons in the rich text editor
   *
   * @customElement
   * @extends SimpleToolbarButtonBehaviors
   * @extends LitElement
   * @lit-html
   * @lit-element
   * @demo ./demo/buttons.html
   */
  var SimpleToolbarMoreButton = /*#__PURE__*/function (_SimpleToolbarButtonB) {
    babelHelpers.inherits(SimpleToolbarMoreButton, _SimpleToolbarButtonB);

    var _super = _createSuper(SimpleToolbarMoreButton);

    function SimpleToolbarMoreButton() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleToolbarMoreButton);
      _this = _super.call(this);
      _this.icon = "more-vert";
      _this.toggled = false;
      _this.toggles = true;
      _this.label = "More buttons";
      _this.labelToggled = "Fewer buttons";
      _this.tooltipDirection = "left";
      _this.disabled = false;
      return _this;
    }
    /**
     * toggles button if shortcutKey is pressed
     *
     * @param {string} key
     * @event toggle
     */


    babelHelpers.createClass(SimpleToolbarMoreButton, [{
      key: "_handleShortcutKeys",
      value: function _handleShortcutKeys(e, key) {
        this.dispatchEvent(new CustomEvent("toggle", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: _objectSpread(_objectSpread({}, e.detail), {}, {
            button: this,
            shortcutKey: this
          })
        }));
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "simple-toolbar-more-button";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleToolbarMoreButton), "styles", this)), [(0, _index.css)(_templateObject_de875a308e0011ed99ce491205e67b1d || (_templateObject_de875a308e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host([hidden]) {\n          display: none !important;\n        }\n      "])))]);
      }
    }]);
    return SimpleToolbarMoreButton;
  }((0, _simpleToolbarButton.SimpleToolbarButtonBehaviors)(_index.LitElement));

  _exports.SimpleToolbarMoreButton = SimpleToolbarMoreButton;
  customElements.define(SimpleToolbarMoreButton.tag, SimpleToolbarMoreButton);
});