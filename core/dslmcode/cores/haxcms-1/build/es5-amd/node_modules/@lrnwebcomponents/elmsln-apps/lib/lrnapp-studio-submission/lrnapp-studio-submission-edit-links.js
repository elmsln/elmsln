define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-button.js", "../../../hax-iconset/lib/simple-hax-iconset.js", "../../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../../@polymer/paper-dialog/paper-dialog.js", "../../../../@polymer/paper-input/paper-input.js", "./lrnapp-studio-submission-edit-add-asset.js"], function (_exports, _polymerElement, _polymerDom, _simpleIcon, _simpleIcons, _simpleIconButton, _simpleHaxIconset, _domRepeat, _paperDialog, _paperInput, _lrnappStudioSubmissionEditAddAsset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioSubmissionEditLinks = void 0;

  var _templateObject_b410e4e0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappStudioSubmissionEditLinks = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappStudioSubmissionEditLinks, _PolymerElement);

    var _super = _createSuper(LrnappStudioSubmissionEditLinks);

    function LrnappStudioSubmissionEditLinks() {
      babelHelpers.classCallCheck(this, LrnappStudioSubmissionEditLinks);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappStudioSubmissionEditLinks, [{
      key: "_openDialog",
      value: function _openDialog() {
        // @todo switch to singleton
        this.$.dialog.open();
      }
    }, {
      key: "_createLink",
      value: function _createLink(e) {
        var links = this.links;

        if (links === null) {
          this.set("links", []);
        }

        this.push("links", {
          url: this.newlink
        });
        this.newlink = "";
      }
    }, {
      key: "_deleteLink",
      value: function _deleteLink(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var deleteIndex = normalizedEvent.localTarget.getAttribute("data-index");
        this.splice("links", deleteIndex, 1);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_b410e4e0809211edaa2833647dc78c6c || (_templateObject_b410e4e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        .item {\n          display: flex;\n          margin: auto;\n        }\n\n        .info {\n          flex: 1 1 auto;\n        }\n\n        .create {\n          display: flex;\n          align-items: center;\n        }\n\n        .input {\n          flex: 1 1 auto;\n        }\n\n        paper-dialog {\n          width: 50%;\n          width: 50vmax;\n          padding: 1em;\n        }\n      </style>\n\n      <template is=\"dom-repeat\" items=\"{{links}}\" as=\"link\">\n        <div class=\"item\">\n          <div class=\"info\">\n            <div class=\"linksfield__url\">{{link.url}}</div>\n          </div>\n          <div class=\"linksfield__actions\">\n            <simple-icon-button\n              icon=\"delete\"\n              class=\"linksfield__delete\"\n              data-index$=\"{{index}}\"\n              on-click=\"_deleteLink\"\n            ></simple-icon-button>\n          </div>\n        </div>\n      </template>\n      <lrnapp-studio-submission-edit-add-asset\n        icon=\"link\"\n        display=\"pill\"\n        on-click=\"_openDialog\"\n      ></lrnapp-studio-submission-edit-add-asset>\n\n      <paper-dialog id=\"dialog\">\n        <h2>Add Link</h2>\n        <div style=\"height:50vh;width:100%;overflow:scroll;\">\n          <paper-input\n            id=\"link-input\"\n            class=\"input\"\n            label=\"URL\"\n            value=\"{{newlink}}\"\n          ></paper-input>\n        </div>\n        <div class=\"buttons\">\n          <button dialog-dismiss=\"\">Cancel</button>\n          <button dialog-confirm=\"\" on-click=\"_createLink\">Add Link</button>\n        </div>\n      </paper-dialog>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-submission-edit-links";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          links: {
            type: Array,
            value: null,
            notify: true
          },
          newlink: {
            type: String,
            value: ""
          }
        };
      }
    }]);
    return LrnappStudioSubmissionEditLinks;
  }(_polymerElement.PolymerElement);

  _exports.LrnappStudioSubmissionEditLinks = LrnappStudioSubmissionEditLinks;
  customElements.define(LrnappStudioSubmissionEditLinks.tag, LrnappStudioSubmissionEditLinks);
});