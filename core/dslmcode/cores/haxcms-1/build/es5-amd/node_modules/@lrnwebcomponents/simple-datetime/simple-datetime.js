define(["exports", "../../lit/index.js", "./lib/date.format.js"], function (_exports, _index, _dateFormat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleDatetime = void 0;

  var _templateObject_acca80d08e0011ed99ce491205e67b1d, _templateObject2_acca80d08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-datetime`
   * @element simple-datetime
   * A simple datetime element that takes in unix timestamp and outputs a date.
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   * - passing in a timestamp from unix and having it be php based date formatting to render is super helpful
   */
  var SimpleDatetime = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(SimpleDatetime, _LitElement);

    var _super = _createSuper(SimpleDatetime);

    /**
     * HTMLElement life cycle
     */
    function SimpleDatetime() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleDatetime);
      _this = _super.call(this);
      _this.format = "M jS, Y";
      _this.unix = false;
      return _this;
    }
    /**
     * LitElement constructable styles enhancement
     */


    babelHelpers.createClass(SimpleDatetime, [{
      key: "render",
      value:
      /**
       * LitElement life cycle - render callback
       */
      function render() {
        return (0, _index.html)(_templateObject_acca80d08e0011ed99ce491205e67b1d || (_templateObject_acca80d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <time datetime=\"", "\">", "</time> "])), this.date, this.date);
      }
    }, {
      key: "updated",
      value:
      /**
       * LitElement life cycle - property changed callback
       */
      function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (["timestamp", "format", "unix"].includes(propName)) {
            _this2.date = _this2.formatDate(_this2.timestamp, _this2.format, _this2.unix);
          }
        });
      }
      /**
       * Figure out the date
       */

    }, {
      key: "formatDate",
      value: function formatDate(timestamp, format, unix) {
        // unix timestamp is seconds, JS is milliseconds
        if (unix) {
          timestamp = timestamp * 1000;
        }

        return new Date(timestamp).format(format);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_acca80d08e0011ed99ce491205e67b1d || (_templateObject2_acca80d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-size: 14px;\n          color: #b3b3b1;\n          line-height: 30px;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "simple-datetime";
      }
      /**
       * LitElement life cycle -  properties definitions
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Javascript timestamp
           */
          timestamp: {
            type: Number
          },

          /**
           * Format to output, see https://github.com/jacwright/date.format#supported-identifiers
           */
          format: {
            type: String
          },

          /**
           * Date, generated from timestamp + format
           */
          date: {
            type: String
          },

          /**
           * Support for UNIX timestamp conversion on the fly
           */
          unix: {
            type: Boolean
          }
        };
      }
    }]);
    return SimpleDatetime;
  }(_index.LitElement);

  _exports.SimpleDatetime = SimpleDatetime;
  customElements.define(SimpleDatetime.tag, SimpleDatetime);
});