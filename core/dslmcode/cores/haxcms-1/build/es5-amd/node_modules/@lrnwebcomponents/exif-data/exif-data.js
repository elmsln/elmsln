define(["exports", "meta", "../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ExifData = void 0;
  meta = _interopRequireWildcard(meta);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `exif-data`
   * `obtain exif data from slotted elements`
   * @demo demo/index.html
   * @element exif-data
   */
  var ExifData = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(ExifData, _HTMLElement);

    var _super = _createSuper(ExifData);

    /**
     * life cycle
     */
    function ExifData() {
      var _this;

      babelHelpers.classCallCheck(this, ExifData);
      _this = _super.call(this);
      _this.nodeData = [];

      if (window.WCGlobalBasePath) {
        _this.basePath = window.WCGlobalBasePath + "lib/exif-js.js";
      } else {
        _this.basePath = new URL("./lib/exif-js.js", meta.url).href;
      } // see if we already have it imported


      if (_esGlobalBridge.ESGlobalBridgeStore.imports["exif-js"]) {
        setTimeout(function () {
          _this.__ready = true;

          _this.updateExif();
        }, 0);
      } else {
        _esGlobalBridge.ESGlobalBridgeStore.load("exif-js", "".concat(_this.basePath));

        window.addEventListener("es-bridge-exif-js-loaded", _this._onExifJsLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      }

      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      _this.render();

      return _this;
    }
    /**
     * Library loaded
     */


    babelHelpers.createClass(ExifData, [{
      key: "html",
      get: function get() {
        return "\n    <style>\n      ul.showdata {\n        z-index: 1;\n        visibility: visible;\n        opacity: .9;\n      }\n      ul {\n        position: absolute;\n        transition: 0.3s linear all;\n        background-color: #000000;\n        opacity: 0;\n        visibility: hidden;\n        overflow: scroll;\n        padding: 0;\n        margin: 0;\n      }\n      ul li {\n        padding: 8px;\n        font-size: 14px;\n        color: white;\n      }\n    </style>\n    <slot></slot>\n    <ul id=\"data\"></ul>";
      }
    }, {
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;
        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "_onExifJsLoaded",
      value: function _onExifJsLoaded() {
        window.removeEventListener("es-bridge-exif-js-loaded", this._onExifJsLoaded.bind(this));
        this.__ready = true;
        this.updateExif();
      }
    }, {
      key: "showDetails",
      value: function showDetails(item) {
        if (!item) {
          return false;
        }

        var target = this.alignTarget;

        if (!target) {
          target = item.node;
        }

        var dim = target.getBoundingClientRect();
        var content = "";

        for (var key in item.data) {
          if (item.data[key] != "" && item.data[key] != false && item.data[key] != " " && item.data[key] != 0 && item.data[key] != null) {
            content += "<li><strong>".concat(key, "</strong>: ").concat(item.data[key], "</li>");
          }
        }

        this.dataElement.innerHTML = content;

        if (this.alignTargetTop) {
          this.dataElement.style.top = this.alignTargetTop;
        } else {
          this.dataElement.style.top = dim.top + "px";
        }

        this.dataElement.style.height = dim.height + "px";
        this.dataElement.style.width = dim.width + "px";

        if (!this.noLeft) {
          this.dataElement.style.left = dim.left + "px";
        }

        this.dataElement.classList.add("showdata");
      }
    }, {
      key: "clickImage",
      value: function clickImage(e) {
        var _this2 = this;

        if (e.target.tagName === "IMG") {
          this.nodeData.forEach(function (item) {
            if (item.node === e.target) {
              _this2.showDetails(item);
            }
          });
        }
      }
      /**
       * Load exifData
       */

    }, {
      key: "getExifData",
      value: function getExifData(node, show) {
        var _this3 = this;

        if (window.EXIF) {
          window.EXIF.getData(node, function () {
            var data = window.EXIF.getAllTags(node); // REALLY verbose field

            delete data.MakerNote;
            delete data.thumbnail;

            _this3.nodeData.push({
              node: node,
              data: data
            }); // if we are told to show this and only 1 item exists, present details
            // this has to happen after getExifData otherwise there's a timing
            // issue because of the unknown length of execution time in getData above


            if (show && _this3.children.length === 1) {
              _this3.showDetails(_this3.nodeData[0]);
            }
          });
        }
      }
    }, {
      key: "updateExif",
      value: function updateExif() {
        var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        this.nodeData = [];
        this.dataElement.innerHTML = "";

        var _iterator = _createForOfIteratorHelper(this.childNodes),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var node = _step.value;

            if (this.__ready && node.tagName && node.tagName === "IMG") {
              this.getExifData(node, show);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "clickData",
      value: function clickData(e) {
        this.dataElement.classList.remove("showdata");
      }
      /**
       * life cycle, element is afixed to the DOM
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this4 = this;

        if (window.ShadyCSS) {
          window.ShadyCSS.styleElement(this);
        }

        this.dataElement = this.shadowRoot.querySelector("#data");

        if (this.getAttribute("no-events") == null) {
          this.addEventListener("click", this.clickImage.bind(this));
          this.dataElement.addEventListener("click", this.clickData.bind(this));
        }

        if (this.getAttribute("no-left") == null) {
          this.noLeft = false;
        } else {
          this.noLeft = true;
        } // any change, update things


        this.observer = new MutationObserver(function (mutations) {
          _this4.updateExif();
        });
        this.observer.observe(this, {
          childList: true
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        if (this.getAttribute("no-events") == null) {
          this.removeEventListener("click", this.clickImage.bind(this));
          this.dataElement.removeEventListener("click", this.clickData.bind(this));
        }

        this.observer.disconnect();
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      function get() {
        return "exif-data";
      }
    }]);
    return ExifData;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.ExifData = ExifData;
  customElements.define(ExifData.tag, ExifData);
});