define(["exports", "require", "../../../../lit/index.js", "../../simple-colors.js"], function (_exports, _require, _index, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.simpleColorsSwatches = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_b2fe3c60809211edaa2833647dc78c6c, _templateObject2_b2fe3c60809211edaa2833647dc78c6c, _templateObject3_b2fe3c60809211edaa2833647dc78c6c, _templateObject4_b2fe3c60809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  //import the shared styles

  /**
   * `simple-colors-swatches`
   * `A tool to document of all the colors in simple-colors`
   *
  ### Styling
  
  `<simple-colors-swatches>` provides the following custom properties and mixins
  for styling. See demo of "all of the colors" (`demo/colors.html`) for color variable styling.
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--simple-colors-swatch-contrast` | Modal title bar text color. | unset
  `--simple-colors-swatch-color` | Modal title bar background color. | unset
   * 
   * @extends SimpleColors
  
   * @demo ./demo/colors.html demo
   * @see "../../simple-colors.js"
   * @see "../simple-colors-picker.js"
   */
  var simpleColorsSwatches = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(simpleColorsSwatches, _SimpleColors);

    var _super = _createSuper(simpleColorsSwatches);

    /**
     * life cycle, element is afixed to the DOM
     */
    function simpleColorsSwatches() {
      var _this;

      babelHelpers.classCallCheck(this, simpleColorsSwatches);
      _this = _super.call(this);
      _this.swatchId = "grey_0";
      _this.swatchName = "grey-1";
      new Promise(function (res, rej) {
        return _require.default(["./simple-colors-swatch-info.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../simple-modal/lib/simple-modal-template.js"], res, rej);
      });
      return _this;
    }
    /**
     * gets color's title
     * @param {string} color name of color
     * @param {string} index color shade's index
     * @return {string} color's title
     */


    babelHelpers.createClass(simpleColorsSwatches, [{
      key: "render",
      value: // render function
      function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_b2fe3c60809211edaa2833647dc78c6c || (_templateObject_b2fe3c60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div>\n        <p>Click on the swatches above to learn more.</p>\n        <div class=\"rows\">\n          ", "\n        </div>\n        <simple-modal-template id=\"modal\" title=\"", "\">\n          <p slot=\"content\">\n            <simple-colors-swatch-info\n              swatch-id=\"", "\"\n              swatch-name=\"", "\"\n            >\n            </simple-colors-swatch-info>\n          </p>\n        </simple-modal-template>\n      </div>\n    "])), Object.keys(this.colors).map(function (color) {
          return (0, _index.html)(_templateObject2_b2fe3c60809211edaa2833647dc78c6c || (_templateObject2_b2fe3c60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n              <div class=\"row\">\n                ", "\n              </div>\n            "])), _this2.colors.grey.map(function (shade, index) {
            return (0, _index.html)(_templateObject3_b2fe3c60809211edaa2833647dc78c6c || (_templateObject3_b2fe3c60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n                    <button\n                      id=\"", "\"\n                      controls=\"swatchinfo\"\n                      style=\"background-color: ", ";\"\n                      title=\"", "\"\n                      @click=\"", "\"\n                    >\n                      <div>", "</div>\n                    </button>\n                  "])), _this2._getId(color, index), _this2.colors[color][index], _this2._getTitle(color, index), function (e) {
              return _this2._handleClick(color, index);
            }, _this2._getTitle(color, index));
          }));
        }), this.swatchName, this.swatchId, this.swatchName);
      }
      /**
       * properties available to the custom element for data binding
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "swatchId" && _this3.shadowRoot.querySelector("#modal") && _this3.shadowRoot.querySelector("#modal").openModal) _this3.shadowRoot.querySelector("#modal").openModal(_this3.shadowRoot.querySelector("#" + _this3.swatchId));
        });
      }
    }, {
      key: "_getTitle",
      value: function _getTitle(color, index) {
        return "".concat(color, "-").concat(this._getShade(index));
      }
      /**
       * gets color's unique id
       * @param {string} color name of color
       * @param {string} index color shade's index
       * @return {string} color's unique id
       */

    }, {
      key: "_getId",
      value: function _getId(color, index) {
        return "".concat(color, "_").concat(index);
      }
      /**
       * gets the shade number for a hex code at a given index
       * @param {string} index color shade's index
       * @return {number} shade number
       */

    }, {
      key: "_getShade",
      value: function _getShade(index) {
        return parseInt(index) + 1;
      }
      /**
       * when a button is tapped, change sset swatchName and swatchId
       * @param {string} color name of color
       * @param {string} index color shade's index
       */

    }, {
      key: "_handleClick",
      value: function _handleClick(color, index) {
        this.swatchId = this._getId(color, index);
        this.swatchName = this._getTitle(color, index);
      }
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}

    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(simpleColorsSwatches), "styles", this)), [(0, _index.css)(_templateObject4_b2fe3c60809211edaa2833647dc78c6c || (_templateObject4_b2fe3c60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          margin: 15px 0;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host simple-modal-template {\n          --simple-modal-titlebar-color: var(--simple-colors-swatch-contrast);\n          --simple-modal-titlebar-background: var(--simple-colors-swatch-color);\n        }\n        :host .row {\n          display: flex;\n          align-items: stretch;\n        }\n        :host button {\n          width: calc(8% - 6px);\n          height: 80px;\n          margin: 3px;\n          border: 1px solid black;\n          border-radius: 3px;\n          padding: 0;\n          display: flex;\n          flex-direction: column;\n          justify-content: flex-end;\n          align-items: stretch;\n        }\n        :host button div {\n          margin: 0;\n          padding: 2px;\n          font-size: 10px;\n          background: black;\n          color: white;\n          width: calc(100% - 4px);\n        }\n        :host button:focus,\n        :host button:hover {\n          opacity: 0.7;\n          cursor: pointer;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The id of the swatch (`color_index`)
           */
          swatchId: {
            attribute: "swatch-id",
            type: String
          },

          /**
           * The swatch name (`color-shade`)
           */
          swatchName: {
            attribute: "swatch-name",
            type: String
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-colors-swatches";
      }
    }]);
    return simpleColorsSwatches;
  }(_simpleColors.SimpleColors);

  _exports.simpleColorsSwatches = simpleColorsSwatches;
  customElements.define(simpleColorsSwatches.tag, simpleColorsSwatches);
});