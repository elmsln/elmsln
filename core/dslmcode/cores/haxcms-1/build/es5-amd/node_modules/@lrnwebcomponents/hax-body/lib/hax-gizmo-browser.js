define(["exports", "../../../lit/index.js", "../../simple-filter/simple-filter.js", "../../utils/utils.js", "./hax-store.js", "./hax-element-demo.js", "../../../mobx/dist/mobx.esm.js", "../../simple-fields/lib/simple-fields-field.js", "../../simple-toolbar/lib/simple-button-grid.js", "../../simple-popover/lib/simple-popover-selection.js", "../../i18n-manager/lib/I18NMixin.js"], function (_exports, _index, _simpleFilter, _utils, _haxStore, _haxElementDemo, _mobxEsm, _simpleFieldsField, _simpleButtonGrid, _simplePopoverSelection, _I18NMixin2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxGizmoBrowser = void 0;

  var _templateObject_9fd72110809211edaa2833647dc78c6c, _templateObject2_9fd72110809211edaa2833647dc78c6c, _templateObject3_9fd72110809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /* `hax-gizmo-browser`
   * `Browse a list of gizmos. This provides a listing of custom elements for people to search and select based on what have been defined as gizmos for users to select.`
   * @microcopy - the mental model for this element
   * - gizmo - silly name for the general public when talking about custom elements and what it provides in the end.
   */
  var HaxGizmoBrowser = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(HaxGizmoBrowser, _I18NMixin);

    var _super = _createSuper(HaxGizmoBrowser);

    function HaxGizmoBrowser() {
      var _this;

      babelHelpers.classCallCheck(this, HaxGizmoBrowser);
      _this = _super.call(this);
      _this.where = "title";
      _this.t = {
        filterContentTypes: "Filter Content Types"
      };

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        namespace: "hax"
      });

      _this.addEventListener("mouseleave", _this.closePopover.bind(babelHelpers.assertThisInitialized(_this)));

      _this.addEventListener("mouseout", _this.closePopover.bind(babelHelpers.assertThisInitialized(_this)));

      return _this;
    }

    babelHelpers.createClass(HaxGizmoBrowser, [{
      key: "closePopover",
      value: function closePopover() {
        var popover = window.SimplePopoverManager.requestAvailability();
        popover.opened = false;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_9fd72110809211edaa2833647dc78c6c || (_templateObject_9fd72110809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"toolbar-inner\" part=\"toolbar\">\n        <simple-fields-field\n          id=\"inputfilter\"\n          @value-changed=\"", "\"\n          aria-controls=\"filter\"\n          label=\"", "\"\n          type=\"text\"\n          auto-validate=\"\"\n          part=\"filter\"\n        ></simple-fields-field>\n      </div>\n      <simple-button-grid columns=\"4\" always-expanded part=\"grid\">\n        ", "\n      </simple-button-grid>\n    "])), this.inputfilterChanged, this.t.filterContentTypes, this.filtered.map(function (gizmo, i) {
          return (0, _index.html)(_templateObject2_9fd72110809211edaa2833647dc78c6c || (_templateObject2_9fd72110809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n            <simple-popover-selection event=\"hover\">\n              <hax-tray-button\n                show-text-label\n                voice-command=\"insert ", "\"\n                draggable=\"true\"\n                @dragstart=\"", "\"\n                index=\"", "\"\n                label=\"", "\"\n                event-name=\"insert-tag\"\n                event-data=\"", "\"\n                data-demo-schema=\"true\"\n                icon-position=\"top\"\n                icon=\"", "\"\n                part=\"grid-button\"\n                slot=\"button\"\n              ></hax-tray-button>\n              <hax-element-demo\n                tag-name=\"", "\"\n                slot=\"options\"\n              ></hax-element-demo>\n            </simple-popover-selection>\n          "])), gizmo.title, _this2._dragStart, i, gizmo.title, gizmo.tag, gizmo.icon, gizmo.tag);
        }));
      }
    }, {
      key: "_dragStart",
      value:
      /**
       * Drag start so we know what target to set
       */
      function _dragStart(e) {
        // create the tag
        var schema = _haxStore.HAXStore.haxSchemaFromTag(e.target.eventData);

        var target;

        if (schema.gizmo.tag && schema.demoSchema && schema.demoSchema[0]) {
          target = (0, _utils.haxElementToNode)(schema.demoSchema[0]);
        } else {
          target = document.createElement(e.target.eventData);
        }

        _haxStore.HAXStore.__dragTarget = target;

        if (e.dataTransfer) {
          e.dataTransfer.effectAllowed = "move";
          e.dataTransfer.dropEffect = "move";
        }

        e.stopPropagation();
        e.stopImmediatePropagation();
      }
    }, {
      key: "inputfilterChanged",
      value: function inputfilterChanged(e) {
        this.like = e.target.value;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "activeApp") {
            _this3._activeAppChanged(_this3[propName], oldValue);
          }

          if (propName == "filtered") {
            _this3.requestUpdate();
          }
        });
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this4 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxGizmoBrowser.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxGizmoBrowser.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        (0, _mobxEsm.autorun)(function () {
          _this4.resetList((0, _mobxEsm.toJS)(_haxStore.HAXStore.gizmoList));
        });
      }
      /**
       * Reset this browser.
       */

    }, {
      key: "resetList",
      value: function resetList(list) {
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxGizmoBrowser.prototype), "resetList", this).call(this, list);

        if (list) {
          this.items = babelHelpers.toConsumableArray(list.filter(function (gizmo, i) {
            // remove inline and hidden references
            if (gizmo && gizmo.meta && (gizmo.meta.inlineOnly || gizmo.meta.hidden || gizmo.requiresParent)) {
              return false;
            }

            return true;
          }));
        }
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject3_9fd72110809211edaa2833647dc78c6c || (_templateObject3_9fd72110809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: flex;\n          flex-direction: column;\n          align-items: stretch;\n          flex: 0 1 auto;\n          overflow-y: auto;\n        }\n        :host > * {\n          max-width: 100%;\n        }\n        simple-popover-selection {\n          display: flex;\n        }\n        hax-tray-button {\n          flex: auto;\n          font-size: 10px;\n          --hax-ui-font-size-sm: 10px;\n        }\n        .toolbar-inner {\n          display: flex;\n          flex-direction: column;\n          align-items: stretch;\n          width: 100%;\n          flex: 0 0 auto;\n        }\n        hax-tray-button::part(button) {\n          font-size: var(hax-ui-font-size-xs);\n        }\n        simple-fields-field {\n          margin-top: 0;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-gizmo-browser";
      }
    }]);
    return HaxGizmoBrowser;
  }((0, _I18NMixin2.I18NMixin)((0, _simpleFilter.SimpleFilterMixin)(_index.LitElement)));

  _exports.HaxGizmoBrowser = HaxGizmoBrowser;
  customElements.define(HaxGizmoBrowser.tag, HaxGizmoBrowser);
});