define(["exports", "../../../../lit/index.js", "../buttons/rich-text-editor-button.js", "../singletons/rich-text-editor-range-behaviors.js"], function (_exports, _index, _richTextEditorButton, _richTextEditorRangeBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorBreadcrumbs = void 0;

  var _templateObject_b2b65df0809211edaa2833647dc78c6c, _templateObject2_b2b65df0809211edaa2833647dc78c6c, _templateObject3_b2b65df0809211edaa2833647dc78c6c, _templateObject4_b2b65df0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-breadcrumbs`
   * a toolbar of selection's ancestor breadcrumbs
   *
   * ### Styling
  `<rich-text-editor-breadcrumbs>` uses RichTextToolbarStyles constant 
  from rich-text-editor-toolbar to set SimpleToolbarBehaviors's 
  simple-toolbar/simple-toolbar-button variables.
   *
   * @customElement
   * @extends LitElement
   * @extends RichTextToolbarStyles
   * @lit-html
   * @lit-element
   *  @element rich-text-editor-breadcrumbs
   */
  var RichTextEditorBreadcrumbs = /*#__PURE__*/function (_RichTextEditorRangeB) {
    babelHelpers.inherits(RichTextEditorBreadcrumbs, _RichTextEditorRangeB);

    var _super = _createSuper(RichTextEditorBreadcrumbs);

    function RichTextEditorBreadcrumbs() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorBreadcrumbs);
      _this = _super.call(this);
      _this.hidden = true;
      _this.sticky = false;
      _this.label = "Select";
      return _this;
    }
    /**
     * Handles button tap;
     * @param {event} e the button tab event
     * @returns {void}
     */


    babelHelpers.createClass(RichTextEditorBreadcrumbs, [{
      key: "_handleClick",
      value: function _handleClick(breadcrumb) {
        if (breadcrumb.selectAll) {
          this.selectNodeContents(breadcrumb.selectAll);
        } else {
          this.selectNode(breadcrumb);
        }

        if (this.editor) this.editor.focus();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_b2b65df0809211edaa2833647dc78c6c || (_templateObject_b2b65df0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      ", ":\n      ", "\n    "])), this.label, !this.selectionAncestors ? "" : (this.selectionAncestors || []).map(function (ancestor, i) {
          return (0, _index.html)(_templateObject2_b2b65df0809211edaa2833647dc78c6c || (_templateObject2_b2b65df0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n              <button\n                class=\"", "\"\n                controls=\"", "\"\n                @click=\"", "\"\n                tabindex=\"0\"\n              >\n                ", "\n              </button>\n              ", "\n            "])), !!ancestor.selectAll ? "" : "selectnode", _this2.controls, function (e) {
            return _this2._handleClick(ancestor);
          }, ancestor.nodeName.toLowerCase(), i + 1 >= (_this2.selectionAncestors || []).length ? "" : (0, _index.html)(_templateObject3_b2b65df0809211edaa2833647dc78c6c || (_templateObject3_b2b65df0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <span class=\"divider\"> &gt; </span> "]))));
        }));
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store tag name to make it easier to )obtain directly.
       */
      function get() {
        return "rich-text-editor-breadcrumbs";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * active rict-text-editor.
           */
          controls: {
            type: String
          },

          /**
           * Hide breadcrumbs
           */
          hidden: {
            type: Boolean,
            attribute: "hidden",
            reflect: true
          },

          /**
           * breadcrumb labels.
           */
          label: {
            type: String
          },

          /**
           * Should breadcrumbs stick to top so that it is always visible?
           */
          sticky: {
            type: Boolean,
            reflect: true
          },

          /**
           * array of ancestors of currently selected node
           */
          selectionAncestors: {
            type: Array
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(_richTextEditorButton.RichTextToolbarStyles), [(0, _index.css)(_templateObject4_b2b65df0809211edaa2833647dc78c6c || (_templateObject4_b2b65df0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          background-color: var(--rich-text-editor-bg, #ffffff);\n          color: var(--rich-text-editor-button-color #444);\n          border: var(--rich-text-editor-border-width, 1px) solid var(--rich-text-editor-border-color, #ddd);\n          padding: 3px 10px;\n        }\n        :host([sticky]) {\n          position: sticky;\n          bottom: 0;\n        }\n        .selectednode {\n          background-color: var(--rich-text-editor-button-bg, #ffffff);\n        }\n        button {\n          display: inline-block;\n          text-align: center;\n          min-width: 25px;\n          margin: 0;\n          padding: 2px 5px;\n        }\n        .selectNode {\n          font-family: monospace;\n        }\n\xA0\xA0\xA0\xA0\xA0\xA0"])))]);
      }
    }]);
    return RichTextEditorBreadcrumbs;
  }((0, _richTextEditorRangeBehaviors.RichTextEditorRangeBehaviors)(_index.LitElement));

  _exports.RichTextEditorBreadcrumbs = RichTextEditorBreadcrumbs;
  customElements.define(RichTextEditorBreadcrumbs.tag, RichTextEditorBreadcrumbs);
});