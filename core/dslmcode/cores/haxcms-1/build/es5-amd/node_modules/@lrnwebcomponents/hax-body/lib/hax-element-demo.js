define(["exports", "../../../lit/index.js", "./hax-store.js", "../../utils/utils.js", "../../intersection-element/lib/IntersectionObserverMixin.js"], function (_exports, _index, _haxStore, _utils, _IntersectionObserverMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxElementDemo = void 0;

  var _templateObject_d7465b908e0011ed99ce491205e67b1d, _templateObject2_d7465b908e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var HaxElementDemo = /*#__PURE__*/function (_IntersectionObserver) {
    babelHelpers.inherits(HaxElementDemo, _IntersectionObserver);

    var _super = _createSuper(HaxElementDemo);

    function HaxElementDemo() {
      var _this;

      babelHelpers.classCallCheck(this, HaxElementDemo);
      _this = _super.call(this);
      _this.tagName = null;
      _this.activeSchema = -1;
      return _this;
    }

    babelHelpers.createClass(HaxElementDemo, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_d7465b908e0011ed99ce491205e67b1d || (_templateObject_d7465b908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<slot></slot>"])));
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxElementDemo.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxElementDemo.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "tagName" && _this2[propName]) {
            _this2.innerHTML = "";

            var schema = _haxStore.HAXStore.haxSchemaFromTag(_this2[propName]);

            var el; // support for active element being run through for a conversion

            if (_this2.activePickerSchema !== -1 && document.querySelector("hax-picker") && document.querySelector("hax-picker")._elements && document.querySelector("hax-picker")._elements.length > 0) {
              // bc of data rendering we need to get full schema from source
              // this is bizarre looking for sure but we template stamp
              // the element into the modal and so it's globlly available at this time
              // the element also has prebuilt all of the known valid transformations
              // so instead of rebuilding and finding ours again we can just set the active
              // index to what it was at render time
              el = (0, _utils.haxElementToNode)(document.querySelector("hax-picker")._elements[_this2.activePickerSchema]);
            } else if (schema.gizmo.tag && schema.demoSchema && schema.demoSchema[0]) {
              el = (0, _utils.haxElementToNode)(schema.demoSchema[0]);
            } else {
              el = document.createElement(_this2[propName]);
            }

            _this2.appendChild(el);
          }
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-element-demo";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxElementDemo), "properties", this)), {}, {
          tagName: {
            type: String,
            attribute: "tag-name"
          },
          activePickerSchema: {
            type: Number,
            attribute: "active-picker-schema"
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_d7465b908e0011ed99ce491205e67b1d || (_templateObject2_d7465b908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          overflow: hidden;\n          max-width: 200px;\n          max-height: 250px;\n        }\n      "])))];
      }
    }]);
    return HaxElementDemo;
  }((0, _IntersectionObserverMixin.IntersectionObserverMixin)(_index.LitElement));

  _exports.HaxElementDemo = HaxElementDemo;
  customElements.define(HaxElementDemo.tag, HaxElementDemo);
});