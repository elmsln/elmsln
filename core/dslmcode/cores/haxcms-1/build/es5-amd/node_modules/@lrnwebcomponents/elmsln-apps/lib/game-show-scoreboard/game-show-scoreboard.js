define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../../@polymer/app-route/app-location.js", "../../../../@polymer/app-route/app-route.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../@polymer/paper-toggle-button/paper-toggle-button.js", "../../../../@polymer/paper-item/paper-item.js", "../elmsln-base-deps.js", "../../../../@polymer/paper-input/paper-input.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-button.js", "../../../hax-iconset/lib/simple-hax-iconset.js", "../../../../@vaadin/vaadin-grid/vaadin-grid.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-filter.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-sorter.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-sort-column.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-column-group.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-selection-column.js", "../../../simple-datetime/simple-datetime.js", "../../../elmsln-loading/elmsln-loading.js", "../../../simple-picker/simple-picker.js", "../../../lrndesign-avatar/lrndesign-avatar.js"], function (_exports, _polymerElement, _domIf, _domRepeat, _appLocation, _appRoute, _ironAjax, _paperToggleButton, _paperItem, _elmslnBaseDeps, _paperInput, _simpleIcon, _simpleIcons, _simpleIconButton, _simpleHaxIconset, _vaadinGrid, _vaadinGridFilter, _vaadinGridSorter, _vaadinGridSortColumn, _vaadinGridColumnGroup, _vaadinGridSelectionColumn, _simpleDatetime, _elmslnLoading, _simplePicker, _lrndesignAvatar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GameShowScoreboard = void 0;

  var _templateObject_eabde0d08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var GameShowScoreboard = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(GameShowScoreboard, _PolymerElement);

    var _super = _createSuper(GameShowScoreboard);

    function GameShowScoreboard() {
      babelHelpers.classCallCheck(this, GameShowScoreboard);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(GameShowScoreboard, [{
      key: "_computeDataRequestUrl",
      value: function _computeDataRequestUrl(dataPath, section, game) {
        return "".concat(dataPath, "&section=").concat(section, "&game=").concat(game);
      }
    }, {
      key: "_optionsDataChanged",
      value: function _optionsDataChanged(newValue) {
        if (newValue && newValue.status) {
          var sections = [];

          for (var i in newValue.data.sections) {
            sections.push([{
              alt: newValue.data.sections[i],
              value: i
            }]);
          }

          var games = [];

          for (var i in newValue.data.games) {
            games.push([{
              alt: newValue.data.games[i],
              value: i
            }]);
          }

          this.set("sectionOptions", sections);
          this.set("gameOptions", games);
        }
      }
    }, {
      key: "_activeDataChanged",
      value: function _activeDataChanged(newValue) {
        this.set("visibleData", newValue.data);
      }
      /**
       * Route changed
       */

    }, {
      key: "_routeChanged",
      value: function _routeChanged(route, endPoint) {
        if (typeof route.path === "string") {
          if (typeof endPoint === "string") {
            // ignore "home page" as well since that's our path
            if (route.path.startsWith(endPoint) || route.path == "/") {
              return;
            }
          }

          window.location.reload();
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(GameShowScoreboard.prototype), "connectedCallback", this).call(this);

        if (document.getElementById("block-mooc-nav-block-mooc-nav-nav")) {
          document.getElementById("block-mooc-nav-block-mooc-nav-nav").remove();
        }
      }
    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_eabde0d08e0011ed99ce491205e67b1d || (_templateObject_eabde0d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          align-content: center;\n          padding: 0.8em;\n        }\n        vaadin-grid-table-body > vaadin-grid-cell-content {\n          height: unset !important;\n        }\n        vaadin-grid#material {\n          height: 75vh;\n          font-family: Roboto, sans-serif;\n          --divider-color: rgba(0, 0, 0, var(--dark-divider-opacity));\n\n          --vaadin-grid-cell: {\n            padding: 0;\n          }\n\n          --vaadin-grid-header-cell: {\n            height: 3.5em;\n            color: rgba(0, 0, 0, var(--dark-secondary-opacity));\n            font-size: 1em;\n          }\n\n          --vaadin-grid-body-cell: {\n            height: 3em;\n            color: rgba(0, 0, 0, var(--dark-primary-opacity));\n            font-size: 0.8em;\n          }\n\n          --vaadin-grid-body-row-hover-cell: {\n            background-color: var(--paper-grey-200);\n          }\n\n          --vaadin-grid-body-row-selected-cell: {\n            background-color: var(--paper-grey-100);\n          }\n\n          --vaadin-grid-focused-cell: {\n            box-shadow: none;\n            font-weight: bold;\n          }\n        }\n\n        vaadin-grid#material .cell {\n          overflow: hidden;\n          text-overflow: ellipsis;\n          padding-right: 56px;\n        }\n\n        vaadin-grid#material .cell.last {\n          padding-right: 24px;\n        }\n\n        vaadin-grid#material .cell.numeric {\n          text-align: right;\n        }\n\n        vaadin-grid#material simple-fields-field {\n          --primary-color: var(--paper-indigo-500);\n          margin: 0 24px;\n        }\n\n        vaadin-grid#material vaadin-grid-sorter .cell {\n          flex: 1;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n\n        vaadin-grid#material vaadin-grid-sorter simple-icon {\n          transform: scale(0.8);\n        }\n\n        vaadin-grid#material vaadin-grid-sorter:not([direction]) simple-icon {\n          color: rgba(0, 0, 0, var(--dark-disabled-opacity));\n        }\n\n        vaadin-grid#material vaadin-grid-sorter[direction] {\n          color: rgba(0, 0, 0, var(--dark-primary-opacity));\n        }\n\n        vaadin-grid#material vaadin-grid-sorter[direction=\"desc\"] simple-icon {\n          transform: scale(0.8) rotate(180deg);\n        }\n        vaadin-grid-sorter {\n          text-align: center;\n        }\n        lrndesign-avatar {\n          display: inline-block;\n        }\n        .avatar-label {\n          display: inline-block;\n          margin-left: 0.2em;\n        }\n        simple-datetime,\n        .score {\n          margin: 0;\n          padding: 8px;\n          line-height: 14px;\n          font-size: 14px;\n          color: black;\n          text-align: center;\n          border-bottom: 1px dashed black;\n        }\n        simple-datetime:hover,\n        .score:hover {\n          background-color: #dddddd;\n        }\n      </style>\n      <app-location route=\"{{route}}\"></app-location>\n      <app-route\n        route=\"{{route}}\"\n        pattern=\"[[endPoint]]/submissions/:submission\"\n        data=\"{{data}}\"\n        tail=\"{{tail}}\"\n      >\n      </app-route>\n      <iron-ajax\n        auto\n        id=\"optionsrequest\"\n        url=\"[[optionsPath]]\"\n        handle-as=\"json\"\n        last-response=\"{{optionsData}}\"\n      ></iron-ajax>\n      <simple-picker\n        id=\"section\"\n        label=\"Section\"\n        value=\"{{section}}\"\n        options=\"[[sectionOptions]]\"\n      ></simple-picker>\n      <simple-picker\n        id=\"game\"\n        label=\"Game\"\n        value=\"{{game}}\"\n        options=\"[[gameOptions]]\"\n      ></simple-picker>\n      <iron-ajax\n        auto\n        id=\"datarequest\"\n        url=\"[[dataRequestUrl]]\"\n        handle-as=\"json\"\n        last-response=\"{{activeData}}\"\n      ></iron-ajax>\n      <vaadin-grid\n        hidden$=\"[[!visibleData]]\"\n        id=\"material\"\n        aria-label=\"Student project list\"\n        items=\"[[_toArray(visibleData)]]\"\n        theme=\"row-dividers\"\n        column-reordering-allowed\n        multi-sort\n      >\n        <vaadin-grid-column resizable>\n          <template class=\"header\">\n            <vaadin-grid-sorter id=\"sorter\" path=\"sis.sortable_name\"\n              >Student</vaadin-grid-sorter\n            >\n          </template>\n          <template>\n            <lrndesign-avatar\n              label=\"[[item.name]]\"\n              src=\"[[item.avatar]]\"\n            ></lrndesign-avatar>\n            <span class=\"avatar-label\">[[item.sis.sortable_name]]</span>\n          </template>\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Student\"\n              path=\"sis.sortable_name\"\n              value=\"[[_filterName]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"Student\"\n                value=\"{{_filterName::input}}\"\n                focus-target\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column resizable>\n          <template class=\"header\">\n            <vaadin-grid-sorter id=\"sorter\" path=\"name\"\n              >Name</vaadin-grid-sorter\n            >\n          </template>\n          <template> [[item.name]] </template>\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Student\"\n              path=\"name\"\n              value=\"[[_filterUserName]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"Username\"\n                value=\"{{_filterUserName::input}}\"\n                focus-target\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-sort-column\n          resizable\n          width=\"1em\"\n          header=\"Game\"\n          path=\"game\"\n        >\n          [[item.game]]\n        </vaadin-grid-sort-column>\n        <vaadin-grid-sort-column\n          resizable\n          width=\"1em\"\n          header=\"Section\"\n          path=\"section\"\n        >\n          [[item.section]]\n        </vaadin-grid-sort-column>\n        <vaadin-grid-sort-column\n          resizable\n          width=\"1em\"\n          header=\"High score\"\n          path=\"high\"\n        >\n          [[item.high]]\n        </vaadin-grid-sort-column>\n        <vaadin-grid-column\n          resizable\n          width=\"1em\"\n          header=\"All Scores\"\n          path=\"scores\"\n        >\n          <template>\n            <dom-repeat items=\"[[item.scores]]\" as=\"score\">\n              <template>\n                <div class=\"score\">[[score]]</div>\n              </template>\n            </dom-repeat>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column\n          resizable\n          width=\"1em\"\n          header=\"Attempt Dates\"\n          path=\"dates\"\n        >\n          <template>\n            <dom-repeat items=\"[[item.dates]]\" as=\"date\" mutable-data>\n              <template>\n                <simple-datetime\n                  format=\"M jS, Y h:i:s\"\n                  timestamp=\"[[date]]\"\n                  unix\n                ></simple-datetime>\n              </template>\n            </dom-repeat>\n          </template>\n        </vaadin-grid-column>\n      </vaadin-grid>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "game-show-scoreboard";
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_routeChanged(route, endPoint)"];
      }
      /**
       * props
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },
          optionsPath: {
            type: String
          },
          dataPath: {
            type: String
          },
          section: {
            type: String
          },
          game: {
            type: String,
            value: ""
          },
          dataRequestUrl: {
            type: String,
            computed: "_computeDataRequestUrl(dataPath, section, game)"
          },

          /**
           * routing variable for url
           */
          route: {
            type: String
          },
          tail: {
            type: String
          },
          optionsData: {
            type: Object,
            value: {},
            observer: "_optionsDataChanged"
          },
          sectionOptions: {
            type: Array,
            value: []
          },
          gameOptions: {
            type: Array,
            value: []
          },
          activeData: {
            type: Object,
            value: {},
            observer: "_activeDataChanged"
          },
          visibleData: {
            type: Array,
            value: []
          }
        };
      }
    }]);
    return GameShowScoreboard;
  }(_polymerElement.PolymerElement);

  _exports.GameShowScoreboard = GameShowScoreboard;
  customElements.define(GameShowScoreboard.tag, GameShowScoreboard);
});