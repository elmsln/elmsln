define(["exports", "../../lit/index.js", "../simple-colors/simple-colors.js", "../simple-progress/simple-progress.js", "../simple-fields/lib/simple-fields-field.js"], function (_exports, _index, _simpleColors, _simpleProgress, _simpleFieldsField) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleLogin = void 0;

  var _templateObject_71d8fd60809211edaa2833647dc78c6c, _templateObject2_71d8fd60809211edaa2833647dc78c6c, _templateObject3_71d8fd60809211edaa2833647dc78c6c, _templateObject4_71d8fd60809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-login`
   * @element simple-login
   * `a simple login form`
   *
   * @microcopy - language worth noting:
   * @demo demo/index.html
   */
  var SimpleLogin = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(SimpleLogin, _SimpleColors);

    var _super = _createSuper(SimpleLogin);

    /**
     * constructor
     */
    function SimpleLogin() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleLogin);
      _this = _super.call(this);
      _this.password = "";
      _this.username = "";
      _this.loading = false;
      _this.userInputLabel = "User name";
      _this.userInputErrMsg = "User name required";
      _this.passwordInputLabel = "Password";
      _this.passwordInputErrMsg = "Password required";
      _this.loginBtnText = "Login";
      return _this;
    }

    babelHelpers.createClass(SimpleLogin, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_71d8fd60809211edaa2833647dc78c6c || (_templateObject_71d8fd60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <div id=\"loginform\">\n      <simple-progress ?disabled=\"", "\"></simple-progress>\n      <div id=\"loginformcontent\">\n        ", "\n        ", "\n        <div id=\"errormsg\">", "</div>\n        <slot></slot>\n        <simple-fields-field\n          id=\"userinput\"\n          value=\"", "\"\n          @value-changed=\"", "\"\n          type=\"text\"\n          ?disabled=\"", "\"\n          label=\"", "\"\n          required\n          error-message=\"", "\"\n        ></simple-fields-field>\n        <simple-fields-field\n          id=\"passinput\"\n          required\n          value=\"", "\"\n          @value-changed=\"", "\"\n          ?disabled=\"", "\"\n          type=\"password\"\n          label=\"", "\"\n          error-message=\"", "\"\n        ></simple-fields-field>\n        <button\n          @click=\"", "\"\n          ?disabled=\"", "\"\n          id=\"loginbtn\"\n        >\n          ", "\n        </button>\n        <span id=\"buttons\"><slot name=\"buttons\"></slot></span>\n      </div>\n    </div>"])), !this.loading, this.title ? (0, _index.html)(_templateObject2_71d8fd60809211edaa2833647dc78c6c || (_templateObject2_71d8fd60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["<h1>", "</h1>"])), this.title) : "", this.subtitle ? (0, _index.html)(_templateObject3_71d8fd60809211edaa2833647dc78c6c || (_templateObject3_71d8fd60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["<h2>", "</h2>"])), this.subtitle) : "", this.errorMsg, this.username, this._usernameChanged, this.loading, this.userInputLabel, this.userInputErrMsg, this.password, this._passwordChanged, this.loading, this.passwordInputLabel, this.passwordInputErrMsg, this._login, this.loading, this.loginBtnText);
      } // properties available to the custom element for data binding

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleLogin.prototype), "updated", this).call(this);
        changedProperties.forEach(function (oldValue, propName) {
          // notify
          if (["username", "password"].includes(propName)) {
            _this2.dispatchEvent(new CustomEvent("".concat(propName, "-changed"), {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleLogin.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleLogin.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        setTimeout(function () {
          _this3.shadowRoot.querySelector("#loginform").addEventListener("keypress", _this3._keyPressLogin.bind(_this3));
        }, 0);
      }
      /**
       * Key pressed for the login
       */

    }, {
      key: "_keyPressLogin",
      value: function _keyPressLogin(e) {
        if (e.keyCode == 13) {
          //Enter
          this._login();

          return false;
        }
      }
    }, {
      key: "_passwordChanged",
      value: function _passwordChanged(e) {
        this.password = e.detail.value;
      }
    }, {
      key: "_usernameChanged",
      value: function _usernameChanged(e) {
        this.username = e.detail.value;
      }
      /**
       * Login
       */

    }, {
      key: "_login",
      value: function _login() {
        if (this.shadowRoot.querySelector("#userinput").validate() && this.shadowRoot.querySelector("#passinput").validate()) {
          this.dispatchEvent(new CustomEvent("simple-login-login", {
            cancelable: true,
            bubbles: true,
            composed: true,
            detail: {
              u: this.shadowRoot.querySelector("#userinput").value,
              p: this.shadowRoot.querySelector("#passinput").value
            }
          }));
        }
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleLogin), "styles", this)), [(0, _index.css)(_templateObject4_71d8fd60809211edaa2833647dc78c6c || (_templateObject4_71d8fd60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        #loginform {\n          width: var(--login-form-width, 450px);\n          height: var(--login-form-height, auto);\n          --simple-camera-snap-color: var(--login-form-color, #36bed4);\n          --simple-camera-snap-error: var(--login-form-error, red);\n          --simple-camera-snap-background: var(--login-form-background, white);\n          --simple-camera-snap-border-radius: var(\n            --login-form-image-bnorder-radius,\n            100%\n          );\n          box-shadow: 0 12px 16px 1px rgba(0, 0, 0, 0.14),\n            0 4px 22px 3px rgba(0, 0, 0, 0.12),\n            0 6px 7px -4px rgba(0, 0, 0, 0.4);\n        }\n\n        #loginformcontent {\n          padding: var(--login-form-padding, 48px);\n        }\n\n        #loginformcontent > * {\n          margin-top: var(\n            --login-form-margin-top,\n            var(--login-form-margin, 8px)\n          );\n          margin-bottom: var(\n            --login-form-margin-bottom,\n            var(--login-form-margin, 8px)\n          );\n        }\n\n        #loginbtn,\n        #buttons ::slotted(button) {\n          cursor: pointer;\n          width: var(--login-btn-width, auto);\n          margin: var(--login-btn-margin, 24px auto 0);\n          display: var(--login-btn-display, inline-flex);\n        }\n\n        #loginbtn[disabled] {\n          background-color: var(\n            --login-btn-disabled-background-color,\n            var(--simple-colors-default-theme-accent-12, #000000)\n          );\n        }\n\n        h1 {\n          margin: 0;\n        }\n\n        h2 {\n          margin: 0;\n        }\n\n        simple-progress {\n          width: 100%;\n        }\n\n        ::slotted(simple-login-avatar) {\n          margin: 0 auto;\n        }\n\n        #errormsg {\n          margin-top: 16px;\n          color: var(--login-error-label-color, var(--error-color));\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleLogin), "properties", this)), {}, {
          /**
           * Title of the loginscreen
           */
          title: String,

          /**
           * Subtitle of the loginscreen
           */
          subtitle: String,

          /**
           * Error message to show (example : "Invalid username")
           */
          errorMsg: String,

          /**
           * Content of the username field
           */
          username: {
            type: String
          },

          /**
           * Content of the password field
           */
          password: {
            type: String
          },

          /**
           * When true, all fields are disabled and the progress bar is visible
           */
          loading: {
            type: Boolean
          },

          /**
           * Placeholder of the username field
           */
          userInputLabel: {
            type: String,
            attribute: "user-input-label"
          },

          /**
           * Error message of the username field
           */
          userInputErrMsg: {
            type: String
          },

          /**
           * Placeholder of the password field
           */
          passwordInputLabel: {
            type: String,
            attribute: "password-input-label"
          },

          /**
           * Error message of the password field
           */
          passwordInputErrMsg: {
            type: String
          },

          /**
           * Login button label
           */
          loginBtnText: {
            type: String,
            attribute: "login-btn-text"
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-login";
      }
    }]);
    return SimpleLogin;
  }(_simpleColors.SimpleColors);

  _exports.SimpleLogin = SimpleLogin;
  customElements.define(SimpleLogin.tag, SimpleLogin);
});