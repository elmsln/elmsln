define(["exports", "../../../lit/index.js", "../../radio-behaviors/radio-behaviors.js"], function (_exports, _index, _radioBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleToolbarButtonGroup = void 0;

  var _templateObject_a6fa3770809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-toolbar-button-group`
   * a button for rich text editor (custom buttons can extend this)
   *
   * @customElement
   * @extends LitElement
   * @lit-html
   * @lit-element
   * @demo ./demo/buttons.html
   */
  var SimpleToolbarButtonGroup = /*#__PURE__*/function (_RadioBehaviors) {
    babelHelpers.inherits(SimpleToolbarButtonGroup, _RadioBehaviors);

    var _super = _createSuper(SimpleToolbarButtonGroup);

    function SimpleToolbarButtonGroup() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleToolbarButtonGroup);
      _this = _super.call(this);

      _this.setAttribute("role", "radiogroup");

      _this.classList.add("group");

      _this.addEventListener("button-toggled", _this._handleToggle);

      return _this;
    }

    babelHelpers.createClass(SimpleToolbarButtonGroup, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleToolbarButtonGroup.prototype), "connectedCallback", this).call(this);
        this.querySelectorAll("".concat(this.__query)).forEach(function (i) {
          if (!i.id) i.id = _this2._generateUUID();
        });
        this.selectItem(this.selection);

        this._updateItemData();
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_a6fa3770809211edaa2833647dc78c6c || (_templateObject_a6fa3770809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["<slot></slot>"])));
      }
      /**
       * allows no item to be selected
       * @readonly
       */

    }, {
      key: "__allowNull",
      get: function get() {
        return !this.required;
      }
      /**
       * query selector for slotted children, can be overridden
       * @readonly
       */

    }, {
      key: "__query",
      get: function get() {
        return "*[radio]:not([hidden])";
      }
    }, {
      key: "__selected",
      get: function get() {
        return "toggled";
      }
    }, {
      key: "_handleToggle",
      value: function _handleToggle(e) {
        this.selectItem(e.detail.isToggled ? e.detail.id : undefined);
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "simple-toolbar-button-group";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleToolbarButtonGroup), "properties", this)), {}, {
          required: {
            type: Boolean,
            attribute: "required",
            reflect: true
          }
        });
      }
    }]);
    return SimpleToolbarButtonGroup;
  }((0, _radioBehaviors.RadioBehaviors)(_index.LitElement));

  _exports.SimpleToolbarButtonGroup = SimpleToolbarButtonGroup;
  customElements.define(SimpleToolbarButtonGroup.tag, SimpleToolbarButtonGroup);
});