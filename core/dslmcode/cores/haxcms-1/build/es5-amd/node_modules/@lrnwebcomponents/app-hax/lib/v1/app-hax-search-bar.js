define(["exports", "../../../../lit/index.js", "../../../simple-tooltip/simple-tooltip.js", "./AppHaxStore.js"], function (_exports, _index, _simpleTooltip, _AppHaxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxSearchBar = void 0;

  var _templateObject_ae0a05b08e0011ed99ce491205e67b1d, _templateObject2_ae0a05b08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AppHaxSearchBar = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(AppHaxSearchBar, _LitElement);

    var _super = _createSuper(AppHaxSearchBar);

    function AppHaxSearchBar() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxSearchBar);
      _this = _super.call(this);
      _this.searchTerm = "";
      _this.disabled = false;
      _this.showSearch = false;
      return _this;
    } // Site.json is coming from


    babelHelpers.createClass(AppHaxSearchBar, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "searchItems") {
            _this2.displayItems = babelHelpers.toConsumableArray(_this2.searchItems);
          } else if (propName === "searchTerm") {
            _AppHaxStore.store.searchTerm = _this2.searchTerm;
          } else if (propName === "showSearch" && oldValue !== undefined) {
            if (_this2[propName] === false) {
              _this2.searchTerm = "";
            }
          }
        });
      }
    }, {
      key: "search",
      value: // eslint-disable-next-line class-methods-use-this
      function search() {
        _AppHaxStore.store.appEl.playSound("click");

        this.searchTerm = this.shadowRoot.querySelector("#searchField").value;
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_ae0a05b08e0011ed99ce491205e67b1d || (_templateObject_ae0a05b08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <simple-icon-button-lite\n        id=\"searchico\"\n        ?disabled=\"", "\"\n        label=\"Search\"\n        icon=\"icons:search\"\n        @click=\"", "\"\n      ></simple-icon-button-lite>\n      <simple-tooltip for=\"searchico\" position=\"bottom\"\n        >Toggle Search</simple-tooltip\n      >\n      <input\n        ?disabled=\"", "\"\n        id=\"searchField\"\n        @input=\"", "\"\n        type=\"text\"\n        placeholder=\"Search..\"\n      />\n    "])), this.disabled, this.toggleSearch, !this.showSearch, this.search);
      }
    }, {
      key: "toggleSearch",
      value: function toggleSearch() {
        var _this3 = this;

        if (!this.disabled) {
          this.shadowRoot.querySelector("#searchField").value = "";

          _AppHaxStore.store.appEl.playSound("click");

          this.showSearch = !this.showSearch;
          setTimeout(function () {
            _this3.shadowRoot.querySelector("#searchField").focus();
          }, 300);
        }
      }
    }], [{
      key: "tag",
      get: // a convention I enjoy so you can change the tag name in 1 place
      function get() {
        return "app-hax-search-bar";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          searchTerm: {
            type: String
          },
          showSearch: {
            type: Boolean,
            reflect: true,
            attribute: "show-search"
          },
          disabled: {
            type: Boolean,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_ae0a05b08e0011ed99ce491205e67b1d || (_templateObject2_ae0a05b08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          overflow: hidden;\n        }\n        input {\n          visibility: none;\n          opacity: 0;\n          width: 0;\n          transition: all ease-in-out 0.3s;\n          padding: 4px;\n          font-family: \"Press Start 2P\", sans-serif;\n          font-size: 20px;\n          margin: 2px 0 0 16px;\n        }\n        :host([show-search]) input {\n          visibility: visible;\n          opacity: 1;\n          width: 250px;\n          max-width: 25vw;\n        }\n        @media (max-width: 780px) {\n          :host([show-search]) input {\n            width: 250px;\n            max-width: 20vw;\n          }\n        }\n        @media (max-width: 600px) {\n          :host([show-search]) input {\n            width: 200px;\n            max-width: 20vw;\n          }\n        }\n        simple-icon-button-lite {\n          color: black;\n          --simple-icon-width: 40px;\n          --simple-icon-height: 40px;\n          padding: 2px;\n          margin: 0;\n          background-color: white;\n        }\n        simple-icon-button-lite[disabled] {\n          background-color: #cccccc;\n          pointer-events: none;\n          cursor: help;\n        }\n        simple-icon-button-lite:focus,\n        simple-icon-button-lite:hover {\n          background-color: #eeeeee;\n        }\n      "])))];
      }
    }]);
    return AppHaxSearchBar;
  }(_index.LitElement);

  _exports.AppHaxSearchBar = AppHaxSearchBar;
  customElements.define(AppHaxSearchBar.tag, AppHaxSearchBar);
});