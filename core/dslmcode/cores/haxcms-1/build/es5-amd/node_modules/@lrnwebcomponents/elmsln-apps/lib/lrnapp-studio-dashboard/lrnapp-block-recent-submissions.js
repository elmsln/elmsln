define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../@polymer/iron-list/iron-list.js", "../elmsln-base-deps.js", "../../../lrndesign-gallerycard/lrndesign-gallerycard.js", "../../../elmsln-loading/elmsln-loading.js"], function (_exports, _polymerElement, _polymerDom, _ironAjax, _ironList, _elmslnBaseDeps, _lrndesignGallerycard, _elmslnLoading) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappBlockRecentSubmissions = void 0;

  var _templateObject_eaf56b908e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappBlockRecentSubmissions = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappBlockRecentSubmissions, _PolymerElement);

    var _super = _createSuper(LrnappBlockRecentSubmissions);

    function LrnappBlockRecentSubmissions() {
      babelHelpers.classCallCheck(this, LrnappBlockRecentSubmissions);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappBlockRecentSubmissions, [{
      key: "_loadSubmissionUrl",
      value:
      /**
       * Handle tap on button above to redirect to the correct submission url.
       */
      function _loadSubmissionUrl(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var local = normalizedEvent.localTarget; // this will have the id of the current submission

        var active = local.getAttribute("data-submission-id"); // @todo need a cleaner integration but this at least goes the right place for now

        window.location.href = this.basePath + "lrnapp-studio-submission/submissions/" + active;
      }
    }, {
      key: "handleResponse",
      value: function handleResponse(e) {
        this.$.loading.hidden = true;
        setTimeout(function () {
          window.dispatchEvent(new Event("resize"));
        }, 0);
      }
    }, {
      key: "_getViewLink",
      value: function _getViewLink(nid) {
        return this.basePath + "lrnapp-studio-submission/submissions/" + nid;
      }
    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_eaf56b908e0011ed99ce491205e67b1d || (_templateObject_eaf56b908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"paper-item-styles\">\n        :host {\n          display: block;\n        }\n        button {\n          width: 100%;\n          border: none;\n          background-color: transparent;\n        }\n        lrndesign-gallerycard {\n          width: 100%;\n        }\n        lrndesign-gallerycard[elevation=\"1\"] {\n          box-shadow: none;\n        }\n      </style>\n      <iron-ajax\n        auto=\"\"\n        url=\"{{sourcePath}}\"\n        handle-as=\"json\"\n        last-response=\"{{response}}\"\n        on-response=\"handleResponse\"\n      ></iron-ajax>\n      <div id=\"loading\">\n        <h3>Loading..</h3>\n        <elmsln-loading color=\"grey-text\" size=\"large\"></elmsln-loading>\n      </div>\n      <iron-list items=\"[[_toArray(response.data)]]\" as=\"item\">\n        <template>\n          <button on-click=\"_loadSubmissionUrl\">\n            <lrndesign-gallerycard\n              data-submission-id$=\"[[item.id]]\"\n              title=\"[[item.attributes.title]]\"\n              author=\"[[item.relationships.author.data]]\"\n              comments=\"[[item.meta.comment_count]]\"\n              image=\"[[item.display.image]]\"\n              icon=\"[[item.display.icon]]\"\n              class=\"ferpa-protect\"\n            >\n            </lrndesign-gallerycard>\n          </button>\n        </template>\n      </iron-list>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-block-recent-submissions";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },
          sourcePath: {
            type: String,
            notify: true
          },
          response: {
            type: Array,
            notify: true
          }
        };
      }
    }]);
    return LrnappBlockRecentSubmissions;
  }(_polymerElement.PolymerElement);

  _exports.LrnappBlockRecentSubmissions = LrnappBlockRecentSubmissions;
  customElements.define(LrnappBlockRecentSubmissions.tag, LrnappBlockRecentSubmissions);
});