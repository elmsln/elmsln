define(["exports", "../../../lit/index.js", "./hax-toolbar-item.js", "../../simple-icon/lib/simple-icon-lite.js", "./hax-store.js"], function (_exports, _index, _haxToolbarItem, _simpleIconLite, _haxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxContextItem = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-context-item`
   * A single button in the hax context menu for consistency.
   *
   * @element hax-context-item
   * @extends HaxToolbarItemBehaviors
   *
   * @microcopy - the mental model for this element
   * - context - menu in the page the user can select an item from, this being 1 option in that list
   * - button - an item that expresses what interaction you will have with the content.
   */
  var HaxContextItem = /*#__PURE__*/function (_HaxToolbarItemBehavi) {
    babelHelpers.inherits(HaxContextItem, _HaxToolbarItemBehavi);

    var _super = _createSuper(HaxContextItem);

    function HaxContextItem() {
      var _this;

      babelHelpers.classCallCheck(this, HaxContextItem);
      _this = _super.call(this);
      _this.haxUIElement = true;
      _this.action = false;
      _this.more = false;
      _this.eventName = "button";
      _this.inputMethod = null;
      _this.propertyToBind = null;
      _this.slotToBind = null;
      _this.value = "";
      return _this;
    }

    babelHelpers.createClass(HaxContextItem, [{
      key: "_handleMousedown",
      value:
      /**
       * Store the selection object. This helps fix issues with safari
       * and holding focus on non-text elements actually stealing
       * the selection priority, making it impossible to know what's
       * been selected if clicking a button to try and apply something to.
       */
      function _handleMousedown(e) {
        if (!this.disabled) _haxStore.HAXStore._tmpSelection = _haxStore.HAXStore.getSelection();
      }
      /**
       * Fire an event that includes the eventName of what was just pressed.
       */

    }, {
      key: "_handleClick",
      value: function _handleClick(e) {
        if (!this.disabled) {
          this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              target: this,
              eventName: this.eventName,
              value: this.value
            }
          }));
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-context-item";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxContextItem), "properties", this)), {}, {
          /**
           * more implies there's an action after pressing the button
           * so it'll put a visual indicator as such
           */
          more: {
            type: Boolean
          },
          action: {
            type: Boolean
          },

          /**
           * Label for the button.
           */
          label: {
            type: String,
            reflect: true
          },

          /**
           * Method of input to display when activated. This is
           * only used when triggered as part of haxProperties
           */
          inputMethod: {
            type: String,
            reflect: true,
            attribute: "input-method"
          },

          /**
           * Optional slot to bind this value to.
           */
          propertyToBind: {
            type: String,
            reflect: true,
            attribute: "property-to-bind"
          },

          /**
           * Optional slot to bind this value to.
           */
          slotToBind: {
            type: String,
            reflect: true,
            attribute: "slot-to-bind"
          },

          /**
           * Optional description for this item.
           */
          description: {
            type: String,
            reflect: true
          },

          /**
           * Is this button concidered a primary interaction
           */
          default: {
            type: Boolean
          },

          /**
           * an optional value to send along in the press. Allows for
           * reusing events more easily
           */
          value: {
            type: String
          }
        });
      }
    }]);
    return HaxContextItem;
  }((0, _haxToolbarItem.HaxToolbarItemBehaviors)(_index.LitElement));

  _exports.HaxContextItem = HaxContextItem;
  customElements.define(HaxContextItem.tag, HaxContextItem);
});