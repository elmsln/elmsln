define(["exports", "../../../lit/index.js", "../simple-toolbar.js"], function (_exports, _index, _simpleToolbar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleButtonGridBehaviors = _exports.SimpleButtonGrid = void 0;

  var _templateObject_de709de08e0011ed99ce491205e67b1d, _templateObject2_de709de08e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * @customElement
   * @extends SimpleToolbarBehaviors
   * @class
   */
  var SimpleButtonGridBehaviors = function SimpleButtonGridBehaviors(SuperClass) {
    return /*#__PURE__*/function (_SimpleToolbarBehavio) {
      babelHelpers.inherits(_class, _SimpleToolbarBehavio);

      var _super = _createSuper(_class);

      // life cycle
      function _class() {
        babelHelpers.classCallCheck(this, _class);
        return _super.call(this);
      }

      babelHelpers.createClass(_class, [{
        key: "gridStyles",
        get: function get() {
          var styles = [];
          if (!!this.columns) styles.push("--simple-button-grid-cols:".concat(100 / this.columns, "%"));
          return styles.join(";");
        }
        /**
         * toolbar element's template
         *
         * @readonly
         * @memberof SimpleToolbar
         */

      }, {
        key: "toolbarTemplate",
        get: function get() {
          return (0, _index.html)(_templateObject_de709de08e0011ed99ce491205e67b1d || (_templateObject_de709de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        <div id=\"grid\">\n          <div\n            id=\"buttons\"\n            class=\"", "\"\n            style=\"", "\"\n            part=\"buttons\"\n          >\n            <slot></slot>\n            ", "\n          </div>\n        </div>\n      "])), !this.alwaysExpanded && this.collapsed ? "collapsed" : "", this.gridStyles, this.alwaysExpanded ? "" : this.moreButton);
        }
      }, {
        key: "_bottom",
        value: function _bottom(item) {
          return !!item && !!item.offsetTop && !!item.clientHeight ? item.offsetTop + item.clientHeight : undefined;
        }
      }, {
        key: "resizeToolbar",
        value: function resizeToolbar() {
          var _this = this;

          if (this.alwaysExpanded) return;

          var more = !this.shadowRoot ? undefined : this.shadowRoot.querySelector("#morebutton"),
              morebottom = this._bottom(more),
              max = this._bottom(this),
              items = babelHelpers.toConsumableArray(this.children || []),
              shown = true,
              lastVisible,
              rows = [];

          items.forEach(function (item) {
            if (item.removeAttribute) item.removeAttribute("collapse-hide");

            if (rows.length == 0) {
              rows.unshift(item.offsetTop);
            } else {
              var newrow = item.offsetTop > rows[0];
              if (newrow) rows.unshift(item.offsetTop);

              if (!!_this.rows && rows.length > _this.rows || !_this.rows && newrow && _this._bottom(item) > max) {
                item.setAttribute("collapse-hide", true);
                shown = false;
              } else if (!shown) {
                item.setAttribute("collapse-hide", true);
              } else {
                lastVisible = item;
              }
            }
          });
          this.collapseDisabled = shown && !(more && lastVisible && this._bottom(more) > max);
          if (!this.collapseDisabled && lastVisible) lastVisible.setAttribute("collapse-hide", true);
        }
      }], [{
        key: "tag",
        get:
        /**
         * Store the tag name to make it easier to obtain directly.
         * @notice function name must be here for tooling to operate correctly
         */
        function get() {
          return "simple-toolbar-grid";
        } // render function for styles

      }, {
        key: "baseStyles",
        get: function get() {
          return [(0, _index.css)(_templateObject2_de709de08e0011ed99ce491205e67b1d || (_templateObject2_de709de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          :host {\n            padding: 0;\n            margin: 0;\n            max-width: 100%;\n            display: flex;\n            overflow: hidden;\n            flex-direction: column;\n            align-items: stretch;\n            overflow: hidden !important;\n            --simple-button-grid-cols: var(\n              --simple-toolbar-button-min-width,\n              var(\n                --simple-toolbar-button-width,\n                var(--simple-toolbar-button-height, 24px)\n              )\n            );\n            transition: all 0.5s;\n            transition: z-index 0s;\n          }\n          :host([hidden]) {\n            z-index: -1;\n            visibility: hidden;\n            opacity: 0;\n            height: 0;\n          }\n          #grid {\n            flex: 1 1 auto;\n            max-width: 100%;\n            overflow: auto;\n          }\n\n          #buttons {\n            flex: 0 1 100%;\n            max-width: 100%;\n            display: flex;\n            flex-wrap: wrap;\n            --simple-toolbar-button-flex: var(\n              --simple-toolbar-button-grid-flex,\n              1 1 100%\n            );\n          }\n          #buttons {\n            display: grid;\n            overflow: visible;\n            grid-gap: var(--simple-button-grid-margin, 4px);\n            grid-template-columns: repeat(\n              auto-fill,\n              minmax(\n                calc(\n                  var(--simple-button-grid-cols) - 2 *\n                    var(--simple-button-grid-margin, 4px)\n                ),\n                1fr\n              )\n            );\n          }\n          :host([collapsed]:not([always-expanded]))\n            ::slotted(*[collapse-hide]) {\n            display: none !important;\n          }\n        "])))];
        } // properties available to custom element for data binding

      }, {
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)), {}, {
            columns: {
              type: Number,
              attribute: "columns"
            },
            rows: {
              type: Number,
              attribute: "rows"
            },
            disableAutogrow: {
              type: Boolean,
              attribute: "disable-autogrow",
              reflect: true
            }
          });
        }
      }]);
      return _class;
    }((0, _simpleToolbar.SimpleToolbarBehaviors)(SuperClass));
  };
  /**
   * `simple-toolbar`
   * a customizable toolbar
   *
  ### Styling
  
  `<simple-toolbar>` provides following custom properties and mixins
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  --simple-toolbar-border-color | default border color | transparent
  --simple-toolbar-border-width | default border width | 1px
  --simple-toolbar-group-border-color | border color for button groups | --simple-toolbar-border-color
  --simple-toolbar-group-border-width | border width for button groups | --simple-toolbar-border-width
  --simple-toolbar-group-padding | padding for button groups | 0 3px
   * 
   * @customElement
   * @extends SimpleButtonGridBehaviors
   * @extends LitElement
   * @lit-html
   * @lit-element
   * @demo demo/grid.html
   */


  _exports.SimpleButtonGridBehaviors = SimpleButtonGridBehaviors;

  var SimpleButtonGrid = /*#__PURE__*/function (_SimpleButtonGridBeha) {
    babelHelpers.inherits(SimpleButtonGrid, _SimpleButtonGridBeha);

    var _super2 = _createSuper(SimpleButtonGrid);

    function SimpleButtonGrid() {
      babelHelpers.classCallCheck(this, SimpleButtonGrid);
      return _super2.apply(this, arguments);
    }

    return babelHelpers.createClass(SimpleButtonGrid);
  }(SimpleButtonGridBehaviors(_index.LitElement));

  _exports.SimpleButtonGrid = SimpleButtonGrid;
  customElements.define("simple-button-grid", SimpleButtonGrid);
});