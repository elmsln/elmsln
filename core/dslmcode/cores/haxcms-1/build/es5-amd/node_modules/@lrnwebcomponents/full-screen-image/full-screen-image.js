define(["exports", "../../lit/index.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button.js"], function (_exports, _index, _simpleIcon, _simpleIcons, _simpleIconButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FullScreenImage = void 0;

  var _templateObject_6701b8a0809211edaa2833647dc78c6c, _templateObject2_6701b8a0809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
    * `full-screen-image`
    * @element full-screen-image
    * `full screen banner image with down arrow`
    *
    * @microcopy - language worth noting:
    *  -
    *
   
    * @polymer
    * @demo demo/index.html
    */
  var FullScreenImage = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(FullScreenImage, _LitElement);

    var _super = _createSuper(FullScreenImage);

    /**
     * HTMLElement
     */
    function FullScreenImage() {
      var _this;

      babelHelpers.classCallCheck(this, FullScreenImage);
      _this = _super.call(this);
      _this.title = "";
      _this.subtitle = "";
      _this.source = null;
      return _this;
    }
    /**
     * LitElement ready
     */


    babelHelpers.createClass(FullScreenImage, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_6701b8a0809211edaa2833647dc78c6c || (_templateObject_6701b8a0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <div class=\"fullpage-container\">\n      <div class=\"overlay-container\">\n        <h2>", "</h2>\n        <p>", "</p>\n      </div>\n      <simple-icon-button\n        id=\"down\"\n        icon=\"hardware:keyboard-arrow-down\"\n      ></simple-icon-button>\n      <div class=\"image-wrapper\">\n        <img loading=\"lazy\" id=\"img\" src=\"", "\" />\n      </div>\n    </div>"])), this.title, this.subtitle, this.source);
      } // haxProperty definition

    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        var _this2 = this;

        this.shadowRoot.querySelector("#down").addEventListener("click", function (e) {
          _this2.nextElementSibling.scrollIntoView({
            block: "start",
            inline: "nearest",
            behavior: "smooth"
          });
        });
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_6701b8a0809211edaa2833647dc78c6c || (_templateObject2_6701b8a0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-variant-ligatures: common-ligatures;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        h2 {\n          font-size: 4em;\n          font-weight: 200;\n          margin: 0px !important;\n          line-height: 1em;\n          text-transform: lowercase;\n          color: white;\n          letter-spacing: -0.04em;\n          font-family: \"Source Sans Pro\", Arial, Helvetica, sans-serif;\n        }\n\n        p {\n          font-weight: 400;\n          color: white;\n          line-height: 1em;\n          font-family: \"Source Sans Pro\", Arial, Helvetica, sans-serif;\n          font-size: 1em;\n          letter-spacing: 0.01em;\n          margin-top: 0;\n          margin-bottom: 1em;\n        }\n\n        img {\n          position: absolute;\n          margin: 0px;\n          padding: 0px;\n          border: none;\n          width: 1239px;\n          height: 774.375px;\n          max-width: none;\n          z-index: -999999;\n          left: 0px;\n          top: -57.1875px;\n        }\n\n        simple-icon-button {\n          --simple-icon-height: 45px;\n          --simple-icon-width: 75px;\n          line-height: 45px;\n          bottom: 1px;\n          right: 0px;\n          display: block;\n          position: absolute;\n          text-align: center;\n          color: white;\n          background-color: rgba(0, 0, 0, 0.6);\n        }\n\n        .fullpage-container {\n          display: block;\n        }\n\n        .image-wrapper {\n          left: 0px;\n          top: 0px;\n          bottom: 0px;\n          right: 0px;\n          overflow: hidden;\n          margin: 0px;\n          padding: 0px;\n          width: 100%;\n          z-index: -999998;\n          position: absolute;\n        }\n\n        .overlay-container {\n          display: block;\n          position: absolute;\n          text-align: right;\n          padding: 0.1em 1.5em 0.1em 6em;\n          bottom: 60px;\n          right: 0px;\n          background-color: rgba(191, 147, 45, 0.7);\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Full screen-image",
            description: "full screen banner image with down arrow",
            icon: "icons:android",
            color: "green",
            groups: ["Screen"],
            handles: [],
            meta: {
              author: "HAXTheWeb core team",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "title",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "subtitle",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "source",
              description: "",
              inputMethod: "textfield",
              required: true,
              icon: "icons:link",
              validationType: "url"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(FullScreenImage), "properties", this)), {}, {
          title: {
            type: String
          },
          subtitle: {
            type: String
          },
          source: {
            type: String
          }
        });
      }
      /**
       * convention
       */

    }, {
      key: "tag",
      get: function get() {
        return "full-screen-image";
      }
    }]);
    return FullScreenImage;
  }(_index.LitElement);

  _exports.FullScreenImage = FullScreenImage;
  customElements.define(FullScreenImage.tag, FullScreenImage);
});