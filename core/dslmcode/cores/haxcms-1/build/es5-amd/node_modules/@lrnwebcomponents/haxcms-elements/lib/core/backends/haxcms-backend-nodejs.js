define(["exports", "require", "../../../../../lit/index.js", "../haxcms-site-store.js", "../../../../../mobx/dist/mobx.esm.js", "../../../../jwt-login/jwt-login.js"], function (_exports, _require, _index, _haxcmsSiteStore, _mobxEsm, _jwtLogin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSBackendNodeJS = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_f9cb7c408e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `haxcms-backend-nodejs`
   * `a simple element to check for and fetch JWTs`
   *
   * @demo demo/index.html
   *
   * @microcopy - the mental model for this element
   * - jwt - a json web token which is an encrypted security token to talk
   */
  var HAXCMSBackendNodeJS = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HAXCMSBackendNodeJS, _LitElement);

    var _super = _createSuper(HAXCMSBackendNodeJS);

    /**
     * HTMLElement
     */
    function HAXCMSBackendNodeJS() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSBackendNodeJS);
      _this = _super.call(this);
      _this.__disposer = []; // see up a tag to place RIGHT next to the site-builder itself

      (0, _mobxEsm.autorun)(function (reaction) {
        _this.jwt = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.jwt);

        _this.__disposer.push(reaction);
      });
      return _this;
    }
    /**
     * LitElement life cycle - ready
     */


    babelHelpers.createClass(HAXCMSBackendNodeJS, [{
      key: "render",
      value:
      /**
       * LitElement
       */
      function render() {
        return (0, _index.html)(_templateObject_f9cb7c408e0011ed99ce491205e67b1d || (_templateObject_f9cb7c408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <jwt-login\n        id=\"jwt\"\n        jwt=\"", "\"\n        @jwt-changed=\"", "\"\n      ></jwt-login>\n    "])), this.jwt, this.jwtChanged);
      }
    }, {
      key: "jwtChanged",
      value: function jwtChanged(e) {
        this.jwt = e.detail.value;
        _haxcmsSiteStore.store.jwt = this.jwt;

        if (_haxcmsSiteStore.store.cmsSiteEditor && _haxcmsSiteStore.store.cmsSiteEditor.instance) {
          _haxcmsSiteStore.store.cmsSiteEditor.instance.jwt = this.jwt;
        } // support updates after the fact


        if (this.jwt != null && this.jwt != "null" && this.jwt != "" && typeof this.jwt == "string") {
          this.dynamicallyImportEditor();
        }
      }
      /**
       * Detatched life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSBackendNodeJS.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this2 = this;

        setTimeout(function () {
          if (window.appSettings) {
            var jwtlogin = _this2.shadowRoot.querySelector("#jwt");

            jwtlogin.url = window.appSettings.login;
            jwtlogin.refreshUrl = window.appSettings.refreshUrl;
            jwtlogin.logoutUrl = window.appSettings.logout;
            jwtlogin.redirectUrl = window.appSettings.redirectUrl; // allow setting in session driven environments
            // its not a real JWT but it drives the environment to operate correctly

            if (window.appSettings.jwt) {
              _this2.jwt = window.appSettings.jwt;
            }
          }

          if (_this2.jwt != null && _this2.jwt != "null" && _this2.jwt != "" && typeof _this2.jwt == "string") {
            _this2.dynamicallyImportEditor();
          } else {
            // other things will have to sort out the fact that while we
            // DO have a dynamic backend, we didn't get a hit on the JWT
            // meaning that we are in a dynamic environment but logged out
            // at the moment (or viewing a site we don't have authorization to)
            window.dispatchEvent(new CustomEvent("haxcms-not-logged-in", {
              bubbles: true,
              composed: true,
              cancelable: false,
              detail: _this2
            }));
          }
        }, 500);
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "dynamicallyImportEditor",
      value:
      /**
       * Import the editor
       */
      function dynamicallyImportEditor() {
        var _this3 = this;

        // attempt to dynamically import the hax cms site editor
        // which will appear to be injecting into the page
        // but because of this approach it should be non-blocking
        try {
          // prettier-ignore
          new Promise(function (res, rej) {
            return _require.default(["../haxcms-site-editor.js"], res, rej);
          }).then(function (e) {
            // if we don't have appSettings by this point
            // it means we don't actually have a backend / directions
            // this would be a published state or a state where
            // there is no actual backend to bother confiring with
            // possibly a user navigated to a site that doesn't
            // have JWT credentials but isn't actually published
            // we also need this here because PHP is the assumed
            // fallback backend
            if (window.appSettings) {
              _haxcmsSiteStore.store.cmsSiteEditorAvailability();

              _haxcmsSiteStore.store.cmsSiteEditor.instance.jwt = _this3.jwt;
              _haxcmsSiteStore.store.jwt = _this3.jwt;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.saveNodePath = window.appSettings.saveNodePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.saveManifestPath = window.appSettings.saveManifestPath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.saveOutlinePath = window.appSettings.saveOutlinePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.getNodeFieldsPath = window.appSettings.getNodeFieldsPath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.getSiteFieldsPath = window.appSettings.getSiteFieldsPath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.getFormToken = window.appSettings.getFormToken;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.publishSitePath = window.appSettings.publishSitePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.syncSitePath = window.appSettings.syncSitePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.revertSitePath = window.appSettings.revertSitePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.createNodePath = window.appSettings.createNodePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.deleteNodePath = window.appSettings.deleteNodePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.getUserDataPath = window.appSettings.getUserDataPath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.appStore = window.appSettings.appStore;
            }
          }, function (e) {//import failed
          });
        } catch (err) {// error in the event this is a double registration
        }
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "haxcms-backend-nodejs";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * JSON Web token, it'll come from a global call if it's available
           */
          jwt: {
            type: String
          }
        };
      }
    }]);
    return HAXCMSBackendNodeJS;
  }(_index.LitElement);

  _exports.HAXCMSBackendNodeJS = HAXCMSBackendNodeJS;
  customElements.define(HAXCMSBackendNodeJS.tag, HAXCMSBackendNodeJS);
});