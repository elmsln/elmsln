define(["exports", "../../../../../@polymer/polymer/polymer-element.js", "../../core/haxcms-site-store.js", "../../../../../mobx/dist/mobx.esm.js", "../query/site-query.js", "../../../../../@polymer/polymer/lib/elements/dom-repeat.js"], function (_exports, _polymerElement, _haxcmsSiteStore, _mobxEsm, _siteQuery, _domRepeat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteOutlineBlock = void 0;

  var _templateObject_c3345240809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `site-outline-block`
   * `Menu on top of the site typically a bar of options`
   *
  
   * @polymer
   * @demo demo/index.html
   */
  var SiteOutlineBlock = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(SiteOutlineBlock, _PolymerElement);

    var _super = _createSuper(SiteOutlineBlock);

    function SiteOutlineBlock() {
      babelHelpers.classCallCheck(this, SiteOutlineBlock);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(SiteOutlineBlock, [{
      key: "humanIndex",
      value: function humanIndex(index) {
        return index + 1;
      }
      /**
       * When active ID changes, see if we know what to highlight automatically
       */

    }, {
      key: "_activeIdChanged",
      value: function _activeIdChanged(newValue) {
        var _this = this;

        // as long as didn't disable the indicator, do this processing
        if (this.indicator != "none") {
          if (newValue) {
            this.shadowRoot.querySelector("#indicator").classList.add("activated");
            var el = null; //ensure that this level is included

            if (this.shadowRoot.querySelector('[data-id="' + newValue + '"]')) {
              el = this.shadowRoot.querySelector('[data-id="' + newValue + '"]');
            } else {
              (function () {
                var tmpItem = _this.manifest.items.find(function (i) {
                  return i.id == newValue;
                }); // fallback, maybe there's a child of this currently active


                while (el === null && tmpItem && tmpItem.parent != null) {
                  // take the parent object of this current item
                  tmpItem = _this.manifest.items.find(function (i) {
                    return i.id == tmpItem.parent;
                  }); // see if IT lives in the dom, if not, keep going until we run out

                  if (tmpItem && _this.shadowRoot.querySelector('[data-id="' + tmpItem.id + '"]')) {
                    el = _this.shadowRoot.querySelector('[data-id="' + tmpItem.id + '"]');
                  }
                }
              })();
            }

            if (this._prevEl) {
              this._prevEl.classList.remove("active");
            }

            if (el) {
              el.classList.add("active");
              this._prevEl = el;

              if (this.indicator == "arrow") {
                this.shadowRoot.querySelector("#indicator").style.left = el.offsetLeft + el.offsetWidth / 2 - this.arrowSize + "px";
                this.shadowRoot.querySelector("#indicator").style.top = el.offsetTop + el.offsetHeight - this.arrowSize + "px";
              } else {
                this.shadowRoot.querySelector("#indicator").style.left = el.offsetLeft + "px";
                this.shadowRoot.querySelector("#indicator").style.top = el.offsetTop + el.offsetHeight + "px";
                this.shadowRoot.querySelector("#indicator").style.width = el.offsetWidth + "px";
              }
            }
          } else {
            // shouldn't be possible but might as well list
            this.shadowRoot.querySelector("#indicator").classList.remove("activated");
          }
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteOutlineBlock.prototype), "connectedCallback", this).call(this);
        this.__disposer = (0, _mobxEsm.autorun)(function () {
          _this2.manifest = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.manifest);
        }); // minor timing thing to ensure store has picked active
        // needed if routes set on first paint or lifecycles miss

        setTimeout(function () {
          _this2.__disposer2 = (0, _mobxEsm.autorun)(function () {
            _this2.activeId = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.activeId);
          });
        }, 50);
        window.addEventListener("resize", function () {
          _this2._activeIdChanged(_this2.activeId);
        }, true);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteOutlineBlock.prototype), "disconnectedCallback", this).call(this);

        this.__disposer();

        if (this.__disposer2) {
          this.__disposer2();
        }

        window.removeEventListener("resize", function () {
          _this3._activeIdChanged(_this3.activeId);
        }, true);
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "site-outline-block";
      } // render function

    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_c3345240809211edaa2833647dc78c6c || (_templateObject_c3345240809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          --site-top-menu-bg: var(--haxcms-color, #ffffff);\n          --site-top-menu-indicator-arrow: 6px;\n        }\n        :host([sticky]) {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          z-index: 1000;\n          @apply --site-top-menu-sticky;\n        }\n        .wrapper {\n          display: flex;\n          justify-content: center;\n          justify-items: space-evenly;\n          background-color: var(--site-top-menu-bg);\n          @apply --site-top-menu-wrapper;\n        }\n        :host .wrapper ::slotted(div.spacing) {\n          display: inline-flex;\n          @apply --site-top-menu-spacing;\n        }\n        .spacing {\n          display: inline-flex;\n          @apply --site-top-menu-spacing;\n        }\n        .link {\n          color: var(--site-top-menu-link-color, #444444);\n          @apply --site-top-menu-link;\n        }\n        button {\n          text-transform: unset;\n          min-width: unset;\n          @apply --site-top-menu-button;\n        }\n        button:hover,\n        button:focus,\n        button:active {\n          @apply --site-top-menu-button-hover;\n        }\n        .active {\n          color: var(--site-top-menu-link-active-color, #000000);\n          @apply --site-top-menu-link-active;\n        }\n        #indicator {\n          transition: 0.4s ease-in-out all;\n          transition-delay: 0.2s;\n          position: relative;\n          width: 0;\n          height: 0;\n          visibility: hidden;\n        }\n        :host([indicator=\"line\"]) #indicator {\n          border-bottom: 2px solid var(--site-top-menu-indicator-color, #000000);\n          @apply --site-top-menu-indicator;\n        }\n        :host([indicator=\"arrow\"]) #indicator {\n          border-left: var(--site-top-menu-indicator-arrow) solid transparent;\n          border-right: var(--site-top-menu-indicator-arrow) solid transparent;\n          border-bottom: var(--site-top-menu-indicator-arrow) solid\n            var(--site-top-menu-indicator-color, #000000);\n          @apply --site-top-menu-indicator;\n        }\n        #indicator.activated {\n          visibility: visible;\n          position: absolute;\n          @apply --site-top-menu-indicator-activated;\n        }\n        :host([notitle]) .spacing .link-title {\n          display: none;\n        }\n        .spacing .link-index {\n          display: none;\n        }\n        :host([showindex]) .spacing .link-index {\n          display: inline-flex;\n        }\n      </style>\n      <div class=\"wrapper\">\n        <slot name=\"prefix\"></slot>\n        <site-query\n          result=\"{{__items}}\"\n          sort='{\"order\": \"ASC\"}'\n          conditions='{\"parent\": null}'\n        ></site-query>\n        <dom-repeat items=\"[[__items]]\" mutable-data>\n          <template>\n            <div class=\"spacing\">\n              <a\n                data-id$=\"[[item.id]]\"\n                class=\"link\"\n                tabindex=\"-1\"\n                title$=\"Go to [[item.title]]\"\n                href$=\"[[item.slug]]\"\n                ><button noink=\"[[noink]]\">\n                  <span class=\"link-index\">[[humanIndex(index)]]</span\n                  ><span class=\"link-title\">[[item.title]]</span>\n                </button></a\n              >\n            </div>\n          </template>\n        </dom-repeat>\n        <slot name=\"suffix\"></slot>\n      </div>\n      <div id=\"indicator\"></div>\n    "])));
      }
      /**
       * Props
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * manifest of everything, in case we need to check on children of parents
           */
          manifest: {
            type: Object
          },

          /**
           * acitvely selected item
           */
          activeId: {
            type: String,
            observer: "_activeIdChanged"
          },

          /**
           * visually stick to top of interface at all times
           */
          sticky: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * visualize the indicator as a a line, arrow, or not at all
           */
          indicator: {
            type: String,
            reflectToAttribute: true,
            value: "line"
          },

          /**
           * ink on the buttons
           */
          noink: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * hide title on the buttons
           */
          notitle: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * ink on the buttons
           */
          showindex: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * Stupid but faster then calculating on the fly for sure
           */
          arrowSize: {
            type: Number,
            value: 6
          }
        };
      }
    }]);
    return SiteOutlineBlock;
  }(_polymerElement.PolymerElement);

  _exports.SiteOutlineBlock = SiteOutlineBlock;
  customElements.define(SiteOutlineBlock.tag, SiteOutlineBlock);
});