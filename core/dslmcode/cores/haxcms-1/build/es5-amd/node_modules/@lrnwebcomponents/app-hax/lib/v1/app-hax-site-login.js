define(["exports", "../../../../lit/index.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-lite.js", "../../../simple-colors/simple-colors.js", "../../../rpg-character/rpg-character.js", "./AppHaxStore.js"], function (_exports, _index, _simpleIcons, _simpleIconLite, _simpleColors, _rpgCharacter, _AppHaxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxSiteLogin = void 0;

  var _templateObject_ae2e56908e0011ed99ce491205e67b1d, _templateObject2_ae2e56908e0011ed99ce491205e67b1d, _templateObject3_ae2e56908e0011ed99ce491205e67b1d, _templateObject4_ae2e56908e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AppHaxSiteLogin = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(AppHaxSiteLogin, _SimpleColors);

    var _super = _createSuper(AppHaxSiteLogin);

    // HTMLElement life-cycle, built in; use this for setting defaults
    function AppHaxSiteLogin() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxSiteLogin);
      _this = _super.call(this);
      _this.username = "";
      _this.password = "";
      _this.errorMSG = "Enter User name";
      _this.hidePassword = true;
      _this.hasPass = false;
      return _this;
    } // properties that you wish to use as data in HTML, CSS, and the updated life-cycle


    babelHelpers.createClass(AppHaxSiteLogin, [{
      key: "firstUpdated",
      value: function firstUpdated() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteLogin.prototype), "firstUpdated", this).call(this);
        setTimeout(function () {
          _this2.shadowRoot.querySelector("input").focus();
        }, 0);
      } // updated fires every time a property defined above changes
      // this allows you to react to variables changing and use javascript to perform logic
      // updated(changedProperties) {
      //   changedProperties.forEach((oldValue, propName) => {
      //   });
      // }
      // CSS - specific to Lit

    }, {
      key: "checkUsername",
      value: // eslint-disable-next-line class-methods-use-this
      function checkUsername() {
        var _this3 = this;

        // eslint-disable-next-line prefer-destructuring
        var value = this.shadowRoot.querySelector("#username").value;
        this.hidePassword = false;
        this.errorMSG = "";
        this.username = value;

        _AppHaxStore.store.appEl.playSound("click2");

        setTimeout(function () {
          _this3.shadowRoot.querySelector("input").focus();
        }, 0);
      } // eslint-disable-next-line class-methods-use-this

    }, {
      key: "checkPassword",
      value: function () {
        var _checkPassword = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var value;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _AppHaxStore.store.appEl.playSound("click2"); // eslint-disable-next-line prefer-destructuring


                  value = this.shadowRoot.querySelector("#password").value; // attempt login and wait for response from the jwt-login tag via
                  // jwt-logged-in event @see _jwtLoggedIn

                  window.dispatchEvent(new CustomEvent("jwt-login-login", {
                    composed: true,
                    bubbles: true,
                    cancelable: false,
                    detail: {
                      username: this.username,
                      password: value
                    }
                  }));

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function checkPassword() {
          return _checkPassword.apply(this, arguments);
        }

        return checkPassword;
      }() // eslint-disable-next-line class-methods-use-this

    }, {
      key: "reset",
      value: function reset() {
        this.errorMSG = "";
        this.username = "";
        this.hasPass = false;
        this.hidePassword = true;
      }
    }, {
      key: "nameChange",
      value: function nameChange() {
        this.username = this.shadowRoot.querySelector("#username").value;
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteLogin.prototype), "connectedCallback", this).call(this);
        window.addEventListener("jwt-logged-in", this._jwtLoggedIn.bind(this));
        window.addEventListener("jwt-login-login-failed", this._jwtLoginFailed.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("jwt-logged-in", this._jwtLoggedIn.bind(this));
        window.removeEventListener("jwt-login-login-failed", this._jwtLoginFailed.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteLogin.prototype), "disconnectedCallback", this).call(this);
      } // implies that it failed to connect via the login credentials

    }, {
      key: "_jwtLoginFailed",
      value: function _jwtLoginFailed(e) {
        this.hidePassword = true;
        this.errorMSG = "Invalid Username or Password";

        _AppHaxStore.store.appEl.playSound("error");
      }
    }, {
      key: "_jwtLoggedIn",
      value: function _jwtLoggedIn(e) {
        if (e.detail) {
          _AppHaxStore.store.user = {
            name: this.username
          };

          _AppHaxStore.store.appEl.playSound("success");

          this.dispatchEvent(new CustomEvent("simple-modal-hide", {
            bubbles: true,
            cancelable: true,
            detail: {}
          }));

          _AppHaxStore.store.toast("Welcome ".concat(this.username, "! Let's go!"), 5000, {
            hat: "construction"
          }); // just to be safe


          _AppHaxStore.store.appEl.reset();
        }
      }
    }, {
      key: "passChange",
      value: function passChange(e) {
        var value = this.shadowRoot.querySelector("#password").value;

        if (value) {
          this.hasPass = true;
        } else {
          this.hasPass = false;
        }
      }
    }, {
      key: "toggleViewPass",
      value: function toggleViewPass(e) {
        var password = this.shadowRoot.querySelector("#password");
        var type = password.getAttribute("type") === "password" ? "text" : "password";
        password.setAttribute("type", type);
        e.target.icon = type === "text" ? "lrn:visible" : "lrn:view-off";
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_ae2e56908e0011ed99ce491205e67b1d || (_templateObject_ae2e56908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <rpg-character seed=\"", "\"></rpg-character>\n      <p id=\"errorText\">", "</p>\n      <div id=\"inputcontainer\">\n        ", "\n        <div class=\"external\">\n          <slot name=\"externalproviders\"></slot>\n        </div>\n      </div>\n    "])), this.username, this.errorMSG, this.hidePassword ? (0, _index.html)(_templateObject2_ae2e56908e0011ed99ce491205e67b1d || (_templateObject2_ae2e56908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"user name\"\n                aria-label=\"user name\"\n                @input=\"", "\"\n              />\n              <button\n                ?disabled=\"", "\"\n                @click=", "\n              >\n                Next &gt;\n              </button>"])), this.nameChange, !this.username, this.checkUsername) : (0, _index.html)(_templateObject3_ae2e56908e0011ed99ce491205e67b1d || (_templateObject3_ae2e56908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<div class=\"notyou\">\n                Hey ", "! <a @click=", ">not you?</a>\n              </div>\n              <input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"password\"\n                @input=\"", "\"\n              />\n              <simple-icon-button-lite\n                icon=\"lrn:view-off\"\n                tabindex=\"-1\"\n                title=\"Toggle password display\"\n                @click=\"", "\"\n                class=\"visibility-icon\"\n              ></simple-icon-button-lite>\n              <button ?disabled=\"", "\" @click=", ">\n                Login\n              </button>"])), this.username, this.reset, this.passChange, this.toggleViewPass, !this.hasPass, this.checkPassword));
      }
    }], [{
      key: "tag",
      get: // a convention I enjoy so you can change the tag name in 1 place
      function get() {
        return "app-hax-site-login";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteLogin), "properties", this)), {}, {
          username: {
            type: String
          },
          password: {
            type: String
          },
          errorMSG: {
            type: String
          },
          hidePassword: {
            type: Boolean
          },
          hasPass: {
            type: Boolean
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteLogin), "styles", this)), [(0, _index.css)(_templateObject4_ae2e56908e0011ed99ce491205e67b1d || (_templateObject4_ae2e56908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n        }\n        #inputcontainer {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n        }\n        a {\n          color: red;\n        }\n\n        // This does not work\n        #errorText > p {\n          visibility: hidden;\n          background-color: lightblue;\n          color: red;\n          font-weight: bold;\n        }\n        rpg-character {\n          display: block;\n          margin: 0px;\n        }\n        .external {\n          text-align: center;\n        }\n        input {\n          font-family: \"Press Start 2P\", sans-serif;\n          font-size: 28px;\n          padding: 8px;\n          border: 4px solid black;\n          border-radius: 8px;\n          width: 75%;\n        }\n        button {\n          font-family: \"Press Start 2P\", sans-serif;\n          font-size: 30px;\n          padding: 8px;\n          border: 4px solid black;\n          border-radius: 8px;\n          min-width: 50%;\n          margin: 16px;\n        }\n        button:focus,\n        button:hover {\n          background-color: var(--simple-colors-default-theme-green-8);\n          color: var(--simple-colors-default-theme-grey-1);\n          outline: 2px solid var(--simple-colors-default-theme-grey-1);\n          cursor: pointer;\n        }\n        .notyou {\n          padding: 8px;\n        }\n        .visibility-icon {\n          color: var(--simple-colors-default-theme-grey-12);\n          background-color: var(--simple-colors-default-theme-grey-3);\n          border: 2px solid var(--simple-colors-default-theme-grey-12);\n          position: relative;\n          margin-top: -44px;\n          margin-bottom: 20px;\n          margin-left: 70%;\n          z-index: 1;\n          padding: 2px;\n          --simple-icon-width: 26px;\n          --simple-icon-height: 26px;\n        }\n      "])))]);
      }
    }]);
    return AppHaxSiteLogin;
  }(_simpleColors.SimpleColors);

  _exports.AppHaxSiteLogin = AppHaxSiteLogin;
  customElements.define(AppHaxSiteLogin.tag, AppHaxSiteLogin);
});