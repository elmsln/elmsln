define(["exports", "meta", "require", "../../lit/index.js", "../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _require, _index, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ImgPanZoom = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);

  var _templateObject_69d34f30809211edaa2833647dc78c6c, _templateObject2_69d34f30809211edaa2833647dc78c6c, _templateObject3_69d34f30809211edaa2833647dc78c6c, _templateObject4_69d34f30809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `img-pan-zoom` Image pan zoom element
   * Images are preloaded by `img-loader` and a spinner is shown until loaded
   * Deep Zoom Images are supported
   * ### Credits
   * <a href="https://openseadragon.github.io">openSeadragon</a>
   * @demo demo/index.html
   * @element img-pan-zoom
   */
  var ImgPanZoom = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(ImgPanZoom, _LitElement);

    var _super = _createSuper(ImgPanZoom);

    /**
     * HTMLElement
     */
    function ImgPanZoom() {
      var _this;

      babelHelpers.classCallCheck(this, ImgPanZoom);
      _this = _super.call(this);
      _this.page = 0;
      _this.loading = false;
      _this.dzi = false;
      _this.fadeIn = true;
      _this.hideSpinner = false;
      _this.fullscreenToggled = false;
      _this.flipToggled = false;
      _this.showNavigationControl = false;
      _this.showNavigator = false;
      _this.navigatorAutoFade = false;
      _this.navigatorPosition = false;
      _this.navigatorToggled = false;
      _this.zoomPerClick = 2.0;
      _this.zoomPerScroll = 1.2;
      _this.animationTime = 1.2;
      _this.navPrevNextWrap = false;
      _this.showRotationControl = false;
      _this.minZoomImageRatio = 1;
      _this.maxZoomPixelRatio = 1.1;
      _this.constrainDuringPan = false;
      _this.visibilityRatio = 1;
      _this.sequenceMode = false;
      _this.preserveViewport = false;
      _this.showReferenceStrip = false;
      _this.referenceStripScroll = "horizontal";
      var basePath = new URL("./img-pan-zoom.js", meta.url).href.replace("/img-pan-zoom.js", "/");
      var location = "".concat(basePath, "lib/openseadragon/openseadragon.min.js");
      window.addEventListener("es-bridge-openseadragon-loaded", _this._openseadragonLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      window.ESGlobalBridge.requestAvailability().load("openseadragon", location);
      new Promise(function (res, rej) {
        return _require.default(["../hexagon-loader/hexagon-loader.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./lib/img-loader.js"], res, rej);
      });
      return _this;
    }
    /**
     * LitElement properties changed
     */


    babelHelpers.createClass(ImgPanZoom, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_69d34f30809211edaa2833647dc78c6c || (_templateObject_69d34f30809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <!-- Only preload regular images -->\n      ", "\n\n      <!-- Openseadragon -->\n      <div id=\"viewer\"></div>\n    "])), !this.dzi ? (0, _index.html)(_templateObject2_69d34f30809211edaa2833647dc78c6c || (_templateObject2_69d34f30809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n            ", "\n            <img-loader\n              ?loaded=\"", "\"\n              @loaded-changed=\"", "\"\n              ?loading=\"", "\"\n              @loading-changed=\"", "\"\n              src=\"", "\"\n              described-by=\"", "\"\n            ></img-loader>\n          "])), this.hideSpinner || this.loaded ? "" : (0, _index.html)(_templateObject3_69d34f30809211edaa2833647dc78c6c || (_templateObject3_69d34f30809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n                  <div id=\"loader\">\n                    <hexagon-loader\n                      ?loading=", "\n                      item-count=\"4\"\n                      size=\"small\"\n                    ></hexagon-loader>\n                  </div>\n                "])), this.loading || !this.loaded), this.loaded, this.loadedChangedEvent, this.loading, this.loadingChangedEvent, this.src || (this.sources || [])[0], this.describedBy || "") : "");
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "loading") {
            // notify
            _this2.dispatchEvent(new CustomEvent("loading-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (propName == "loaded") {
            _this2._loadedChanged(_this2[propName], oldValue); // notify


            _this2.dispatchEvent(new CustomEvent("loaded-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (propName == "navigatorToggled" && _this2.viewer) _this2.viewer.navigator.element.style.display = _this2.navigatorToggled ? "inline-block" : "none";
          if (propName == "fullscreenToggled") _this2._setFullscreen();
          if (propName == "flipToggled" && _this2.viewer && _this2.viewer.viewport) _this2.viewer.viewport.setFlip(_this2.flipToggled);
          if (propName == "page" && _this2.viewer) _this2.viewer.goToPage(Math.max(0, Math.min(_this2.page, (_this2.viewer.tileSources || []).length - 1)));
        });
      }
    }, {
      key: "_openseadragonLoaded",
      value: function _openseadragonLoaded() {
        var _this3 = this;

        try {
          if (window.OpenSeadragon) {
            this._initOpenSeadragon();
          } else {
            var check = function check() {
              if (window.OpenSeadragon) {
                _this3._initOpenSeadragon();

                clearInterval(interval);
              }
            },
                interval = setInterval(check, 1);
          }
        } catch (e) {
          console.warn(e);
        }
      }
      /**
       * life cycle
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this4 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(ImgPanZoom.prototype), "connectedCallback", this).call(this);
        this.animationConfig = {
          fade: {
            name: "fade-in-animation",
            node: this.shadowRoot.querySelector("#viewer")
          }
        };
        setTimeout(function () {
          // Init openseadragon if we are using a deep zoom image
          if (_this4.dzi) _this4._openseadragonLoaded();
        }, 0);
      }
      /**
       * life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ImgPanZoom.prototype), "disconnectedCallback", this).call(this);
        window.removeEventListener("es-bridge-openseadragon-loaded", this._openseadragonLoaded.bind(this));
      } // Init openseadragon

    }, {
      key: "_initOpenSeadragon",
      value: function _initOpenSeadragon() {
        var _this5 = this;

        setTimeout(function () {
          var _OpenSeadragon;

          var tileSources = [_this5.src].filter(function (src) {
            return !!src;
          });

          if (!_this5.dzi) {
            tileSources = tileSources.map(function (src) {
              return {
                type: "image",
                url: src,
                buildPyramid: false
              };
            });
          }

          if (!_this5.viewer) _this5.viewer = new OpenSeadragon((_OpenSeadragon = {
            element: _this5.shadowRoot.querySelector("#viewer"),
            prefixUrl: "".concat(new URL("./img-pan-zoom.js", meta.url).href, "/../lib/openseadragon/images/"),
            visibilityRatio: _this5.visibilityRatio,
            constrainDuringPan: _this5.constrainDuringPan,
            showNavigationControl: _this5.showNavigationControl,
            showNavigator: _this5.showNavigator,
            zoomPerClick: _this5.zoomPerClick,
            zoomPerScroll: _this5.zoomPerScroll,
            animationTime: _this5.animationTime,
            navPrevNextWrap: _this5.navPrevNextWrap,
            showRotationControl: _this5.showRotationControl,
            minZoomImageRatio: _this5.minZoomImageRatio,
            maxZoomPixelRatio: _this5.maxZoomPixelRatio
          }, babelHelpers.defineProperty(_OpenSeadragon, "showNavigationControl", _this5.showNavigationControl), babelHelpers.defineProperty(_OpenSeadragon, "navigatorAutoFade", _this5.navigatorAutoFade), babelHelpers.defineProperty(_OpenSeadragon, "navigatorPosition", _this5.navigatorPosition), babelHelpers.defineProperty(_OpenSeadragon, "navigatorLeft", _this5.navigatorLeft), babelHelpers.defineProperty(_OpenSeadragon, "navigatorTop", _this5.navigatorTop), babelHelpers.defineProperty(_OpenSeadragon, "navigatorRight", _this5.navigatorRight), babelHelpers.defineProperty(_OpenSeadragon, "navigatorBottom", _this5.navigatorBottom), babelHelpers.defineProperty(_OpenSeadragon, "navigatorWidth", _this5.navigatorWidth), babelHelpers.defineProperty(_OpenSeadragon, "navigatorHeight", _this5.navigatorHeight), babelHelpers.defineProperty(_OpenSeadragon, "sequenceMode", _this5.sequenceMode), babelHelpers.defineProperty(_OpenSeadragon, "preserveViewport", _this5.preserveViewport), babelHelpers.defineProperty(_OpenSeadragon, "showReferenceStrip", _this5.showReferenceStrip), babelHelpers.defineProperty(_OpenSeadragon, "referenceStripScroll", _this5.referenceStripScroll), babelHelpers.defineProperty(_OpenSeadragon, "flipped", _this5.flipToggled), babelHelpers.defineProperty(_OpenSeadragon, "previousButton", _this5.previousButton), babelHelpers.defineProperty(_OpenSeadragon, "nextButton", _this5.nextButton), babelHelpers.defineProperty(_OpenSeadragon, "homeButton", _this5.homeButton), babelHelpers.defineProperty(_OpenSeadragon, "fullScreenButton", _this5.fullScreenButton), babelHelpers.defineProperty(_OpenSeadragon, "zoomInButton", _this5.zoomInButton), babelHelpers.defineProperty(_OpenSeadragon, "zoomOutButton", _this5.zoomOutButton), babelHelpers.defineProperty(_OpenSeadragon, "tileSources", tileSources), _OpenSeadragon));

          if (_this5.viewer) {
            _this5.viewer.goToPage(0);

            _this5._setFullscreen();

            if (_this5.viewer.navigator) {
              if (_this5.viewer.navigator.element) _this5.viewer.navigator.element.style.display = _this5.navigatorToggled ? "inline-block" : "none";
            }
          }
          /**
           * @event fires on zoom
           */


          _this5.viewer.addHandler("zoom", function (e) {
            return _this5.dispatchEvent(new CustomEvent("zoom", {
              detail: {
                value: e
              }
            }));
          });
          /**
           * @event fires on page
           */


          _this5.viewer.addHandler("page", function (e) {
            return _this5.dispatchEvent(new CustomEvent("page", {
              detail: {
                value: e
              }
            }));
          });
          /**
           * @event fires on pan
           */


          _this5.viewer.addHandler("pan", function (e) {
            return _this5.dispatchEvent(new CustomEvent("pan", {
              detail: {
                value: e
              }
            }));
          });
          /**
           * @event fires on rotate
           */


          _this5.viewer.addHandler("rotate", function (e) {
            return _this5.dispatchEvent(new CustomEvent("pan", {
              detail: {
                value: e
              }
            }));
          });
          /**
           * @event
           */


          _this5.viewer.addHandler("update-viewport", function (e) {
            return _this5.dispatchEvent(new CustomEvent("update-viewport", {
              detail: {
                value: e
              }
            }));
          });
          /**
           * @event fires before viewport changes
           */


          _this5.viewer.addHandler("viewport-changed", function (e) {
            return _this5.dispatchEvent(new CustomEvent("viewport-changed", {
              detail: {
                value: e
              }
            }));
          });

          _this5.init = true;
        }, 100);
      }
      /**
       * actually sets the fullscreen using API; can be overridden
       *
       * @param {*} [mode=this.fullscreenToggled]
       * @memberof ImgPanZoom
       */

    }, {
      key: "_setFullscreen",
      value: function _setFullscreen() {
        var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.fullscreenToggled;
        if (this.viewer) this.viewer.setFullScreen(mode);
      } //Function to destroy the viewer and clean up everything created by OpenSeadragon.

    }, {
      key: "destroy",
      value: function destroy() {
        this.viewer.destroy();
      }
      /**
       * sets rotation x degrees
       * @param {number} deg number of degrees
       */

    }, {
      key: "rotateTo",
      value: function rotateTo() {
        var deg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 90;
        this.viewer.viewport.setRotation(deg);
      }
      /**
       * rotates x degrees from current rotation
       * @param {number} deg number of degrees
       */

    }, {
      key: "rotate",
      value: function rotate() {
        var deg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 90;
        this.rotateTo(deg + this.viewer.viewport.getRotation());
      }
      /**
       * pans x,y of viewport size from current position
       * @param {number} fraction of viewport width to pan horizontally
       * @param {number} fraction of viewport height to pan vertically
       */

    }, {
      key: "pan",
      value: function pan() {
        var dx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var dy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.2;
        var home = this.viewer.viewport.getBounds(); //TODO contranin pan dy = Math.min(home.y, Math.max(0 - home.y, dy));

        this.viewer.viewport.panBy(new OpenSeadragon.Point(dx, dy));
      }
      /**
       * amount to zoom in from current position
       * @param {number}
       */

    }, {
      key: "zoomIn",
      value: function zoomIn() {
        var z = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.7;
        // TODO: Replace with native openseadragon zoomIn
        var currentZoom = this.viewer.viewport.getZoom();
        var maxZoom = this.viewer.viewport.getMaxZoom();
        var zoomTo = currentZoom + z;

        if (zoomTo < maxZoom) {
          this.viewer.viewport.zoomTo(zoomTo);
        }
      }
      /**
       * amount to zoom out from current position
       * @param {number}
       */

    }, {
      key: "zoomOut",
      value: function zoomOut() {
        var z = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.7;
        // TODO: Replace with openseadragon native zoomOut
        var currentZoom = this.viewer.viewport.getZoom();
        var minZoom = this.viewer.viewport.getMinZoom();
        var zoomTo = currentZoom - z;

        if (zoomTo > minZoom) {
          this.viewer.viewport.zoomTo(zoomTo);
        } else {
          if (minZoom != currentZoom) {
            this.resetZoom();
          }
        }
      }
      /**
       * toggles fullscreen mode
       * @param {boolean} mode fullscreen mode
       */

    }, {
      key: "toggleFullscreen",
      value: function toggleFullscreen() {
        var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.fullscreenToggled;
        this.fullscreenToggled = mode;
      }
      /**
       * toggles flip mode
       * @param {boolean} mode fullscreen mode
       */

    }, {
      key: "toggleFlip",
      value: function toggleFlip() {
        var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.flipToggled;
        this.flipToggled = mode;
      }
      /**
       * recenters image
       */

    }, {
      key: "resetZoom",
      value: function resetZoom() {
        this.viewer.viewport.goHome();
      }
    }, {
      key: "_srcChanged",
      value: function _srcChanged() {
        if (this.dzi && this.init) {
          // add tiled image
          this._addTiledImage();
        }
      }
    }, {
      key: "loadedChangedEvent",
      value: function loadedChangedEvent(e) {
        this.loaded = e.detail.value;

        if (this.loaded) {
          this.loading = false;
        }
      }
    }, {
      key: "loadingChangedEvent",
      value: function loadingChangedEvent(e) {
        this.loading = e.detail.value;
      } // Add loaded images to viewer

    }, {
      key: "_loadedChanged",
      value: function _loadedChanged() {
        var _this6 = this;

        if (this.loaded) {
          if (!this.init) {
            setTimeout(function () {
              _this6._openseadragonLoaded();
            }, 100);
          } else {
            this._addImage();
          }
        }
      }
    }, {
      key: "_addImage",
      value: function _addImage() {
        this.viewer.addSimpleImage({
          url: this.src,
          index: 0,
          replace: true
        });
      }
    }, {
      key: "_addTiledImage",
      value: function _addTiledImage() {
        this.viewer.addTiledImage({
          tileSource: this.src,
          index: 0,
          replace: true
        });
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject4_69d34f30809211edaa2833647dc78c6c || (_templateObject4_69d34f30809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          position: relative;\n          height: var(--img-pan-zoom-height, 500px);\n        }\n        #viewer {\n          position: relative;\n          height: 100%;\n          width: 100%;\n        }\n        #loader {\n          display: none;\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: space-around;\n          width: 100%;\n          height: calc(var(--img-pan-zoom-height, 500px) - 100px);\n          margin-bottom: calc(100px - var(--img-pan-zoom-height, 500px));\n          z-index: 1;\n        }\n        hexagon-loader {\n          position: absolute;\n          opacity: 0;\n          transition: opacity 700ms;\n          margin: auto;\n        }\n        hexagon-loader[hidden] {\n          display: none;\n        }\n        hexagon-loader[loading] {\n          opacity: 1;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "img-pan-zoom";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * image source
           */
          src: {
            type: String
          },

          /**
           * array of image sources
           */
          sources: {
            type: Array
          },

          /**
           * if used with multiple images and paged navigation, index of current item
           */
          page: {
            type: Number,
            attribute: "page"
          },

          /**
           * aria-describedby attribute
           */
          describedBy: {
            type: String,
            attribute: "described-by"
          },

          /**
           * Set to true if you are using a deep zoom image
           */
          dzi: {
            type: Boolean
          },

          /**
           * Fade in new items added to the viewer
           */
          fadeIn: {
            type: Boolean,
            attribute: "fade-in"
          },

          /**
           * whether fullscreen mode is toggled
           */
          fullscreenToggled: {
            type: Boolean,
            attribute: "fullscreen-toggled",
            reflect: true
          },

          /**
           * whether images is flipped horizontally
           */
          flipToggled: {
            type: Boolean,
            attribute: "flip-toggled",
            reflect: true
          },

          /**
           * loading
           */
          loading: {
            type: Boolean
          },

          /**
           * hides spinner
           */
          hideSpinner: {
            type: Boolean,
            attribute: "hide-spinner"
          },

          /**
           * loaded
           */
          loaded: {
            type: Boolean
          },

          /**
           * Set to false to prevent the appearance of the default
           * navigation controls. Note that if set to false, the customs buttons
           * set by the options zoomInButton, zoomOutButton etc, are rendered inactive.
           */
          showNavigationControl: {
            type: Boolean,
            attribute: "show-navigation-control"
          },

          /**
           * Set to true to make the navigator minimap appear.
           */
          showNavigator: {
            type: Boolean,
            attribute: "show-navigator"
          },

          /**
           * The "zoom distance" per mouse click or touch tap. Note:
           * Setting this to 1.0 effectively disables the click-to-zoom
           * feature (also see gestureSettings[Mouse|Touch|Pen].clickToZoom/dblClickToZoom).
           */
          zoomPerClick: {
            type: Number,
            attribute: "zoom-per-click"
          },

          /**
           * The "zoom distance" per mouse scroll or touch pinch. Note:
           * Setting this to 1.0 effectively disables the mouse-wheel zoom
           * feature (also see gestureSettings[Mouse|Touch|Pen].scrollToZoom}).
           */
          zoomPerScroll: {
            type: Number,
            attribute: "zoom-per-scroll"
          },

          /**
           * Specifies the animation duration per each OpenSeadragon.Spring
           * which occur when the image is dragged or zoomed.
           */
          animationTime: {
            type: Number,
            attribute: "animation-time"
          },

          /**
           * If true then the 'previous' button will wrap to the last image
           * when viewing the first image and the 'next' button will wrap to the
           * first image when viewing the last image.
           */
          navPrevNextWrap: {
            type: Boolean,
            attribute: "nav-prev-next-wrap"
          },

          /**
           * If true then the rotate left/right controls will be displayed as
           * part of the standard controls. This is also subject to the browser
           * support for rotate (e.g. viewer.drawer.canRotate()).
           */
          showRotationControl: {
            type: Boolean,
            attribute: "show-rotation-control"
          },

          /**
           * The minimum percentage ( expressed as a number between 0 and 1 ) of
           * the viewport height or width at which the zoom out will be constrained.
           * Setting it to 0, for example will allow you to zoom out infinity.
           */
          minZoomImageRatio: {
            type: Number,
            attribute: "min-zoom-image-ratio"
          },

          /**
           * The maximum ratio to allow a zoom-in to affect the highest level
           * pixel ratio. This can be set to Infinity to allow 'infinite' zooming
           * into the image though it is less effective visually if the HTML5
           * Canvas is not availble on the viewing device.
           */
          maxZoomPixelRatio: {
            type: Number,
            attribute: "max-zoom-pixel-ratio"
          },

          /**
           * Constrain during pan
           */
          constrainDuringPan: {
            type: Boolean,
            attribute: "constrain-during-pan"
          },

          /**
           * The percentage ( as a number from 0 to 1 ) of the source image
           * which must be kept within the viewport. If the image is dragged
           * beyond that limit, it will 'bounce' back until the minimum
           * visibility ratio is achieved. Setting this to 0 and wrapHorizontal
           * ( or wrapVertical ) to true will provide the effect of an infinitely
           * scrolling viewport.
           */
          visibilityRatio: {
            type: Number,
            attribute: "visibility-ratio"
          },

          /**
           * whether navigator fades when image is not longer being moved
           */
          navigatorAutoFade: {
            type: Boolean,
            attribute: "navigator-auto-fade",
            reflect: true
          },

          /**
           * where navigator is positioned: "TOP_LEFT", "BOTTOM_RIGHT", "ABSOLUTE", etc. Default is "TOP_RIGHT"
           */
          navigatorPosition: {
            type: String,
            attribute: "navigator-position",
            reflect: true
          },

          /**
           * if navigator position is "ABSOLUTE", top position for navigator
           */
          navigatorTop: {
            type: String,
            attribute: "navigator-top",
            reflect: true
          },

          /**
           * if navigator position is "ABSOLUTE", bottom position for navigator
           */
          navigatorBottom: {
            type: String,
            attribute: "navigator-bottom",
            reflect: true
          },

          /**
           * if navigator position is "ABSOLUTE", left position for navigator
           */
          navigatorLeft: {
            type: String,
            attribute: "navigator-left",
            reflect: true
          },

          /**
           * if navigator position is "ABSOLUTE", right position for navigator
           */
          navigatorRight: {
            type: String,
            attribute: "navigator-right",
            reflect: true
          },

          /**
           * height of navigator
           */
          navigatorHeight: {
            type: String,
            attribute: "navigator-height",
            reflect: true
          },

          /**
           * width of navigator
           */
          navigatorWidth: {
            type: String,
            attribute: "navigator-width",
            reflect: true
          },

          /**
           * whether navigator window mode is toggled
           */
          navigatorToggled: {
            type: Boolean,
            attribute: "navigator-toggled",
            reflect: true
          },

          /**
           * displays multiple images as a sequence
           */
          sequenceMode: {
            type: Boolean,
            attribute: "sequence-mode"
          },

          /**
           * preserves viewport when navigating images in sequence mode
           * See https://openseadragon.github.io/examples/tilesource-sequence/
           */
          preserveViewport: {
            type: Boolean,
            attribute: "preserve-viewport"
          },

          /**
           * show reference strip for images in sequence mode.
           * See https://openseadragon.github.io/examples/ui-reference-strip/
           */
          showReferenceStrip: {
            type: Boolean,
            attribute: "show-reference-strip"
          },

          /**
           * orientation of images using reference strip; can be 'horizontal' or 'vertical' (default)
           */
          referenceStripScroll: {
            type: String,
            attribute: "reference-strip-scroll"
          },

          /**
           * id of custom previousButton
           */
          previousButton: {
            type: String
          },

          /**
           * id of custom nextButton
           */
          nextButton: {
            type: String
          },

          /**
           * id of custom homeButton
           */
          homeButton: {
            type: String
          },

          /**
           * id of custom zoomInButton
           */
          zoomInButton: {
            type: String
          },

          /**
           * id of custom zoomInButton
           */
          zoomOutButton: {
            type: String
          },

          /**
           * id of custom zoomInButton
           */
          fullScreenButton: {
            type: String
          }
        };
      }
    }]);
    return ImgPanZoom;
  }(_index.LitElement);

  _exports.ImgPanZoom = ImgPanZoom;
  customElements.define(ImgPanZoom.tag, ImgPanZoom);
});