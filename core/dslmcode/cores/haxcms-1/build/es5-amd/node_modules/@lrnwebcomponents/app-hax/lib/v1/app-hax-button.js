define(["exports", "meta", "../../../simple-icon/lib/simple-icon-lite.js", "../../../hax-iconset/lib/simple-hax-iconset.js", "../../../../lit/index.js"], function (_exports, meta, _simpleIconLite, _simpleHaxIconset, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxButton = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_72f73ea0809211edaa2833647dc78c6c, _templateObject2_72f73ea0809211edaa2833647dc78c6c, _templateObject3_72f73ea0809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var postIt = new URL("../assets/images/PostIt.svg", meta.url).href;

  var AppHaxButton = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(AppHaxButton, _LitElement);

    var _super = _createSuper(AppHaxButton);

    function AppHaxButton() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxButton);
      _this = _super.call(this);
      _this.icon = "save";
      _this.type = null;
      _this.value = null;
      _this.disabled = false;
      _this.elevation = 2;
      _this.active = false;
      _this.comingSoon = false;

      _this.addEventListener("click", _this._handleClick);

      _this.addEventListener("click", _this._handleClick);

      _this.addEventListener("focus", _this._handleFocus);

      _this.addEventListener("blur", _this._handleBlur);

      _this.addEventListener("mouseover", _this._handleFocus);

      _this.addEventListener("mouseout", _this._handleBlur);

      return _this;
    }

    babelHelpers.createClass(AppHaxButton, [{
      key: "_handleFocus",
      value: function _handleFocus() {
        if (!this.disabled && !this.comingSoon) {
          this.active = true;
          this.elevation = "4";
        }
      }
    }, {
      key: "_handleBlur",
      value: function _handleBlur() {
        if (!this.disabled && !this.comingSoon) {
          this.active = false;
          this.elevation = "2";
        }
      }
    }, {
      key: "_handleClick",
      value: function _handleClick() {
        if (!this.disabled && !this.comingSoon) {
          this.shadowRoot.querySelector(".haxButton").blur();
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxButton.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxButton.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "type") {
            switch (_this2.type) {
              case "Technology":
                _this2.icon = "hardware:desktop-mac";
                _this2.value = "technology";
                break;

              case "Business":
                _this2.icon = "maps:local-atm";
                _this2.value = "business";
                break;

              case "Art":
                _this2.icon = "image:palette";
                _this2.value = "art";
                break;

              case "6w":
                _this2.icon = "hax:messages-6";
                _this2.value = "6 Week";
                break;

              case "15w":
                _this2.icon = "social:school";
                _this2.value = "15 Week";
                break;

              case "training":
                _this2.icon = "hax:bricks";
                _this2.value = "Training";
                break;

              case "docx import":
                _this2.icon = "hax:file-docx";
                _this2.value = "docx";
                break;

              case "Blog":
                _this2.icon = "social:public";
                _this2.value = "Blog";
                break;

              default:
                _this2.icon = "image:photo-filter";
                _this2.value = "own";
                _this2.type = "Create Your Own";
                break;
            }
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_72f73ea0809211edaa2833647dc78c6c || (_templateObject_72f73ea0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <wired-button\n        elevation=", "\n        ?disabled=", "\n        class=\"haxButton\"\n      >\n        <div id=\"container\">\n          <simple-icon-lite icon=", "> </simple-icon-lite>\n          <div class=\"type\">", "</div>\n        </div>\n        ", "\n      </wired-button>\n    "])), this.elevation, this.disabled || this.comingSoon, this.icon, this.type, this.comingSoon ? (0, _index.html)(_templateObject2_72f73ea0809211edaa2833647dc78c6c || (_templateObject2_72f73ea0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["<img\n              src=\"", "\"\n              loading=\"lazy\"\n              decoding=\"async\"\n              fetchpriority=\"low\"\n              alt=\"Feature coming soon\"\n              class=\"coming-soon\"\n            />"])), postIt) : "");
      }
    }], [{
      key: "tag",
      get: // a convention I enjoy so you can change the tag name in 1 place
      function get() {
        return "app-hax-button";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          icon: {
            type: String
          },
          type: {
            type: String,
            reflect: true
          },
          disabled: {
            type: Boolean,
            reflect: true
          },
          elevation: {
            type: Number
          },
          active: {
            type: Boolean,
            reflect: true
          },
          comingSoon: {
            type: Boolean,
            reflect: true,
            attribute: "coming-soon"
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject3_72f73ea0809211edaa2833647dc78c6c || (_templateObject3_72f73ea0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --background-color: transparent;\n          --background-color-active: white;\n          font-family: \"Press Start 2P\", sans-serif;\n        }\n        :host([coming-soon]) .haxButton {\n          pointer-events: none;\n          background-color: var(--simple-colors-default-theme-grey-6);\n        }\n        :host([active]) .haxButton {\n          color: var(\n            --app-hax-background-color,\n            var(--background-color-active)\n          );\n          background-color: var(--app-hax-accent-color, var(--accent-color));\n        }\n        :host([active]) simple-icon-lite {\n          --simple-icon-color: var(\n            --app-hax-background-color,\n            var(--background-color-active)\n          );\n        }\n        :host([active]) .type {\n          background-color: var(--app-hax-accent-color, var(--accent-color));\n          color: var(\n            --app-hax-background-color,\n            var(--background-color-active)\n          );\n        }\n\n        #container {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: space-around;\n          width: 132px;\n          height: 112px;\n        }\n        .coming-soon {\n          display: block;\n          height: 114px;\n          width: 140px;\n          z-index: 1;\n          position: absolute;\n          margin-top: -75px;\n        }\n        .haxButton {\n          background-color: var(\n            --app-hax-background-color,\n            var(--background-color)\n          );\n          color: var(--app-hax-accent-color, var(--accent-color));\n          display: inline-flex;\n        }\n        simple-icon-lite {\n          --simple-icon-width: 60px;\n          --simple-icon-height: 60px;\n          --simple-icon-color: var(--app-hax-accent-color, var(--accent-color));\n        }\n        .type {\n          font-size: 10px;\n          color: var(--app-hax-accent-color, var(--accent-color));\n        }\n        @media (max-width: 800px) {\n          #container {\n            width: 100px;\n            height: 75px;\n          }\n          .coming-soon {\n            margin-top: -50px;\n            height: 114px;\n            width: 100px;\n          }\n        }\n      "])))];
      }
    }]);
    return AppHaxButton;
  }(_index.LitElement);

  _exports.AppHaxButton = AppHaxButton;
  customElements.define(AppHaxButton.tag, AppHaxButton);
});