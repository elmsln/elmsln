define(["exports", "../../lit/index.js", "./lib/lrndesign-gallery-behaviors.js", "../responsive-utility/responsive-utility.js", "./lib/lrndesign-gallery-carousel.js", "./lib/lrndesign-gallery-grid.js", "./lib/lrndesign-gallery-masonry.js"], function (_exports, _index, _lrndesignGalleryBehaviors, _responsiveUtility, _lrndesignGalleryCarousel, _lrndesignGalleryGrid, _lrndesignGalleryMasonry) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignGallery = void 0;

  var _templateObject_a8df8b008e0011ed99ce491205e67b1d, _templateObject2_a8df8b008e0011ed99ce491205e67b1d, _templateObject3_a8df8b008e0011ed99ce491205e67b1d, _templateObject4_a8df8b008e0011ed99ce491205e67b1d, _templateObject5_a8df8b008e0011ed99ce491205e67b1d, _templateObject6_a8df8b008e0011ed99ce491205e67b1d, _templateObject7_a8df8b008e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrndesign-gallery`
   * displays images as a carousel or grid with the ability to zoom
   *
   * @element lrndesign-gallery
   * @lit-html
   * @lit-element
   * @demo demo/index.html Carousel Layout
   * @demo demo/grid.html Grid Layout
   * @demo demo/masonry.html Masonry Layout
   */
  var LrndesignGallery = /*#__PURE__*/function (_LrndesignGalleryBeha) {
    babelHelpers.inherits(LrndesignGallery, _LrndesignGalleryBeha);

    var _super = _createSuper(LrndesignGallery);

    // life cycle
    function LrndesignGallery() {
      var _this;

      babelHelpers.classCallCheck(this, LrndesignGallery);
      _this = _super.call(this);
      _this.sources = [];
      _this.sizing = "cover";
      return _this;
    }
    /**
     * life cycle, element is afixed to the DOM
     */


    babelHelpers.createClass(LrndesignGallery, [{
      key: "render",
      value: // render function
      function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_a8df8b008e0011ed99ce491205e67b1d || (_templateObject_a8df8b008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div\n        id=\"gallery\"\n        style=\"--lrndesign-gallery-image-aspect:", ";--lrndesign-gallery-image-height:", "%\"\n      >\n        <div slot=\"title\"><slot name=\"title\"></slot></div>\n        <div slot=\"description\"><slot name=\"description\"></slot></div>\n        ", "\n      </div>\n      ", ""])), this.aspectRatio, 100 / this.aspectRatio, this.editMode ? (0, _index.html)(_templateObject2_a8df8b008e0011ed99ce491205e67b1d || (_templateObject2_a8df8b008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<div id=\"figures\"><slot></slot></div>"]))) : this.layout === "masonry" ? (0, _index.html)(_templateObject3_a8df8b008e0011ed99ce491205e67b1d || (_templateObject3_a8df8b008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n              <lrndesign-gallery-masonry\n                accent-color=\"", "\"\n                .aspect-ratio=\"", "\"\n                .extra-wide=\"", "\"\n                ?dark=\"", "\"\n                .gallery-id=\"", "\"\n                @item-changed=\"", "\"\n                responsive-size=\"", "\"\n                .selected=\"", "\"\n                .sources=\"", "\"\n              >\n              </lrndesign-gallery-masonry>\n            "])), this.accentColor, this.aspect, this.extra, this.dark, this.id, function (e) {
          return _this2.goToItem(e.detail);
        }, this.responsiveSize, this.selected, this.items) : this.grid || this.layout === "grid" ? (0, _index.html)(_templateObject4_a8df8b008e0011ed99ce491205e67b1d || (_templateObject4_a8df8b008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n              <lrndesign-gallery-grid\n                accent-color=\"", "\"\n                .aspect-ratio=\"", "\"\n                .extra-wide=\"", "\"\n                ?dark=\"", "\"\n                .gallery-id=\"", "\"\n                @item-changed=\"", "\"\n                responsive-size=\"", "\"\n                .selected=\"", "\"\n                sizing=\"", "\"\n                .sources=\"", "\"\n              >\n              </lrndesign-gallery-grid>\n            "])), this.accentColor, this.aspect, this.extra, this.dark, this.id, function (e) {
          return _this2.goToItem(e.detail);
        }, this.responsiveSize, this.selected, this.sizing === "cover" || "contain", this.items) : (0, _index.html)(_templateObject5_a8df8b008e0011ed99ce491205e67b1d || (_templateObject5_a8df8b008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <lrndesign-gallery-carousel\n              accent-color=\"", "\"\n              .aspect-ratio=\"", "\"\n              .extra-wide=\"", "\"\n              ?dark=\"", "\"\n              .gallery-id=\"", "\"\n              @item-changed=\"", "\"\n              responsive-size=\"", "\"\n              .selected=\"", "\"\n              sizing=\"", "\"\n              .sources=\"", "\"\n            >\n            </lrndesign-gallery-carousel>"])), this.accentColor, this.aspect, this.extra, this.dark, this.id, function (e) {
          return _this2.goToItem(e.detail);
        }, this.responsiveSize, this.selected, this.sizing === "cover" || "contain", this.items), this.editMode ? "" : (0, _index.html)(_templateObject6_a8df8b008e0011ed99ce491205e67b1d || (_templateObject6_a8df8b008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<slot hidden></slot>"]))));
      } // haxProperty definition

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignGallery.prototype), "connectedCallback", this).call(this);
        window.ResponsiveUtility.requestAvailability();
        this.updateGallery();
        this.observer.observe(this, {
          attributes: false,
          childList: true,
          subtree: false
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        if (this.observer && this.observer.disconnect) this.observer.disconnect();
        if (babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignGallery.prototype), "disconnectedCallback", this)) babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignGallery.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignGallery.prototype), "firstUpdated", this).call(this);
        window.dispatchEvent(new CustomEvent("responsive-element", {
          detail: {
            element: this,
            attribute: "responsive-size",
            sm: 300,
            md: 600,
            lg: 1000,
            xl: 1500
          }
        }));
        this.anchorData = this._getAnchorData();

        if (this.anchorData.gallery === this.id) {
          this.goToItem(this.anchorData.id);
        } else {
          this.goToItem();
        }
      }
      /**
       * handle updates
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignGallery.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "id" && !_this3.id) _this3.id = "gallery-".concat(_this3._generateUUID());
        });
      }
      /**
       * gets aspect ratio of images
       *
       * @readonly
       * @memberof LrndesignGallery
       */

    }, {
      key: "aspect",
      get: function get() {
        var items = (this.items || []).filter(function (item) {
          return item.src && item.src != "";
        }),
            src = items && items[0] ? items[0].src : false;

        if (src) {
          var img = new Image();
          img.src = src;
          return img.naturalWidth > 0 && img.naturalHeight > 0 ? img.naturalWidth / img.naturalHeight : 1.33333333;
        } else {
          return 1.33333333;
        }
      }
      /**
       * gets aspect ratio of an image and
       * determine if aspect ratio is extra wide
       *
       * @readonly
       * @memberof LrndesignGallery
       */

    }, {
      key: "extra",
      get: function get() {
        var ew = this.aspect > 2;
        return ew;
      }
      /**
       * gets items array
       *
       * @readonly
       * @memberof LrndesignGalleryBehaviors
       */

    }, {
      key: "items",
      get: function get() {
        var _this4 = this;

        var sources = this.sources || [],
            items = typeof sources === "string" ? JSON.parse(sources) : sources,
            total = items.length,
            itemData = (items || []).map(function (item, i) {
          return {
            alt: item.alt,
            details: item.details,
            index: i,
            id: item.id || "gallery-".concat(_this4.id, "-item-").concat(i),
            src: item.src,
            large: item.large && item.large !== "" ? item.large : item.src,
            thumbnail: item.thumbnail && item.thumbnail != "" ? item.thumbnail : item.src,
            xofy: "".concat(i + 1, " of ").concat(total),
            next: i + 1 < total ? i + 1 : -1,
            prev: i - 1 > -1 ? i - 1 : -1,
            sizing: item.sizing && item.sizing != "" ? item.sizing : _this4.sizing,
            gravity: item.gravity || "center",
            title: item.title,
            tooltip: "".concat(item.title || "Image ".concat(i), " (Zoom In)"),
            heading: "".concat(item.title || "Image ".concat(i), " (Full-Sized)")
          };
        });
        return itemData;
      }
      /**
       * mutation observer for tabs
       * @readonly
       * @returns {object}
       */

    }, {
      key: "observer",
      get: function get() {
        var _this5 = this;

        var callback = function callback() {
          return _this5.updateGallery();
        };

        return new MutationObserver(callback);
      }
      /**
       * go to item by id, or index
       *
       * @param {string} query
       */

    }, {
      key: "goToItem",
      value: function goToItem(query) {
        var start = this.items[0] || {};

        if (typeof query === "number" && query >= 0 && query < this.items.length) {
          this.selected = this.items[query] || start;
        } else {
          var matches = this.items.filter(function (item) {
            return item.id === query;
          });
          this.selected = matches.length > 0 ? matches[0] : start;
        }
      }
    }, {
      key: "updateGallery",
      value: function updateGallery() {
        var _this6 = this;

        var sources = [],
            figures = this.querySelectorAll("figure");
        figures.forEach(function (figure) {
          var id = figure.getAttribute("id"),
              img = figure.querySelector("img"),
              sizing = figure.getAttribute("sizing") || _this6.sizing,
              query = [1, 2, 3, 4, 5, 6].map(function (num) {
            return "h".concat(num, ":first-child");
          }).join(","),
              src = img && img.getAttribute("src") ? img.getAttribute("src") : undefined,
              srcset = img && img.getAttribute("srcset") ? img.getAttribute("srcset").split(",") : undefined,
              thumbset = srcset && srcset[0] ? srcset[0].split(" ") : undefined,
              largeset = srcset && srcset[srcset.length - 1] ? srcset[srcset.length - 1].split(" ") : undefined,
              thumbnail = thumbset && thumbset[0] ? thumbset[0] : undefined,
              large = largeset && largeset[0] ? largeset[0] : undefined,
              details = figure.querySelector("figcaption") ? figure.querySelector("figcaption").cloneNode(true) : undefined,
              alt = img && img.getAttribute("alt") ? img.getAttribute("alt") : undefined,
              figheading = details && details.querySelector(query) ? details.querySelector(query) : undefined,
              title = figheading ? figheading.innerHTML : "";

          babelHelpers.toConsumableArray(figure.querySelectorAll("figcaption,img")).forEach(function (el) {
            return el.setAttribute("style", "flex:1 1 auto");
          });
          if (figheading) figheading.remove();
          sources.push({
            alt: alt,
            id: id,
            src: src,
            thumbnail: thumbnail,
            large: large,
            title: title,
            details: details ? details.innerHTML : "",
            sizing: sizing
          });
        });
        if (sources.length > 0 && (!this.sources || this.sources.length < 1)) this.sources = sources;
      }
      /**
       * gets aspect ratio of an image and
       * determine if aspect ratio is extra wide
       *
       * @param {array}
       */

    }, {
      key: "_getAnchorData",
      value: function _getAnchorData() {
        var hash = window.location.hash !== null && window.location.hash !== "" ? window.location.hash.replace("#", "") : false,
            data = hash ? hash.split("---") : [];
        return {
          id: data.length > 1 ? data[1] : -1,
          gallery: data.length > 0 ? data[0] : -1,
          zoom: scroll && data.length > 2 && data[2] === "zoom"
        };
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignGallery), "styles", this)), [(0, _index.css)(_templateObject7_a8df8b008e0011ed99ce491205e67b1d || (_templateObject7_a8df8b008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        ::slotted(figure) {\n          display: flex;\n          flex-direction: column;\n          align-items: stretch;\n          justify-content: space-between;\n          margin-top: 15px;\n          margin-bottom: 15px;\n          padding: 5px;\n          max-width: 400px;\n          border: 1px solid #ddd;\n          page-break-inside: avoid;\n        }\n\n        :host([edit-mode]) #figures {\n          display: grid;\n          grid-gap: 5px;\n          grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n        }\n\n        :host([edit-mode]) ::slotted(figure) {\n          padding: 5px;\n          margin: 0;\n          width: calc(100% - 10px);\n        }\n\n        @media screen {\n          :host(:not([edit-mode])) ::slotted(figure) {\n            display: none;\n          }\n        }\n      "])))]);
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: true,
          contentEditable: true,
          gizmo: {
            title: "Image Gallery",
            description: "An image gallery displayed as a carousel or a grid",
            icon: "image:collections",
            color: "cyan",
            groups: ["Content", "Instructional", "Media", "Image"],
            handles: [{
              type: "image",
              source: "image"
            }],
            meta: {
              author: "HAXTheWeb core team"
            }
          },
          settings: {
            configure: [{
              slot: "title",
              title: "Optional Gallery Title",
              description: "Am optional title for the gallery.",
              inputMethod: "textfield",
              slotWrapper: "h1",
              allowedSlotWrappers: ["h1", "h2", "h3", "h4", "h5", "h5"]
            }, {
              slot: "description",
              title: "OptionalGallery Description",
              description: "An optional description for the gallery.",
              inputMethod: "textfield",
              slotWrapper: "p",
              allowedSlotWrappers: ["p", "div"]
            }, {
              property: "accentColor",
              title: "Accent Color",
              description: "An optional accent color.",
              inputMethod: "colorpicker"
            }, {
              property: "dark",
              title: "Dark Theme",
              description: "Enable Dark Theme",
              inputMethod: "boolean"
            }, {
              property: "layout",
              title: "Layout",
              description: "Display as grid?",
              inputMethod: "select",
              itemsList: ["carousel", "grid", "masonry"]
            }, {
              slot: "",
              title: "Gallery Figures",
              description: "The figures for the gallery.",
              inputMethod: "textfield",
              slotWrapper: "figure"
            }],
            advanced: [{
              property: "aspectRatio",
              title: "Aspect Ratio",
              description: "Custom aspect ratio, default is calculated based on the first image's aspect ratio",
              inputMethod: "textfield"
            }, {
              property: "sizing",
              title: "Fit to Aspect Ratio",
              description: "Fit images to aspect ratio",
              inputMethod: "select",
              options: {
                cover: "crop",
                contain: "letterbox"
              }
            }]
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignGallery), "properties", this)), {}, {
          id: {
            type: String,
            reflect: true,
            attribute: "id"
          },
          responsiveSize: {
            type: String,
            reflect: true,
            attribute: "responsive-size"
          },
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "lrndesign-gallery";
      }
    }]);
    return LrndesignGallery;
  }(_lrndesignGalleryBehaviors.LrndesignGalleryBehaviors);

  _exports.LrndesignGallery = LrndesignGallery;
  customElements.define("lrndesign-gallery", LrndesignGallery);
});