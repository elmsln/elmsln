define(["exports", "../../../lit/index.js", "./editable-table-behaviors.js", "../../simple-tooltip/simple-tooltip.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-button-lite.js", "../../hax-iconset/lib/simple-hax-iconset.js", "../../simple-toolbar/lib/simple-toolbar-button.js"], function (_exports, _index, _editableTableBehaviors, _simpleTooltip, _simpleIconLite, _simpleIcons, _simpleIconButtonLite, _simpleHaxIconset, _simpleToolbarButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableFilter = void 0;

  var _templateObject_9d7674c0809211edaa2833647dc78c6c, _templateObject2_9d7674c0809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `editable-table-editor-filter`
   * `Displays a cell in editable-table-display mode (editable-table-display.html) as a filter button.`
   *
   * @demo ./demo/display.html
   * @customElement
   * @extends LitElement
   */
  var EditableTableFilter = /*#__PURE__*/function (_SimpleToolbarButtonB) {
    babelHelpers.inherits(EditableTableFilter, _SimpleToolbarButtonB);

    var _super = _createSuper(EditableTableFilter);

    function EditableTableFilter() {
      var _this;

      babelHelpers.classCallCheck(this, EditableTableFilter);
      _this = _super.call(this);
      _this.columnIndex = null;
      _this.filtered = false;
      _this.text = "";
      _this.toggles = true;
      _this.icon = "editable-table:filter";
      _this.label = "Toggle filter.";
      _this.tooltip = "Toggle filter for column.";
      _this.describedby = "cell";
      return _this;
    }

    babelHelpers.createClass(EditableTableFilter, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_9d7674c0809211edaa2833647dc78c6c || (_templateObject_9d7674c0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["<div><slot id=\"cell\"></slot>", "</div> "])), babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableFilter.prototype), "render", this).call(this));
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableFilter.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableFilter.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "columnIndex") {
            _this2.tooltip = "Toggle Column ".concat(_this2.columnIndex, " filter.");
          }
        });
      }
      /**
       * Fires when filter button is clicked
       * @event toggle-filter
       */

    }, {
      key: "_handleClick",
      value: function _handleClick(e) {
        this.dispatchEvent(new CustomEvent("toggle-filter", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableFilter), "styles", this) || []), babelHelpers.toConsumableArray(_editableTableBehaviors.editableTableCellStyles), [(0, _index.css)(_templateObject2_9d7674c0809211edaa2833647dc78c6c || (_templateObject2_9d7674c0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-family: inherit;\n          font-size: inherit;\n        }\n        :host > div {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          width: 100%;\n        }\n        button {\n          flex: 0 0 auto !important;\n          width: auto !important;\n        }\n        #cell {\n          flex: 1 1 auto !important;\n          display: inline-block;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableFilter), "properties", this)), {}, {
          /**
           * Index of column
           */
          columnIndex: {
            type: Number,
            attribute: "column-index"
          },

          /**
           * Index of column
           */
          text: {
            type: String,
            attribute: "text"
          }
        });
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-filter";
      }
    }]);
    return EditableTableFilter;
  }((0, _simpleToolbarButton.SimpleToolbarButtonBehaviors)(_index.LitElement));

  _exports.EditableTableFilter = EditableTableFilter;
  customElements.define(EditableTableFilter.tag, EditableTableFilter);
});