define(["exports", "meta", "../../lit/index.js", "../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _index, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LunrSearch = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_6de81420809211edaa2833647dc78c6c, _templateObject2_6de81420809211edaa2833647dc78c6c, _templateObject3_6de81420809211edaa2833647dc78c6c, _templateObject4_6de81420809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lunr-search`
   * `LunrJS search element`
   * @demo demo/index.html
   * @element lunr-search
   */
  var LunrSearch = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(LunrSearch, _LitElement);

    var _super = _createSuper(LunrSearch);

    function LunrSearch() {
      var _this;

      babelHelpers.classCallCheck(this, LunrSearch);
      _this = _super.call(this);
      _this.method = "GET";
      _this.noStopWords = false;
      _this.dataSource = null;
      _this.fields = [];
      _this.limit = 500;
      _this.__auto = false;
      _this.minScore = 0;
      _this.log = false;

      if (window.WCGlobalBasePath) {
        _this.basePath = window.WCGlobalBasePath;
      } else {
        _this.basePath = new URL("./../../", meta.url).href;
      }

      var location = "".concat(_this.basePath, "lunr/lunr.js");
      window.addEventListener("es-bridge-lunr-loaded", _this._lunrLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      window.ESGlobalBridge.requestAvailability().load("lunr", location);

      if (window.ESGlobalBridge.requestAvailability().imports["lunr"] === true) {
        setTimeout(function () {
          _this.__lunrLoaded = true;
        }, 0);
      }

      return _this;
    }

    babelHelpers.createClass(LunrSearch, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_6de81420809211edaa2833647dc78c6c || (_templateObject_6de81420809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" ", "\n      <slot></slot>"])), this.demo && this.results ? (0, _index.html)(_templateObject2_6de81420809211edaa2833647dc78c6c || (_templateObject2_6de81420809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["", ""])), this.results.map(function (item) {
          return (0, _index.html)(_templateObject3_6de81420809211edaa2833647dc78c6c || (_templateObject3_6de81420809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["<h2>", "</h2>\n                <p>", "</p>"])), item.title, item.description);
        })) : "");
      } // properties available to the custom element for data binding

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (["dataSource", "__auto", "method"].includes(propName) && _this2.dataSource && _this2.method) {
            clearTimeout(_this2.__debounce);
            _this2.__debounce = setTimeout(function () {
              fetch(_this2.dataSource, {
                method: _this2.method
              }).then(function (response) {
                if (response.ok) return response.json();
              }).then(function (json) {
                _this2._dataResponse(json);
              });
            }, 0);
          }

          var notifiedProps = ["data", "search", "results", "noStopWords"];

          if (notifiedProps.includes(propName)) {
            // notify
            var eventName = "".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), "-changed");

            _this2.dispatchEvent(new CustomEvent(eventName, {
              detail: {
                value: _this2[propName]
              }
            }));
          } // only request data when we actually have a data source


          if (propName == "dataSource" && _this2[propName]) {
            _this2.__auto = true;
          }

          if (["data", "search", "index", "minScore", "limit"].includes(propName)) {
            _this2.results = _this2.searched(_this2.data, _this2.search, _this2.index, _this2.minScore, _this2.limit);
          }

          if (["data", "fields", "noStopWords", "__lunrLoaded"].includes(propName)) {
            _this2.index = _this2._createIndex(_this2.data, _this2.fields, _this2.noStopWords, _this2.__lunrLoaded);
          }
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-lunr-loaded", this._lunrLoaded.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(LunrSearch.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "_lunrLoaded",
      value: function _lunrLoaded(e) {
        // callback when loaded
        this.__lunrLoaded = true;
        window.removeEventListener("es-bridge-lunr-loaded", this._lunrLoaded.bind(this));
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "_dataResponse",
      value: function _dataResponse(response) {
        // must get a real response
        if (response) {
          try {
            this.data = babelHelpers.toConsumableArray(response);
          } catch (e) {
            console.warn(e);
          }
        }
      }
      /**
         Filters your input data
         
         @param {Array} data Array of Objects with common properties.
         @param {String} search The search term that filters results.
         @param {Object} index The lunr Index..
         @param {Number} minScore The minimum score of your results.
         @param {Number} limit The maximum number of results you'd like your results.
         
         @return {Array} The filtered data.
        */

    }, {
      key: "searched",
      value: function searched(data, search, index, minScore, limit) {
        if (data && index && search) {
          var results = [];

          if ("" + search !== "") {
            var searched = index.search(search);

            for (var i = 0; i < searched.length; i++) {
              if (i === limit || searched[i].score < minScore) {
                break;
              } // match on the id within the array of options


              var tmpItem = data.find(function (j) {
                return j.id == searched[i].ref;
              });
              results.push(tmpItem);
            }
          }

          if (results.length === 0 && !this.noStopWords && "" + search !== "") {
            if (!this.indexNoStopWords) {
              this.indexNoStopWords = this._createIndex(data, this.fields, true, this.__lunrLoaded);
            }

            searched = this.indexNoStopWords.search(search);
            var results = [];

            for (var i = 0; i < searched.length; i++) {
              if (i === limit || searched[i].score < minScore) {
                break;
              }

              var _tmpItem = data.find(function (j) {
                return j.id == searched[i].ref;
              });

              results.push(_tmpItem);
            }
          }

          return results;
        }
      }
    }, {
      key: "_createIndex",
      value: function _createIndex(data, fields, noStopWords, ready) {
        if (ready) {
          var root = this;

          if (Array.isArray(data) && data.length > 0) {
            if (Array.isArray(fields) && fields.length > 0) {
              return lunr(function () {
                for (var i = 0; i < fields.length; i++) {
                  if (fields[i].charAt(0) === fields[i].charAt(0).toUpperCase()) {
                    this.field(fields[i], {
                      boost: 10
                    });
                  } else {
                    this.field(fields[i]);
                  }
                }

                for (var i = 0; i < data.length; i++) {
                  var toIndex = {
                    id: i
                  };

                  for (var f = 0; f < fields.length; f++) {
                    if (data[i].hasOwnProperty(fields[f]) && data[i][fields[f]] !== null && typeof data[i][fields[f]].toString == "function" && (data[i][fields[f]].toString().split(" ").length > 2 || data[i][fields[f]].toString().length < 30)) {
                      //indicate that they might be words in it
                      toIndex[fields[f]] = data[i][fields[f]].toString();
                    } else {
                      toIndex[fields[f]] = "";
                    }
                  }

                  this.add(toIndex);
                }

                if (noStopWords) {
                  this.pipeline.remove(lunr.stopWordFilter);
                }
              });
            } else {
              // find fields
              // TODO only word best fields.
              var fields = [];
              var ddup = {};
              return lunr(function () {
                for (var indexOfData = 0; indexOfData < data.length; indexOfData++) {
                  for (var prop in data[indexOfData]) {
                    if (prop.charAt(0) !== "_" && !ddup.hasOwnProperty(prop) && (prop.toString().split(" ").length > 2 || prop.toString().length < 30)) {
                      fields.push(prop);

                      if (prop.charAt(0) === prop.charAt(0).toUpperCase()) {
                        this.field(prop, {
                          boost: 10
                        });
                      } else {
                        this.field(prop);
                      }

                      ddup[prop] = 1;
                    }
                  }
                }

                if (fields.length > 0) {
                  root.fields = fields;
                }

                for (var i = 0; i < data.length; i++) {
                  var toIndex = {
                    id: i
                  };

                  for (var f = 0; f < fields.length; f++) {
                    if (data[i].hasOwnProperty(fields[f]) && data[i][fields[f]] !== null && typeof data[i][fields[f]].toString == "function" && (data[i][fields[f]].toString().split(" ").length > 2 || data[i][fields[f]].toString().length < 30)) {
                      //indicate that they might be words in it
                      toIndex[fields[f]] = data[i][fields[f]].toString();
                    } else {
                      toIndex[fields[f]] = "";
                    }
                  }

                  this.add(toIndex);
                }

                if (noStopWords) {
                  this.pipeline.remove(lunr.stopWordFilter);
                }
              });
            }
          }
        }
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject4_6de81420809211edaa2833647dc78c6c || (_templateObject4_6de81420809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          dataSource: {
            type: String,
            attribute: "data-source"
          },
          __auto: {
            type: Boolean
          },
          data: {
            type: Array
          },
          method: {
            type: String
          },
          search: {
            type: String
          },
          results: {
            type: Array
          },
          noStopWords: {
            type: Boolean,
            attribute: "no-stop-words"
          },
          fields: {
            type: Array
          },
          indexNoStopWords: {
            type: Object
          },
          index: {
            type: Object
          },
          __lunrLoaded: {
            type: Boolean
          },
          limit: {
            type: Number
          },
          minScore: {
            type: Number
          },
          log: {
            type: Boolean
          },
          demo: {
            type: Boolean,
            reflect: true
          }
        };
      }
    }, {
      key: "tag",
      get: function get() {
        return "lunr-search";
      }
    }]);
    return LunrSearch;
  }(_index.LitElement);

  _exports.LunrSearch = LunrSearch;
  customElements.define(LunrSearch.tag, LunrSearch);
});