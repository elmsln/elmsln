define(["exports", "require", "../../lit/index.js", "../../@polymer/iron-ajax/iron-ajax.js", "../h-a-x/h-a-x.js", "../hax-body/lib/hax-store.js"], function (_exports, _require, _index, _ironAjax, _hAX, _haxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CmsHax = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_6413c070809211edaa2833647dc78c6c, _templateObject2_6413c070809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `cms-hax`
   * @element cms-hax
   * @demo ../../demo/index.html
   */
  var CmsHax = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(CmsHax, _LitElement);

    var _super = _createSuper(CmsHax);

    /**
     * Created life cycle
     */
    function CmsHax() {
      var _this;

      babelHelpers.classCallCheck(this, CmsHax);
      _this = _super.call(this);
      _this.ready = false;
      window.addEventListener("hax-store-ready", _this._storeReady.bind(babelHelpers.assertThisInitialized(_this)), {
        once: true,
        passive: true
      });
      window.addEventListener("hax-store-app-store-loaded", _this._appstoreLoaded.bind(babelHelpers.assertThisInitialized(_this)), {
        once: true,
        passive: true
      });
      window.addEventListener("hax-save-body-value", _this._saveFired.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("hax-cancel", _this._cancelFired.bind(babelHelpers.assertThisInitialized(_this)));
      _this.__lock = false;
      _this.endPoint = null;
      _this.openDefault = false;
      _this.hidePanelOps = false;
      _this.hidePreferencesButton = false;
      _this.elementAlign = "right";
      _this.method = "PUT";
      _this.syncBody = false;
      _this.bodyValue = "";
      _this.hideMessage = false;
      _this.__imported = false;
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["./lib/cms-token.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./lib/cms-block.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./lib/cms-views.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./lib/cms-entity.js"], res, rej);
        });
      }, 0);
      return _this;
    }

    babelHelpers.createClass(CmsHax, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_6413c070809211edaa2833647dc78c6c || (_templateObject_6413c070809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <iron-ajax\n        id=\"pageupdateajax\"\n        url=\"", "\"\n        method=\"", "\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        @response=\"", "\"\n      ></iron-ajax>\n      <h-a-x app-store=\"", "\"></h-a-x>\n    "])), this.endPoint, this.method, this._handleUpdateResponse, this.__appStore);
      }
    }, {
      key: "decodeHTMLEntities",
      value: function decodeHTMLEntities(text) {
        var entities = [["amp", "&"], ["apos", "'"], ["#x27", "'"], ["#x2F", "/"], ["#39", "'"], ["#47", "/"], ["lt", "<"], ["gt", ">"], ["nbsp", " "], ["quot", '"']];

        for (var i = 0, max = entities.length; i < max; ++i) {
          text = text.replace(new RegExp("&" + entities[i][0] + ";", "g"), entities[i][1]);
        }

        return text;
      }
    }, {
      key: "_activeHaxBodyUpdated",
      value:
      /**
       * Ensure we've imported our content on initial setup
       */
      function _activeHaxBodyUpdated(ready) {
        var _this2 = this;

        // ensure we import our content once we get an initial registration of active body
        if (!this.__imported) {
          this.__imported = true; // see what's inside of this, in a template tag

          var children = this.querySelector("template"); // convert this template content into the real thing
          // this helps with correctly preserving everything on the way down

          if (children != null) {
            _haxStore.HAXStore.activeHaxBody.importContent(children.innerHTML);

            setTimeout(function () {
              // NOW we have the data imported
              if (_this2.openDefault) {
                _haxStore.HAXStore.editMode = true;
              }
            }, 2000);
          }
        }
      }
      /**
       * Calculate if we have anywhere to redirect to.
       */

    }, {
      key: "_computeRedirectOnSave",
      value: function _computeRedirectOnSave(redirectLocation) {
        if (babelHelpers.typeof(redirectLocation) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          return true;
        }

        return false;
      }
      /**
       * Set certain data bound values to the store once it's ready
       */

    }, {
      key: "_noticeTagChanges",
      value: function _noticeTagChanges(allowedTags, hidePanelOps, offsetMargin, hidePreferencesButton, elementAlign) {
        var _this3 = this;

        if (_haxStore.HAXStore.ready) {
          // double check because this can cause issues
          if (allowedTags) {
            var defaultTags = _haxStore.HAXStore.validTagList;
            _haxStore.HAXStore.validTagList = [].concat(babelHelpers.toConsumableArray(defaultTags), babelHelpers.toConsumableArray(allowedTags));
          }

          setTimeout(function () {
            _haxStore.HAXStore.haxTray.hidePanelOps = hidePanelOps;
            _haxStore.HAXStore.haxTray.offsetMargin = offsetMargin;
            _haxStore.HAXStore.haxTray.hidePreferencesButton = hidePreferencesButton;
            _haxStore.HAXStore.elementAlign = elementAlign;
            setTimeout(function () {
              // NOW we have the data imported
              if (_this3.openDefault) {
                _haxStore.HAXStore.editMode = true;
              }
            }, 2000);
          }, 0);
        }
      }
      /**
       * Set certain data bound values to the store once it's ready
       */

    }, {
      key: "_storeReady",
      value: function _storeReady(e) {
        var _this4 = this;

        // delay as there can be some timing issues with attributes in CMSs
        setTimeout(function () {
          // trigger the update of different parts of the global state
          _this4._noticeTagChanges(_this4.allowedTags, _this4.hidePanelOps, _this4.offsetMargin, _this4.hidePreferencesButton, _this4.elementAlign);

          _this4.__applyMO();

          window.removeEventListener("hax-store-ready", _this4._storeReady.bind(_this4), {
            once: true,
            passive: true
          });
        }, 0);
      }
    }, {
      key: "_appstoreLoaded",
      value: function _appstoreLoaded(e) {
        var _this5 = this;

        setTimeout(function () {
          _this5.ready = true;
          window.removeEventListener("hax-store-app-store-loaded", _this5._appstoreLoaded.bind(_this5), {
            once: true,
            passive: true
          });
        }, 0);
      }
    }, {
      key: "_makeAppStore",
      value: function _makeAppStore(val) {
        this.__appStore = this.decodeHTMLEntities(val);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this6 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(CmsHax.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(CmsHax.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "redirectLocation") {
            _this6.redirectOnSave = _this6._computeRedirectOnSave(_this6[propName]);
          }

          if (propName == "ready" && _this6.ready && _this6.shadowRoot) {
            _this6._activeHaxBodyUpdated(_this6.ready);
          }

          if (propName == "appStoreConnection") {
            _this6._makeAppStore(_this6[propName]);
          }

          if (["allowedTags", "hidePanelOps", "offsetMargin", "hidePreferencesButton", "elementAlign"].includes(propName)) {
            _this6._noticeTagChanges(_this6.allowedTags, _this6.hidePanelOps, _this6.offsetMargin, _this6.hidePreferencesButton, _this6.elementAlign);
          }
        });
      }
      /**
       * detached life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        if (this._observer) {
          this._observer.disconnect();

          this._observer = null;
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(CmsHax.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "__applyMO",
      value: function () {
        var _applyMO = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var _this7 = this;

          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  // notice ANY change to body and bubble up, only when we are attached though
                  if (!this._observer && this.syncBody && _haxStore.HAXStore.activeHaxBody) {
                    this._observer = new MutationObserver( /*#__PURE__*/function () {
                      var _ref = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(mutations) {
                        return _regeneratorRuntime().wrap(function _callee$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                if (_this7.__lock) {
                                  _context.next = 11;
                                  break;
                                }

                                _this7.__lock = true;
                                _context.t0 = _this7;
                                _context.t1 = CustomEvent;
                                _context.next = 6;
                                return _haxStore.HAXStore.activeHaxBody.haxToContent();

                              case 6:
                                _context.t2 = _context.sent;
                                _context.t3 = {
                                  bubbles: true,
                                  cancelable: true,
                                  composed: true,
                                  detail: _context.t2
                                };
                                _context.t4 = new _context.t1("hax-body-content-changed", _context.t3);

                                _context.t0.dispatchEvent.call(_context.t0, _context.t4);

                                setTimeout(function () {
                                  _this7.__lock = false;
                                }, 100);

                              case 11:
                              case "end":
                                return _context.stop();
                            }
                          }
                        }, _callee);
                      }));

                      return function (_x) {
                        return _ref.apply(this, arguments);
                      };
                    }());

                    this._observer.observe(_haxStore.HAXStore.activeHaxBody, {
                      childList: true,
                      subtree: true
                    });
                  }

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function __applyMO() {
          return _applyMO.apply(this, arguments);
        }

        return __applyMO;
      }()
      /**
       * _cancelFired
       */

    }, {
      key: "_cancelFired",
      value: function _cancelFired(e) {
        var _this8 = this;

        // cancel
        _haxStore.HAXStore.skipExitTrap = true;
        _haxStore.HAXStore.editMode = false; // if there's a redirect on save, then redirect to it bc of the cancel event

        if (this.redirectOnSave) {
          setTimeout(function () {
            // trigger redirect
            window.location = _this8.redirectLocation;
          }, 0);
        }
      }
      /**
       * _saveFired
       */

    }, {
      key: "_saveFired",
      value: function () {
        var _saveFired2 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(e) {
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  // generate sanitized content
                  if (this.endPoint) {
                    _haxStore.HAXStore.skipExitTrap = true;

                    if (_haxStore.HAXStore.editMode) {
                      _haxStore.HAXStore.editMode = false;
                    }

                    this.shadowRoot.querySelector("#pageupdateajax").body = e.detail.value; // send the request

                    this.shadowRoot.querySelector("#pageupdateajax").generateRequest();
                  }

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function _saveFired(_x2) {
          return _saveFired2.apply(this, arguments);
        }

        return _saveFired;
      }()
      /**
       * _handleUpdateResponse
       */

    }, {
      key: "_handleUpdateResponse",
      value: function _handleUpdateResponse(e) {
        var _this9 = this;

        if (!this.hideMessage) {
          var evt = new CustomEvent("simple-toast-show", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              text: "Saved!",
              duration: 3000
            }
          });
          window.dispatchEvent(evt); // custom event for things that want to know we just saved

          this.dispatchEvent(new CustomEvent("cms-hax-saved", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: true
          })); // support auto redirecting on save if that's been requested
          // in the integration point

          if (this.redirectOnSave) {
            setTimeout(function () {
              // trigger redirect
              window.location = _this9.redirectLocation;
            }, 2000);
          }
        }
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject2_6413c070809211edaa2833647dc78c6c || (_templateObject2_6413c070809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-size: 16px;\n          box-sizing: content-box;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "cms-hax";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          ready: {
            type: Boolean
          },

          /**
           * Default the panel to open
           */
          openDefault: {
            type: Boolean,
            reflect: true,
            attribute: "open-default"
          },

          /**
           * Hide the panel operations (save and cancel),
           */
          hidePanelOps: {
            type: Boolean,
            attribute: "hide-panel-ops"
          },
          offsetMargin: {
            type: String,
            reflect: true,
            attribute: "offset-margin"
          },

          /**
           * Hide preferences button
           */
          hidePreferencesButton: {
            type: Boolean,
            attribute: "hide-preferences-button"
          },

          /**
           * Direction to elementAlign the hax edit panel
           */
          elementAlign: {
            type: String,
            attribute: "element-align"
          },

          /**
           * allowed Tags, usually as dictated by the input filtering
           * layer of the backend system that HAX is riding on.
           * While not fullproof, this at least will enforce front-end
           * filtering to match what actually is going to be allowed
           * to be saved in the first place.
           */
          allowedTags: {
            type: Array,
            attribute: "allowed-tags"
          },

          /**
           * Location to save content to.
           */
          endPoint: {
            type: String,
            attribute: "end-point"
          },

          /**
           * Method to save content.
           */
          method: {
            type: String
          },

          /**
           * Connection object for talking to an app store.
           */
          appStoreConnection: {
            type: String,
            attribute: "app-store-connection"
          },
          __appStore: {
            type: String
          },

          /**
           * syncBody
           */
          syncBody: {
            type: Boolean,
            attribute: "sync-body"
          },

          /**
           * Only available if syncBody is true; this allows data binding to the value being worked on in hax-body tag
           */
          bodyValue: {
            type: String,
            attribute: "body-value"
          },

          /**
           * Flag to hide the toast.
           */
          hideMessage: {
            type: Boolean,
            attribute: "hide-message"
          },

          /**
           * Optional URL to redirect to once we save.
           */
          redirectLocation: {
            type: String,
            attribute: "redirect-location"
          },

          /**
           * Option to redirect once we save successfully
           */
          redirectOnSave: {
            type: Boolean,
            attribute: "redirect-on-save"
          },
          __imported: {
            type: Boolean
          }
        };
      }
    }]);
    return CmsHax;
  }(_index.LitElement);

  _exports.CmsHax = CmsHax;
  customElements.define(CmsHax.tag, CmsHax);
});