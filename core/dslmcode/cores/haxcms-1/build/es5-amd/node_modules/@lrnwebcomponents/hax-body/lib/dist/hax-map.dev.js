"use strict";

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HaxMap = void 0;

var _litElement = require("lit");

require("@lrnwebcomponents/simple-icon/lib/simple-icon-lite.js");

require("@lrnwebcomponents/hax-body/lib/hax-toolbar-item.js");

require("@lrnwebcomponents/hax-iconset/lib/simple-hax-iconset.js");

var _haxStore = require("@lrnwebcomponents/hax-body/lib/hax-store.js");

var _utils = require("@lrnwebcomponents/utils/utils.js");

var _haxUiStyles = require("@lrnwebcomponents/hax-body/lib/hax-ui-styles.js");

var _I18NMixin2 = require("@lrnwebcomponents/i18n-manager/lib/I18NMixin.js");

function _typeof(obj) {
  if (typeof Symbol === "function" && babelHelpers.typeof(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return babelHelpers.typeof(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : babelHelpers.typeof(obj);
    };
  }

  return _typeof(obj);
}

function _templateObject3_af7033a0809211edaa2833647dc78c6c() {
  var data = _taggedTemplateLiteral(['\n            <li>\n              <hax-toolbar-item\n                align-horizontal="left"\n                class="heading-level-', '"\n                @click="', '"\n                data-index="', '"\n                icon="', '"\n                label="', '"\n                show-text-label\n              >\n              </hax-toolbar-item>\n            </li>\n          ']);

  _templateObject3_af7033a0809211edaa2833647dc78c6c = function _templateObject3_af7033a0809211edaa2833647dc78c6c() {
    return data;
  };

  return data;
}

function _templateObject2_af7033a0809211edaa2833647dc78c6c() {
  var data = _taggedTemplateLiteral(["\n      <h5>", '</h5>\n      <div class="stats">\n        <div class="stat">\n          <span>', "</span>\n          <span>", '</span>\n        </div>\n        <div class="stat">\n          <span>', "</span>\n          <span>", '</span>\n        </div>\n        <div class="stat">\n          <span>', "</span>\n          <span>", '</span>\n        </div>\n        <div class="stat">\n          <span>', "</span>\n          <span>", "</span>\n        </div>\n      </div>\n      <h5>", "</h5>\n      <ul>\n        ", "\n      </ul>\n    "]);

  _templateObject2_af7033a0809211edaa2833647dc78c6c = function _templateObject2_af7033a0809211edaa2833647dc78c6c() {
    return data;
  };

  return data;
}

function _templateObject_af7033a0809211edaa2833647dc78c6c() {
  var data = _taggedTemplateLiteral(['\n        :host {\n          display: block;\n        }\n        .container {\n          text-align: left;\n        }\n        .stats {\n          display: flex;\n          align-items: stretch;\n          flex-wrap: wrap;\n        }\n        .stat {\n          flex: 1 1 auto;\n          text-align: center;\n          border: 1px solid var(--hax-ui-border-color);\n          font-weight: normal;\n          font-size: var(--hax-ui-font-size-xs);\n          line-height: 140%;\n          padding: var(--hax-ui-spacing-sm);\n        }\n        .stat > * {\n          display: block;\n        }\n        .stat *:first-child {\n          font-weight: bold;\n          font-size: 150%;\n        }\n        ul {\n          list-style: none;\n          padding: 0;\n          margin: 0;\n        }\n        ul li {\n          margin: 0;\n          padding: 0;\n        }\n        li > hax-toolbar-item {\n          width: 100%;\n        }\n        li > hax-toolbar-item::part(button),\n        li > hax-toolbar-item[icon="hax:h2"].heading-level-h2::part(button) {\n          width: 100%;\n          margin-left: 0px;\n        }\n        li > hax-toolbar-item.heading-level-h2::part(button),\n        li > hax-toolbar-item[icon="hax:h3"].heading-level-h3::part(button) {\n          width: calc(100% - 26px);\n          margin-left: 26px;\n        }\n        li > hax-toolbar-item.heading-level-h3::part(button),\n        li > hax-toolbar-item[icon="hax:h4"].heading-level-h4::part(button) {\n          width: calc(100% - calc(2 * 26px));\n          margin-left: calc(2 * 26px);\n        }\n        li > hax-toolbar-item.heading-level-h4::part(button),\n        li > hax-toolbar-item[icon="hax:h5"].heading-level-h5::part(button) {\n          width: calc(100% - calc(3 * 26px));\n          margin-left: calc(3 * 26px);\n        }\n        li > hax-toolbar-item.heading-level-h5::part(button),\n        li > hax-toolbar-item[icon="hax:h6"].heading-level-h6::part(button) {\n          width: calc(100% - calc(4 * 26px));\n          margin-left: calc(4 * 26px);\n        }\n        li > hax-toolbar-item.heading-level-h6::part(button) {\n          width: calc(100% - calc(5 * 26px));\n          margin-left: calc(5 * 26px);\n        }\n      ']);

  _templateObject_af7033a0809211edaa2833647dc78c6c = function _templateObject_af7033a0809211edaa2833647dc78c6c() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function _classCallCheck(instance, Constructor) {
  if (!babelHelpers.instanceof(instance, Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}
/**
 * `hax-map`
 * @element hax-map
 * `Export dialog with all export options and settings provided.`
 */


var HaxMap = /*#__PURE__*/function (_I18NMixin) {
  _inherits(HaxMap, _I18NMixin);

  _createClass(HaxMap, null, [{
    key: "styles",

    /**
     * LitElement constructable styles enhancement
     */
    get: function get() {
      return [].concat(_toConsumableArray(_haxUiStyles.HaxTrayDetailHeadings), [(0, _litElement.css)(_templateObject_af7033a0809211edaa2833647dc78c6c())]);
    }
  }]);

  function HaxMap() {
    var _this;

    _classCallCheck(this, HaxMap);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HaxMap).call(this));
    _this.elementList = [];
    _this.t = {
      contentStatistics: "Content Statistics",
      words: "Words",
      headings: "Headings",
      paragraphs: "Paragraphs",
      widgets: "Widgets",
      characters: "Characters",
      listView: "List view"
    };

    _this.registerLocalization({
      context: _assertThisInitialized(_this),
      namespace: "hax"
    });

    return _this;
  }

  _createClass(HaxMap, [{
    key: "updateHAXMap",
    value: function updateHAXMap(e) {
      var list, elements, i, def;
      return _regeneratorRuntime().async(function updateHAXMap$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = regeneratorRuntime;
              _context.t1 = _haxStore.HAXStore;
              _context.next = 4;
              return _regeneratorRuntime().awrap(_haxStore.HAXStore.activeHaxBody.haxToContent());

            case 4:
              _context.t2 = _context.sent;
              _context.t3 = _context.t1.htmlToHaxElements.call(_context.t1, _context.t2);
              _context.next = 8;
              return _context.t0.awrap.call(_context.t0, _context.t3);

            case 8:
              list = _context.sent;
              this.calcStats(list);
              elements = [];

              for (i = 0; i < list.length; i++) {
                def = _haxStore.HAXStore.haxSchemaFromTag(list[i].tag);

                if (def.gizmo) {
                  elements.push({
                    icon: def.gizmo.icon,
                    name: def.gizmo.title
                  });
                } else {
                  if (list[i].tag && list[i].tag.includes("-")) {
                    elements.push({
                      icon: "hax:templates",
                      name: "Widget"
                    });
                  } else {
                    elements.push({
                      icon: "hax:paragraph",
                      name: "HTML block"
                    });
                  }
                }
              }

              this.elementList = [].concat(elements);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
    /**
     * Calculate statistics from the array of hax elements
     */

  }, {
    key: "calcStats",
    value: function calcStats(elements) {
      if (elements && _haxStore.HAXStore.activeHaxBody.innerText) {
        var counts = {
          c: _haxStore.HAXStore.activeHaxBody.innerText.length,
          w: parseInt(_haxStore.HAXStore.activeHaxBody.innerText.split(/\s+/g).length - 1),
          h: 0,
          p: 0,
          e: 0
        };
        elements.forEach(function (el) {
          switch (el.tag) {
            case "blockquote":
            case "div":
            case "span":
            case "p":
              counts.p++;
              break;

            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
            case "relative-heading":
              // special support for our own heading tag
              counts.h++;
              break;

            default:
              counts.e++;
              break;
          }
        });

        for (var i in counts) {
          this["".concat(i, "Count")] = counts[i];
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return (0, _litElement.html)(_templateObject2_af7033a0809211edaa2833647dc78c6c(), this.t.contentStatistics, this.wCount, this.t.words, this.pCount, this.t.paragraphs, this.eCount, this.t.widgets, this.cCount, this.t.characters, this.t.listView, this.indentedElements.map(function (element, index) {
        return (0, _litElement.html)(_templateObject3_af7033a0809211edaa2833647dc78c6c(), element.parent || "h1", function (e) {
          return _this2.goToItem(index);
        }, index, element.icon, element.name);
      }));
    }
  }, {
    key: "goToItem",
    value: function goToItem(index) {
      if (index) {
        var activeChild = _haxStore.HAXStore.activeHaxBody.children[parseInt(index)];

        activeChild.classList.add("blinkfocus");

        if (typeof activeChild.scrollIntoViewIfNeeded === "function") {
          activeChild.scrollIntoViewIfNeeded(true);
        } else {
          activeChild.scrollIntoView({
            behavior: "smooth",
            inline: "center"
          });
        }

        setTimeout(function () {
          activeChild.classList.remove("blinkfocus");
        }, 500);
      }
    }
  }, {
    key: "scrollInMap",
    value: function scrollInMap() {
      var target = (0, _utils.normalizeEventPath)(e)[0];
      this.goToItem(target.getAttribute("data-index"));
    }
  }, {
    key: "indentedElements",
    get: function get() {
      var prev = "h1";
      return this.elementList.map(function (element) {
        var el = element;
        el.parent = prev;

        if (el.name == "Heading") {
          var h = el.icon.replace("hax:", "").trim();
          el.parent = h;
          prev = h;
        }

        return el;
      });
    }
  }], [{
    key: "tag",
    get: function get() {
      return "hax-map";
    }
  }, {
    key: "properties",
    get: function get() {
      return {
        /**
         * Title when open.
         */
        opened: {
          type: Boolean
        },
        elementList: {
          type: Array
        },
        cCount: {
          type: String
        },
        wCount: {
          type: String
        },
        hCount: {
          type: String
        },
        pCount: {
          type: String
        },
        eCount: {
          type: String
        }
      };
    }
  }]);

  return HaxMap;
}((0, _I18NMixin2.I18NMixin)(_litElement.LitElement));

exports.HaxMap = HaxMap;
window.customElements.define(HaxMap.tag, HaxMap);