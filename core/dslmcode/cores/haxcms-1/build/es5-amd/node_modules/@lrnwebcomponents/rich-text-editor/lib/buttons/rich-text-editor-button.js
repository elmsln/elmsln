define(["exports", "../../../../lit/index.js", "../../../simple-toolbar/lib/simple-toolbar-button.js", "../singletons/rich-text-editor-range-behaviors.js", "../../../simple-icon/lib/simple-icon-lite.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-button-lite.js", "../../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _index, _simpleToolbarButton, _richTextEditorRangeBehaviors, _simpleIconLite, _simpleIcons, _simpleIconButtonLite, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextToolbarStyles = _exports.RichTextStyles = _exports.RichTextEditorButtonBehaviors = _exports.RichTextEditorButton = void 0;

  var _templateObject_e98e61808e0011ed99ce491205e67b1d, _templateObject2_e98e61808e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * RichTextStyles
   *
   * @lit-html
   * @lit-element
   * @const
   * @default
   * @type {array}
   */
  var RichTextStyles = [(0, _index.css)(_templateObject_e98e61808e0011ed99ce491205e67b1d || (_templateObject_e98e61808e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    :host {\n      --simple-toolbar-border-color: var(--rich-text-editor-border-color, #ddd);\n      --simple-toolbar-border-width: var(--rich-text-editor-border-width, 1px);\n      --simple-toolbar-button-bg: var(--rich-text-editor-bg, #ffffff);\n      --simple-fields-focus-color: var(--rich-text-editor-focus-color, blue);\n      --simple-fields-invalid-color: var(--rich-text-editor-error-color, #800);\n    }\n  "])))];
  /**
   * RichTextStyles
   *
   * @lit-html
   * @lit-element
   * @const
   * @default
   * @type {array}
   * @extends RichTextStyles
   */

  _exports.RichTextStyles = RichTextStyles;
  var RichTextToolbarStyles = [].concat(RichTextStyles, [(0, _index.css)(_templateObject2_e98e61808e0011ed99ce491205e67b1d || (_templateObject2_e98e61808e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    :host {\n      --simple-toolbar-border-color: var(--rich-text-editor-border-color, #ddd);\n      --simple-toolbar-border-width: var(--rich-text-editor-border-width, 1px);\n      --simple-toolbar-button-opacity: var(\n        --rich-text-editor-button-opacity,\n        1\n      );\n      --simple-toolbar-button-color: var(--rich-text-editor-button-color, #444);\n      --simple-toolbar-button-bg: var(--rich-text-editor-button-bg, #ffffff);\n      --simple-toolbar-button-border-color: var(\n        --rich-text-editor-button-border-color,\n        transparent\n      );\n      --simple-toolbar-button-toggled-opacity: var(\n        --rich-text-editor-button-toggled-opacity,\n        1\n      );\n      --simple-toolbar-button-toggled-color: var(\n        --rich-text-editor-button-toggled-color,\n        #222\n      );\n      --simple-toolbar-button-toggled-bg: var(\n        --rich-text-editor-button-toggled-bg,\n        #ddd\n      );\n      --simple-toolbar-button-toggled-border-color: var(\n        --rich-text-editor-button-toggled-border-color,\n        transparent\n      );\n      --simple-toolbar-button-hover-opacity: var(\n        --rich-text-editor-button-hover-opacity,\n        1\n      );\n      --simple-toolbar-button-hover-color: var(\n        --rich-text-editor-button-hover-color,\n        #000\n      );\n      --simple-toolbar-button-hover-bg: var(\n        --rich-text-editor-button-hover-bg,\n        #f0f0f0\n      );\n      --simple-toolbar-button-hover-border-color: var(\n        --rich-text-editor-button-hover-border-color,\n        unset\n      );\n      --simple-toolbar-button-disabled-opacity: var(\n        --rich-text-editor-button-disabled-opacity,\n        1\n      );\n      --simple-toolbar-button-disabled-color: var(\n        --rich-text-editor-button-disabled-color,\n        #666\n      );\n      --simple-toolbar-button-disabled-bg: var(\n        --rich-text-editor-button-disabled-bg,\n        transparent\n      );\n      --simple-toolbar-button-disabled-border-color: var(\n        --rich-text-editor-button-disabled-border-color,\n        transparent\n      );\n    }\n    button[part=\"button\"] {\n      border-radius: var(--rich-text-editor-button-disabled-border-radius, 0px);\n    }\n  "])))]);
  /**
   * RichTextEditorButtonBehaviors
   *
   * @extends SimpleToolbarButtonBehaviors
   * @customElement
   * @class
   * @lit-html
   * @lit-element
   */

  _exports.RichTextToolbarStyles = RichTextToolbarStyles;

  var RichTextEditorButtonBehaviors = function RichTextEditorButtonBehaviors(SuperClass) {
    return /*#__PURE__*/function (_RichTextEditorRangeB) {
      babelHelpers.inherits(_class, _RichTextEditorRangeB);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.tagsList = "";
        return _this;
      }
      /**
       * whether button is toggled
       *
       * @readonly
       * @memberof RichTextEditorButton
       */


      babelHelpers.createClass(_class, [{
        key: "render",
        value: function render() {
          return babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "render", this).call(this);
        }
      }, {
        key: "isToggled",
        get: function get() {
          return this.commandIsToggled;
        }
        /**
         * gets command param for document.execCommand
         * @readonly
         */

      }, {
        key: "operationCommand",
        get: function get() {
          return this.isToggled && !!this.toggledCommand ? this.toggledCommand : this.command;
        }
        /**
         * gets value param for document.execCommand
         * @readonly
         */

      }, {
        key: "operationCommandVal",
        get: function get() {
          return this.isToggled && !!this.toggledCommand ? this.toggledCommandVal || "" : this.commandVal;
        }
        /**
         * tagslist as an array
         *
         * @readonly
         */

      }, {
        key: "tagsArray",
        get: function get() {
          return (this.tagsList || "").replace(/\s*/g, "").toLowerCase().split(",");
        }
      }, {
        key: "firstUpdated",
        value: function firstUpdated(changedProperties) {
          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this).call(this, changedProperties);
          }
        }
      }, {
        key: "updated",
        value: function updated(changedProperties) {
          var _this2 = this;

          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this).call(this, changedProperties);
          changedProperties.forEach(function (oldValue, propName) {
            if (propName === "controls") _this2._editorChanged(_this2.controls, oldValue);
            if (propName === "range") _this2._rangeChanged(_this2.range, oldValue);
            if (["shortcutKeys", "tagsList", "tagClickCallback"].includes(propName)) _this2.updateButtonRegistry();
          });
        }
        /**
         * Called every time the element is inserted into the DOM. Useful for
         * running setup code, such as fetching resources or rendering.
         * Generally, you should try to delay work until this time.
         */

      }, {
        key: "connectedCallback",
        value:
        /**
         * Called every time the element is inserted into the DOM. Useful for
         * running setup code, such as fetching resources or rendering.
         * Generally, you should try to delay work until this time.
         */
        function connectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
        }
        /**
         * life cycle, element is detatched
         */

      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
        }
        /**
         * override this custom function to perform a
         * custom operation after button is clicked
         *
         * @param {object} editor current editor
         * @param {object} toolbar parent toolbar
         * @param {object} selection range/selection manager
         */

      }, {
        key: "commandCallback",
        value: function commandCallback(editor, toolbar, selection) {}
        /**
         * indicates range should be wrapped in given element
         * @event wrapselection
         * @param {object} element html element
         */

      }, {
        key: "wrapSelection",
        value: function wrapSelection(element) {
          this.dispatchEvent(new CustomEvent("wrapselection", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: element
          }));
        }
        /**
         * sends a command to the selection manager
         *
         * @param {object} event
         */

      }, {
        key: "sendCommand",
        value: function sendCommand(event) {
          this._handleCommand(this.operationCommand, this.operationCommandVal, this.range); // optional callback so that custom buttons can perform
          // custom toolbar and/or editor opperations


          if (this.commandCallback) this.commandCallback(this.target, this.__toolbar, this);
          this.dispatchEvent(new CustomEvent("command", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              command: this.operationCommand,
              commandVal: this.operationCommandVal,
              range: this.range,
              button: this
            }
          }));
        }
        /**
         * expands range to selection's parent block
         */

      }, {
        key: "setRange",
        value: function setRange() {
          if (!this.tagsList || this.tagsList === "") return;
          /* if command is formatBlock expand selection to entire block */

          var block = this.rangeOrMatchingAncestor();
          if (block) this.selectNode(block);
        }
        /**
         * Handles button tap
         */

      }, {
        key: "_handleClick",
        value: function _handleClick(e) {
          e.preventDefault();
          this.sendCommand(e);
        }
        /**
         * handles range change
         *
         * @param {string} newVal new editor id
         * @param {string} oldVal old editor id
         */

      }, {
        key: "_editorChanged",
        value: function _editorChanged(newValue, oldValue) {}
        /**
         * gets appplicable selection
         * @returns {object}
         */

      }, {
        key: "_getSelection",
        value: function _getSelection() {
          return this.command === "formatBlock" ? this.rangeOrMatchingAncestor() : this._getSelectedHtml();
        }
        /**
         * gets selected html
         * @returns {string}
         */

      }, {
        key: "_getSelectedHtml",
        value: function _getSelectedHtml() {
          if (this.range) {
            var div = document.createElement("div"),
                contents = this.range.cloneContents(),
                val;
            div.appendChild(contents);
            val = div.innerHTML;
            div.remove();
            return val ? val.trim() : undefined;
          }

          return undefined;
        }
        /**
         * get selection's parent block
         *
         * @returns
         */

      }, {
        key: "_getSelectedTag",
        value: function _getSelectedTag() {
          var block = this.rangeOrMatchingAncestor(),
              tag = !!block && !!block.tagName ? block.tagName.toLowerCase() : false;
          return tag;
        }
        /**
         * gets appplicable selection
         * @returns {object}
         */

      }, {
        key: "_getSelectionType",
        value: function _getSelectionType() {
          return this.command === "formatBlock" ? this._getSelectedTag() : this._getSelectedHtml();
        }
        /**
         * handles range change
         *
         * @param {object} newVal new range
         * @param {object} oldVal old range
         */

      }, {
        key: "_rangeChanged",
        value: function _rangeChanged(newVal, oldVal) {}
      }], [{
        key: "tag",
        get:
        /**
         * Store the tag name to make it easier to obtain directly.
         */
        function get() {
          return "rich-text-editor-button";
        }
      }, {
        key: "styles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(_class), "styles", this)), babelHelpers.toConsumableArray(RichTextToolbarStyles));
        }
      }, {
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)), {}, {
            /**
             * Hide the null option
             */
            disabled: {
              type: Boolean,
              reflect: true,
              attribute: "disabled"
            },

            /**
             * The command used for document.execCommand.
             */
            command: {
              type: String,
              reflect: true,
              attribute: "command"
            },

            /**
             * Optional parameter for the command.
             */
            commandVal: {
              attribute: "command-val",
              type: Object
            },

            /**
             * tags edited by this button
             */
            tagsList: {
              type: String
            },

            /**
             * The active selected range, inherited from the toolbar
             */
            target: {
              type: Object
            },

            /**
             * The command used for document.execCommand when toggled.
             */
            toggledCommand: {
              attribute: "toggled-command",
              type: String,
              reflect: true
            },

            /**
             * Optional parameter for the command when toggled.
             */
            toggledCommandVal: {
              attribute: "toggled-command-val",
              type: Object
            },

            /**
             * currently selected node
             */
            selectedNode: {
              type: Object
            },

            /**
             * array of ancestors of currently selected node
             */
            selectionAncestors: {
              type: Array
            }
          });
        }
      }]);
      return _class;
    }((0, _richTextEditorRangeBehaviors.RichTextEditorRangeBehaviors)((0, _simpleToolbarButton.SimpleToolbarButtonBehaviors)(SuperClass)));
  };
  /**
   * `rich-text-editor-button`
   * is a basic button for rich text editor (custom buttons can extend RichTextEditorButtonBehaviors)
   * 
   * ### Styling
  `<rich-text-editor-button>` uses RichTextToolbarStyles constant to set 
  SimpleToolbarBehaviors's simple-toolbar/simple-toolbar-button variables.
  
  To further customize a toolbar and its buttons:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  --rich-text-editor-border-color | default border color | #ddd
  --rich-text-editor-border-width | default border width | 1px
  --rich-text-editor-bg | default toolbar background | #ffffff
  --rich-text-editor-button-opacity | default button opacity | 1
  --rich-text-editor-button-color | default button color | #444
  --rich-text-editor-button-bg | default button background | #ffffff
  --rich-text-editor-button-border-color | overrides default border-color for buttons | transparent
  --rich-text-editor-button-toggled-opacity | overrides default opacity when button is toggled | 1
  --rich-text-editor-button-toggled-color | overrides default text color when button is toggled | #222
  --rich-text-editor-button-toggled-bg | overrides default background when button is toggled | #ddd
  --rich-text-editor-button-toggled-border-color | overrides default border-color when button is toggled | transparent
  --rich-text-editor-button-hover-opacity | overrides default opacity when button is hovered or focused | 1
  --rich-text-editor-button-hover-color | overrides default text color when button is hovered or focused  | #000
  --rich-text-editor-button-hover-bg | overrides default background when button is hovered or focused | #f0f0f0
  --rich-text-editor-button-hover-border-color | overrides default border-color when button is hovered or focused | unset
  --rich-text-editor-button-disabled-opacity | overrides default opacity when button is disabled | 1
  --rich-text-editor-button-disabled-color | overrides default text color when button is disabled | #666
  --rich-text-editor-button-disabled-bg | overrides default background when button is disabled | transparent
  --rich-text-editor-button-disabled-border-color | overrides default border-color when button is toggled | transparent
   * 
   * 
   * @extends RichTextEditorButtonBehaviors
   * @customElement
   * @lit-html
   * @lit-element
   * @element rich-text-editor-button
   * @demo ./demo/buttons.html
   */


  _exports.RichTextEditorButtonBehaviors = RichTextEditorButtonBehaviors;

  var RichTextEditorButton = /*#__PURE__*/function (_RichTextEditorButton) {
    babelHelpers.inherits(RichTextEditorButton, _RichTextEditorButton);

    var _super2 = _createSuper(RichTextEditorButton);

    function RichTextEditorButton() {
      babelHelpers.classCallCheck(this, RichTextEditorButton);
      return _super2.apply(this, arguments);
    }

    return babelHelpers.createClass(RichTextEditorButton);
  }(RichTextEditorButtonBehaviors(_index.LitElement));

  _exports.RichTextEditorButton = RichTextEditorButton;
  customElements.define(RichTextEditorButton.tag, RichTextEditorButton);
});