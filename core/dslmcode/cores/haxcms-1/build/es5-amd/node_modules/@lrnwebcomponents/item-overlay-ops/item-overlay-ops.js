define(["exports", "../../@polymer/polymer/polymer-element.js", "../simple-icon/lib/simple-icon-lite.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button-lite.js"], function (_exports, _polymerElement, _simpleIconLite, _simpleIcons, _simpleIconButtonLite) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ItemOverlayOps = void 0;

  var _templateObject_69db1760809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `item-overlay-ops`
   * @element item-overlay-ops
   * `Overlayed editing ops on whatever the current item slotted in is`
   *
   * @demo demo/index.html
   *
   * @microcopy - the mental model for this element
   */
  var ItemOverlayOps = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(ItemOverlayOps, _PolymerElement);

    var _super = _createSuper(ItemOverlayOps);

    function ItemOverlayOps() {
      babelHelpers.classCallCheck(this, ItemOverlayOps);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(ItemOverlayOps, [{
      key: "connectedCallback",
      value:
      /**
       * attached life cycle
       */
      function connectedCallback() {
        var _this = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(ItemOverlayOps.prototype), "connectedCallback", this).call(this); // delay is enough to get the height correct

        setTimeout(function () {
          _this._windowResize();
        }, 5);
        this.setAttribute("tabindex", "0");
        window.addEventListener("resize", this._windowResize.bind(this));
        this.addEventListener("focusin", this._inFocus.bind(this));
        this.addEventListener("focusout", this._outFocus.bind(this));
      }
      /**
       * detached life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.removeEventListener("focusin", this._inFocus.bind(this));
        this.removeEventListener("focusout", this._outFocus.bind(this));
        window.removeEventListener("resize", this._windowResize.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(ItemOverlayOps.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Fixed height changed, update.
       */

    }, {
      key: "fixedHeightChanged",
      value: function fixedHeightChanged(newValue, oldValue) {
        if (newValue) {
          if (!this.disableAutoHeight) {
            this.shadowRoot.querySelector("#container").style.height = this.fixedHeight + "px";
            this.shadowRoot.querySelector("#workingarea").style.height = this.fixedHeight - 80 + "px";
          }
        }
      }
      /**
       * react to window resizing
       */

    }, {
      key: "_windowResize",
      value: function _windowResize(e) {
        var rect = this.getBoundingClientRect();
        this.shadowRoot.querySelector("#container").style.width = rect.width + "px";

        if (!this.disableAutoHeight) {
          if (!this.fixedHeight || babelHelpers.typeof(this.fixedHeight) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.shadowRoot.querySelector("#container").style.height = rect.height + "px";
            this.shadowRoot.querySelector("#workingarea").style.height = rect.height - 80 + "px";
          } else {
            this.shadowRoot.querySelector("#container").style.height = this.fixedHeight + "px";
            this.shadowRoot.querySelector("#workingarea").style.height = this.fixedHeight - 80 + "px";
          }
        } else {
          this.shadowRoot.querySelector("#workingarea").style.height = rect.height - 80 + "px";
        }
      }
      /**
       * Support tapping the buttons in the top
       */

    }, {
      key: "_opTap",
      value: function _opTap(e) {
        var local = e.target;
        this.activeTitle = local.getAttribute("id");
        this.activeOp = local.getAttribute("id");

        this._resetActive();

        this.__anyOp = true;
        local.classList.add("active"); // we switch icons for these

        switch (this.activeOp) {
          case "cancel":
            local.classList.remove("active");
            this.activeTitle = null;
            this.activeOp = null;
            this.__anyOp = false;
            break;

          case "remove":
            this.__option1Icon = "icons:check";
            this.__option1Text = "Confirm deleting this";
            this.__option2Icon = "icons:clear";
            this.__option2Text = "Cancel";
            break;

          case "duplicate":
            this.__option1Icon = "icons:check";
            this.__option1Text = "Confirm duplicating this";
            this.__option2Icon = "icons:clear";
            this.__option2Text = "Cancel";
            break;

          case "move":
            this.__option1Icon = "icons:arrow-back";
            this.__option1Text = "Move item left";
            this.__option2Icon = "icons:arrow-forward";
            this.__option2Text = "Move item right";
            break;
        } // let others know there's an event here


        var op = {
          element: this,
          operation: this.activeOp
        };
        this.dispatchEvent(new CustomEvent("item-overlay-op-changed", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: op
        }));
      }
      /**
       * Set element reflected focus so we can get the whole thing
       */

    }, {
      key: "_inFocus",
      value: function _inFocus(e) {
        if (this.editMode) {
          this.focused = true;
        }
      }
      /**
       * Drop element reflection when all focus offs are fired
       */

    }, {
      key: "_outFocus",
      value: function _outFocus(e) {
        if (this.editMode) {
          this.focused = false;
        }
      }
      /**
       * fire event because an option was selected.
       */

    }, {
      key: "_optionSelected",
      value: function _optionSelected(e) {
        var local = e.target; // fire that an option was selected and about what operation

        var ops = {
          element: this,
          operation: this.activeOp,
          option: local.getAttribute("id")
        };
        this.dispatchEvent(new CustomEvent("item-overlay-option-selected", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: ops
        })); // don't reset for movement, just confirm / reject actions

        if (this.activeOp != "move") {
          this._resetActive();

          this.activeOp = null;
        }
      }
      /**
       * Reset the active selections
       */

    }, {
      key: "_resetActive",
      value: function _resetActive() {
        this.shadowRoot.querySelector("#add").classList.remove("active");
        this.shadowRoot.querySelector("#edit").classList.remove("active");
        this.shadowRoot.querySelector("#move").classList.remove("active");
        this.shadowRoot.querySelector("#remove").classList.remove("active");
        this.shadowRoot.querySelector("#duplicate").classList.remove("active");
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_69db1760809211edaa2833647dc78c6c || (_templateObject_69db1760809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          outline: none;\n        }\n        #container {\n          display: none;\n          opacity: 0;\n          background-color: transparent;\n          transition: background-color 0.6s linear, visibility 0.6s linear,\n            opacity 0.6s linear;\n          visibility: hidden;\n        }\n        :host([edit-mode]) #container {\n          display: block;\n          opacity: 0.4;\n          visibility: visible;\n          background-color: var(--item-overlay-ops, #999999);\n          position: absolute;\n          z-index: 1;\n          @apply --item-overlay-ops-container;\n        }\n        :host([edit-mode]) #container:hover,\n        :host([edit-mode]) #container:focus,\n        :host([focused]) #container {\n          opacity: 0.8;\n          background-color: var(--item-overlay-ops, #ffffff);\n        }\n        .ops {\n          width: 100%;\n          height: 39px;\n          padding: 0;\n          margin: 0;\n          border-bottom: 1px solid rgba(100, 100, 100, 0.4);\n          text-align: center;\n        }\n        .ops simple-icon-button-lite {\n          display: inline-flex;\n          --simple-icon-width: 26px;\n          --simple-icon-height: 26px;\n          padding: 1px;\n          margin: 6px;\n          color: #999999;\n        }\n        .ops simple-icon-button-lite#cancel {\n          --simple-icon-width: 16px;\n          --simple-icon-height: 16px;\n          padding: 0px;\n          margin: 4px;\n          position: absolute;\n        }\n        .ops simple-icon-button-lite.active {\n          color: #000000;\n          background-color: rgba(255, 255, 255, 0.6);\n          border-radius: 50%;\n        }\n        .active-op {\n          text-transform: capitalize;\n          margin: 0;\n          height: 40px;\n          line-height: 40px;\n          font-size: 20px;\n          text-align: center;\n        }\n        #workingarea {\n          width: 100%;\n          padding: 0;\n          margin: 0 auto;\n          align-content: center;\n        }\n        #workingarea simple-icon-button-lite {\n          --simple-icon-width: 50%;\n          --simple-icon-height: 100%;\n          display: inline-flex;\n          min-width: unset;\n          padding: 16px;\n          margin: 0;\n          border: none;\n          border-radius: 0;\n        }\n        #workingarea #option1 {\n          background-color: rgba(100, 255, 100, 0.6);\n        }\n        #workingarea #option2 {\n          background-color: rgba(255, 100, 100, 0.6);\n        }\n        #workingarea #option1:hover,\n        #workingarea #option1:focus {\n          background-color: rgba(100, 255, 100, 1);\n        }\n        #workingarea #option2:hover,\n        #workingarea #option2:focus {\n          background-color: rgba(255, 100, 100, 1);\n        }\n        #workingarea {\n          display: none;\n        }\n        #workingarea.move {\n          display: flex;\n        }\n        #workingarea.move #option1,\n        #workingarea.move #option2 {\n          background-color: rgba(200, 200, 200, 0.5);\n        }\n        #workingarea.move #option1:hover,\n        #workingarea.move #option1:focus,\n        #workingarea.move #option2:hover,\n        #workingarea.move #option2:focus {\n          background-color: rgba(200, 200, 200, 1);\n        }\n        #workingarea.remove {\n          display: flex;\n        }\n        #workingarea.duplicate {\n          display: flex;\n        }\n      </style>\n      <div id=\"container\">\n        <div class=\"ops\">\n          <simple-icon-button-lite\n            on-click=\"_opTap\"\n            icon=\"icons:add\"\n            id=\"add\"\n            hidden$=\"[[!add]]\"\n            title=\"Add to this\"\n          ></simple-icon-button-lite>\n          <simple-icon-button-lite\n            on-click=\"_opTap\"\n            icon=\"icons:create\"\n            id=\"edit\"\n            hidden$=\"[[!edit]]\"\n            title=\"Edit this\"\n          ></simple-icon-button-lite>\n          <simple-icon-button-lite\n            on-click=\"_opTap\"\n            icon=\"icons:swap-horiz\"\n            id=\"move\"\n            hidden$=\"[[!move]]\"\n            title=\"Move this\"\n          ></simple-icon-button-lite>\n          <simple-icon-button-lite\n            on-click=\"_opTap\"\n            icon=\"icons:delete\"\n            id=\"remove\"\n            hidden$=\"[[!remove]]\"\n            title=\"Delete this\"\n          ></simple-icon-button-lite>\n          <simple-icon-button-lite\n            on-click=\"_opTap\"\n            icon=\"icons:content-copy\"\n            id=\"duplicate\"\n            hidden$=\"[[!duplicate]]\"\n            title=\"Duplicate this\"\n          ></simple-icon-button-lite>\n          <simple-icon-button-lite\n            on-click=\"_opTap\"\n            icon=\"icons:cancel\"\n            id=\"cancel\"\n            hidden$=\"[[!__anyOp]]\"\n            title=\"Cancel\"\n          ></simple-icon-button-lite>\n        </div>\n        <div class=\"active-op\">[[activeTitle]]</div>\n        <div id=\"workingarea\" class$=\"[[activeOp]]\">\n          <simple-icon-button-lite\n            on-click=\"_optionSelected\"\n            id=\"option1\"\n            title=\"[[__option1Text]]\"\n            icon=\"[[__option1Icon]]\"\n          ></simple-icon-button-lite>\n          <simple-icon-button-lite\n            on-click=\"_optionSelected\"\n            id=\"option2\"\n            title=\"[[__option2Text]]\"\n            icon=\"[[__option2Icon]]\"\n          ></simple-icon-button-lite>\n        </div>\n      </div>\n      <slot></slot>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "item-overlay-ops";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Edit mode whether it is shown or not
           */
          editMode: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * Edit mode whether it is shown or not
           */
          focused: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * Title to present of active option
           */
          activeTitle: {
            type: String
          },

          /**
           * Active operation
           */
          activeOp: {
            type: String
          },

          /**
           * Add opertaions
           */
          add: {
            type: Boolean,
            value: false
          },

          /**
           * Edit opertaions
           */
          edit: {
            type: Boolean,
            value: false
          },

          /**
           * Move opertaions
           */
          move: {
            type: Boolean,
            value: false
          },

          /**
           * Allow height to be defined rather than calculated
           */
          fixedHeight: {
            type: Number,
            observer: "fixedHeightChanged"
          },

          /**
           * Ability to disable height setting. Useful if using CSS vars.
           */
          disableAutoHeight: {
            type: Boolean,
            value: false
          },

          /**
           * Remove opertaions
           */
          remove: {
            type: Boolean,
            value: false
          },

          /**
           * Duplicate opertaions
           */
          duplicate: {
            type: Boolean,
            value: false
          },
          __anyOp: {
            type: Boolean,
            value: false
          }
        };
      }
    }]);
    return ItemOverlayOps;
  }(_polymerElement.PolymerElement);

  _exports.ItemOverlayOps = ItemOverlayOps;
  customElements.define(ItemOverlayOps.tag, ItemOverlayOps);
});