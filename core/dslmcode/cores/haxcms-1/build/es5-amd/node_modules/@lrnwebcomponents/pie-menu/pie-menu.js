define(["exports", "../../@polymer/polymer/polymer-element.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js"], function (_exports, _polymerElement, _simpleIcon, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PieMenu = void 0;

  var _templateObject_ac0583208e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `pie-menu`
   * @element pie-menu
   * SVG Menu based on the excellent resource at : https://sarasoueidan.com/tools/circulus
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   * - pie - a delicious circle shaped container used to house berries or fruit filling. Best served with <ice-cream> or <boiled-apples>.
   * - pie-menu - a circular menu that has been proven to be easier to use as a navigational element than a rectangular menu.
   * - svg - an HTML tag that no one understands, not even the person who made this, yet loves and respects its differences and knows how important it is.
   */
  var PieMenu = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(PieMenu, _PolymerElement);

    var _super = _createSuper(PieMenu);

    function PieMenu() {
      babelHelpers.classCallCheck(this, PieMenu);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(PieMenu, [{
      key: "ready",
      value:
      /**
       * add listeners for data-buttons
       */
      function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(PieMenu.prototype), "ready", this).call(this);
        var buttons = this.querySelectorAll('[role="button"][data-button]');

        for (var i = 0; i < buttons.length; i++) {
          this._addListenerAddState(this, buttons[i], "mouseover", "hover");

          this._addListenerAddState(this, buttons[i], "focus", "focus");

          this._addListenerRemoveState(this, buttons[i], "mouseout", "hover");

          this._addListenerRemoveState(this, buttons[i], "blur", "focus");
        }
      }
      /**
       * add focus or hover states
       */

    }, {
      key: "_addListenerAddState",
      value: function _addListenerAddState(menu, button, action, state) {
        button.addEventListener(action, function (e) {
          var elements = menu._getButtonElements(menu, button);

          for (var i = 0; i < elements.length; i++) {
            elements[i].classList.add(state);
          }
        });
      }
      /**
       * remove focus or hover states
       */

    }, {
      key: "_addListenerRemoveState",
      value: function _addListenerRemoveState(menu, button, action, state) {
        button.addEventListener(action, function (e) {
          var elements = menu._getButtonElements(menu, button);

          for (var i = 0; i < elements.length; i++) {
            elements[i].classList.remove(state);
          }
        });
      }
    }, {
      key: "_getButtonElements",
      value: function _getButtonElements(menu, button) {
        return menu.querySelectorAll('[data-button="' + button.getAttribute("data-button") + '"]');
      }
      /**
       * Simple trap for bubbling up a tap / click event.
       */

    }, {
      key: "_itemTapped",
      value: function _itemTapped(e) {
        var localLink = e.target; // make sure we normalize tap vs click vs keyboard

        if (!(localLink.hasAttribute("role") && localLink.getAttribute("role") !== "button")) {
          localLink = localLink.parentNode;
        } // bubble up event


        this.dispatchEvent(new CustomEvent("pie-menu-selection", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            option: localLink
          }
        }));
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_ac0583208e0011ed99ce491205e67b1d || (_templateObject_ac0583208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host,\n        :host > div {\n          width: 200px;\n          height: 200px;\n        }\n        :host > div {\n          position: relative;\n        }\n        :host > div > * {\n          position: absolute;\n          top: 0;\n          left: 0;\n        }\n        :host > div svg [role=\"button\"] {\n          fill: transparent;\n        }\n        :host > div svg [role=\"button\"]:focus,\n        :host > div svg [role=\"button\"]:hover {\n          stroke: #017ec2;\n          cursor: pointer;\n          outline: none;\n        }\n        :host > div svg .outer-shapes,\n        :host > div svg .inner-shape {\n          fill: #fff;\n          stroke: #ddd;\n        }\n        :host > div svg .outer-shapes.focus,\n        :host > div svg .outer-shapes.hover,\n        :host > div svg .inner-shape.focus,\n        :host > div svg .inner-shape.hover {\n          fill: #cef4ff;\n        }\n        :host > div .icon-container {\n          color: black;\n        }\n        :host > div .icon-container.focus,\n        :host > div .icon-container.hover {\n          color: #017ec2;\n        }\n        :host > div .icon-container {\n          text-align: center;\n          height: 24px;\n          width: 50px;\n          top: 85px;\n          left: 75px;\n        }\n        :host > div[data-hide-label-text=\"true\"] .icon-container {\n          width: 24px;\n          top: 88px;\n          left: 88px;\n        }\n        :host > div .icon-label {\n          font-size: 10px;\n          text-transform: lowercase;\n        }\n        :host > div[data-hide-label-text=\"true\"] .icon-label {\n          display: none;\n        }\n        :host > div > #top-icon {\n          top: 16px;\n        }\n        :host > div[data-hide-label-text=\"true\"] > #top-icon {\n          top: 22px;\n        }\n        :host > div > #right-icon {\n          left: 140px;\n        }\n        :host > div[data-hide-label-text=\"true\"] > #right-icon {\n          left: 153px;\n        }\n        :host > div > #bottom-icon {\n          top: 147px;\n        }\n        :host > div[data-hide-label-text=\"true\"] > #bottom-icon {\n          top: 153px;\n        }\n        :host > div > #left-icon {\n          left: 9px;\n        }\n        :host > div[data-hide-label-text=\"true\"] > #left-icon {\n          left: 22px;\n        }\n      </style>\n      <div data-hide-label-text$=\"[[hideLabelText]]\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 193.95 193.94\">\n          <path\n            id=\"right-shape\"\n            data-button=\"right\"\n            class=\"outer-shapes\"\n            d=\"M165.54 28.4a97 97 0 0 1 0 137.14l-46-46a31.86 31.86 0 0 0 0-45z\"\n          ></path>\n          <path\n            id=\"bottom-shape\"\n            data-button=\"bottom\"\n            class=\"outer-shapes\"\n            d=\"M165.54 165.54a97 97 0 0 1-137.14 0l46.05-46a31.84 31.84 0 0 0 45 0z\"\n          ></path>\n          <path\n            id=\"left-shape\"\n            data-button=\"left\"\n            class=\"outer-shapes\"\n            d=\"M28.4 165.54a97 97 0 0 1 0-137.14l46.05 46.05a31.84 31.84 0 0 0 0 45z\"\n          ></path>\n          <path\n            id=\"top-shape\"\n            data-button=\"top\"\n            class=\"outer-shapes\"\n            d=\"M28.4 28.4a97 97 0 0 1 137.14 0l-46 46.05a31.84 31.84 0 0 0-45 0z\"\n          ></path>\n          <circle\n            id=\"center-shape\"\n            data-button=\"center\"\n            class=\"inner-shape\"\n            cx=\"96.97\"\n            cy=\"96.97\"\n            r=\"31.67\"\n          ></circle>\n        </svg>\n        <div id=\"center-icon\" data-button=\"center\" class=\"icon-container\">\n          <simple-icon icon$=\"[[centerIcon]]\"></simple-icon>\n          <div class=\"icon-label\" aria-hidden=\"true\">[[centerLabel]]</div>\n        </div>\n        <div id=\"top-icon\" data-button=\"top\" class=\"icon-container\">\n          <simple-icon icon$=\"[[topIcon]]\"></simple-icon>\n          <div class=\"icon-label\" aria-hidden=\"true\">[[topLabel]]</div>\n        </div>\n        <div id=\"right-icon\" data-button=\"right\" class=\"icon-container\">\n          <simple-icon icon$=\"[[rightIcon]]\"></simple-icon>\n          <div class=\"icon-label\" aria-hidden=\"true\">[[rightLabel]]</div>\n        </div>\n        <div id=\"bottom-icon\" data-button=\"bottom\" class=\"icon-container\">\n          <simple-icon icon$=\"[[bottomIcon]]\"></simple-icon>\n          <div class=\"icon-label\" aria-hidden=\"true\">[[bottomLabel]]</div>\n        </div>\n        <div id=\"left-icon\" data-button=\"left\" class=\"icon-container\">\n          <simple-icon icon$=\"[[leftIcon]]\"></simple-icon>\n          <div class=\"icon-label\" aria-hidden=\"true\">[[leftLabel]]</div>\n        </div>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 193.95 193.94\">\n          <circle\n            id=\"center-button\"\n            xlink:title$=\"[[centerLabel]]\"\n            data-button=\"center\"\n            tabindex=\"0\"\n            on-click=\"_itemTapped\"\n            on-keydown=\"_itemTapped\"\n            role=\"button\"\n            cx=\"96.97\"\n            cy=\"96.97\"\n            r=\"31.67\"\n          ></circle>\n          <path\n            id=\"top-button\"\n            xlink:title$=\"[[topLabel]]\"\n            data-button=\"top\"\n            role=\"button\"\n            tabindex=\"0\"\n            on-click=\"_itemTapped\"\n            on-keydown=\"_itemTapped\"\n            d=\"M28.4 28.4a97 97 0 0 1 137.14 0l-46 46.05a31.84 31.84 0 0 0-45 0z\"\n          ></path>\n          <path\n            id=\"right-button\"\n            xlink:title$=\"[[rightLabel]]\"\n            data-button=\"right\"\n            role=\"button\"\n            tabindex=\"0\"\n            on-click=\"_itemTapped\"\n            on-keydown=\"_itemTapped\"\n            d=\"M165.54 28.4a97 97 0 0 1 0 137.14l-46-46a31.86 31.86 0 0 0 0-45z\"\n          ></path>\n          <path\n            id=\"bottom-button\"\n            xlink:title$=\"[[bottomLabel]]\"\n            data-button=\"bottom\"\n            role=\"button\"\n            tabindex=\"0\"\n            on-click=\"_itemTapped\"\n            on-keydown=\"_itemTapped\"\n            d=\"M165.54 165.54a97 97 0 0 1-137.14 0l46.05-46a31.84 31.84 0 0 0 45 0z\"\n          ></path>\n          <path\n            id=\"left-button\"\n            xlink:title$=\"[[leftLabel]]\"\n            data-button=\"left\"\n            role=\"button\"\n            tabindex=\"0\"\n            on-click=\"_itemTapped\"\n            on-keydown=\"_itemTapped\"\n            d=\"M28.4 165.54a97 97 0 0 1 0-137.14l46.05 46.05a31.84 31.84 0 0 0 0 45z\"\n          ></path>\n        </svg>\n      </div>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "pie-menu";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * hide label text below icons
           */
          hideLabelText: {
            type: String,
            value: "false"
          },

          /**
           * center button label
           */
          centerLabel: {
            type: String,
            value: "Home"
          },

          /**
           * top button label
           */
          topLabel: {
            type: String,
            value: "Option 1"
          },

          /**
           * left button label
           */
          leftLabel: {
            type: String,
            value: "Option 2"
          },

          /**
           * bottom button label
           */
          bottomLabel: {
            type: String,
            value: "Option 3"
          },

          /**
           * right button label
           */
          rightLabel: {
            type: String,
            value: "Option 4"
          },

          /**
           * center button label
           */
          centerIcon: {
            type: String,
            value: "icons:check-box-outline-blank"
          },

          /**
           * top button label
           */
          topIcon: {
            type: String,
            value: "icons:check-box-outline-blank"
          },

          /**
           * left button label
           */
          leftIcon: {
            type: String,
            value: "icons:check-box-outline-blank"
          },

          /**
           * bottom button label
           */
          bottomIcon: {
            type: String,
            value: "icons:check-box-outline-blank"
          },

          /**
           * right button label
           */
          rightIcon: {
            type: String,
            value: "icons:check-box-outline-blank"
          }
        };
      }
    }]);
    return PieMenu;
  }(_polymerElement.PolymerElement);

  _exports.PieMenu = PieMenu;
  customElements.define(PieMenu.tag, PieMenu);
});