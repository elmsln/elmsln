define(["exports", "meta", "../../lit/index.js", "./lib/vmsg-fork.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js"], function (_exports, meta, _index, _vmsgFork, _simpleIcon, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.VoiceRecorder = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_adb1d3908e0011ed99ce491205e67b1d, _templateObject2_adb1d3908e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `voice-recorder`
   * `LAME bridge`
   *
   * @demo demo/index.html
   * @element voice-recorder
   */
  var VoiceRecorder = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(VoiceRecorder, _LitElement);

    var _super = _createSuper(VoiceRecorder);

    /**
     * HTMLElement
     */
    function VoiceRecorder() {
      var _this;

      babelHelpers.classCallCheck(this, VoiceRecorder);
      _this = _super.call(this);
      _this.recording = false;
      setTimeout(function () {
        _this.addEventListener("vmsg-ready", _this.vmsgReady.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }

    babelHelpers.createClass(VoiceRecorder, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_adb1d3908e0011ed99ce491205e67b1d || (_templateObject_adb1d3908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <button @click=\"", "\">\n        <simple-icon icon=\"", "\"></simple-icon>", "\n      </button>\n      <slot></slot>\n    "])), this.recordState, this.iconState, this.textState);
      }
    }, {
      key: "recordState",
      value: function recordState(e) {
        this.recording = !this.recording;
      }
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "recording") {
            if (_this2[propName]) {
              _this2.textState = "stop";
              _this2.iconState = "av:stop";
            } else {
              _this2.textState = "Record";
              _this2.iconState = "av:play-arrow";
            } // observer to act on the recording piece


            _this2.toggleRecording(_this2[propName], oldValue);
          }
        });
      }
    }, {
      key: "vmsgReady",
      value: function vmsgReady(e) {
        console.warn(e.detail.value);
      }
      /**
       * Toggle the LAME bridge
       */

    }, {
      key: "toggleRecording",
      value: function toggleRecording(newValue, oldValue) {
        var _this3 = this;

        if (newValue) {
          // need to start...
          (0, _vmsgFork.record)({
            wasmURL: new URL("./../../", meta.url).href + "node_modules/vmsg/vmsg.wasm"
          }, this).then(function (blob) {
            _this3.dispatchEvent(new CustomEvent("voice-recorder-recording", {
              value: blob
            }));
          });
        }
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_adb1d3908e0011ed99ce491205e67b1d || (_templateObject2_adb1d3908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          iconState: {
            type: String
          },
          textState: {
            type: String
          },
          recording: {
            type: Boolean
          }
        };
      }
      /**
       * Convention we use
       */

    }, {
      key: "tag",
      get: function get() {
        return "voice-recorder";
      }
    }]);
    return VoiceRecorder;
  }(_index.LitElement);

  _exports.VoiceRecorder = VoiceRecorder;
  customElements.define(VoiceRecorder.tag, VoiceRecorder);
});