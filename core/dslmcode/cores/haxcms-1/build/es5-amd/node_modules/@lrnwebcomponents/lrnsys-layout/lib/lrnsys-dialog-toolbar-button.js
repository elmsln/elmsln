define(["exports", "require", "../../../lit/index.js", "../../simple-icon/simple-icon.js", "../../simple-icon/lib/simple-icons.js"], function (_exports, _require, _index, _simpleIcon, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysDialogToolbarButton = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_d8e31ba08e0011ed99ce491205e67b1d, _templateObject2_d8e31ba08e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnsysDialogToolbarButton = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(LrnsysDialogToolbarButton, _LitElement);

    var _super = _createSuper(LrnsysDialogToolbarButton);

    /**
     * HTMLElement
     */
    function LrnsysDialogToolbarButton() {
      var _this;

      babelHelpers.classCallCheck(this, LrnsysDialogToolbarButton);
      _this = _super.call(this);
      new Promise(function (res, rej) {
        return _require.default(["../../simple-tooltip/simple-tooltip.js"], res, rej);
      });
      return _this;
    }
    /**
     * LitElement / popular convention
     */


    babelHelpers.createClass(LrnsysDialogToolbarButton, [{
      key: "render",
      value:
      /**
       * LitElement render
       */
      function render() {
        return (0, _index.html)(_templateObject_d8e31ba08e0011ed99ce491205e67b1d || (_templateObject_d8e31ba08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <button\n        raised\n        @click=\"", "\"\n        id=\"", "\"\n        aria-label=\"", "\"\n      >\n        <simple-icon\n          icon=\"", "\"\n          accent-color=\"grey\"\n          contrast=\"4\"\n          dark\n        ></simple-icon>\n        ", "\n      </button>\n      <simple-tooltip for=\"", "\" animation-delay=\"0\"\n        >", "</simple-tooltip\n      >\n    "])), this._onTap, this.id, this.title, this.icon, this.title, this.id, this.title);
      }
    }, {
      key: "firstUpdated",
      value:
      /**
       * Ready lifecycle
       */
      function firstUpdated(changedProperties) {
        this.dispatchEvent(new CustomEvent("button-initialized", {
          detail: {
            id: this.id
          }
        }));
      }
      /**
       * Button has been tapped.
       */

    }, {
      key: "_onTap",
      value: function _onTap(e) {
        this.dispatchEvent(new CustomEvent("dialog-toolbar-button-tapped", {
          detail: {
            id: e.target.getAttribute("id")
          }
        }));
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject2_d8e31ba08e0011ed99ce491205e67b1d || (_templateObject2_d8e31ba08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n        simple-icon {\n          display: inline-block;\n          --simple-icon-height: 16px;\n          --simple-icon-width: 16px;\n        }\n        button {\n          border: none;\n          background: transparent;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnsys-dialog-toolbar-button";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The title of the button.
           */
          title: {
            type: String
          },

          /**
           * The button icon.
           */
          icon: {
            type: String
          },

          /**
           * The button ID.
           */
          id: {
            type: String
          }
        };
      }
    }]);
    return LrnsysDialogToolbarButton;
  }(_index.LitElement);

  _exports.LrnsysDialogToolbarButton = LrnsysDialogToolbarButton;
  customElements.define(LrnsysDialogToolbarButton.tag, LrnsysDialogToolbarButton);
});