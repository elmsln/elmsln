define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../@polymer/paper-item/paper-item.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../simple-modal/lib/simple-modal-template.js", "../../../../@polymer/paper-listbox/paper-listbox.js", "../../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../../@polymer/paper-dropdown-menu/paper-dropdown-menu.js", "../elmsln-base-deps.js", "../../../../@polymer/app-layout/app-toolbar/app-toolbar.js", "../../../../@polymer/iron-list/iron-list.js", "../../../../@polymer/iron-pages/iron-pages.js", "../../../../@polymer/paper-dialog/paper-dialog.js", "../../../../@polymer/app-route/app-location.js", "../../../../@polymer/app-route/app-route.js", "../../../../@polymer/paper-toast/paper-toast.js", "../../../elmsln-loading/elmsln-loading.js", "../../../lrndesign-course-banner/lrndesign-course-banner.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-button.js", "../../../hax-iconset/lib/simple-hax-iconset.js", "../../../lrnsys-button/lrnsys-button.js", "../../../lrndesign-avatar/lrndesign-avatar.js", "../../../lrnsys-layout/lib/lrnsys-dialog.js", "../../../grid-plate/grid-plate.js", "../../../materializecss-styles/materializecss-styles.js", "./lrnapp-cis-course-card.js", "../../../utils/utils.js"], function (_exports, _polymerElement, _polymerDom, _ironAjax, _paperItem, _domIf, _simpleModalTemplate, _paperListbox, _domRepeat, _paperDropdownMenu, _elmslnBaseDeps, _appToolbar, _ironList, _ironPages, _paperDialog, _appLocation, _appRoute, _paperToast, _elmslnLoading, _lrndesignCourseBanner, _simpleIcon, _simpleIcons, _simpleIconButton, _simpleHaxIconset, _lrnsysButton, _lrndesignAvatar, _lrnsysDialog, _gridPlate, _materializecssStyles, _lrnappCisCourseCard, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappCis = void 0;

  var _templateObject_b3accbe0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   `lrnapp-cis`
   A learning application for visualizing course information and listing.
  
  @demo ../../demo/index.html
  
  @microcopy - the mental model for this app
   - cis - Course Information System
   -
  
  */
  var LrnappCis = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappCis, _PolymerElement);

    var _super = _createSuper(LrnappCis);

    function LrnappCis() {
      babelHelpers.classCallCheck(this, LrnappCis);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappCis, [{
      key: "lastErrorChanged",
      value:
      /**
       * Handle the last error rolling in
       */
      function lastErrorChanged(e) {
        if (e.detail.value) {
          console.error(e);
          var target = (0, _utils.normalizeEventPath)(e)[0]; // check for JWT needing refreshed vs busted but must be 403

          switch (parseInt(e.detail.value.status)) {
            // cookie data not found, need to go get it
            // @notice this currently isn't possible but we could modify
            // the backend in the future to support throwing 401s dynamically
            // if we KNOW an event must expire the timing token
            case 401:
            case 401:
              // we know what the "target" is as an iron-ajax tag
              // so we know what call was just attempted. Let's await
              // a fetch against the top level site landing page with
              // no-cors will force a hit against the backend to refresh
              // the PHP session / bounce back from Azure as needed
              // so that when we reissue this call it'll go through (magically)
              fetch(window.Drupal.settings.basePath, {
                mode: "no-cors"
              }).then(function (e) {
                console.log(e); // delay just to be sure

                setTimeout(function () {
                  target.generateRequest();
                }, 250);
              });
              break;
          }
        }
      }
    }, {
      key: "_routeChanged",
      value: // If the current route is outside the scope of our app
      // then allow the website to break out of the single page
      // application routing
      function _routeChanged(route, endPoint) {
        if (typeof route.path === "string") {
          if (typeof endPoint === "string") {
            // ignore "home page" as well since that's our path
            if (route.path.startsWith(endPoint) || route.path == "/") {
              return;
            }
          }

          this.$.loading.hidden = false; // reload the page which since route changed will load that page

          window.location.reload();
        }
      }
      /**
       * Change route from deeper in the app.
       */

    }, {
      key: "_routeChange",
      value: function _routeChange(e) {
        var details = e.detail;

        if (babelHelpers.typeof(details.queryParams.course) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.set("queryParams.course", details.queryParams.course);
        }

        if (babelHelpers.typeof(details.queryParams.academic) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.set("queryParams.academic", details.queryParams.academic);
        }

        if (babelHelpers.typeof(details.queryParams.program) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.set("queryParams.program", details.queryParams.program);
        }

        if (babelHelpers.typeof(details.data.page) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.set("data.page", details.data.page);
        }
      }
      /**
       * Simple way to convert from object to array.
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
      /**
       * Handle course response for additional details about the item
       */

    }, {
      key: "_handleMakeServiceResponse",
      value: function _handleMakeServiceResponse(event) {
        // get the CIS response's data and convert to array ahead of time
        var response = this._makeServiceResponse;

        var activeCourse = this.__addServiceLinks(response.data.course);

        this.set("activeCourse", []);
        this.set("activeCourse", activeCourse);
        this.$.toast.show(response.message);
      }
      /**
       * Handle course response for additional details about the item
       */

    }, {
      key: "_handleCourseResponse",
      value: function _handleCourseResponse(event) {
        // get the CIS response's data and convert to array ahead of time
        var activeCourse = this._courseResponse.data.course;

        this.__addServiceLinks(activeCourse);

        this.set("activeCourse", []);
        this.set("activeCourse", activeCourse);
        this.$.loadingCourse.hidden = true;
      }
      /**
       * Helper to mash up services that exist with those that could.
       */

    }, {
      key: "__addServiceLinks",
      value: function __addServiceLinks(courseObject) {
        // ensure there's a part for the Network people can request
        if (babelHelpers.typeof(courseObject.topology.Network) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          courseObject.topology.Network = {};
        } // loop our services to see what we should add as options


        for (var key in this.services) {
          // if it's not in the topology that means it can be added
          if (babelHelpers.typeof(courseObject.topology.Network[this.services[key].attributes.machine_name]) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            // if we get a miss that means we should add a "Add this" version
            courseObject.topology.Network[this.services[key].attributes.machine_name] = {
              color: this.services[key].attributes.color,
              distro: this.services[key].attributes.distro,
              icon: this.services[key].attributes.icon,
              machine_name: this.services[key].attributes.machine_name,
              title: this.services[key].attributes.title,
              url: this.services[key].attributes.url,
              weight: this.services[key].attributes.weight,
              _exists: false
            };
          }
        } // convert to array after keys in place for the object


        courseObject.topology.Network = this._toArray(courseObject.topology.Network); // sort items based on weight of the things in the network
        // so we have a consistent order to things

        courseObject.topology.Network.sort(function (a, b) {
          return a.weight - b.weight;
        });
        return courseObject;
      }
      /**
       * Handle response for the whole courses object.
       */

    }, {
      key: "_handleResponse",
      value: function _handleResponse(event) {
        var course = {};
        var program = {};
        var academic = {};
        var tmp = {
          courses: [],
          programs: [],
          academics: []
        };
        var programs = [];
        var academics = []; // get the CIS response's data and convert to array ahead of time

        var courses = this._toArray(this._cisResponse.data.courses);

        this.set("services", this._toArray(this._cisResponse.data.services)); // original = active off the bat then we apply filters later to chang this

        this.set("originalCourses", courses); // figure out courses, programs and academics

        for (var index = 0; index < courses.length; index++) {
          course = courses[index];
          program = courses[index].relationships.program;
          academic = courses[index].relationships.academic;
          tmp.programs[program.id] = program;
          tmp.academics[academic.id] = academic;
          tmp.courses[course.id] = course;
        } // this is stupid but we have to normalize the IDs or else dom repeats will be screwed up


        tmp.programs.forEach(function (element) {
          programs.push(element);
        }); // this is stupid but we have to normalize the IDs or else dom repeats will be screwed up

        tmp.academics.forEach(function (element) {
          academics.push(element);
        });
        this.$.loading.hidden = true;
        this.set("academics", academics);
        this.set("programs", programs);
      }
      /**
       * Request a new service to kick off.
       */

    }, {
      key: "_makeService",
      value: function _makeService(e) {
        var _this = this;

        var normalizedEvent = (0, _polymerDom.dom)(e);
        var active = normalizedEvent.localTarget.getAttribute("data-machine-name");
        var network = this.activeCourse.topology.Network;
        var service = network.filter(function (service) {
          if (service.machine_name !== active) {
            return false;
          }

          return true;
        }); // if we found one, make it the top level item

        if (service.length > 0) {
          service = service.pop();
          this.$.makeservice.params = {
            course: this.activeCourse.attributes.machine_name,
            service: service.machine_name
          };
          this._activeService = service; // confirm via paper prompt

          this.$.confirm.toggleDialog();
          setTimeout(function () {
            document.querySelector("simple-modal div.buttons button[data-letsdoit]").addEventListener("click", _this._confirmBuild.bind(_this));
          }, 250);
        } else {
          console.log("that was not a valid service..");
        }
      }
      /**
       * Confirm of build.
       */

    }, {
      key: "_confirmBuild",
      value: function _confirmBuild(e) {
        this.$.makeservice.generateRequest();
        var evt = new CustomEvent("simple-modal-closed", {
          bubbles: true,
          cancelable: true,
          detail: {
            opened: false,
            invokedBy: this.querySelector("lrnsys-dialog button[data-letsdoit]")
          }
        });
        this.dispatchEvent(evt);
      }
    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappCis.prototype), "ready", this).call(this);
        setTimeout(function () {
          window.dispatchEvent(new Event("resize"));
        }, 0);
      }
      /**
       * lifecycle
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappCis.prototype), "connectedCallback", this).call(this);
        this.addEventListener("route-change", this._routeChange.bind(this));
        setTimeout(function () {
          window.dispatchEvent(new Event("resize"));
        }, 1000);
      }
      /**
       * lifecycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        // listen for focus event to have fired
        this.removeEventListener("route-change", this._routeChange.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappCis.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Handle tap on button above to redirect to the correct course url.
       */

    }, {
      key: "_loadCourseUrl",
      value: function _loadCourseUrl(e) {
        // reset dialog to appear to be loading
        this.$.loadingCourse.hidden = false;
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var local = normalizedEvent.localTarget; // this will have the id of the current course

        var active = local.getAttribute("data-course-id"); // find the course by it's unique id and filter just to it

        var findCourse = this.originalCourses.filter(function (course) {
          if (course.id !== active) {
            return false;
          }

          return true;
        }); // if we found one, make it the top level item

        if (findCourse.length > 0) {
          findCourse = findCourse.pop();
        }

        this.activeCourse = findCourse; // formulate the post data

        this._courseDataParams = {
          id: this.activeCourse.id
        }; // @todo look at query cache mechanism to skip calls
        // if they've already happened. lrnapp-book has some stuff to do this

        this.$.courserequest.generateRequest();
        this.$.dialog.toggle();
      }
      /**
       * Compute the active list of courses
       */

    }, {
      key: "_coursesCompute",
      value: function _coursesCompute(originalCourses, queryParams) {
        var _this2 = this;

        // if we don't have an original courses object to work with then we need to bail
        if (typeof originalCourses === "undefined") {
          return [];
        } // define vars


        var root = this;
        var filteredCourses = []; // filter the courses by the query params

        filteredCourses = originalCourses.filter(function (course) {
          if (typeof root.queryParams.course !== "undefined") {
            if (course.id !== root.queryParams.course) {
              return false;
            }
          }

          if (typeof root.queryParams.program !== "undefined") {
            if (course.relationships.program.id !== root.queryParams.program) {
              return false;
            }
          }

          if (typeof root.queryParams.academic !== "undefined") {
            if (course.relationships.academic.id !== root.queryParams.academic) {
              return false;
            }
          }

          return true;
        }); // delay and repaint, can help with refresh issues

        setTimeout(function () {
          _this2.$.ironlist.fire("iron-resize");

          window.dispatchEvent(new Event("resize"));
        }, 200);
        return filteredCourses;
      }
      /**
       * highjack shadowDom
       */

    }, {
      key: "_attachDom",
      value: function _attachDom(dom) {
        this.appendChild(dom);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_b3accbe0809211edaa2833647dc78c6c || (_templateObject_b3accbe0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"materializecss-styles\">\n        :host {\n          display: block;\n          align-content: center;\n        }\n        #loading {\n          width: 100%;\n          z-index: 1000;\n          opacity: 0.9;\n          padding: 4em 0 0 0;\n          text-align: center;\n          align-content: center;\n          justify-content: center;\n          height: 100vh;\n          position: absolute;\n          background-color: white;\n        }\n        #dialog {\n          width: 80vw;\n        }\n        iron-selector {\n          line-height: 16px;\n        }\n        iron-selector lrnsys-button {\n          display: inline-flex;\n        }\n        button.coursecard-wrapper {\n          margin: 0;\n          padding: 0;\n        }\n        button.coursecard-wrapper:focus {\n          outline: blue solid 1px;\n        }\n        lrnapp-cis-course-card {\n          padding: 0;\n          margin: 16px;\n          height: 300px;\n          width: 300px;\n        }\n        .courses-grid {\n          margin: 0 auto;\n          width: 95%;\n        }\n        .iron-selected .display-mode {\n          background-color: #ff6f00;\n          color: white;\n        }\n        .iron-list-container {\n          display: flex;\n          flex-direction: column;\n          min-height: 50vh;\n        }\n        iron-list {\n          flex: 1 1 auto;\n        }\n        .dialog-header {\n          height: unset !important;\n          padding: 0 !important;\n        }\n        .course-dialog-heading.lrndesign-course-banner {\n          font-size: 1em;\n          height: 4em !important;\n        }\n        #coursedetails {\n          margin-top: 1em;\n        }\n        #confirm {\n          max-width: 400px;\n          max-height: 300px;\n        }\n        .buttons {\n          text-align: center;\n        }\n        .buttons button {\n          width: 10em;\n          height: 4em;\n        }\n        .dialog-body {\n          padding: 1em;\n          font-size: 1.8em;\n          text-align: center;\n          margin: 0 auto;\n        }\n        .dialog-body lrn-icon.service-confirm-icon {\n          width: 5em;\n          height: 5em;\n        }\n        .dialog-body responsive-grid-col {\n          height: 4.5em;\n        }\n        .dialog-body lrndesign-avatar.service-confirm-icon {\n          display: inline-block;\n        }\n      </style>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        auto=\"\"\n        url=\"[[sourcePath]]\"\n        params=\"\"\n        handle-as=\"json\"\n        last-response=\"{{_cisResponse}}\"\n        on-response=\"_handleResponse\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        url=\"[[courseDataPath]]\"\n        params=\"[[_courseDataParams]]\"\n        handle-as=\"json\"\n        id=\"courserequest\"\n        last-response=\"{{_courseResponse}}\"\n        on-response=\"_handleCourseResponse\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        url=\"[[makeServicePath]]\"\n        params=\"\"\n        handle-as=\"json\"\n        id=\"makeservice\"\n        last-response=\"{{_makeServiceResponse}}\"\n        on-response=\"_handleMakeServiceResponse\"\n      ></iron-ajax>\n      <div id=\"loading\">\n        <elmsln-loading color=\"grey-text\" size=\"large\"></elmsln-loading>\n        <h3>Loading..</h3>\n      </div>\n      <app-toolbar class=\"\">\n        <span main-title=\"\"></span>\n        <span\n          top-item=\"\"\n          style=\"text-align:right;font-size:.5em;padding-right:1em;\"\n          >Displaying [[courses.length]] of [[originalCourses.length]]</span\n        >\n        <paper-dropdown-menu label=\"Course\" hidden$=\"[[!courses]]\">\n          <paper-listbox\n            slot=\"dropdown-content\"\n            class=\"dropdown-content\"\n            selected=\"{{queryParams.course}}\"\n            attr-for-selected=\"item-id\"\n          >\n            <paper-item>-- Any --</paper-item>\n            <template\n              is=\"dom-repeat\"\n              items=\"[[_toArray(originalCourses)]]\"\n              as=\"course\"\n            >\n              <paper-item item-id=\"[[course.id]]\"\n                >[[course.attributes.name]]</paper-item\n              >\n            </template>\n          </paper-listbox>\n        </paper-dropdown-menu>\n        <paper-dropdown-menu label=\"Program\" hidden$=\"[[!programs]]\">\n          <paper-listbox\n            slot=\"dropdown-content\"\n            class=\"dropdown-content\"\n            selected=\"{{queryParams.program}}\"\n            attr-for-selected=\"item-id\"\n          >\n            <paper-item>-- Any --</paper-item>\n            <template\n              is=\"dom-repeat\"\n              items=\"[[_toArray(programs)]]\"\n              as=\"program\"\n            >\n              <paper-item item-id=\"[[program.id]]\"\n                >[[program.attributes.name]]</paper-item\n              >\n            </template>\n          </paper-listbox>\n        </paper-dropdown-menu>\n        <paper-dropdown-menu label=\"Academic home\" hidden$=\"[[!academics]]\">\n          <paper-listbox\n            slot=\"dropdown-content\"\n            class=\"dropdown-content\"\n            selected=\"{{queryParams.academic}}\"\n            attr-for-selected=\"item-id\"\n          >\n            <paper-item>-- Any --</paper-item>\n            <template\n              is=\"dom-repeat\"\n              items=\"[[_toArray(academics)]]\"\n              as=\"academic\"\n            >\n              <paper-item item-id=\"[[academic.id]]\"\n                >[[academic.attributes.name]]</paper-item\n              >\n            </template>\n          </paper-listbox>\n        </paper-dropdown-menu>\n      </app-toolbar>\n      <div class=\"courses-grid\">\n        <iron-pages\n          selected=\"{{data.page}}\"\n          attr-for-selected=\"name\"\n          fallback-selection=\"courses\"\n          role=\"main\"\n        >\n          <div class=\"iron-list-container\" name=\"courses\">\n            <iron-list id=\"ironlist\" items=\"[[courses]]\" as=\"course\" grid=\"\">\n              <template>\n                <button\n                  data-course-id$=\"[[course.id]]\"\n                  class=\"coursecard-wrapper\"\n                  on-click=\"_loadCourseUrl\"\n                >\n                  <lrnapp-cis-course-card\n                    elevation=\"2\"\n                    data-course-id$=\"[[course.id]]\"\n                    name=\"[[course.attributes.name]]\"\n                    image=\"[[course.attributes.image]]\"\n                    title=\"[[course.attributes.title]]\"\n                    color=\"[[course.attributes.color]]\"\n                  >\n                  </lrnapp-cis-course-card>\n                </button>\n              </template>\n            </iron-list>\n          </div>\n        </iron-pages>\n      </div>\n      <app-location\n        route=\"{{route}}\"\n        query-params=\"{{queryParams}}\"\n      ></app-location>\n      <app-route\n        route=\"{{route}}\"\n        pattern=\"[[endPoint]]/:page\"\n        data=\"{{data}}\"\n        tail=\"{{tail}}\"\n        query-params=\"{{queryParams}}\"\n      >\n      </app-route>\n      <paper-dialog id=\"dialog\" with-backdrop>\n        <h2>Course details</h2>\n        <div style=\"height:50vh;width:100%;overflow:scroll;\">\n          <div class=\"dialog-header\">\n            <lrndesign-course-banner\n              image=\"[[activeCourse.attributes.image]]\"\n              name=\"[[activeCourse.attributes.name]]\"\n              title=\"[[activeCourse.attributes.title]]\"\n              color=\"[[activeCourse.attributes.color]] darken-4\"\n            >\n            </lrndesign-course-banner>\n          </div>\n          <div>\n            <div id=\"loadingCourse\" class=\"loading\">\n              <h3>Loading..</h3>\n              <elmsln-loading color=\"grey-text\" size=\"large\"></elmsln-loading>\n            </div>\n          </div>\n          <div id=\"coursedetails\">\n            <grid-plate layout=\"1-1\">\n              <div class=\"column\" slot=\"col-1\">\n                <h4>Details</h4>\n                <ul>\n                  <li\n                    hidden$=\"[[!activeCourse.relationships.academic.attributes.name]]\"\n                  >\n                    Academic unit:\n                    [[activeCourse.relationships.academic.attributes.name]]\n                  </li>\n                  <li\n                    hidden$=\"[[!activeCourse.relationships.program.attributes.name]]\"\n                  >\n                    Program:\n                    [[activeCourse.relationships.program.attributes.name]]\n                  </li>\n                </ul>\n                <h4>Learning Network</h4>\n                <template\n                  is=\"dom-repeat\"\n                  items=\"[[activeCourse.topology.Network]]\"\n                  as=\"service\"\n                >\n                  <template is=\"dom-if\" if=\"[[!service._exists]]\">\n                    <lrnsys-button\n                      raised=\"\"\n                      on-click=\"_makeService\"\n                      color=\"grey lighten-4\"\n                      icon-class=\"grey lighten-5\"\n                      icon=\"lrn:[[service.icon]]\"\n                      data-machine-name$=\"[[service.machine_name]]\"\n                    >\n                      <span data-machine-name$=\"[[service.machine_name]]\"\n                        >Make the [[service.title]] service</span\n                      >\n                    </lrnsys-button>\n                  </template>\n                  <template is=\"dom-if\" if=\"[[service._exists]]\">\n                    <lrnsys-button\n                      raised=\"\"\n                      href=\"[[service.url]]\"\n                      hover-class=\"[[service.color]] lighten-4\"\n                      icon=\"lrn:[[service.icon]]\"\n                    >\n                      <span>[[service.title]]</span>\n                    </lrnsys-button>\n                  </template>\n                </template>\n              </div>\n              <div class=\"column\" slot=\"col-2\">\n                <h4>Operations</h4>\n                <template is=\"dom-if\" if=\"[[activeCourse.meta.canUpdate]]\">\n                  <lrnsys-button\n                    raised=\"\"\n                    href=\"[[activeCourse.uris.edit]]\"\n                    label=\"Edit\"\n                    hover-class=\"green lighten-4\"\n                    icon=\"create\"\n                  ></lrnsys-button>\n                  <lrnsys-button\n                    raised=\"\"\n                    href=\"[[activeCourse.uris.addOffering]]\"\n                    label=\"Add offering\"\n                    hover-class=\"amber lighten-3\"\n                    icon=\"icons:add\"\n                  ></lrnsys-button>\n                </template>\n                <lrnsys-button\n                  raised=\"\"\n                  href=\"[[activeCourse.uris.offerings]]\"\n                  label=\"Offerings\"\n                  hover-class=\"amber lighten-4\"\n                  icon=\"social:people\"\n                ></lrnsys-button>\n                <lrnsys-button\n                  raised=\"\"\n                  href=\"[[activeCourse.uris.sync]]\"\n                  label=\"Sync Roster\"\n                  hover-class=\"amber lighten-4\"\n                  icon=\"notification:sync\"\n                ></lrnsys-button>\n                <lrnsys-button\n                  raised=\"\"\n                  href=\"[[activeCourse.uris.uri]]\"\n                  label=\"Course page (legacy)\"\n                  hover-class=\"brown lighten-4\"\n                  icon=\"delete\"\n                ></lrnsys-button>\n                <template is=\"dom-if\" if=\"[[activeCourse.meta.canDelete]]\">\n                  <div\n                    style=\"padding: 1em;width: 100%;margin: .5em 0;display: block;background-color:#FF2222;color:#ffffff;border: 1px solid #222222;\"\n                  >\n                    <h4>Danger zone</h4>\n                    <lrnsys-button\n                      raised=\"\"\n                      href=\"[[activeCourse.uris.delete]]\"\n                      label=\"Delete\"\n                      hover-class=\"red lighten-1\"\n                      color=\"red lighten-3\"\n                      icon=\"delete\"\n                    ></lrnsys-button>\n                  </div>\n                </template>\n              </div>\n            </grid-plate>\n            <p>[[activeCourse.attributes.body]]</p>\n          </div>\n        </div>\n      </paper-dialog>\n      <lrnsys-dialog id=\"confirm\">\n        <div class=\"dialog-header\" slot=\"header\">\n          Add this to the\n          <strong>[[activeCourse.attributes.title]]</strong> network?\n        </div>\n        <div class=\"dialog-body\">\n          <grid-plate layout=\"1-1-1\">\n            <div slot=\"col-1\">Add</div>\n            <div slot=\"col-2\">\n              <simple-icon\n                icon=\"lrn:[[_activeService.icon]]\"\n                class$=\"[[_activeService.color]]-text elmsln-hover-icon service-confirm-icon\"\n              ></simple-icon>\n            </div>\n            <div slot=\"col-3\"><strong>[[_activeService.title]]</strong></div>\n          </grid-plate>\n          <grid-plate layout=\"1-1-1\">\n            <div slot=\"col-1\">To</div>\n            <div slot=\"col-2\">\n              <lrndesign-avatar\n                class=\"service-confirm-icon\"\n                label=\"[[activeCourse.attributes.name]]\"\n                jdenticon=\"\"\n                color=\"[[activeCourse.attributes.color]] darken-4\"\n              >\n              </lrndesign-avatar>\n            </div>\n            <div slot=\"col-3\">\n              <strong>[[activeCourse.attributes.title]]</strong>\n            </div>\n          </grid-plate>\n          <div style=\"margin-top:1em;\">This will take a few moments.</div>\n        </div>\n        <div class=\"buttons\">\n          <button\n            on-click=\"_confirmBuild\"\n            class=\"green\"\n            data-letsdoit=\"data-letsdoit\"\n          >\n            Let's do it!\n          </button>\n          <button dialog-dismiss=\"\" class=\"red-text\">Oops, go back.</button>\n        </div>\n      </lrnsys-dialog>\n      <paper-toast id=\"toast\"></paper-toast>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-cis";
      }
    }, {
      key: "properties",
      get: function get() {
        var _ref;

        return _ref = {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },

          /**
           * The load initial data
           */
          _cisResponse: {
            type: Object
          },

          /**
           * Load individual course data
           */
          _courseResponse: {
            type: Object
          },

          /**
           * Load service creation response
           */
          _makeServiceResponse: {
            type: Object
          },

          /**
           * The courses to render; potentially filtered
           */
          courses: {
            type: Array,
            value: [],
            computed: "_coursesCompute(originalCourses, queryParams)"
          },

          /**
           * The original courses array; used to filter against
           */
          originalCourses: {
            type: Array,
            value: [],
            notify: true
          },

          /**
           * The programs to render
           */
          programs: {
            type: Array,
            value: []
          },

          /**
           * The academics to render
           */
          academics: {
            type: Array,
            value: []
          },

          /**
           * sourcePath for data.
           */
          sourcePath: {
            type: String
          },

          /**
           * pathway to access info about a single course.
           */
          courseDataPath: {
            type: String
          },

          /**
           * pathway to creating new service instances
           */
          makeServicePath: {
            type: String
          }
        }, babelHelpers.defineProperty(_ref, "endPoint", {
          type: String,
          value: "/"
        }), babelHelpers.defineProperty(_ref, "basePath", {
          type: String,
          value: "/"
        }), babelHelpers.defineProperty(_ref, "activeCourse", {
          type: Array,
          value: null
        }), babelHelpers.defineProperty(_ref, "queryParams", {
          type: Object,
          notify: true
        }), _ref;
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_routeChanged(route, endPoint)"];
      }
    }]);
    return LrnappCis;
  }(_polymerElement.PolymerElement);

  _exports.LrnappCis = LrnappCis;
  customElements.define(LrnappCis.tag, LrnappCis);
});