define(["exports", "../../lit/index.js", "../simple-colors/simple-colors.js"], function (_exports, _index, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HeroBanner = void 0;

  var _templateObject_9c5c43f08e0011ed99ce491205e67b1d, _templateObject2_9c5c43f08e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hero-banner`
   * `That thing no one wants to make over and over again yet always does...`
   * @demo demo/index.html
   * @element hero-banner
   */
  var HeroBanner = /*#__PURE__*/function (_SimpleColorsSuper) {
    babelHelpers.inherits(HeroBanner, _SimpleColorsSuper);

    var _super = _createSuper(HeroBanner);

    function HeroBanner() {
      babelHelpers.classCallCheck(this, HeroBanner);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(HeroBanner, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_9c5c43f08e0011ed99ce491205e67b1d || (_templateObject_9c5c43f08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <img\n        class=\"image\"\n        src=\"", "\"\n        loading=\"lazy\"\n        aria-describedby=\"", "\"\n      />\n      <div class=\"itemwrapper\">\n        <div class=\"title\">", "</div>\n        <div class=\"details\">", "</div>\n        <a\n          class=\"linkbutton\"\n          href=\"", "\"\n          ?hidden=\"", "\"\n          ><button raised=\"\">", "</button></a\n        >\n      </div>\n    "])), this.image, this.ariaDescribedby || "", this.title, this.details, this.buttonLink || "", !this.buttonLink, this.buttonText || "Find out more");
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HeroBanner), "styles", this)), [(0, _index.css)(_templateObject2_9c5c43f08e0011ed99ce491205e67b1d || (_templateObject2_9c5c43f08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          width: 100%;\n          min-height: 600px;\n          height: 100%;\n          max-height: 600px;\n          overflow: hidden;\n          position: relative;\n          --hero-banner-font-family: \"Roboto\";\n          --hero-banner-title-weight: 500;\n          --hero-banner-text: var(--simple-colors-default-theme-grey-12);\n          --hero-banner-rgba: rgba(255, 255, 255, 0.65);\n          --hero-banner-image-bg: var(--simple-colors-default-theme-grey-3);\n          --hero-banner-button-weight: bold;\n          --hero-banner-button-color: var(\n            --simple-colors-default-theme-accent-5\n          );\n          --hero-banner-button-hover-color: var(\n            --simple-colors-default-theme-accent-4\n          );\n        }\n        :host([dark]) {\n          --hero-banner-rgba: rgba(0, 0, 0, 0.65);\n        }\n        .image {\n          position: absolute;\n          left: 0;\n          right: 0;\n          width: 100%;\n          height: 100%;\n          background-color: var(--hero-banner-image-bg);\n        }\n        .itemwrapper {\n          position: absolute;\n          bottom: 10%;\n          left: 10%;\n          width: 50%;\n        }\n        .title {\n          background-color: var(--hero-banner-rgba);\n          padding: 10px 16px;\n          font-size: 32px;\n          color: var(--hero-banner-text);\n          margin: 4px 0;\n          font-family: var(--hero-banner-font-family);\n          font-weight: var(--hero-banner-title-weight);\n        }\n        .details {\n          background-color: var(--hero-banner-rgba);\n          padding: 10px 16px;\n          font-size: 16px;\n          color: var(--hero-banner-text);\n          margin: 4px 0;\n          font-family: var(--hero-banner-font-family);\n        }\n        .linkbutton {\n          padding: 0;\n          margin: 8px 0;\n          text-decoration: none;\n          font-family: var(--hero-banner-font-family);\n        }\n        .linkbutton button {\n          text-transform: none;\n          font-weight: var(--hero-banner-button-weight);\n          color: var(--hero-banner-text);\n          background-color: var(--hero-banner-button-color);\n          font-size: 16px;\n          margin: 0;\n        }\n        .linkbutton:focus button,\n        .linkbutton:hover button {\n          background-color: var(--hero-banner-button-hover-color);\n        }\n        @media screen and (max-width: 720px) {\n          .title {\n            font-size: 20px;\n          }\n          .details {\n            font-size: 12px;\n          }\n          .itemwrapper {\n            left: 5%;\n            width: 50%;\n          }\n        }\n        @media screen and (max-width: 500px) {\n          .title {\n            font-size: 16px;\n          }\n          .details {\n            display: none;\n          }\n          .itemwrapper {\n            left: 0;\n            width: 300px;\n          }\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "hero-banner";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HeroBanner), "properties", this)), {}, {
          /**
           * Title
           */
          title: {
            type: String
          },

          /**
           * Image
           */
          image: {
            type: String
          },

          /**
           * Details / teaser text
           */
          details: {
            type: String
          },

          /**
           * button label
           */
          buttonText: {
            type: String,
            attribute: "button-text"
          },

          /**
           * url for the button
           */
          buttonLink: {
            type: String,
            attribute: "button-link"
          },

          /*
           * accessible long description
           */
          ariaDescribedby: {
            attribute: "aria-decsribedby",
            type: String
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: true,
          gizmo: {
            title: "Hero image",
            description: "Typically fancy banner image calling your attention to something.",
            icon: "image:panorama",
            color: "red",
            groups: ["Image", "Media"],
            handles: [{
              type: "image",
              source: "image",
              title: "title",
              description: "details",
              link: "buttonLink"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            configure: [{
              property: "title",
              title: "Title",
              description: "The title of the element",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "image",
              title: "Image",
              description: "URL of the image",
              inputMethod: "haxupload",
              icon: "image:panorama"
            }, {
              property: "details",
              title: "Details",
              description: "Additional text detail / teaser data",
              inputMethod: "textfield",
              icon: "editor:text-fields"
            }, {
              property: "buttonText",
              title: "Button",
              description: "Label of the button",
              inputMethod: "textfield",
              icon: "icons:radio-button-unchecked"
            }, {
              property: "accentColor",
              title: "Accent color",
              description: "Select the accent color use",
              inputMethod: "colorpicker",
              icon: "editor:format-color-fill"
            }, {
              property: "dark",
              title: "Dark",
              description: "Use dark theme",
              inputMethod: "boolean",
              icon: "invert-colors"
            }, {
              property: "buttonLink",
              title: "Button - Link",
              description: "Label of the button",
              inputMethod: "haxupload",
              validationType: "url",
              icon: "icons:link"
            }],
            advanced: [{
              property: "ariaDescribedby",
              title: "aria-decsribedby",
              description: "Space-separated id list for long descriptions that appear elsewhere",
              inputMethod: "textfield"
            }]
          }
        };
      }
    }]);
    return HeroBanner;
  }((0, _simpleColors.SimpleColorsSuper)(_index.LitElement));

  _exports.HeroBanner = HeroBanner;
  window.customElements.define(HeroBanner.tag, HeroBanner);
});