define(["exports", "../../lit/index.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js"], function (_exports, _index, _simpleIcon, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MagazineCover = void 0;

  var _templateObject_9ca35f108e0011ed99ce491205e67b1d, _templateObject2_9ca35f108e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `magazine-cover`
   * `A Magazine cover element`
   *  Example:
   *  ```html
   *  <magazine-cover image="demo/picture2.jpg" header="Sunset" action="Click, Breath, Relax" link="https://www.elmsln.org/">
   *    A simple time, a simple life. America may be fast paced and brutal on health but in Canada, people enjoy sitting and watching the sunset. Learn how Canadians manage stress.
   *  </magazine-cover>
   *  ```
   * @demo demo/index.html
   * @element magazine-cover
   */
  var MagazineCover = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(MagazineCover, _LitElement);

    var _super = _createSuper(MagazineCover);

    /**
     * HTMLElement
     */
    function MagazineCover() {
      var _this;

      babelHelpers.classCallCheck(this, MagazineCover);
      _this = _super.call(this);
      _this.action = "Touch to learn more";
      _this.icon = "trending-flat";
      _this.link = "";
      _this.eventName = "";
      _this.eventData = {};
      return _this;
    }
    /**
     * LitElement render
     */


    babelHelpers.createClass(MagazineCover, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_9ca35f108e0011ed99ce491205e67b1d || (_templateObject_9ca35f108e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <img\n        src=\"", "\"\n        loading=\"lazy\"\n        id=\"image\"\n        aria-describedby=\"", "\"\n      />\n      <div class=\"overlay\">\n        <h2 id=\"header\" ?hidden=\"", "\">", "</h2>\n        <div id=\"subheader\" ?hidden=\"", "\">", "</div>\n        <div id=\"body\">\n          <p ?hidden=\"", "\">", "</p>\n          <slot></slot>\n        </div>\n        <a\n          tabindex=\"-1\"\n          href=\"", "\"\n          id=\"actionlink\"\n          @click=\"", "\"\n        >\n          <button raised=\"\" id=\"action\">\n            <span id=\"label\"\n              >", "<simple-icon\n                accent-color=\"grey\"\n                dark\n                id=\"icon\"\n                icon=\"", "\"\n                ?hidden=\"", "\"\n              ></simple-icon\n            ></span>\n          </button>\n        </a>\n      </div>\n    "])), this.image, this.describedBy || "", !this.header, this.header, !this.subheader, this.subheader, !this.text, this.text, this.link, this._linkTapped, this.action, this.icon, !this.icon);
      }
      /**
       * convention
       */

    }, {
      key: "_linkTapped",
      value:
      /**
       * Link tap, fire event if we have one
       */
      function _linkTapped(e) {
        if (this.eventName !== "") {
          e.preventDefault();
          e.stopPropagation();
          this.dispatchEvent(new CustomEvent(this.eventName, {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this.eventData
          }));
        }
      }
      /**
       * HAX
       */

    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject2_9ca35f108e0011ed99ce491205e67b1d || (_templateObject2_9ca35f108e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          background-color: #222222;\n          overflow: hidden;\n          --magazine-cover-text-color: #eeeeee;\n        }\n        .overlay {\n          left: 0;\n          right: 0;\n          min-height: 30vh;\n          margin: -38vh 0 0 0;\n          background-color: rgba(0, 0, 0, 0.8);\n          padding: 32px;\n          position: relative;\n        }\n        #image {\n          opacity: 0.5;\n          filter: alpha(opacity=50);\n          transition: opacity 0.3s linear;\n          width: 100%;\n          height: 80vh;\n          background-color: #222222;\n        }\n        #image:hover {\n          opacity: 0.9;\n          filter: alpha(opacity=90);\n        }\n        #header {\n          color: var(--magazine-cover-text-color);\n          font-size: 48px;\n          padding: 0;\n          margin: 0;\n          font-weight: bold;\n        }\n        #subheader {\n          color: var(--magazine-cover-text-color);\n          font-size: 22.4px;\n          padding: 0;\n          margin: 3.2px 0 16px 0;\n          font-style: italic;\n          font-weight: normal;\n        }\n        #body {\n          color: var(--magazine-cover-text-color);\n          padding: 0;\n          margin: 0;\n          font-size: 19.2px;\n          padding: 0 0 0 3.2px;\n          margin: 0 0 32px 0;\n        }\n        #body p {\n          color: var(--magazine-cover-text-color);\n        }\n        #action {\n          color: var(--magazine-cover-text-color);\n          text-transform: none;\n          font-size: 24px;\n          font-style: italic;\n          font-weight: bold;\n          background-color: #000000;\n          border: 1px solid var(--magazine-cover-text-color);\n          border-radius: 8px;\n          transition: background 0.3s linear;\n          width: 100%;\n          margin: 0;\n        }\n        #action:hover,\n        #action:focus {\n          border-color: #ffffff;\n          color: #ffffff;\n          background-color: rgba(255, 255, 255, 0.2);\n        }\n        #actionlink {\n          color: var(--magazine-cover-text-color);\n          display: flex;\n          text-decoration: none;\n          border-radius: 8px;\n        }\n        #icon {\n          display: inline-block;\n          width: 19.2px;\n          height: 19.2px;\n          font-size: 19.2px;\n          margin-left: 8px;\n        }\n        #label {\n          text-shadow: -1px 1px 2px #000000;\n        }\n        @media screen and (max-width: 900px) {\n          #header {\n            font-size: 32px;\n          }\n          #subheader {\n            font-size: 16px;\n          }\n          #body {\n            font-size: 16px;\n          }\n          #action {\n            font-size: 19.2px;\n          }\n        }\n        @media screen and (max-width: 650px) {\n          #body {\n            font-size: 12.8px;\n          }\n          #action {\n            font-size: 16px;\n          }\n          .overlay {\n            margin: -50vh 0 0 0;\n            padding: 16px;\n          }\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "magazine-cover";
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title / heading
           */
          header: {
            type: String
          },

          /**
           * A secondary title
           */
          subheader: {
            type: String
          },

          /**
           * Internal text.
           */
          text: {
            type: String
          },

          /**
           * Title / heading
           */
          image: {
            type: String
          },

          /**
           * Call to action
           */
          action: {
            type: String
          },

          /**
           * aria-describedby attribute
           */
          describedBy: {
            type: String,
            attribute: "described-by"
          },

          /**
           * Call to action icon
           */
          icon: {
            type: String
          },

          /**
           * Link to go to on click.
           */
          link: {
            type: String
          },

          /**
           * Optional event binding for the button press.
           */
          eventName: {
            type: String,
            attribute: "event-name"
          },

          /**
           * Optional event data to send along
           */
          eventData: {
            type: Object,
            attribute: "event-data"
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Cover image",
            description: "Present a full screen cover image with a call to action. Good for starting off a series of content",
            icon: "flip-to-front",
            color: "teal",
            groups: ["Image", "Presentation"],
            handles: [{
              type: "image",
              source: "image",
              title: "header",
              caption: "subheader",
              citation: "subheader",
              description: "text",
              ariaDescribedby: "describedBy"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            configure: [{
              property: "image",
              title: "Image",
              description: "The URL for the image.",
              inputMethod: "haxupload",
              icon: "link",
              required: true,
              validationType: "url"
            }, {
              property: "header",
              title: "Header",
              description: "Primary header",
              inputMethod: "textfield",
              icon: "editor:title",
              required: true
            }, {
              property: "subheader",
              title: "Sub-header",
              description: "Secondary header",
              inputMethod: "textfield",
              icon: "editor:text-fields"
            }, {
              property: "text",
              title: "Text",
              description: "Secondary header",
              inputMethod: "textfield",
              icon: "editor:text-fields"
            }, {
              property: "action",
              title: "Call to action",
              description: "Text that lives on the button",
              inputMethod: "textfield",
              icon: "trending-flat"
            }, {
              property: "link",
              title: "URL",
              description: "Enter URL for your action link",
              inputMethod: "haxupload",
              icon: "send"
            }, {
              property: "icon",
              title: "Action icon",
              description: "Icon used for the call to action",
              inputMethod: "iconpicker",
              options: ["icons:trending-flat", "icons:launch", "icons:pan-tool", "icons:link", "icons:check", "icons:favorite", "icons:thumb-up", "icons:send"]
            }],
            advanced: [{
              property: "describedBy",
              title: "aria-describedby",
              description: "Space-separated list of IDs for elements that describe the image.",
              inputMethod: "textfield"
            }, {
              property: "event-name",
              title: "Event name",
              description: "Name of the event to fire",
              inputMethod: "textfield"
            }, {
              property: "event-data",
              title: "Event data (JSON)",
              description: "JSON blob of data to send along",
              inputMethod: "code-editor"
            }]
          }
        };
      }
    }]);
    return MagazineCover;
  }(_index.LitElement);

  _exports.MagazineCover = MagazineCover;
  window.customElements.define(MagazineCover.tag, MagazineCover);
});