define(["exports", "../../../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxUserMenuButton = void 0;

  var _templateObject_ae497fb08e0011ed99ce491205e67b1d, _templateObject2_ae497fb08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AppHaxUserMenuButton = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(AppHaxUserMenuButton, _LitElement);

    var _super = _createSuper(AppHaxUserMenuButton);

    function AppHaxUserMenuButton() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxUserMenuButton);
      _this = _super.call(this);
      _this.icon = "account-circle";
      _this.label = "Default";
      return _this;
    }

    babelHelpers.createClass(AppHaxUserMenuButton, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_ae497fb08e0011ed99ce491205e67b1d || (_templateObject_ae497fb08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <button class=\"menu-button\" part=\"menu-button\">\n        <simple-icon-lite class=\"icon\" icon=\"", "\"></simple-icon-lite\n        >", "\n      </button>\n    "])), this.icon, this.label);
      }
    }], [{
      key: "tag",
      get: // a convention I enjoy so you can change the tag name in 1 place
      function get() {
        return "app-hax-user-menu-button";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          icon: {
            type: String
          },
          label: {
            type: String
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return (0, _index.css)(_templateObject2_ae497fb08e0011ed99ce491205e67b1d || (_templateObject2_ae497fb08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      :host {\n        font-family: \"Press Start 2P\", sans-serif;\n        text-align: center;\n        width: 100%;\n        --background-color: var(--app-hax-background-color);\n        --accent-color: var(--app-hax-accent-color);\n      }\n\n      .menu-button {\n        display: block;\n        width: 100%;\n        border: 2px solid var(--accent-color);\n        margin: 0;\n        padding: 8px;\n        font-size: 16px;\n        text-align: left;\n        color: var(--accent-color);\n        background-color: var(--background-color);\n        cursor: pointer;\n      }\n\n      .menu-button:hover,\n      .menu-button:active,\n      .menu-button:focus {\n        background-color: var(--accent-color);\n        color: var(--background-color);\n      }\n\n      .icon {\n        padding-right: 16px;\n      }\n    "])));
      }
    }]);
    return AppHaxUserMenuButton;
  }(_index.LitElement);

  _exports.AppHaxUserMenuButton = AppHaxUserMenuButton;
  customElements.define(AppHaxUserMenuButton.tag, AppHaxUserMenuButton);
});