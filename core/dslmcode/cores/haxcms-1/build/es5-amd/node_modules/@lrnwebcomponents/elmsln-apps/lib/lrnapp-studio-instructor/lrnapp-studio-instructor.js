define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../simple-tooltip/simple-tooltip.js", "../../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../../@polymer/app-route/app-location.js", "../../../../@polymer/app-route/app-route.js", "../elmsln-base-deps.js", "../../../../@polymer/app-layout/app-header/app-header.js", "../../../../@polymer/app-layout/app-toolbar/app-toolbar.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../@polymer/paper-toggle-button/paper-toggle-button.js", "../../../../@polymer/paper-item/paper-item.js", "../../../../@polymer/paper-badge/paper-badge.js", "../../../../@polymer/paper-input/paper-input.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-button.js", "../../../hax-iconset/lib/simple-hax-iconset.js", "../../../../@vaadin/vaadin-grid/vaadin-grid.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-filter.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-sorter.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-column-group.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-selection-column.js", "../../../elmsln-loading/elmsln-loading.js", "../../../lrndesign-chart/lib/lrndesign-bar.js", "../../../lrndesign-chart/lib/lrndesign-line.js", "../../../lrndesign-chart/lib/lrndesign-pie.js", "../../../simple-picker/simple-picker.js", "../../../lrnsys-button/lrnsys-button.js", "../../../lrndesign-avatar/lrndesign-avatar.js", "../../../../@polymer/paper-dialog/paper-dialog.js", "../../../materializecss-styles/materializecss-styles.js", "../lrnapp-studio-submission/lrnapp-studio-submission.js", "../../../utils/utils.js"], function (_exports, _polymerElement, _polymerDom, _domIf, _simpleTooltip, _domRepeat, _appLocation, _appRoute, _elmslnBaseDeps, _appHeader, _appToolbar, _ironAjax, _paperToggleButton, _paperItem, _paperBadge, _paperInput, _simpleIcon, _simpleIcons, _simpleIconButton, _simpleHaxIconset, _vaadinGrid, _vaadinGridFilter, _vaadinGridSorter, _vaadinGridColumnGroup, _vaadinGridSelectionColumn, _elmslnLoading, _lrndesignBar, _lrndesignLine, _lrndesignPie, _simplePicker, _lrnsysButton, _lrndesignAvatar, _paperDialog, _materializecssStyles, _lrnappStudioSubmission, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioInstructor = void 0;

  var _templateObject_b3e519f0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappStudioInstructor = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappStudioInstructor, _PolymerElement);

    var _super = _createSuper(LrnappStudioInstructor);

    function LrnappStudioInstructor() {
      babelHelpers.classCallCheck(this, LrnappStudioInstructor);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappStudioInstructor, [{
      key: "lastErrorChanged",
      value:
      /**
       * Handle the last error rolling in
       */
      function lastErrorChanged(e) {
        if (e.detail.value) {
          console.error(e);
          var target = (0, _utils.normalizeEventPath)(e)[0]; // check for JWT needing refreshed vs busted but must be 403

          switch (parseInt(e.detail.value.status)) {
            // cookie data not found, need to go get it
            // @notice this currently isn't possible but we could modify
            // the backend in the future to support throwing 401s dynamically
            // if we KNOW an event must expire the timing token
            case 401:
            case 401:
              // we know what the "target" is as an iron-ajax tag
              // so we know what call was just attempted. Let's await
              // a fetch against the top level site landing page with
              // no-cors will force a hit against the backend to refresh
              // the PHP session / bounce back from Azure as needed
              // so that when we reissue this call it'll go through (magically)
              fetch(window.Drupal.settings.basePath, {
                mode: "no-cors"
              }).then(function (e) {
                console.log(e); // delay just to be sure

                setTimeout(function () {
                  target.generateRequest();
                }, 250);
              });
              break;
          }
        }
      }
    }, {
      key: "_chartChanged",
      value:
      /**
       * Rebuild the chart whenever the select list is changed.
       */
      function _chartChanged(e) {
        if (e.detail.value) {
          this.set("activeChart.title", e.detail.value);
          this.notifyPath("activeChart.title");
          this.set("activeChart.description", "Chart of values relative to " + e.detail.value);
          this.notifyPath("activeChart.description"); // calculate the valid charting options relative to selected chart style

          this.set("activeChart.data", this._formatChartData(e.detail.value));
          this.notifyPath("activeChart.data");
        }
      }
      /**
       * Format data in a way that chartist likes and that matches
       * the currently active display mechanism
       */

    }, {
      key: "_formatChartData",
      value: function _formatChartData(type) {
        var labels = [];
        var series = [[]];
        var stats = this.stats.stats;

        var assignments = this._toArray(this.assignments);

        var parts = type.split("-");

        if (babelHelpers.typeof(stats[parts[0]]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(stats[parts[0]][parts[1]]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // make sure the data aligns now w/ the IDs in question
          // or we'll start mixing up our data.
          for (var i in assignments) {
            var title = assignments[i].title;

            if (babelHelpers.typeof(stats[parts[0]][parts[1]][assignments[i].id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              series[0].push(stats[parts[0]][parts[1]][assignments[i].id]);
              title += " (".concat(stats[parts[0]][parts[1]][assignments[i].id], ")");
            } else {
              series[0].push(0);
              title += " (0)";
            }

            labels.push(title);
          }
        }

        return {
          labels: labels,
          series: series
        };
      }
      /**
       * When type changes, make sure we adjust what the request going
       * out the door will be. For simplicity, false / true for the two
       * modes are binded to submission (default) and comment methods
       * of data return. This allows us to leverage the same endpoint
       * and render things more or less using much of the same code
       * and event
       */

    }, {
      key: "_dataTypeChanged",
      value: function _dataTypeChanged(newValue, oldValue) {
        // if type changes values and not from undefined to defined
        // then we should execute the request for data after setting type
        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          if (newValue) {
            this.dataTypeText = "Comments";
          } else {
            this.dataTypeText = "Submissions";
          } // ensure we resize grid appropriately after data change


          setTimeout(function () {
            window.dispatchEvent(new Event("resize"));
          }, 0);
        }
      }
      /**
       * Stupid thing to make it go from array position 0 to 1.
       */

    }, {
      key: "_commentIndex",
      value: function _commentIndex(index) {
        return index + 1;
      }
      /**
       * If the current route is outside the scope of our app
       * then allow the website to break out of the single page
       * application routing
       */

    }, {
      key: "_routeChanged",
      value: function _routeChanged(route, endPoint) {
        if (typeof route.path === "string") {
          if (typeof endPoint === "string") {
            if (route.path.startsWith(endPoint)) {
              return;
            }
          } // reload the page which since route changed will load that page


          window.location.reload();
        }
      }
      /**
       * Test if buttons should be visible or not
       */

    }, {
      key: "_activeDataChanged",
      value: function _activeDataChanged(student, assignment) {
        if (babelHelpers.typeof(student.id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          if (this._getObjectByPosition(this.students, student.id, -1) == -1) {
            this.$.prevstudent.disabled = true;
          } else {
            this.$.prevstudent.disabled = false;
          }

          if (this._getObjectByPosition(this.students, student.id, 1) == -1) {
            this.$.nextstudent.disabled = true;
          } else {
            this.$.nextstudent.disabled = false;
          }

          if (this._getObjectByPosition(this.assignments, assignment.id, -1) == -1) {
            this.$.prevassignment.disabled = true;
          } else {
            this.$.prevassignment.disabled = false;
          }

          if (this._getObjectByPosition(this.assignments, assignment.id, 1) == -1) {
            this.$.nextassignment.disabled = true;
          } else {
            this.$.nextassignment.disabled = false;
          }
        }
      }
      /**
       * Project updated
       */

    }, {
      key: "_projectChanged",
      value: function _projectChanged(e) {
        this.$.loading.hidden = false; // default a11y positioning back to the stats dialog

        this.__rememberClick = this.$.statsdialogbutton;
        this.$.statsdialogbutton.disabled = false;
        this.$.datatype.disabled = false;
        this.activeProject = e.detail.value; // this should fire off the new request

        this.studentParams.projectId = this.activeProject;
        this.$.studentrequest.generateRequest();
      }
    }, {
      key: "_openStatsDialog",
      value: function _openStatsDialog(e) {
        this.$.statsdialog.toggle();
      }
      /**
       * attached life cycle
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappStudioInstructor.prototype), "connectedCallback", this).call(this);
        this.$.statsdialogbutton.addEventListener("click", this._openStatsDialog.bind(this)); // listen for focus event to have fired

        this.$.statsdialog.addEventListener("opened-changed", this._accessibleFocus.bind(this));
        this.$.dialog.addEventListener("opened-changed", this._accessibleFocus.bind(this));
        this.$.selectedproject.addEventListener("dropdown-select-changed", this._projectChanged.bind(this));
        this.$.selectedchart.addEventListener("value-changed", this._chartChanged.bind(this));
      }
      /**
       * detached life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.$.statsdialogbutton.removeEventListener("click", this._openStatsDialog.bind(this)); // listen for focus event to have fired

        this.$.statsdialog.removeEventListener("opened-changed", this._accessibleFocus.bind(this));
        this.$.dialog.removeEventListener("opened-changed", this._accessibleFocus.bind(this));
        this.$.selectedproject.removeEventListener("dropdown-select-changed", this._projectChanged.bind(this));
        this.$.selectedchart.removeEventListener("value-changed", this._chartChanged.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappStudioInstructor.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Set ourselves as having focus after the modal closes.
       */

    }, {
      key: "_accessibleFocus",
      value: function _accessibleFocus(e) {
        if (!e.detail) {
          document.body.classList.remove("scroll-disabled"); // focus on our dialog triggering button

          this.__rememberClick.focus();
        }
      }
      /**
       * Handle response for the whole projects object.
       */

    }, {
      key: "_handleProjectResponse",
      value: function _handleProjectResponse(event) {
        this.$.loading.hidden = true;
        this.set("projects", this._projectData.data.projects);
      }
      /**
       * Handle response for the whole projects object.
       */

    }, {
      key: "_handleStudentResponse",
      value: function _handleStudentResponse(event) {
        var _this = this;

        this.$.loading.hidden = true;
        this.set("students", []);
        this.set("students", this._studentData.data.students);
        this.set("assignments", []);
        this.set("assignments", this._studentData.data.assignments);
        this.stats = this._studentData.data.stats;
        this.set("stats.header", "Statistics for " + this.projects["project-" + this.activeProject].attributes.title); // make sure default is asc data

        setTimeout(function () {
          _this.shadowRoot.querySelector("#sorter").direction = "asc";
        }, 200);
      }
      /**
       * Pie menu operation handler based on which was clicked.
       */

    }, {
      key: "_changeActiveItem",
      value: function _changeActiveItem(e) {
        document.body.classList.add("scroll-disabled");
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var local = normalizedEvent.localTarget;
        var newstudent;
        var newassignment; // use button id in order to move around in the grid as far as active

        switch (local.id) {
          case "prevstudent":
            newstudent = this._getObjectByPosition(this.students, this.activeData.student.id, -1);

            if (newstudent != -1 && babelHelpers.typeof(newstudent.assignments[this.activeData.assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              this.set("activeData.student", {});
              this.set("activeData.student", newstudent);
              this.set("activeData.submission", {});
              this.set("activeData.submission", newstudent.assignments[this.activeData.assignment.id]);
              this.set("route.path", this.endPoint + "/submissions/" + this.activeData.submission.id);
            }

            break;

          case "nextstudent":
            newstudent = this._getObjectByPosition(this.students, this.activeData.student.id, 1);

            if (newstudent != -1 && babelHelpers.typeof(newstudent.assignments[this.activeData.assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              this.set("activeData.student", {});
              this.set("activeData.student", newstudent);
              this.set("activeData.submission", {});
              this.set("activeData.submission", newstudent.assignments[this.activeData.assignment.id]);
              this.set("route.path", this.endPoint + "/submissions/" + this.activeData.submission.id);
            }

            break;

          case "prevassignment":
            newassignment = this._getObjectByPosition(this.assignments, this.activeData.assignment.id, -1);

            if (newassignment != -1) {
              this.set("activeData.assignment", {});
              this.set("activeData.assignment", newassignment);

              if (babelHelpers.typeof(this.activeData.student.assignments[newassignment.id].id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                this.set("activeData.submission", {});
                this.set("activeData.submission", this.activeData.student.assignments[newassignment.id]);
                this.set("route.path", this.endPoint + "/submissions/" + this.activeData.student.assignments[newassignment.id].id);
              } else {
                this.set("activeData.submission", false);
              }
            }

            break;

          case "nextassignment":
            newassignment = this._getObjectByPosition(this.assignments, this.activeData.assignment.id, 1);

            if (newassignment != -1) {
              this.set("activeData.assignment", {});
              this.set("activeData.assignment", newassignment);

              if (babelHelpers.typeof(this.activeData.student.assignments[newassignment.id].id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                this.set("activeData.submission", {});
                this.set("activeData.submission", this.activeData.student.assignments[newassignment.id]);
                this.set("route.path", this.endPoint + "/submissions/" + this.activeData.student.assignments[newassignment.id].id);
              } else {
                this.set("activeData.submission", false);
              }
            }

            break;
        }
      }
      /**
       * Helper to move back and forth in an object like you can an array
       */

    }, {
      key: "_getObjectByPosition",
      value: function _getObjectByPosition(items, key, i) {
        var keys = Object.keys(items).sort(function (a, b) {
          if (babelHelpers.typeof(items[a].sis) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            if (items[a].sis.sortable_name > items[b].sis.sortable_name) {
              return 1;
            } else if (items[a].sis.sortable_name < items[b].sis.sortable_name) {
              return -1;
            }

            return 0;
          } else {
            return a - b;
          }
        });

        if (key !== undefined) {
          key = key.toString();
        }

        var index = keys.indexOf(key); // try fallback for type issues

        if (index == -1) {
          index = keys.indexOf(parseInt(key));
        }

        if (i == -1 && index > 0 || i == 1 && index < keys.length - 1) {
          return items[keys[index + i]];
        } else {
          return -1;
        }
      }
      /**
       * Test student submission status relative to assignments
       */

    }, {
      key: "_submissionStatus",
      value: function _submissionStatus(student, assignment, dataType) {
        if (student != null) {
          if (!dataType && babelHelpers.typeof(student.assignments[assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(student.assignments[assignment.id].id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            return true;
          } else if (dataType && babelHelpers.typeof(student.assignmentComments[assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && this._toArray(student.assignmentComments[assignment.id]).length > 0) {
            return true;
          }
        }

        return false;
      }
      /**
       * Test student submission status relative to assignments
       */

    }, {
      key: "_submissionID",
      value: function _submissionID(student, assignment) {
        if (student != null && babelHelpers.typeof(student.assignments[assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(student.assignments[assignment.id].id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          return student.assignments[assignment.id].id;
        }

        return false;
      }
      /**
       * Return a piece of the submission needed for visualization bc of template scope
       */

    }, {
      key: "_submissionPiece",
      value: function _submissionPiece(student, assignment, piece) {
        if (student != null && babelHelpers.typeof(student.assignments[assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(student.assignments[assignment.id].id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          var submission = student.assignments[assignment.id];

          switch (piece) {
            case "url":
              return this.basePath + "lrnapp-studio-submission/submissions/" + submission.id;
              break;

            case "title":
              return submission.attributes.title;
              break;

            case "icon":
              return submission.meta.state_icon;
              break;

            case "color":
              return submission.meta.state_color;
              break;

            case "comments":
              return this._toArray(student.assignmentComments[assignment.id]);
              break;
          }
        }

        return "";
      }
      /**
       * Return number of comments on an assignment for display.
       */

    }, {
      key: "_commentCount",
      value: function _commentCount(student, assignment, dataType) {
        if (!dataType && student != null && babelHelpers.typeof(student.assignmentComments[assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          return this._toArray(student.assignmentComments[assignment.id]).length;
        }

        return false;
      }
      /**
       * Set route for active submission to load
       */

    }, {
      key: "_setActiveSubmission",
      value: function _setActiveSubmission(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var local = normalizedEvent.localTarget;
        this.__rememberClick = local;
        var item = local.id.split("-"); // find the active elements

        this.set("activeData.student", this.students[item[1]]);
        this.set("activeData.assignment", this.assignments[item[3]]);
        this.set("activeData.submission", this.students[item[1]].assignments[item[3]]);
        this.set("route.path", this.endPoint + "/submissions/" + item[item.length - 1]);
        document.body.classList.add("scroll-disabled");
        this.$.dialog.toggle();
      }
      /**
       * Set route for active submission via comment click
       */

    }, {
      key: "_setActiveComment",
      value: function _setActiveComment(e) {
        // disable all buttons for in modal nav
        this.$.nextassignment.disabled = true;
        this.$.prevassignment.disabled = true;
        this.$.nextstudent.disabled = true;
        this.$.prevstudent.disabled = true;
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var local = normalizedEvent.localTarget;
        this.__rememberClick = local;
        var item = local.id.split("-"); // find the active elements

        this.set("activeData.student", this.students[item[1]]);
        this.set("activeData.assignment", this.assignments[item[3]]);
        this.set("activeData.submission", this.students[item[1]].assignments[item[3]]);
        this.set("route.path", this.endPoint + "/submissions/" + item[item.length - 1]);
        document.body.classList.add("scroll-disabled");
        this.$.dialog.toggle();
      }
      /**
       * Simple way to convert from object to array.
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_b3e519f0809211edaa2833647dc78c6c || (_templateObject_b3e519f0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n    <style include=\"materializecss-styles\">\n      :host([hidden]) {\n        display: none !important;\n      }\n      :host {\n        display: block;\n        align-content: center;\n        padding: .8em;\n      }\n      paper-dialog {\n        width: 90vw;\n        min-height:90vh;\n        z-index: 1 !important;\n      }\n      vaadin-grid-table-body > vaadin-grid-cell-content {\n        height: unset !important;\n      }\n      app-header {\n        padding: 0;\n        margin: 0;\n      }\n      app-toolbar {\n        background-color: #4285f4;\n        color: #fff;\n        margin:0;\n      }\n      #loading {\n        width: 100%;\n        z-index: 1000;\n        opacity: .8;\n        text-align: center;\n        align-content: center;\n        justify-content: center;\n        height: 100vh;\n        position: absolute;\n        background-color: white;\n      }\n      .center-data {\n        text-align: center;\n      }\n      vaadin-grid#material {\n        height: 75vh;\n        font-family: Roboto, sans-serif;\n        --divider-color: rgba(0, 0, 0, var(--dark-divider-opacity));\n\n        --vaadin-grid-cell: {\n          padding: 0;\n        };\n\n        --vaadin-grid-header-cell: {\n          height: 3.5em;\n          color: rgba(0, 0, 0, var(--dark-secondary-opacity));\n          font-size: 1em;\n        };\n\n        --vaadin-grid-body-cell: {\n          height: 3em;\n          color: rgba(0, 0, 0, var(--dark-primary-opacity));\n          font-size: .8em;\n        };\n\n        --vaadin-grid-body-row-hover-cell: {\n          background-color: var(--paper-grey-200);\n        };\n\n        --vaadin-grid-body-row-selected-cell: {\n          background-color: var(--paper-grey-100);\n        };\n\n        --vaadin-grid-focused-cell: {\n          box-shadow: none;\n          font-weight: bold;\n        };\n      }\n\n      vaadin-grid#material .cell {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        padding-right: 56px;\n      }\n\n      vaadin-grid#material .cell.last {\n        padding-right: 24px;\n      }\n\n      vaadin-grid#material .cell.numeric {\n        text-align: right;\n      }\n\n      vaadin-grid#material simple-fields-field {\n        --primary-color: var(--paper-indigo-500);\n        margin: 0 24px;\n      }\n\n      vaadin-grid#material vaadin-grid-sorter .cell {\n        flex: 1;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      vaadin-grid#material vaadin-grid-sorter simple-icon {\n        transform: scale(0.8);\n      }\n\n      vaadin-grid#material vaadin-grid-sorter:not([direction]) simple-icon {\n        color: rgba(0, 0, 0, var(--dark-disabled-opacity));\n      }\n\n      vaadin-grid#material vaadin-grid-sorter[direction] {\n        color: rgba(0, 0, 0, var(--dark-primary-opacity));\n      }\n\n      vaadin-grid#material vaadin-grid-sorter[direction=desc] simple-icon {\n        transform: scale(0.8) rotate(180deg);\n      }\n      vaadin-grid-sorter {\n        text-align: center;\n      }\n\n      lrndesign-avatar {\n        display: inline-flex;\n      }\n      @media (max-width: 700px) {\n        lrndesign-avatar {\n          display: none !important;\n        }\n        [main-title] {\n          font-size: 12px;\n        }\n      }\n      [main-title] {\n        font-size:14px;\n        max-width: 30vw;\n        overflow: hidden;\n      }\n      .avatar-label {\n        display: inline-flex;\n        margin-left: 12px;\n        margin-top: 12px;\n        font-size: 14px;\n      }\n      .assignment-button {\n        height: 24px;\n      }\n      .project-button {\n        height: 24px;\n        width: 24px;\n      }\n      paper-badge {\n        top: 0 !important;\n        left: unset !important;\n        right: 0;\n        z-index: 1;\n      }\n      .avatar-link {\n        color: black;\n        text-decoration: none;\n        display: inline-flex;\n        vertical-align: middle;\n      }\n      .avatar-link button {\n        text-transform: unset;\n      }\n      #selectedproject {\n        display: inline-block;\n      }\n      #datatype {\n        display: inline-block;\n        vertical-align: middle;\n        --paper-toggle-button-checked-bar-color:  var(--paper-green-500);\n        --paper-toggle-button-checked-button-color:  var(--paper-green-500);\n        --paper-toggle-button-checked-ink-color: var(--paper-green-500);\n        --paper-toggle-button-unchecked-bar-color:  var(--paper-amber-900);\n        --paper-toggle-button-unchecked-button-color:  var(--paper-amber-900);\n        --paper-toggle-button-unchecked-ink-color: var(--paper-amber-900);\n      }\n      .comment-list {\n        list-style-image: none;\n        display: inline-block;\n        padding: 0;\n        margin: 0;\n      }\n      .stats-text {\n        font-size: .8em;\n        font-style: italic;\n        line-height: 1em;\n        padding: 0 0 0 2em;\n        display: inline-block;\n        text-align: right;\n      }\n      #selectedchart {\n        padding-left: 8px;\n      }\n    </style>\n    <app-location route=\"{{route}}\"></app-location>\n    <app-route\n        route=\"{{route}}\"\n        pattern=\"[[endPoint]]/submissions/:submission\"\n        data=\"{{data}}\"\n        tail=\"{{tail}}\">\n    </app-route>\n    <iron-ajax\n      auto\n      id=\"projectrequest\"\n      url=\"[[sourceProjectPath]]\"\n      handle-as=\"json\"\n      last-response=\"{{_projectData}}\"\n      on-response=\"_handleProjectResponse\"\n      reject-with-request\n      on-last-error-changed=\"lastErrorChanged\"></iron-ajax>\n    <iron-ajax\n      id=\"studentrequest\"\n      url=\"[[sourceStudentPath]]\"\n      params=\"[[studentParams]]\"\n      handle-as=\"json\"\n      last-response=\"{{_studentData}}\"\n      on-response=\"_handleStudentResponse\"\n      reject-with-request\n      on-last-error-changed=\"lastErrorChanged\"></iron-ajax>\n    <div id=\"loading\">\n      <h3>Loading..</h3>\n      <elmsln-loading color=\"grey-text\" size=\"large\"></elmsln-loading>\n    </div>\n    <div hidden$=\"[[activeProject]]\">Select a project to begin reviewing work</div>\n    <dropdown-select id=\"selectedproject\" label=\"Project\">\n      <template is=\"dom-repeat\" items=\"[[_toArray(projects)]]\" as=\"project\">\n        <paper-item value$=\"[[project.id]]\">[[project.attributes.title]]</paper-item>\n      </template>\n    </dropdown-select>\n    <paper-toggle-button id=\"datatype\" checked=\"{{dataType}}\" disabled>\n      [[dataTypeText]]\n    </paper-toggle-button>\n    <button id=\"statsdialogbutton\" disabled><simple-icon icon=\"editor:show-chart\"></simple-icon> Statistics</span></button>\n    <paper-dialog id=\"statsdialog\" no-cancel-on-outside-click no-cancel-on-esc-key>\n      <app-header>\n        <app-toolbar>\n          <div main-title>[[stats.header]]</div>\n          <label for=\"selectedchart\">Graph style</label>\n          <simple-picker id=\"selectedchart\" options=\"[[simplePickerOptions]]\"></simple-picker>\n          <button dialog-dismiss><simple-icon icon=\"close\"></simple-icon> Close</button>\n        </app-toolbar>\n      </app-header>\n      <div style=\"height:50vh;width:100%;overflow:scroll;\">\n          <div class=\"stats-text\">[[stats.overview]]</div>\n        <lrndesign-bar chart-title=\"[[activeChart.title]]\" chart-desc=\"[[activeChart.description]]\" data=\"[[activeChart.data]]\"></lrndesign-bar>\n      </div>\n      </div>\n    </paper-dialog>\n    <vaadin-grid hidden$=\"[[!students]]\" id=\"material\" aria-label=\"Student project list\" items=\"[[_toArray(students)]]\">\n      <vaadin-grid-column resizable>\n        <template class=\"header\">\n          <vaadin-grid-sorter id=\"sorter\" path=\"sis.sortable_name\">Student</vaadin-grid-sorter>\n        </template>\n        <template>\n          <a href$=\"[[basePath]]lrnapp-open-studio/projects?author=[[item.id]]&project=[[activeProject]]\" tabindex=\"-1\" target=\"_blank\" class=\"avatar-link ferpa-protect\">\n            <lrndesign-avatar label=\"[[item.name]]\" src=\"[[item.avatar]]\"></lrndesign-avatar>\n            <span class=\"avatar-label\">[[item.sis.sortable_name]]</span>\n          </a>\n        </template>\n        <template class=\"footer\">\n          <vaadin-grid-filter aria-label=\"Student\" path=\"sis.sortable_name\" value=\"[[_filterName]]\">\n            <paper-input slot=\"filter\" label=\"Student\" value=\"{{_filterName::input}}\" focus-target></paper-input>\n          </vaadin-grid-filter>\n        </template>\n      </vaadin-grid-column>\n      <template is=\"dom-repeat\" items=\"[[_toArray(assignments)]]\" as=\"assignment\">\n        <vaadin-grid-column resizable>\n          <template class=\"header\">\n            <span>[[assignment.title]]</span>\n          </template>\n          <template>\n            <template is=\"dom-if\" if=\"[[_submissionStatus(item, assignment, dataType)]]\">\n              <template is=\"dom-if\" if=\"[[!dataType]]\">\n                <lrnsys-button icon=\"[[_submissionPiece(item, assignment, 'icon')]]\" id$=\"student-[[item.id]]-assignment-[[assignment.id]]-submission-[[_submissionID(item, assignment)]]\" label=\"[[_submissionPiece(item, assignment, 'title')]]\" on-click=\"_setActiveSubmission\">\n                </lrnsys-button>\n              </template>\n              <template is=\"dom-if\" if=\"[[dataType]]\">\n                <ul class=\"comment-list\">\n                <template is=\"dom-repeat\" items=\"[[_submissionPiece(item, assignment, 'comments')]]\" as=\"commented\">\n                  <li>\n                    <lrnsys-button icon=\"communication:comment\" id$=\"student-[[item.id]]-assignment-[[assignment.id]]-submission-[[commented]]\" label=\"#[[_commentIndex(index)]]\" on-click=\"_setActiveComment\">\n                    </lrnsys-button>\n                  </li>\n                </template>\n                </ul>\n              </template>\n            </template>\n            <template is=\"dom-if\" if=\"[[!_submissionStatus(item, assignment, dataType)]]\">\n              <button disabled class=\"project-button\" id$=\"student-[[item.id]]-assignment-[[assignment.id]]-submission-null\">X</button>\n            </template>\n            <template is=\"dom-if\" if=\"[[_commentCount(item, assignment, dataType)]]\">\n              <paper-badge id$=\"student-[[item.id]]-assignment-[[assignment.id]]-tip\" for=\"student-[[item.id]]-assignment-[[assignment.id]]\" label=\"[[_commentCount(item, assignment, dataType)]]\"></paper-badge>\n              <simple-tooltip for=\"student-[[item.id]]-assignment-[[assignment.id]]-tip\">Comments left on classmates [[assignment.title]]</simple-badge>\n            </template>\n          </template>\n        </vaadin-grid-column>\n      </template>\n    </vaadin-grid>\n    <paper-dialog id=\"dialog\" style=\"overflow: scroll;\" no-cancel-on-outside-click no-cancel-on-esc-key>\n      <app-header>\n        <app-toolbar>\n          <span style=\"width:35vw;\">\n            <simple-icon-button on-click=\"_changeActiveItem\" id=\"prevstudent\" icon=\"arrow-upward\" title=\"previous student\"></simple-icon-button>\n            <simple-icon-button on-click=\"_changeActiveItem\" id=\"nextstudent\" icon=\"arrow-downward\" title=\"next student\"></simple-icon-button>\n            <lrndesign-avatar class=\"ferpa-protect\" label=\"[[activeData.student.name]]\" src=\"[[activeData.student.avatar]]\" style=\"display:inline-block;vertical-align:middle;\"></lrndesign-avatar>\n            <span class=\"avatar-label ferpa-protect\" style=\"margin-left:1em;\">[[activeData.student.sis.sortable_name]]</span>\n          </span>\n          <simple-icon-button on-click=\"_changeActiveItem\" id=\"prevassignment\" icon=\"arrow-back\" title=\"previous assignment\" style=\"margin-left:1em;\"></simple-icon-button>\n          <simple-icon-button on-click=\"_changeActiveItem\" id=\"nextassignment\" icon=\"arrow-forward\" title=\"next assignment\"></simple-icon-button>\n          <span main-title>Assignment: [[activeData.assignment.title]]</span>\n          <button dialog-dismiss><simple-icon icon=\"close\"></simple-icon> Close</button>\n        </app-toolbar>\n      </app-header>\n      <div style=\"min-height:50vh;max-width:100%;\">\n        <div hidden$=\"[[!activeData.submission]]\">\n          <lrnapp-studio-submission-page base-path=\"[[basePath]]\" route=\"{{tail}}\" id=\"[[data.submission]]\" end-point=\"[[basePath]]lrnapp-studio-submission\" csrf-token=\"[[csrfToken]]\" hide-menu-bar modaled></lrnapp-studio-submission-page>\n        </div>\n        <div hidden$=\"[[activeData.submission]]\">\n          <div>\n            <h2>No submission for this assignment</h2>\n            <p>This student has not submitted anything for this assignment at this time.</p>\n          </div>\n        </div>\n      </div>\n    </paper-dialog>"])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-instructor";
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_routeChanged(route, endPoint)", "_activeDataChanged(activeData.student, activeData.assignment)"];
      }
    }, {
      key: "properties",
      get: function get() {
        var _ref;

        return _ref = {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },
          sourceProjectPath: {
            type: String
          },
          sourceStudentPath: {
            type: String
          },
          simplePickerOptions: {
            type: Array,
            value: [[{
              alt: "Submissions by Assignment",
              value: "byassignment-submissions"
            }], [{
              alt: "Comments by Assignment",
              value: "byassignment-comments"
            }], [{
              alt: "Commenters by Assignment",
              value: "byassignment-commenters"
            }]]
          },

          /**
           * Type of data to display, either submission centric or comment centric.
           * False = submission, true = comment
           */
          dataType: {
            type: Boolean,
            value: false,
            observer: "_dataTypeChanged"
          },
          dataTypeText: {
            type: String,
            value: "Submissions"
          },

          /**
           * The projects to render
           */
          projects: {
            type: Object,
            notify: true
          },

          /**
           * The assignments to render
           */
          assignments: {
            type: Object,
            notify: true
          },

          /**
           * The submissions to render
           */
          students: {
            type: Object,
            notify: true,
            value: false
          },

          /**
           * Internal value for mapping the raw response data.
           */
          _projectData: {
            type: Object,
            value: {}
          },

          /**
           * studentParams for the request
           */
          studentParams: {
            type: Object,
            value: {
              projectId: null,
              type: "submission"
            }
          },

          /**
           * Internal value for mapping the raw response data.
           */
          _studentData: {
            type: Object
          },

          /**
           * Internal width so they are all unified from editing this
           */
          _numWidth: {
            type: String,
            value: "2.25em"
          },

          /**
           * Endpoint for submission data.
           */
          sourcePath: {
            type: String,
            notify: true
          }
        }, babelHelpers.defineProperty(_ref, "basePath", {
          type: String,
          notify: true
        }), babelHelpers.defineProperty(_ref, "route", {
          type: String
        }), babelHelpers.defineProperty(_ref, "csrfToken", {
          type: String
        }), babelHelpers.defineProperty(_ref, "elmslnCourse", {
          type: String
        }), babelHelpers.defineProperty(_ref, "elmslnSection", {
          type: String
        }), babelHelpers.defineProperty(_ref, "data", {
          type: Object
        }), babelHelpers.defineProperty(_ref, "activeProject", {
          type: Number,
          value: false
        }), babelHelpers.defineProperty(_ref, "activeData", {
          type: Object,
          value: {
            student: false,
            assignment: false,
            submission: false
          }
        }), babelHelpers.defineProperty(_ref, "stats", {
          type: Object,
          value: {}
        }), babelHelpers.defineProperty(_ref, "activeChart", {
          type: Object,
          value: {}
        }), _ref;
      }
    }]);
    return LrnappStudioInstructor;
  }(_polymerElement.PolymerElement);

  _exports.LrnappStudioInstructor = LrnappStudioInstructor;
  customElements.define(LrnappStudioInstructor.tag, LrnappStudioInstructor);
});