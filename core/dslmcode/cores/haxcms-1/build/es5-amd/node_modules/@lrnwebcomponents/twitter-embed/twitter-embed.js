define(["exports", "meta", "../../lit/index.js"], function (_exports, meta, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TwitterEmbed = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_725ecf30809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var FALLBACK_LANG = "en";
  /**
   * `twitter-embed`
   * `A simple way to embed tweets from twitter without their whole API, with LitElement
   *
   * @demo demo/index.html
   * @element twitter-embed
   */

  var TwitterEmbed = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(TwitterEmbed, _LitElement);

    var _super = _createSuper(TwitterEmbed);

    /**
     * HTMLElement spec
     */
    function TwitterEmbed() {
      var _this;

      babelHelpers.classCallCheck(this, TwitterEmbed);
      _this = _super.call(this);
      _this.lang = document.body.getAttribute("xml:lang") || document.body.getAttribute("lang") || document.documentElement.getAttribute("xml:lang") || document.documentElement.getAttribute("lang") || navigator.language || FALLBACK_LANG;
      _this.dataWidth = "550px";
      _this.dataTheme = "light";
      _this.tweet = null;
      _this.tweetId = null;
      _this.allowPopups = "allow-popups";
      return _this;
    }
    /**
     * LitElement properties definition
     */


    babelHelpers.createClass(TwitterEmbed, [{
      key: "haxHooks",
      value:
      /**
       * Implements haxHooks to tie into life-cycle if hax exists.
       */
      function haxHooks() {
        return {
          gizmoRegistration: "haxgizmoRegistration",
          editModeChanged: "haxeditModeChanged",
          activeElementChanged: "haxactiveElementChanged"
        };
      }
      /**
       * Supply translations for the UI elements of HAX in meme-maker
       */

    }, {
      key: "haxgizmoRegistration",
      value: function haxgizmoRegistration(store) {
        window.dispatchEvent(new CustomEvent("i18n-manager-register-element", {
          detail: {
            namespace: "twitter-embed.haxProperties",
            localesPath: new URL("./locales", meta.url).href,
            locales: ["es"]
          }
        }));
      }
      /**
       * double-check that we are set to inactivate click handlers
       * this is for when activated in a duplicate / adding new content state
       */

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        if (val) {
          this._haxstate = val;
        }
      }
      /**
       * Set a flag to test if we should block link clicking on the entire card
       * otherwise when editing in hax you can't actually edit it bc its all clickable.
       * if editMode goes off this helps ensure we also become clickable again
       */

    }, {
      key: "haxeditModeChanged",
      value: function haxeditModeChanged(val) {
        this._haxstate = val;
      }
      /**
       * special support for HAX since the whole card is selectable
       */

    }, {
      key: "_clickPrevent",
      value: function _clickPrevent(e) {
        if (this._haxstate) {
          // do not do default
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
        }
      }
      /**
       * LitElement equivalent of attributeChangedCallback
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "noPopups") {
            if (_this2[propName]) {
              _this2.allowPopups = "";
            } else {
              _this2.allowPopups = "allow-popups";
            }
          }

          if (propName === "tweet" && _this2[propName] && _this2[propName].includes("twitter.com")) {
            _this2.tweetId = _this2[propName].split("/").pop();
          }
        });
      }
      /**
       * Popular convention / LitElement
       */

    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_725ecf30809211edaa2833647dc78c6c || (_templateObject_725ecf30809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div\n        @click=\"", "\"\n        class=\"twitter-tweet twitter-tweet-rendered\"\n        style=\"display: flex; max-width: ", "; width: 100%; margin-top: 10px; margin-bottom: 10px; pointer-events:", "\"\n      >\n        <iframe\n          .sandbox=\"allow-same-origin allow-scripts ", "\"\n          scrolling=\"no\"\n          frameborder=\"0\"\n          loading=\"lazy\"\n          allowtransparency=\"true\"\n          allowfullscreen\n          style=\"position: static; visibility: visible; width: ", "; height: 498px; display: block; flex-grow: 1;\"\n          title=\"Twitter Tweet\"\n          src=\"https://platform.twitter.com/embed/index.html?dnt=true&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=", "&amp;lang=", "&amp;theme=", "&amp;widgetsVersion=223fc1c4%3A1596143124634&amp;width=", "\"\n          data-tweet-id=\"", "\"\n        >\n        </iframe>\n      </div>\n    "])), this._clickPrevent, this.dataWidth, this._haxstate ? "none" : "inherit", this.allowPopups, this.dataWidth, this.tweetId, this.lang, this.dataTheme, this.dataWidth, this.tweetId);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "twitter-embed";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          tweet: {
            type: String
          },
          _haxstate: {
            type: Boolean
          },
          lang: {
            type: String
          },
          dataWidth: {
            type: String,
            attribute: "data-width"
          },
          dataTheme: {
            type: String,
            attribute: "data-theme"
          },
          tweetId: {
            type: String,
            attribute: "tweet-id"
          },
          noPopups: {
            type: Boolean,
            attribute: "no-popups"
          },
          allowPopups: {
            type: String
          }
        };
      }
      /**
       * Attached to the DOM, now fire.
       */

    }, {
      key: "haxProperties",
      get: function get() {
        return decodeURIComponent(meta.url) + "/../lib/twitter-embed.haxProperties.json";
      }
    }]);
    return TwitterEmbed;
  }(_index.LitElement);

  _exports.TwitterEmbed = TwitterEmbed;
  customElements.define(TwitterEmbed.tag, TwitterEmbed);
});