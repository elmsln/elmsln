define(["exports", "../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MicroCopyHeading = void 0;

  var _templateObject_ab70bd308e0011ed99ce491205e67b1d, _templateObject2_ab70bd308e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
    * `micro-copy-heading`
    * @element micro-copy-heading
    * `small call to action / attention that acts as a heading too`
    *
    * @microcopy - language worth noting:
    *  -
    *
   
    * @lit-element
    * @demo demo/index.html
    */
  var MicroCopyHeading = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(MicroCopyHeading, _LitElement);

    var _super = _createSuper(MicroCopyHeading);

    // life cycle
    function MicroCopyHeading() {
      var _this;

      babelHelpers.classCallCheck(this, MicroCopyHeading);
      _this = _super.call(this);
      _this.tag = MicroCopyHeading.tag; // map our imported properties json to real props on the element
      // @notice static getter of properties is built via tooling
      // to edit modify src/micro-copy-heading-properties.json

      var obj = MicroCopyHeading.properties;

      for (var p in obj) {
        if (obj.hasOwnProperty(p)) {
          if (_this.hasAttribute(p)) {
            _this[p] = _this.getAttribute(p);
          } else {
            _this.setAttribute(p, obj[p].value);

            _this[p] = obj[p].value;
          }
        }
      }

      return _this;
    }

    babelHelpers.createClass(MicroCopyHeading, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_ab70bd308e0011ed99ce491205e67b1d || (_templateObject_ab70bd308e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <h2>\n      ", "<span aria-hidden=\"true\">", "</span>\n    </h2>"])), this.heading, this.endcap);
      } // haxProperty definition

    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_ab70bd308e0011ed99ce491205e67b1d || (_templateObject2_ab70bd308e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          margin: 16px 0;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        span {\n          margin-left: 8px;\n        }\n\n        h2 {\n          display: inline-flex;\n          margin: unset;\n          padding: unset;\n          font-size: 0.75em;\n          color: var(--simple-colors-default-theme-red-5, #de2654);\n          border: 2px solid var(--simple-colors-default-theme-red-5, #de2654);\n          line-height: 12px;\n          margin-right: 10px;\n          text-transform: uppercase;\n          font-weight: 500;\n          letter-spacing: 0.09em;\n          padding: 6px 16px;\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Micro copy-heading",
            description: "small call to action / attention that acts as a heading too",
            icon: "icons:android",
            color: "green",
            groups: ["Copy"],
            handles: [],
            meta: {
              author: "HAXTheWeb",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "heading",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "endCap",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(MicroCopyHeading), "properties", this)), {}, {
          /**
           * Heading / call to action to display
           */
          heading: {
            name: "heading",
            type: String,
            value: "Telling our story"
          },

          /**
           * ending cap to the statement, possibly a character, icon, etc
           */
          endcap: {
            name: "endcap",
            type: String,
            value: "//"
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "micro-copy-heading";
      }
    }]);
    return MicroCopyHeading;
  }(_index.LitElement);

  _exports.MicroCopyHeading = MicroCopyHeading;
  customElements.define(MicroCopyHeading.tag, MicroCopyHeading);
});