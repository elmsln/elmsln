define(["exports", "../../../lit/index.js", "./simple-toolbar-button.js"], function (_exports, _index, _simpleToolbarButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleToolbarField = void 0;

  var _templateObject_de7eceb08e0011ed99ce491205e67b1d, _templateObject2_de7eceb08e0011ed99ce491205e67b1d, _templateObject3_de7eceb08e0011ed99ce491205e67b1d, _templateObject4_de7eceb08e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-toolbar-field`
   * a more button to toggle collapsed buttons in the rich text editor
   *
   * @customElement
   * @extends SimpleToolbarButtonBehaviors
   * @extends LitElement
   * @lit-html
   * @lit-element
   * @demo ./demo/buttons.html
   */
  var SimpleToolbarField = /*#__PURE__*/function (_SimpleToolbarButtonB) {
    babelHelpers.inherits(SimpleToolbarField, _SimpleToolbarButtonB);

    var _super = _createSuper(SimpleToolbarField);

    function SimpleToolbarField() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleToolbarField);
      _this = _super.call(this);
      _this.fullDisplay = false;

      _this.addEventListener("click", _this.toggleFocus);

      _this.observer.observe(babelHelpers.assertThisInitialized(_this), {
        childList: true,
        subtree: true
      });

      return _this;
    }

    babelHelpers.createClass(SimpleToolbarField, [{
      key: "buttonTemplate",
      get:
      /**
       * template for button, based on whether or not the button toggles
       *
       * @readonly
       */
      function get() {
        return this.fullDisplay ? (0, _index.html)(_templateObject_de7eceb08e0011ed99ce491205e67b1d || (_templateObject_de7eceb08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div\n            id=\"button\"\n            class=\"simple-toolbar-button\"\n            ?disabled=\"", "\"\n            part=\"button\"\n          >\n            ", "\n            <slot></slot>\n          </div>\n          ", ""])), this.disabled, this.buttonInnerTemplate, this.tooltipFullDisplayTemplate) : (0, _index.html)(_templateObject2_de7eceb08e0011ed99ce491205e67b1d || (_templateObject2_de7eceb08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div\n            id=\"button\"\n            class=\"simple-toolbar-button\"\n            ?disabled=\"", "\"\n            part=\"button\"\n          >\n            ", "\n            <span part=\"field\">\n              <slot></slot>\n            </span>\n          </div>\n          ", ""])), this.disabled, this.buttonInnerTemplate, this.tooltipTemplate);
      }
      /**
       * template for button tooltip
       *
       * @readonly
       */

    }, {
      key: "tooltipFullDisplayTemplate",
      get: function get() {
        return !this.tooltipVisible ? "" : (0, _index.html)(_templateObject3_de7eceb08e0011ed99ce491205e67b1d || (_templateObject3_de7eceb08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<simple-tooltip\n          id=\"tooltip\"\n          for=\"", "\"\n          offset=\"5\"\n          position=\"right\"\n          part=\"tooltip\"\n          fit-to-visible-bounds\n          >", "</simple-tooltip\n        >"])), !this.hasIcon ? "label" : "icon", this.currentTooltip || this.currentLabel);
      }
    }, {
      key: "focusableElement",
      get: function get() {
        return this.querySelector("*:not([disabled]):not([hidden])");
      }
    }, {
      key: "toggleFocus",
      value: function toggleFocus(e) {
        if (this.focusableElement.clientWidth > 10) {
          this.focusableElement.blur();
        } else {
          this.focus();
        }
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleToolbarField.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(SimpleToolbarField.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "isCurrentItem" && _this2.focusableElement) {
            _this2.focusableElement.setAttribute("tabindex", _this2.isCurrentItem ? 0 : -1);
          }
        });
      }
      /**
       * mutation observer for a11y-details
       * @readonly
       * @returns {object}
       */

    }, {
      key: "observer",
      get: function get() {
        var _this3 = this;

        var callback = function callback(mutationsList) {
          return _this3._watchChildren(mutationsList);
        };

        return new MutationObserver(callback);
      }
    }, {
      key: "_watchChildren",
      value: function _watchChildren(mutationsList) {
        if (this.focusableElement) this.focusableElement.setAttribute("tabindex", this.isCurrentItem ? 0 : -1);
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "simple-toolbar-field";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleToolbarField), "styles", this)), [(0, _index.css)(_templateObject4_de7eceb08e0011ed99ce491205e67b1d || (_templateObject4_de7eceb08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host([full-display]) {\n          min-width: 100px;\n          display: block;\n          padding-right: 3px;\n          overflow: visible;\n        }\n        *[part=\"button\"] {\n          height: auto;\n          width: auto;\n          align-self: stretch;\n          flex: 1 1 auto;\n        }\n        *[part=\"button\"]:hover {\n          opacity: 1;\n        }\n        *[part=\"button\"]:hover > *:not([part=\"field\"]) {\n          opacity: var(--simple-toolbar-button-hover-opacity, 0.8);\n        }\n        :host([full-display]) *[part=\"button\"] {\n          border-width: 0;\n        }\n        :host(:focus-within) *[part=\"button\"] {\n          color: var(--simple-toolbar-button-hover-color);\n          background-color: var(--simple-toolbar-button-hover-bg);\n          border-color: var(--simple-toolbar-button-hover-border-color);\n          opacity: var(--simple-toolbar-button-hover-opacity, 0.8);\n        }\n        *[part=\"field\"] {\n          width: 0;\n          height: 0;\n          flex: 0 0 0px;\n          display: flex;\n          align-items: center;\n          overflow: visible;\n        }\n        :host([icon-position=\"top\"]) *[part=\"field\"],\n        :host([icon-position=\"bottom\"]) *[part=\"field\"] {\n          flex-direction: column;\n        }\n        :host([align-horizontal=\"left\"]) *[part=\"field\"] {\n          align-items: flex-start;\n        }\n        :host([align-horizontal=\"right\"]) *[part=\"field\"] {\n          align-items: flex-end;\n        }\n        ::slotted(*) {\n          width: 10px;\n          flex: 1 1 auto;\n        }\n        :host(:not([full-display])) ::slotted(*) {\n          flex: 0 0 auto;\n          width: 0px;\n          opacity: 0;\n          padding: 0;\n          transition: width ease-in-out 0.5s, opacity 0.5s ease-in-out 0s;\n        }\n        :host([is-current-item]:not([full-display])) ::slotted(:focus) {\n          width: 100px;\n          opacity: 1;\n          padding: unset;\n          transition: width ease-in-out 0.5s;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleToolbarField), "properties", this)), {}, {
          fullDisplay: {
            type: Boolean,
            attribute: "full-display",
            reflect: true
          }
        });
      }
    }]);
    return SimpleToolbarField;
  }((0, _simpleToolbarButton.SimpleToolbarButtonBehaviors)(_index.LitElement));

  _exports.SimpleToolbarField = SimpleToolbarField;
  customElements.define(SimpleToolbarField.tag, SimpleToolbarField);
});