define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FluidType = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `fluid-type`
   * @element fluid-type
   * `A simple fluid-type sizing wrapper element to apply to anything`
   * @demo demo/index.html
   */
  var FluidType = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(FluidType, _HTMLElement);

    var _super = _createSuper(FluidType);

    /**
     * life cycle
     */
    function FluidType() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, FluidType);
      _this = _super.call(this); // set tag for later use

      _this.tag = FluidType.tag;
      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      if (!delayRender) {
        _this.render();
      }

      return _this;
    }
    /**
     * life cycle, element is afixed to the DOM
     */


    babelHelpers.createClass(FluidType, [{
      key: "html",
      get: // render function
      function get() {
        return "\n<style>\n:host {\n  --fluid-type-min-size: 1;\n  --fluid-type-max-size: 2;\n  --fluid-type-min-screen: 20;\n  --fluid-type-max-screen: 88;\n\n  font-size: calc(\n    (var(--fluid-type-min-size) * 1rem) + (var(--fluid-type-max-size) - var(--fluid-type-min-size)) * (100vw - (var(--fluid-type-min-screen) * 1rem)) /\n      (var(--fluid-type-max-screen) - var(--fluid-type-min-screen))\n  );\n}\n        </style>\n<slot></slot>";
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        if (window.ShadyCSS) {
          window.ShadyCSS.styleElement(this);
        }
      }
    }, {
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }], [{
      key: "tag",
      get: function get() {
        return "fluid-type";
      }
    }]);
    return FluidType;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.FluidType = FluidType;
  customElements.define(FluidType.tag, FluidType);
});