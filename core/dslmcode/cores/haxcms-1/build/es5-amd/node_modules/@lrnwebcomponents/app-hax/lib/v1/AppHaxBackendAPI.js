define(["exports", "../../../../lit/index.js", "../../../utils/utils.js", "../../../jwt-login/jwt-login.js", "../../../../mobx/dist/mobx.esm.js", "./AppHaxStore.js", "../../../simple-colors-shared-styles/simple-colors-shared-styles.js", "../../../simple-icon/lib/simple-iconset-manifest.js"], function (_exports, _index, _utils, _jwtLogin, _mobxEsm, _AppHaxStore, _simpleColorsSharedStyles, _simpleIconsetManifest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxBackendAPI = _exports.AppHaxAPI = void 0;

  var _templateObject_adeb0c008e0011ed99ce491205e67b1d;

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // this element will manage all connectivity to the backend
  // this way everything is forced to request through calls to this
  // so that it doesn't get messy down below in state
  var AppHaxBackendAPI = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(AppHaxBackendAPI, _LitElement);

    var _super = _createSuper(AppHaxBackendAPI);

    function AppHaxBackendAPI() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxBackendAPI);
      _this = _super.call(this);
      _this.jwt = (0, _utils.localStorageGet)("jwt", null);
      _this.method = window && window.appSettings && window.appSettings.demo ? "GET" : "POST";
      _this.basePath = "/";
      _this.lastResponse = {};
      _this.appSettings = {};
      (0, _mobxEsm.autorun)(function () {
        _this.appSettings = (0, _mobxEsm.toJS)(_AppHaxStore.store.appSettings); // allow setting in session driven environments

        if (_this.appSettings.method) {
          _this.method = _this.appSettings.method;
        }

        if (_this.appSettings.jwt) {
          _this.jwt = _this.appSettings.jwt;
        }
      });
      (0, _mobxEsm.autorun)(function () {
        _this.token = (0, _mobxEsm.toJS)(_AppHaxStore.store.token);
      });
      return _this;
    }

    babelHelpers.createClass(AppHaxBackendAPI, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_adeb0c008e0011ed99ce491205e67b1d || (_templateObject_adeb0c008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<jwt-login\n      jwt=\"", "\"\n      url=\"", "\"\n      method=\"", "\"\n      refresh-url=\"", "\"\n      redirect-url=\"", "\"\n      logout-url=\"", "\"\n      id=\"jwt\"\n      @jwt-changed=\"", "\"\n      @jwt-login-login-failed=\"", "\"\n    ></jwt-login>"])), this.jwt, this.appSettings.login, this.method, this.appSettings.refreshUrl, this.appSettings.redirectUrl, this.appSettings.logout, this.jwtChanged, this.jwtFailed);
      } // failed to get valid JWT, wipe current

    }, {
      key: "jwtFailed",
      value: function jwtFailed(e) {
        this.jwt = null;
        this.token = null;
      } // event meaning we either got or removed the jwt

    }, {
      key: "jwtChanged",
      value: function () {
        var _jwtChanged = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {
          var userData;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.jwt = e.detail.value; // sanity check we actually got a response
                  // this fires every time our JWT changes so it can update even after already logging in
                  // like hitting refresh or coming back to the app

                  if (!(!this.__loopBlock && this.jwt)) {
                    _context.next = 7;
                    break;
                  }

                  this.__loopBlock = true;
                  _context.next = 5;
                  return this.makeCall("getUserDataPath");

                case 5:
                  userData = _context.sent;

                  if (userData && userData.data) {
                    _AppHaxStore.store.user = {
                      name: userData.data.userName
                    };
                    this.__loopBlock = false;
                  }

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function jwtChanged(_x) {
          return _jwtChanged.apply(this, arguments);
        }

        return jwtChanged;
      }()
    }, {
      key: "makeCall",
      value: function () {
        var _makeCall = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(call) {
          var _this2 = this;

          var data,
              save,
              callback,
              urlRequest,
              options,
              response,
              _args2 = arguments;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  data = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                  save = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : false;
                  callback = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : false;

                  if (!(this.appSettings && this.appSettings[call])) {
                    _context2.next = 15;
                    break;
                  }

                  urlRequest = "".concat(this.basePath).concat(this.appSettings[call]);
                  options = {
                    method: this.method
                  };

                  if (this.jwt) {
                    data.jwt = this.jwt;
                  }

                  if (this.token) {
                    data.token = this.token;
                  } // encode in search params or body of the request


                  if (this.method === "GET") {
                    urlRequest += "?" + new URLSearchParams(data).toString();
                  } else {
                    options.body = JSON.stringify(data);
                  }

                  _context2.next = 11;
                  return fetch("".concat(urlRequest), options).then(function (response) {
                    if (response.ok) {
                      return response.json();
                    } else if (response.status === 401) {
                      // call not allowed, log out bc unauthorized
                      window.dispatchEvent(new CustomEvent("jwt-login-logout", {
                        composed: true,
                        bubbles: true,
                        cancelable: false,
                        detail: true
                      }));
                    } // we got a miss, logout cause something is wrong
                    else if (response.status === 404) {
                        // call not allowed, log out bc unauthorized
                        window.dispatchEvent(new CustomEvent("jwt-login-logout", {
                          composed: true,
                          bubbles: true,
                          cancelable: false,
                          detail: true
                        }));
                      } else if (response.status === 403) {
                        // if this was a 403 it should be because of a bad jwt
                        // or out of date one. let's kick off a call to get a new one
                        // hopefully from the timing token, knowing this ALSO could kick
                        // over here.
                        window.dispatchEvent(new CustomEvent("jwt-login-refresh-token", {
                          composed: true,
                          bubbles: true,
                          cancelable: false,
                          detail: {
                            element: {
                              obj: _this2,
                              callback: "refreshRequest",
                              params: [call, data, save, callback]
                            }
                          }
                        }));
                      }

                    return {};
                  });

                case 11:
                  response = _context2.sent;

                  // ability to save the output if this is being done as a bg task
                  // that way we can get access to the result later on
                  if (save) {
                    this.lastResponse[call] = response;
                  }

                  if (callback) {
                    callback();
                  }

                  return _context2.abrupt("return", response);

                case 15:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function makeCall(_x2) {
          return _makeCall.apply(this, arguments);
        }

        return makeCall;
      }()
      /**
       * Attempt to salvage the request that was kicked off
       * when our JWT needed refreshed
       */

    }, {
      key: "refreshRequest",
      value: function refreshRequest(jwt, response) {
        var call = response.call,
            data = response.data,
            save = response.save,
            callback = response.callback; // force the jwt to be the updated jwt
        // this helps avoid any possible event timing issue

        if (jwt) {
          this.jwt = jwt;
          this.makeCall(call, data, save, callback);
        }
      } // set instance of API in store

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxBackendAPI.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxBackendAPI.prototype), "firstUpdated", this).call(this, changedProperties);
        } // set store refernece to this singleton


        _AppHaxStore.store.AppHaxAPI = this; // site creation roped into the promise list
        // after knowing our data structure since we'll definitely call this

        _AppHaxStore.store.newSitePromiseList = [].concat(babelHelpers.toConsumableArray(_AppHaxStore.store.newSitePromiseList), [/*#__PURE__*/babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _this3.makeCall("createSite", _this3._formatSitePostData(), true);

                case 2:
                  return _context3.abrupt("return", _context3.sent);

                case 3:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }))]);
      } // just easier to read here

    }, {
      key: "_formatSitePostData",
      value: function _formatSitePostData() {
        var site = (0, _mobxEsm.toJS)(_AppHaxStore.store.site); // html contents if we are starting from a file import, otherwise its null

        var items = (0, _mobxEsm.toJS)(_AppHaxStore.store.items);
        var colors = Object.keys(_simpleColorsSharedStyles.SimpleColorsSharedStylesGlobal.colors);
        var buildData = {
          site: {
            name: site.name,
            description: "".concat(site.type, " ").concat(site.structure),
            theme: site.theme
          },
          build: {
            type: site.type,
            structure: site.structure,
            items: items
          },
          theme: {
            // select a random color
            color: colors[Math.floor(Math.random() * colors.length)],
            // select a random av icon
            icon: "".concat(_simpleIconsetManifest.SimpleIconIconsetsManifest[0].name, ":").concat(_simpleIconsetManifest.SimpleIconIconsetsManifest[0].icons[Math.floor(Math.random() * _simpleIconsetManifest.SimpleIconIconsetsManifest[0].icons.length)])
          }
        };
        return buildData;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxBackendAPI.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxBackendAPI.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "jwt") {
            _AppHaxStore.store.jwt = _this4[propName];
          }

          if (propName === "token") {
            _AppHaxStore.store.token = _this4[propName];
          }
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return "app-hax-backend-api";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          jwt: {
            type: String
          },
          basePath: {
            type: String,
            attribute: "base-path"
          },
          appSettings: {
            type: Object
          },
          method: {
            type: String
          },
          token: {
            type: String
          }
        };
      }
    }]);
    return AppHaxBackendAPI;
  }(_index.LitElement);

  _exports.AppHaxBackendAPI = AppHaxBackendAPI;
  window.AppHaxAPI = window.AppHaxAPI || {};

  window.AppHaxAPI.requestAvailability = function () {
    if (!window.AppHaxAPI.instance) {
      window.AppHaxAPI.instance = document.createElement(AppHaxBackendAPI.tag);
      document.body.appendChild(window.AppHaxAPI.instance);
    }

    return window.AppHaxAPI.instance;
  };

  var AppHaxAPI = window.AppHaxAPI.requestAvailability();
  _exports.AppHaxAPI = AppHaxAPI;
  customElements.define(AppHaxBackendAPI.tag, AppHaxBackendAPI);
});