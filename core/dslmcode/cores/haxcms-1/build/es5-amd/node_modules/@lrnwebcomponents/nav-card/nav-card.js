define(["exports", "../../lit/index.js", "../accent-card/accent-card.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "./lib/nav-card-item.js"], function (_exports, _index, _accentCard, _simpleIcon, _simpleIcons, _navCardItem) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.NavCard = void 0;

  var _templateObject_ab7ddc908e0011ed99ce491205e67b1d, _templateObject2_ab7ddc908e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `nav-card`
   * an accent card of link lists
   *
   * @customElement nav-card
   * @lit-html
   * @lit-element
   * @demo demo/index.html
   */
  var NavCard = /*#__PURE__*/function (_AccentCard) {
    babelHelpers.inherits(NavCard, _AccentCard);

    var _super = _createSuper(NavCard);

    // life cycle
    function NavCard() {
      var _this;

      babelHelpers.classCallCheck(this, NavCard);
      _this = _super.call(this);
      _this.tag = NavCard.tag;
      return _this;
    }

    babelHelpers.createClass(NavCard, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_ab7ddc908e0011ed99ce491205e67b1d || (_templateObject_ab7ddc908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <article id=\"card\">\n      <div class=\"image-outer\" ?hidden=\"", "\">\n        <div\n          class=\"image\"\n          .style=\"", "\"\n        ></div>\n      </div>\n      <div class=\"body\">\n        <h1 id=\"heading\"><slot name=\"heading\"></slot></h1>\n        <div id=\"subheading\"><slot name=\"subheading\"></slot></div>\n        <div id=\"content\">\n          <slot name=\"body\"></slot>\n          <div id=\"linklist\">\n            <slot name=\"linklist\"></slot>\n          </div>\n        </div>\n        <div id=\"footer\"><slot name=\"footer\"></slot></div>\n      </div>\n    </article>"])), !this.imageSrc, this.imageSrc ? "background-image: url(".concat(this.imageSrc, ");") : "display: none;");
      } // haxProperty definition

    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(NavCard), "styles", this)), [(0, _index.css)(_templateObject2_ab7ddc908e0011ed99ce491205e67b1d || (_templateObject2_ab7ddc908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --accent-card-content-padding-bottom: 0px;\n        }\n\n        ::slotted([slot=\"linklist\"]) {\n          --nav-card-item-color: var(--accent-card-color);\n          --nav-card-item-background-color: var(--accent-card-background-color);\n          margin-top: var(--nav-card-linklist-margin-top, 20px);\n          margin-bottom: var(--nav-card-linklist-margin-bottom, 20px);\n        }\n      "])))]);
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Nav card",
            description: "an accent card of link lists",
            icon: "av:playlist-play",
            color: "pink",
            groups: ["Card", "Nav", "List"],
            handles: [],
            meta: {
              author: "HAXTheWeb core team",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "accentColor",
              title: "Accent Color",
              description: "Select an accent color.",
              inputMethod: "colorpicker",
              required: false
            }, {
              property: "dark",
              title: "Dark",
              description: "Display the card as dark theme?",
              inputMethod: "boolean",
              required: false
            }, {
              property: "imageSrc",
              title: "Image",
              description: "Optional image",
              inputMethod: "haxupload"
            }, {
              slot: "heading",
              title: "Heading",
              inputMethod: "code-editor",
              required: false
            }, {
              slot: "subheading",
              title: "Subheading",
              inputMethod: "code-editor",
              required: false
            }, {
              slot: "body",
              title: "Body",
              inputMethod: "code-editor",
              required: false
            }, {
              property: "linkIcon",
              title: "Link Icon",
              description: "Select an icon.",
              inputMethod: "iconpicker",
              required: false
            }, {
              slot: "linklist",
              title: "Link List",
              inputMethod: "code-editor",
              required: false
            }, {
              slot: "footer",
              title: "Footer",
              inputMethod: "code-editor",
              required: false
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(NavCard), "properties", this));
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "nav-card";
      }
    }]);
    return NavCard;
  }(_accentCard.AccentCard);

  _exports.NavCard = NavCard;
  customElements.define("nav-card", NavCard);
});