define(["exports", "../../../lit/index.js", "../../utils/utils.js"], function (_exports, _index, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrsBridge = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrs-bridge`
   * `LRS element that captures lrn-emitter events and forwards them to the learnig record store.`
   * @demo demo/index.html
   */
  var LrsBridge = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(LrsBridge, _LitElement);

    var _super = _createSuper(LrsBridge);

    function LrsBridge() {
      var _this;

      babelHelpers.classCallCheck(this, LrsBridge);
      _this = _super.call(this);
      _this.endpoint = "";

      _this.addEventListener("lrs-emitter", _this._lrsEmitterHander.bind(babelHelpers.assertThisInitialized(_this)));

      return _this;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */


    babelHelpers.createClass(LrsBridge, [{
      key: "_lrsEmitterHander",
      value: function _lrsEmitterHander(e) {
        if (this._enableProperties) {
          this.recordStatement(e);
        }
      }
    }, {
      key: "recordStatement",
      value: function recordStatement(options) {
        console.log("options:", options);
        var query = {
          method: "POST",
          cors: "no-cors",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            query: "\n          mutation($data: StatementCreateInput!) {\n            createStatement(data: $data) {\n              id\n            }\n          }\n        ",
            variables: {
              data: {
                data: Object.assign({}, {
                  actor: {
                    name: this.getUserName()
                  }
                }, options)
              }
            }
          }, "utf8")
        };

        try {
          fetch(this.endpoint, query).then(function (res) {
            return res.json();
          }).then(function (res) {});
        } catch (error) {}
      }
      /**
       * Get the user name from local storage
       */

    }, {
      key: "getUserName",
      value: function getUserName() {
        var currentName = (0, _utils.localStorageGet)("lrs-name", "");

        if (!currentName) {
          var newName = this.makeGUID();
          (0, _utils.localStorageSet)("lrs-name", newName);
        }

        return currentName;
      }
      /**
       * Create a unique id
       */

    }, {
      key: "makeGUID",
      value: function makeGUID() {
        var s4 = function s4() {
          return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
        };

        return s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
      }
    }], [{
      key: "properties",
      get: // properties available to the custom element for data binding
      function get() {
        return {
          endpoint: {
            type: String
          }
        };
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrs-bridge";
      }
    }]);
    return LrsBridge;
  }(_index.LitElement);

  _exports.LrsBridge = LrsBridge;
  customElements.define(LrsBridge.tag, LrsBridge);
});