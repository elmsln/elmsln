define(["exports", "../../../../lit/index.js", "./rich-text-editor-picker.js", "../../../simple-picker/lib/simple-symbol-picker.js"], function (_exports, _index, _richTextEditorPicker, _simpleSymbolPicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorSymbolPicker = void 0;

  var _templateObject_b28cb5e0809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-symbol-picker`
   * a symbol picker for the rich-text-editor
   *
   * @customElement
   * @lit-html
   * @lit-element
   * @extends RichTextEditorPickerBehaviors
   * @extends LitElement
   * @element rich-text-editor-symbol-picker
   * @demo ./demo/buttons.html
   */
  var RichTextEditorSymbolPicker = /*#__PURE__*/function (_RichTextEditorPicker) {
    babelHelpers.inherits(RichTextEditorSymbolPicker, _RichTextEditorPicker);

    var _super = _createSuper(RichTextEditorSymbolPicker);

    function RichTextEditorSymbolPicker() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorSymbolPicker);
      _this = _super.call(this);
      _this.icon = "editor:functions";
      _this.label = "Insert symbol";
      _this.symbolTypes = ["symbols", "math", "characters", "greek", "misc"];
      _this.command = "insertHTML";
      return _this;
    }
    /**
     * overrides RichTextEditorPickerBehaviors
     * since simple-symbol-picker already handles options
     *
     * @memberof RichTextEditorSymbolPicker
     */


    babelHelpers.createClass(RichTextEditorSymbolPicker, [{
      key: "render",
      value: // render function for template
      function render() {
        return (0, _index.html)(_templateObject_b28cb5e0809211edaa2833647dc78c6c || (_templateObject_b28cb5e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <simple-symbol-picker\n        id=\"button\"\n        ?allow-null=\"", "\"\n        class=\"rtebutton ", "-label ", "\"\n        .controls=\"", "\"\n        ?disabled=\"", "\"\n        @keydown=\"", "\"\n        .label=\"", "\"\n        @mouseover=\"", "\"\n        .symbol-types=\"", "\"\n        tabindex=\"0\"\n        title-as-html\n        ?toggled=\"", "\"\n        @value-changed=\"", "\"\n      >\n      </simple-symbol-picker>\n      ", "\n    "])), this.allowNull, this.labelVisibleClass, this.toggled ? "toggled" : "", babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorSymbolPicker.prototype), "controls", this), this.disabled, this._pickerFocus, this.currentLabel, this._pickerFocus, this.symbolTypes, this.toggled, this._pickerChange, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorSymbolPicker.prototype), "tooltipTemplate", this));
      } // properties available to the custom element for data binding

    }, {
      key: "_setOptions",
      value: function _setOptions() {}
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       *
       */
      function get() {
        return "rich-text-editor-symbol-picker";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorSymbolPicker), "properties", this)), {}, {
          /**
           * Symbol types to include
           */
          symbolTypes: {
            name: "symbolTypes",
            type: Array,
            attribute: "symbol-types"
          }
        });
      }
    }]);
    return RichTextEditorSymbolPicker;
  }((0, _richTextEditorPicker.RichTextEditorPickerBehaviors)(_index.LitElement));

  _exports.RichTextEditorSymbolPicker = RichTextEditorSymbolPicker;
  customElements.define(RichTextEditorSymbolPicker.tag, RichTextEditorSymbolPicker);
});