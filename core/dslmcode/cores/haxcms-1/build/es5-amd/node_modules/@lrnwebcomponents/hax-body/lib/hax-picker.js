define(["exports", "../../../lit/index.js", "./hax-ui-styles.js", "./hax-store.js", "./hax-element-demo.js", "../../simple-toolbar/lib/simple-button-grid.js", "../../simple-popover/lib/simple-popover-selection.js"], function (_exports, _index, _haxUiStyles, _haxStore, _haxElementDemo, _simpleButtonGrid, _simplePopoverSelection) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxPicker = void 0;

  var _templateObject_d7615da08e0011ed99ce491205e67b1d, _templateObject2_d7615da08e0011ed99ce491205e67b1d, _templateObject3_d7615da08e0011ed99ce491205e67b1d, _templateObject4_d7615da08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   `hax-picker`
   A picker for selecting an item from a list of apps / hax gizmos which require
   a decision to be made. This is used when multiple things match either on upload
   in the add operation of the app or in the gizmo selection to render through,
   such as having multiple ways of presenting an image.
  
  * @demo demo/index.html
  
  @microcopy - the mental model for this element
   - data - this is the app data model for an element which expresses itself to hax
  */
  var HaxPicker = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HaxPicker, _LitElement);

    var _super = _createSuper(HaxPicker);

    function HaxPicker() {
      var _this;

      babelHelpers.classCallCheck(this, HaxPicker);
      _this = _super.call(this);
      _this._elements = [];
      _this.selectionList = [];
      _this.pickerType = "gizmo";
      return _this;
    }

    babelHelpers.createClass(HaxPicker, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_d7615da08e0011ed99ce491205e67b1d || (_templateObject_d7615da08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      ", "\n      <simple-button-grid cols=\"100px\">\n        ", "\n      </simple-button-grid>\n    "])), !!this.keywords ? (0, _index.html)(_templateObject2_d7615da08e0011ed99ce491205e67b1d || (_templateObject2_d7615da08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div id=\"filters\">\n            <simple-icon-button-lite\n              icon=\"editable-table:filter", "\"\n              label=\"Toggle Filters\"\n              tooltip-position=\"right\"\n              @click=\"", "\"\n            >\n            </simple-icon-button-lite>\n            <simple-fields-field\n              ?hidden=\"", "\"\n              id=\"hax-gizmo-filters\"\n              label=\"Filters\"\n              type=\"checkbox\"\n              .options=\"", "\"\n              @value-changed=\"", "\"\n            >\n            </simple-fields-field>\n          </div>"])), !this.filterOn ? "" : "-off", function (e) {
          return _this2.filterOn = !_this2.filterOn;
        }, !this.filterOn, this.keywords, this._handleFilters) : "", this.selectionList.map(function (element, index) {
          return !_this2._isFiltered(element.keywords) ? "" : (0, _index.html)(_templateObject3_d7615da08e0011ed99ce491205e67b1d || (_templateObject3_d7615da08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                <simple-popover-selection event=\"hover\">\n                  <hax-tray-button\n                    show-text-label\n                    id=\"picker-item-", "\"\n                    @click=\"", "\"\n                    data-selected=\"", "\"\n                    ?disabled=\"", "\"\n                    label=\"", "\"\n                    icon=\"", "\"\n                    icon-position=\"top\"\n                    slot=\"button\"\n                  ></hax-tray-button>\n                  <hax-element-demo\n                    tag-name=\"", "\"\n                    slot=\"options\"\n                    active-picker-schema=\"", "\"\n                  ></hax-element-demo>\n                </simple-popover-selection>\n              "])), index, _this2._selected, index, _haxStore.HAXStore.activeGizmo && _haxStore.HAXStore.activeGizmo.tag == element.tag, element.title, element.icon, element.tag, index);
        }));
      }
    }, {
      key: "buildOptions",
      value:
      /**
       * Present options to the user with a modal and selection method that
       * shifts itself to be above everything (stack order)
       * @param  [array] elements  a list of elements for presenting to the user
       * to select between.
       */
      function buildOptions(elements) {
        var _this3 = this;

        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "element";
        var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Select an option";
        var pickerType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "gizmo";
        // wipe existing
        this.pickerType = pickerType;

        var tmp = [],
            addKeywords = function addKeywords(i) {
          if (pickerType === "gizmo") {
            elements[i].gizmo.keywords.forEach(function (keyword) {
              keyword = (keyword || "").toLowerCase();
              var sanitized = keyword.replace(/[\s\W]*/, "");
              if (sanitized.length > 0) _this3.keywords[keyword] = keyword;
            });
          } else if (pickerType === "app") {
            elements[i].details.tag.forEach(function (keyword) {
              keyword = (keyword || "").toLowerCase();
              var sanitized = keyword.replace(/[\s\W]*/, "");
              if (sanitized.length > 0) _this3.keywords[keyword] = keyword;
            });
          }
        };

        this.keywords = {};

        switch (pickerType) {
          // hax gizmo selector
          case "gizmo":
            for (var i in elements) {
              elements[i].__type = type;
              tmp.push({
                icon: elements[i].gizmo.icon,
                title: elements[i].gizmo.title,
                color: elements[i].gizmo.color,
                tag: elements[i].gizmo.tag,
                keywords: elements[i].gizmo.keywords
              });
              addKeywords(i);
            }

            break;
          // app selector

          case "app":
            for (var i in elements) {
              tmp.push({
                icon: elements[i].details.icon,
                title: elements[i].details.title,
                color: elements[i].details.color,
                tag: elements[i].details.tags || [],
                keywords: elements[i].details.tags || []
              });
              addKeywords(i);
            }

            break;
          // we don't know what to do with this

          default:
            tmp = elements;
            break;
        }

        this._elements = elements;
        this.selectionList = babelHelpers.toConsumableArray(tmp); // try to focus on option 0

        setTimeout(function () {
          _this3.shadowRoot.querySelector("#picker-item-0").focus();
        }, 50);
      }
    }, {
      key: "_handleFilters",
      value: function _handleFilters(e) {
        var filters = this.shadowRoot && this.shadowRoot.querySelector("#hax-gizmo-filters") ? this.shadowRoot.querySelector("#hax-gizmo-filters") : undefined;
        if (filters) this.filters = filters.value;
      }
    }, {
      key: "_isFiltered",
      value: function _isFiltered(keywords) {
        var i = 0,
            filtered = !this.filterOn || !this.filters || this.filters.length < 1;

        while (!filtered && i < this.filters.length) {
          if (keywords.includes(this.filters[i])) filtered = true;
          i++;
        }

        return filtered;
      }
      /**
       * Handle the user selecting an app.
       */

    }, {
      key: "_selected",
      value: function _selected(e) {
        var key = e.target.getAttribute("data-selected");
        e.preventDefault();
        e.stopPropagation();

        if (babelHelpers.typeof(this._elements[key]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // haxElement is a unique case
          if (this.pickerType == "gizmo") {
            this._elements[key].replace = true;
            this.dispatchEvent(new CustomEvent("hax-insert-content", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: this._elements[key]
            }));
          } else {
            // bubble this up
            this.dispatchEvent(new CustomEvent("hax-app-picker-selection", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: this._elements[key]
            }));
          }
        }

        this.close();
      }
    }, {
      key: "close",
      value: function close() {
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(_haxUiStyles.HaxComponentStyles), [(0, _index.css)(_templateObject4_d7615da08e0011ed99ce491205e67b1d || (_templateObject4_d7615da08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        simple-button-grid {\n          overflow-y: auto;\n          margin: var(--hax-ui-spacing-sm);\n          --simple-button-grid-cols: 100px;\n        }\n        #filters {\n          min-height: 24px;\n        }\n        simple-icon-button-lite {\n          float: right;\n          margin-left: -24px;\n        }\n        simple-fields-field::part(fieldset-legend) {\n          line-height: 24px;\n        }\n        simple-fields-field::part(fieldset-options) {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n        }\n        simple-fields-field::part(option) {\n          display: flex;\n          flex-wrap: no-wrap;\n          align-items: center;\n          justify-content: space-between;\n          margin: 0 var(--simple-fields-margin-small, 8px);\n          flex-direction: row-reverse;\n        }\n        simple-fields-field::part(option-inner) {\n          flex: 0 0 auto;\n          margin: 0 calc(var(--simple-fields-margin-small, 8px) * 0.5) 0 0;\n        }\n        simple-fields-field::part(option-label) {\n          flex: 1 1 auto;\n          margin: 0;\n          font-size: var(--hax-ui-font-size-sm, 13px);\n        }\n        :host([filter-on]) simple-button-grid {\n          margin-bottom: var(--simple-fields-margin-small, 8px);\n        }\n        :host([filter-on]) #hax-gizmo-filters {\n          margin-bottom: 0;\n        }\n        :host([filter-on]) ::part(fieldset-options) {\n          padding-bottom: var(--simple-fields-margin-small, 8px);\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-picker";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * raw element set
           */
          _elements: {
            type: Array
          },
          keywords: {
            type: Object
          },

          /**
           * Refactored list for selection purposes
           */
          selectionList: {
            type: Array
          },

          /**
           * Allow multiple uses
           */
          pickerType: {
            type: String,
            attribute: "picker-type"
          },
          filters: {
            type: Array
          },
          filterOn: {
            type: Boolean,
            attribute: "filter-on",
            reflect: true
          }
        };
      }
    }]);
    return HaxPicker;
  }(_index.LitElement);

  _exports.HaxPicker = HaxPicker;
  customElements.define(HaxPicker.tag, HaxPicker);
});