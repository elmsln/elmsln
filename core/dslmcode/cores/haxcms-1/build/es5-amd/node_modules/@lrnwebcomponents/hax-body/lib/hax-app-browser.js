define(["exports", "require", "../../../lit/index.js", "./hax-tray-button.js", "./hax-store.js", "../../../mobx/dist/mobx.esm.js"], function (_exports, _require, _index, _haxTrayButton, _haxStore, _mobxEsm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxAppBrowser = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_d70f46008e0011ed99ce491205e67b1d, _templateObject2_d70f46008e0011ed99ce491205e67b1d, _templateObject3_d70f46008e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-app-browser`
   * @element hax-app-browser
   *
   * `Browse a list of apps. This provides a listing of our gizmos that we've integrated with.`
   * @microcopy - the mental model for this element
   * - hax-app - expression of how to communicate and visualize a data source
   * - gizmo - silly name for the general public when talking about hax-app and what it provides in the end
   */
  var HaxAppBrowser = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HaxAppBrowser, _LitElement);

    var _super = _createSuper(HaxAppBrowser);

    function HaxAppBrowser() {
      var _this;

      babelHelpers.classCallCheck(this, HaxAppBrowser);
      _this = _super.call(this);

      _this.addEventListener("hax-tray-button-click", function (e) {
        if (e.detail.eventName === "search-selected") {
          _this.searching = true;
          _haxStore.HAXStore.activeApp = (0, _mobxEsm.toJS)(_this.appList[e.detail.index]);
        } else if (e.detail.eventName === "cancel-search") {
          _this.searching = false;
        }
      });

      _this.searching = false;
      _this.appList = [];
      _this.activeApp = null;
      _this.hasActive = false;
      new Promise(function (res, rej) {
        return _require.default(["./hax-app-search.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../simple-toolbar/lib/simple-button-grid.js"], res, rej);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.appList = (0, _mobxEsm.toJS)(_haxStore.HAXStore.appList);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.activeApp = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeApp);
      });
      return _this;
    }

    babelHelpers.createClass(HaxAppBrowser, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_d70f46008e0011ed99ce491205e67b1d || (_templateObject_d70f46008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <simple-button-grid\n        class=\"", "\"\n        always-expanded\n        columns=\"4\"\n      >\n        ", "\n      </simple-button-grid>\n      <hax-app-search\n        id=\"haxappsearch\"\n        class=\"", "\"\n      ></hax-app-search>\n      <slot></slot>\n    "])), this.searching ? "collapse-hide" : "", this.appList.map(function (app) {
          return (0, _index.html)(_templateObject2_d70f46008e0011ed99ce491205e67b1d || (_templateObject2_d70f46008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n            <hax-tray-button\n              class=\"", "\"\n              show-text-label\n              icon-position=\"top\"\n              index=\"", "\"\n              label=\"", "\"\n              icon=\"", "\"\n              color=\"", "\"\n              event-name=\"search-selected\"\n              event-data=\"", "\"\n            >\n            </hax-tray-button>\n          "])), _this2.searching ? "visibility-hidden" : "", app.index, app.details.title, app.details.icon, app.details.color, app.index);
        }), !this.searching ? "visibility-hidden" : "");
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "activeApp" && _this3[propName]) {
            _this3._activeAppChanged(_this3[propName], oldValue);
          }

          if (propName == "appList" && _this3[propName] && _this3.shadowRoot) {
            _this3.searching = false;
          }
        });
      }
      /**
       * Active app updated, so scroll it into view
       */

    }, {
      key: "_activeAppChanged",
      value: function _activeAppChanged(newValue, oldValue) {
        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && newValue != null) {
          this.hasActive = true;
        } else {
          this.hasActive = false;
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxAppBrowser.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxAppBrowser.prototype), "firstUpdated", this).call(this, changedProperties);
        } // app list registers early and has no imports so on
        // fast environments it's alreayd loaded


        this.searching = false;
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject3_d70f46008e0011ed99ce491205e67b1d || (_templateObject3_d70f46008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          overflow-y: auto;\n          position: relative;\n        }\n        simple-button-grid {\n          overflow: auto;\n        }\n        simple-button-grid.collapse-hide {\n          max-height: 0 !important;\n          transition: all 0.5s;\n        }\n        hax-tray-button {\n          font-size: 11px;\n          --hax-ui-font-size-sm: 11px;\n        }\n        .visibility-hidden {\n          z-index: -1;\n          visibility: hidden;\n          opacity: 0;\n          height: 0;\n          transition: all 0.5s;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-app-browser";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Search term
           */
          search: {
            type: String
          },

          /**
           * Searching mode
           */
          searching: {
            type: Boolean,
            reflect: true
          },

          /**
           * Global activeApp object.
           */
          activeApp: {
            type: Object
          },

          /**
           * If we have an active, scale everything
           */
          hasActive: {
            reflect: true,
            type: Boolean,
            attribute: "has-active"
          },
          appList: {
            type: Array
          }
        };
      }
    }]);
    return HaxAppBrowser;
  }(_index.LitElement);

  _exports.HaxAppBrowser = HaxAppBrowser;
  customElements.define(HaxAppBrowser.tag, HaxAppBrowser);
});