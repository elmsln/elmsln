define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/legacy/class.js", "../../../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js"], function (_exports, _polymerElement, _class, _ironA11yKeysBehavior) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PaperSearchBar = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var PaperSearchBar = /*#__PURE__*/function (_mixinBehaviors) {
    babelHelpers.inherits(PaperSearchBar, _mixinBehaviors);

    var _super = _createSuper(PaperSearchBar);

    function PaperSearchBar() {
      var _this;

      babelHelpers.classCallCheck(this, PaperSearchBar);
      _this = _super.call(this);
      setTimeout(function () {
        _this.addEventListener("keypress", _this._search.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }

    babelHelpers.createClass(PaperSearchBar, [{
      key: "focus",
      value: function focus() {
        this.shadowRoot.querySelector("#input").focus();
      } // Private methods

    }, {
      key: "_filter",
      value: function _filter(e) {
        this.dispatchEvent(new CustomEvent("paper-search-filter", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: true
        }));
      }
    }, {
      key: "_clear",
      value: function _clear() {
        this.query = "";
        this.shadowRoot.querySelector("#input").focus();
        this.dispatchEvent(new CustomEvent("paper-search-clear", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: true
        }));
      }
    }, {
      key: "_search",
      value: function _search(e) {
        if (e.keyCode == 13) {
          //Enter
          this.dispatchEvent(new CustomEvent("paper-search-search", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: true
          }));
          return false;
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "paper-search-bar";
      }
      /**
       * Fired when the user requests to open the filtering dialog
       *
       * @event paper-search-filter
       */

      /**
       * Fired when the user requests to search for a query
       *
       * @event paper-search-search
       */

      /**
       * Fired when the user taps the clear icon
       *
       * @event paper-search-clear
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Text for which the user is searching
           */
          query: {
            type: String,
            notify: true,
            value: ""
          },

          /**
           * Whether to hide the Filter button. Set attribute "hide-filter-button" to do so.
           */
          hideFilterButton: {
            type: Boolean,
            value: false
          },

          /**
           * Whether to disable the Filter button. Set attribute "disable-filter-button" to do so.
           */
          disableFilterButton: {
            type: Boolean,
            value: false
          },

          /**
           * Number of filters the user has been selected (shown in the badge) (optional)
           */
          nrSelectedFilters: {
            type: Number,
            value: 0
          },

          /**
           * Icon shown in the search background
           */
          icon: {
            type: String,
            value: "search"
          },

          /**
           * Text shown in the search box if the user didn't enter any query
           */
          placeholder: {
            type: String,
            value: "Search"
          }
        };
      }
    }]);
    return PaperSearchBar;
  }((0, _class.mixinBehaviors)([_ironA11yKeysBehavior.IronA11yKeysBehavior], _polymerElement.PolymerElement));

  _exports.PaperSearchBar = PaperSearchBar;
  customElements.define(PaperSearchBar.tag, PaperSearchBar);
});