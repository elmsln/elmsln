define(["exports", "../../../lit/index.js", "../simple-colors.js", "../../simple-picker/simple-picker.js"], function (_exports, _index, _simpleColors, _simplePicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleColorsPicker = void 0;

  var _templateObject_a5b9c830809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-colors-picker`
   * a select element for changing `simple-colors` attributes in demos
   *
  ### Styling
  See demo of "all of the colors" (`demo/colors.html`) for styling.
  * 
   * @extends SimpleColors
   * @demo ./demo/picker.html demo
   * @see "../simple-colors.js"
   * @see "./demo/simple-colors-picker-demo.js"
   * @element simple-colors-picker
   */
  var SimpleColorsPicker = /*#__PURE__*/function (_SimplePickerBehavior) {
    babelHelpers.inherits(SimpleColorsPicker, _SimplePickerBehavior);

    var _super = _createSuper(SimpleColorsPicker);

    function SimpleColorsPicker() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleColorsPicker);
      _this = _super.call(this);
      _this.shades = false;
      _this.options = _this._getOptions(_this.colors, _this.shades, _this.dark);
      return _this;
    }

    babelHelpers.createClass(SimpleColorsPicker, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColorsPicker.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColorsPicker.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "colors") _this2.options = _this2._getOptions(_this2.colors, _this2.shades, _this2.dark);

          if (propName === "shades") {
            _this2.options = _this2._getOptions(_this2.colors, _this2.shades, _this2.dark);
            _this2.hideOptionLabels = _this2.shades;
          }

          if (propName === "dark") _this2.options = _this2._getOptions(_this2.colors, _this2.shades, _this2.dark);
        });
        if (this.__ready !== undefined) this._fireChangeEvent();
      } // properties available to the custom element for data binding

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColorsPicker.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColorsPicker.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        this.__ready = true;
      }
      /**
       * gets options for the selectors
       *
       * @param {object} the options object to convert
       */

    }, {
      key: "_getOptions",
      value: function _getOptions(colors, shades, dark) {
        var options = [],
            theme = dark !== false ? "dark" : "default";

        if (shades === false) {
          options = Object.keys(this.colors).map(function (key) {
            return [{
              alt: key,
              value: key
            }];
          });
          options.unshift([{
            alt: "none",
            value: null
          }]);
        } else {
          var colorNames = Object.keys(colors);

          var _loop = function _loop(i) {
            var shade = Object.keys(colors).map(function (key) {
              var name = key + "-" + (i + 1),
                  cssvar = "--simple-colors-" + theme + "-theme-" + name;
              return {
                alt: name,
                style: "background-color: var(" + cssvar + ")",
                value: cssvar
              };
            });
            options.push(shade);
          };

          for (var i = 0; i < colors[colorNames[0]].length; i++) {
            _loop(i);
          }
        }

        return options;
      }
      /**
       * Fires with any property change.
       *
       * @event change
       */

    }, {
      key: "_fireChangeEvent",
      value: function _fireChangeEvent() {
        this.dispatchEvent(new CustomEvent("change", {
          bubbles: true,
          detail: this
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColorsPicker), "styles", this)), [(0, _index.css)(_templateObject_a5b9c830809211edaa2833647dc78c6c || (_templateObject_a5b9c830809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColorsPicker), "properties", this)), {}, {
          /**
           * Show all shades instead of just main accent-colors
           */
          shades: {
            type: Boolean,
            reflect: true
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-colors-picker";
      }
    }]);
    return SimpleColorsPicker;
  }((0, _simplePicker.SimplePickerBehaviors)((0, _simpleColors.SimpleColorsSuper)(_index.LitElement)));

  _exports.SimpleColorsPicker = SimpleColorsPicker;
  customElements.define(SimpleColorsPicker.tag, SimpleColorsPicker);
});