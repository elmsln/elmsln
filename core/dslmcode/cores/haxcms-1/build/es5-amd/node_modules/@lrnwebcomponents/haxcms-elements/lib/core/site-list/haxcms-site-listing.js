define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../../../hax-logo/hax-logo.js", "../../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../jwt-login/jwt-login.js", "../../../../hexagon-loader/hexagon-loader.js", "../../../../json-outline-schema/json-outline-schema.js", "../../../../simple-toast/simple-toast.js", "../../../../simple-modal/simple-modal.js", "../../../../simple-datetime/simple-datetime.js", "../../../../simple-fields/simple-fields.js", "../../../../simple-fields/lib/simple-fields-field.js", "../../../../simple-modal/lib/simple-modal-template.js", "../../../../simple-colors/lib/simple-colors-polymer.js", "../../../../../@vaadin/vaadin-upload/vaadin-upload.js", "../../../../../@vaadin/vaadin-grid/vaadin-grid.js", "../../../../../@vaadin/vaadin-grid/vaadin-grid-column.js", "../../../../../@vaadin/vaadin-grid/vaadin-grid-sort-column.js", "../../../../../@vaadin/vaadin-grid/vaadin-grid-filter-column.js", "../../../../../@vaadin/vaadin-grid/vaadin-grid-selection-column.js", "../../../../simple-login/simple-login.js", "../../../../simple-login/lib/simple-login-avatar.js", "../../../../simple-colors/lib/simple-colors-picker.js", "../../../../../@polymer/paper-dialog/paper-dialog.js", "../../../../md-block/md-block.js", "../../../../simple-picker/simple-picker.js", "../../../../simple-icon-picker/simple-icon-picker.js", "../../../../simple-tooltip/simple-tooltip.js", "../../../../portal-launcher/portal-launcher.js", "../../../../json-outline-schema/lib/jos-render.js", "../../../../a11y-collapse/a11y-collapse.js", "../../../../a11y-collapse/lib/a11y-collapse-group.js", "../../../../simple-icon/lib/simple-icon-button.js", "../../../../simple-icon/lib/simple-icons.js", "../../../../simple-icon/simple-icon.js", "../../../../hax-iconset/lib/simple-hax-iconset.js", "../haxcms-site-store.js", "../../../../hax-body-behaviors/lib/HAXFields.js", "../../../../utils/utils.js"], function (_exports, _require, _polymerElement, _haxLogo, _ironAjax, _jwtLogin, _hexagonLoader, _jsonOutlineSchema, _simpleToast, _simpleModal, _simpleDatetime, _simpleFields, _simpleFieldsField, _simpleModalTemplate, _simpleColorsPolymer, _vaadinUpload, _vaadinGrid, _vaadinGridColumn, _vaadinGridSortColumn, _vaadinGridFilterColumn, _vaadinGridSelectionColumn, _simpleLogin, _simpleLoginAvatar, _simpleColorsPicker, _paperDialog, _mdBlock, _simplePicker, _simpleIconPicker, _simpleTooltip, _portalLauncher, _josRender, _a11yCollapse, _a11yCollapseGroup, _simpleIconButton, _simpleIcons, _simpleIcon, _simpleHaxIconset, _haxcmsSiteStore, _HAXFields, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSSiteListing = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_c2bfe590809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `haxcms-site-listing`
   * `A listing of all sites being managed by this instance.`
   */
  var HAXCMSSiteListing = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(HAXCMSSiteListing, _PolymerElement);

    var _super = _createSuper(HAXCMSSiteListing);

    /**
     * created life cycle
     */
    function HAXCMSSiteListing() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSSiteListing);
      _this = _super.call(this);
      _this.SimpleColors = new _simpleColorsPolymer.SimpleColorsPolymer();
      _this.HaxSchematizer = _HAXFields.HaxSchematizer;
      _this.HaxElementizer = _HAXFields.HaxElementizer;
      return _this;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     */


    babelHelpers.createClass(HAXCMSSiteListing, [{
      key: "_sitesResponseChanged",
      value:
      /**
       * Parse JSON Outline Schema for the items and bind that to sites
       */
      function _sitesResponseChanged(newValue, oldValue) {
        if (newValue) {
          if (babelHelpers.typeof(newValue.items) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.title = newValue.title;
            this.set("sites", []);
            this.set("sites", newValue.items);
            this.shadowRoot.querySelector("jos-render").items = newValue.items;
            this.notifyPath("sites.*");
          }
        }
      }
    }, {
      key: "cleanLocation",
      value: function cleanLocation(location) {
        if (location) {
          return location.replace("/_sites/", "").replace("/sites/", "").replace("/", "");
        }

        return location;
      }
    }, {
      key: "_userDataChanged",
      value: function _userDataChanged(newValue) {
        if (newValue.userName) {
          this.title = newValue.userName + " sites";
        }

        if (newValue.userPicture) {
          this.logoutPhoto = newValue.userPicture;
        }
      }
      /**
       * Show the login button if we have cause
       */

    }, {
      key: "showSpecialButtons",
      value: function showSpecialButtons(hideButton, loggedIn) {
        if (hideButton) {
          return false;
        }

        if (!loggedIn) {
          return false;
        }

        return true;
      }
    }, {
      key: "_selectedItemsChanged",
      value: function _selectedItemsChanged(newValue) {
        if (newValue && newValue.length > 0) {
          this.shadowRoot.querySelector("#ops").removeAttribute("hidden");
        } else {
          this.shadowRoot.querySelector("#ops").setAttribute("hidden", "hidden");
        }
      }
    }, {
      key: "_dataSourceChanged",
      value: function _dataSourceChanged(newValue) {
        if (newValue) {
          this._dataSource = newValue + "?" + Math.floor(Date.now() / 1000);
        }
      }
      /**
       * Request a user login if we need one or log out
       */

    }, {
      key: "_jwtLoggedIn",
      value: function _jwtLoggedIn(e) {
        if (e.detail) {
          this.loggedIn = true;
        } else {
          this.loggedIn = false;
        }
      }
      /**
       * A token refresh just failed so force to login prompt / state
       */

    }, {
      key: "_tokenRefreshFailed",
      value: function _tokenRefreshFailed(e) {
        this.jwt = null;
        this.loggedIn = false;
        this.dispatchEvent(new CustomEvent("jwt-login-logout", {
          composed: true,
          bubbles: true,
          cancelable: false,
          detail: {}
        }));
      }
      /**
       * Request a user login if we need one or log out
       */

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue) {
        if (newValue) {
          this.__editIcon = "icons:check";
        } else {
          this.__editIcon = "icons:create";
        }
      }
      /**
       * Open the new dialog when tapped
       */

    }, {
      key: "_addTap",
      value: function _addTap() {
        this._resetNewSiteForm();

        this.shadowRoot.querySelector("#createsite").opened = true;
      }
      /**
       * Open the import dialog when tapped
       */

    }, {
      key: "_importTap",
      value: function _importTap() {
        this.shadowRoot.querySelector("#importurl").value = "";
        this.shadowRoot.querySelector("#importsite").opened = true;
      }
      /**
       * Login state changed
       */

    }, {
      key: "_loggedInChanged",
      value: function _loggedInChanged(newValue, oldValue) {
        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          if (newValue) {
            document.body.setAttribute("data-logged-in", "data-logged-in");
            this.__loginText = "Log out";
            this.__loginIcon = "icons:account-circle";
            this.standardResponse("Welcome, log in successful!");
            this.shadowRoot.querySelector("#add").hidden = false;
          } else {
            document.body.removeAttribute("data-logged-in");
            this.__loginText = "Log in";
            this.__loginIcon = "icons:power-settings-new";
            this.standardResponse("You logged out");
            this.shadowRoot.querySelector("#add").hidden = true;
          }
        }
      }
      /**
       * Request a user login if we need one or log out
       */

    }, {
      key: "_jwtChanged",
      value: function _jwtChanged(newValue) {
        var _this2 = this;

        if (newValue) {
          this.__loginText = "Log out";
          this.__loginIcon = "icons:account-circle"; // see if we should update the photo from the webcam
          // this value is available if we hit camera snap earlier in the operation

          if (this.__cameraBlob) {
            var file = new File([this.__cameraBlob], "userPhoto" + Date.now() + ".jpg");
            this.shadowRoot.querySelector("#fileupload").target = this.__setUserPhotoPath + "&jwt=" + newValue;

            this.shadowRoot.querySelector("#fileupload")._addFile(file);

            this.shadowRoot.querySelector("#fileupload").uploadFiles();
          } // refresh user data request, delay this in case we uploaded a photo
          // @todo this is a lazy way of doing this


          setTimeout(function () {
            _this2.set("getUserDataParams", {});

            _this2.set("getUserDataParams", {
              jwt: newValue
            });

            _this2.notifyPath("getUserDataParams.*");

            _this2.shadowRoot.querySelector("#getuserdatarequest").generateRequest();
          }, 500);
        } else {
          this.__loginText = "Log in";
          this.__loginIcon = "icons:power-settings-new";
        }
      }
      /**
       * Toggle edit state
       */

    }, {
      key: "_editTap",
      value: function _editTap(e) {
        this.editMode = !this.editMode;
      }
      /**
       * _settingsTap
       */

    }, {
      key: "_settingsTap",
      value: function _settingsTap(e) {
        this._loadConfig();

        this.shadowRoot.querySelector("#settingsdialog").opened = true;
      }
      /**
       * force the request to regenerate
       */

    }, {
      key: "refreshData",
      value: function refreshData(e) {
        this.shadowRoot.querySelector("#loaddata").generateRequest();
      }
    }, {
      key: "_gridSelectedItemsChanged",
      value: function _gridSelectedItemsChanged(e) {
        // skip splicing, just rebuild whole object
        this.set("selectedItems", []);
        this.set("selectedItems", this.shadowRoot.querySelector("#grid").selectedItems);
      }
      /**
       * Attached life cycle
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteListing.prototype), "connectedCallback", this).call(this); // if we're on an insecure environment, hide the buttons for camera

        window.addEventListener("jwt-login-refresh-error", this._tokenRefreshFailed.bind(this));
        window.addEventListener("jwt-token", this.updateJwt.bind(this));

        if (!navigator.mediaDevices) {
          this.shadowRoot.querySelector("#snap").style.display = "none";
          this.shadowRoot.querySelector("#newsnap").style.display = "none";
        } // detect upload utilized


        this.shadowRoot.querySelector("#fileupload").addEventListener("upload-response", this.handleSetUserPhotoResponse.bind(this));

        if (this.jwt) {
          this.loggedIn = true;
        }

        window.addEventListener("sites-listing-refresh-data", this.refreshData.bind(this));
        setTimeout(function () {
          /**
           * These are our bad actors in polyfill'ed browsers.
           * This means that https://github.com/webcomponents/webcomponentsjs/commit/ce464bb533bf39b544c312906499a6044ee0d30d
           * explains things but basically if shadow-dom is polyfilled
           * then we can't safely execute a DOM manipulating execCommand.
           * This
           */
          if (document.head.createShadowRoot || document.head.attachShadow) {} else {
            console.warn("Shadow DOM missing, ALL YOUR IE R BELONG TO US");
            console.warn("HAXCMS DOES NOT LOVE YOUR OLD BROWSER FOR EDITING JUST VIEWING");
            console.warn("You get no authoring experience. Good day to you!");
            var evt = new CustomEvent("simple-toast-show", {
              bubbles: true,
              composed: true,
              cancelable: true,
              detail: {
                text: "WARNING: You are using a polyfilled browser. HAXcms requires modern browsers, please upgrade or switch to a modern browser to edit in HAXcms!",
                duration: 10000
              }
            });

            _this3.dispatchEvent(evt);
          }

          if (_this3.hideCamera) {
            _this3.shadowRoot.querySelector("#newsnap").classList.add("hide-camera");

            _this3.shadowRoot.querySelector("#snap").classList.add("hide-camera");

            _this3.shadowRoot.querySelector("#camera").classList.add("hide-camera");
          } else {
            new Promise(function (res, rej) {
              return _require.default(["../../../../simple-login/lib/simple-login-camera.js"], res, rej);
            });
          }

          _this3.addEventListener("simple-login-login", _this3.loginPromptEvent.bind(_this3));

          _this3.shadowRoot.querySelector("#grid").addEventListener("selected-items-changed", _this3._gridSelectedItemsChanged.bind(_this3));

          _this3.__loginPath = window.appSettings.login;
          _this3.__refreshPath = window.appSettings.refreshUrl;
          _this3.__logoutPath = window.appSettings.logout;
          _this3.__setConfigPath = window.appSettings.setConfigPath;
          _this3.__getUserDataPath = window.appSettings.getUserDataPath;
          _this3.__setUserPhotoPath = window.appSettings.setUserPhotoPath;
          _this3.__getConfigPath = window.appSettings.getConfigPath;
          _this3.__createNewSitePath = window.appSettings.createNewSitePath;
          _this3.__gitImportSitePath = window.appSettings.gitImportSitePath;
          _this3.__downloadSitePath = window.appSettings.downloadSitePath;
          _this3.__archiveSitePath = window.appSettings.archiveSitePath;
          _this3.__cloneSitePath = window.appSettings.cloneSitePath;
          _this3.__publishSitePath = window.appSettings.publishSitePath;
          _this3.__syncSitePath = window.appSettings.syncSitePath;
          _this3.__revertSitePath = window.appSettings.revertSitePath;
          _this3.__deleteSitePath = window.appSettings.deleteSitePath; // case where backend has set the JWT ahead of time
          // useful for systems that are managing login above HAXcms

          if (window.appSettings.jwt) {
            _this3.set("jwt", window.appSettings.jwt);
          }

          document.body.addEventListener("haxcms-load-site", _this3.loadActiveSite.bind(_this3));

          _this3.permissionsListen();

          _this3.shadowRoot.querySelector("#snap").addEventListener("click", function () {
            _this3.dispatchEvent(new CustomEvent("simple-login-camera-icon-click", {
              detail: _this3,
              bubbles: true,
              composed: true
            }));

            _this3.snapPhoto.bind(_this3);
          });

          _this3.shadowRoot.querySelector("#newsnap").addEventListener("click", function () {
            _this3.dispatchEvent(new CustomEvent("simple-login-cancel-icon-click", {
              detail: _this3,
              bubbles: true,
              composed: true
            }));

            _this3.clearPhoto.bind(_this3);
          });
        }, 0);
      }
    }, {
      key: "permissionsListen",
      value: function permissionsListen() {
        var _this4 = this;

        window.addEventListener("simple-login-camera-icon-click", /*#__PURE__*/babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _this4.snapPhoto();

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
        window.addEventListener("simple-login-cancel-icon-click", /*#__PURE__*/babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this4.clearPhoto();

                case 2:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        })));
      }
    }, {
      key: "snapPhoto",
      value: function () {
        var _snapPhoto = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(e) {
          var camera, img, selfie;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  camera = this.shadowRoot.querySelector("#camera"); // snap the photo to a blob

                  _context3.next = 3;
                  return camera.takeASnap().then(camera.imageBlob);

                case 3:
                  this.__cameraBlob = _context3.sent;
                  // make an img to show on screen
                  img = document.createElement("img"); // turn blob into a url to visualize locally

                  img.src = URL.createObjectURL(this.__cameraBlob);
                  camera.removeAttribute("autoplay");
                  selfie = this.shadowRoot.querySelector("#selfie");
                  selfie.innerHTML = ""; // append to dom so they see the photo

                  selfie.appendChild(img);
                  selfie.classList.add("has-snap");

                case 11:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function snapPhoto(_x) {
          return _snapPhoto.apply(this, arguments);
        }

        return snapPhoto;
      }()
    }, {
      key: "clearPhoto",
      value: function clearPhoto(e) {
        var camera = this.shadowRoot.querySelector("#camera");
        camera.setAttribute("autoplay", "autoplay");
        var selfie = this.shadowRoot.querySelector("#selfie");
        selfie.innerHTML = "";
        selfie.classList.remove("has-snap");
      }
      /**
       * User login brokering event to sent off to jwt-login events
       */

    }, {
      key: "loginPromptEvent",
      value: function loginPromptEvent(e) {
        this._loginUserRoutine({
          u: e.detail.u,
          p: e.detail.p
        });
      }
    }, {
      key: "_logoutUserRoutine",
      value: function _logoutUserRoutine() {
        this.dispatchEvent(new CustomEvent("jwt-login-logout", {
          composed: true,
          bubbles: true,
          cancelable: false,
          detail: {}
        }));
      }
    }, {
      key: "_loginUserRoutine",
      value: function _loginUserRoutine(detail) {
        this.dispatchEvent(new CustomEvent("jwt-login-login", {
          composed: true,
          bubbles: true,
          cancelable: false,
          detail: detail
        }));
      }
      /**
       * queue up the site creation form
       */

    }, {
      key: "_resetNewSiteForm",
      value: function _resetNewSiteForm() {
        // establish the theme options based on globals that were set
        var themeOptions = [];
        var firstTheme = null;

        for (var theme in window.appSettings.themes) {
          themeOptions[theme] = window.appSettings.themes[theme].name;

          if (!firstTheme) {
            firstTheme = theme;
          }
        }

        var fields = this.shadowRoot.querySelector("#createsitefields");
        fields.fields = [{
          property: "id",
          title: "id",
          description: "",
          inputMethod: "boolean",
          hidden: true
        }, {
          property: "manifest",
          inputMethod: "tabs",
          properties: [{
            property: "site",
            title: "Site details",
            properties: [{
              property: "name",
              title: "Site name",
              description: "This forms the folder name and metadata title for the site",
              inputMethod: "textfield",
              required: true
            }, {
              property: "theme",
              title: "Theme",
              description: "Design for presenting your new site",
              inputMethod: "select",
              allowNull: false,
              options: themeOptions,
              required: true
            }, {
              property: "description",
              title: "Description (optional)",
              description: "Addition detail, for personal use as well as search engine optimization",
              inputMethod: "textfield"
              /*,
              {
              property: "domain",
              title: "URL (optional)",
              description: "Optional domain name",
              inputMethod: "textfield"
              }*/

            }]
          }, {
            property: "theme",
            title: "Theme settings",
            properties: [
            /*              {
              property: "image",
              title: "Image",
              description:
                "The image is typically used as the banner in themes",
              inputMethod: "fileupload",
              validationType: "url",
              disabled: true
            },*/
            {
              property: "icon",
              title: "Pick an icon.",
              description: "The icon is used in some designs areas to help you know what site your on",
              inputMethod: "iconpicker"
            }, {
              property: "color",
              title: "Color",
              description: "Choose a primary color to tint the UI or be used in the theme",
              inputMethod: "colorpicker"
            }]
          }]
        }];
        fields.value = {
          id: false,
          manifest: {
            site: {
              name: "",
              description: "",
              //domain: "",
              theme: firstTheme
            },
            theme: {
              //image: "assets/banner.jpg",
              color: "blue",
              icon: "icons:add-circle-outline"
            }
          }
        };
      }
      /**
       * detached life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("jwt-login-refresh-error", this._tokenRefreshFailed.bind(this));
        window.removeEventListener("jwt-token", this.updateJwt.bind(this));
        window.removeEventListener("sites-listing-refresh-data", this.refreshData.bind(this));
        document.body.removeEventListener("haxcms-load-site", this.loadActiveSite.bind(this));
        this.removeEventListener("simple-login-login", this.loginPromptEvent.bind(this));
        this.shadowRoot.querySelector("#snap").removeEventListener("click", this.snapPhoto.bind(this));
        this.shadowRoot.querySelector("#newsnap").removeEventListener("click", this.clearPhoto.bind(this));
        this.shadowRoot.querySelector("#grid").removeEventListener("selected-items-changed", this._gridSelectedItemsChanged.bind(this));
        this.shadowRoot.querySelector("#jwt").removeEventListener("jwt-logged-in", this._jwtLoggedIn.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteListing.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Ready life cycle
       */

    }, {
      key: "ready",
      value: function ready() {
        var _this5 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteListing.prototype), "ready", this).call(this);
        this.shadowRoot.querySelector("#jwt").addEventListener("jwt-logged-in", this._jwtLoggedIn.bind(this));
        setTimeout(function () {
          _this5.shadowRoot.querySelector('[modal-id="help"]').associateEvents(_this5.shadowRoot.querySelector("#help"));
        }, 0);
        window.JSONOutlineSchema.requestAvailability();
        window.SimpleModal.requestAvailability();
        window.SimpleToast.requestAvailability();
        var jos = this.shadowRoot.querySelector("jos-render");
        jos.map = {
          tag: "course-card",
          path: "@lrnwebcomponents/product-card/lib/course-card.js",
          properties: {
            number: "title",
            name: function name(item) {
              return item.slug ? item.slug.replace("/_sites/", "").replace("/sites/", "").replace("/", "") : "";
            },
            zoom: true,
            url: "location",
            image: function image(item) {
              if (item.metadata.site && item.metadata.site.logo) {
                return item.slug + item.metadata.site.logo.replace(" ", "%20");
              }

              return item.slug + "assets/banner.jpg";
            },
            icon: function icon(item) {
              if (item.metadata.theme && item.metadata.theme.variables && item.metadata.theme.variables.icon) {
                return item.metadata.theme.variables.icon;
              }

              return "icons:android";
            },
            author: function author(item) {
              if (item.metadata.author && item.metadata.author.name) {
                return item.metadata.author.name;
              }

              return "";
            },
            accentColor: function accentColor(item) {
              if (item.metadata.theme && item.metadata.theme.variables && item.metadata.theme.variables.cssVariable) {
                return item.metadata.theme.variables.cssVariable.replace("--simple-colors-default-theme-", "").replace("-7", "");
              }

              return "";
            },
            size: "small",
            dark: true,
            alt: function alt(item) {
              return "Select to access " + item.title;
            }
          }
        };
      }
      /**
       * Simple method of loading whatever's been dictated as active.
       */

    }, {
      key: "loadActiveSite",
      value: function loadActiveSite(e) {
        var findSite = this.sites.filter(function (site) {
          if (site.id !== e.detail.id) {
            return false;
          }

          return true;
        });
        var item = findSite.pop(); // if location isn't there, push out to it

        if (item.slug) {
          window.open(item.slug);
        } else {
          window.open(this.basePath + "_sites/" + item.metadata.site.name + "/");
        }
      }
      /**
       * Import a site from a git repo
       */

    }, {
      key: "_gitImportSite",
      value: function _gitImportSite(e) {
        var values = Object.assign({
          jwt: this.jwt,
          site: {
            git: {
              url: this.shadowRoot.querySelector("#importurl").value
            }
          }
        });
        this.set("gitImportParams", {});
        this.set("gitImportParams", values);
        this.notifyPath("gitImportParams.*");
        this.shadowRoot.querySelector("#gitimportrequest").generateRequest();
      }
      /**
       * Create a new site button was clicked
       */

    }, {
      key: "_createSite",
      value: function _createSite(e) {
        var values = Object.assign({
          jwt: this.jwt
        }, this.shadowRoot.querySelector("#createsitefields").value.manifest);
        this.set("createParams", {});
        this.set("createParams", values);
        this.notifyPath("createParams.*");
        this.shadowRoot.querySelector("#createrequest").generateRequest();
      }
      /**
       * Download site button was hit, package and send a zip
       */

    }, {
      key: "_downloadSites",
      value: function () {
        var _downloadSites2 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(e) {
          var i;
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  this.set("downloadParams", {});
                  this.set("downloadParams", {
                    jwt: this.jwt,
                    site: {}
                  });
                  this.notifyPath("downloadParams.*");
                  _context4.t0 = _regeneratorRuntime().keys(this.selectedItems);

                case 4:
                  if ((_context4.t1 = _context4.t0()).done) {
                    _context4.next = 14;
                    break;
                  }

                  i = _context4.t1.value;
                  this.set("activeItem", {});
                  this.set("activeItem", this.selectedItems[i]);
                  this.set("downloadParams.site.name", this.selectedItems[i].metadata.site.name);
                  this.notifyPath("downloadParams.site.name");
                  _context4.next = 12;
                  return this.shadowRoot.querySelector("#downloadrequest").generateRequest();

                case 12:
                  _context4.next = 4;
                  break;

                case 14:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function _downloadSites(_x2) {
          return _downloadSites2.apply(this, arguments);
        }

        return _downloadSites;
      }()
      /**
       * Archive sites
       */

    }, {
      key: "_archiveSites",
      value: function () {
        var _archiveSites2 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(e) {
          var i;
          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  this.set("archiveParams", {});
                  this.set("archiveParams", {
                    jwt: this.jwt,
                    site: {}
                  });
                  this.notifyPath("archiveParams.*");
                  _context5.t0 = _regeneratorRuntime().keys(this.selectedItems);

                case 4:
                  if ((_context5.t1 = _context5.t0()).done) {
                    _context5.next = 14;
                    break;
                  }

                  i = _context5.t1.value;
                  this.set("activeItem", {});
                  this.set("activeItem", this.selectedItems[i]);
                  this.set("archiveParams.site.name", this.selectedItems[i].metadata.site.name);
                  this.notifyPath("archiveParams.site.name");
                  _context5.next = 12;
                  return this.shadowRoot.querySelector("#archiverequest").generateRequest();

                case 12:
                  _context5.next = 4;
                  break;

                case 14:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function _archiveSites(_x3) {
          return _archiveSites2.apply(this, arguments);
        }

        return _archiveSites;
      }()
      /**
       * Confirm delete
       */

    }, {
      key: "_bulkSitesConfirm",
      value: function _bulkSitesConfirm(e) {
        var path = (0, _utils.normalizeEventPath)(e);
        var target;

        while (!target && path && path.length > 0) {
          if (path[0].getAttribute("data-op")) {
            target = path[0].getAttribute("data-op");
          }

          path.shift();
        }

        this.activeOpertion = target;
        this.shadowRoot.querySelector("#confirm").opened = true;
      }
    }, {
      key: "_confirmBulkOperation",
      value: function () {
        var _confirmBulkOperation2 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(e) {
          return _regeneratorRuntime().wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return this["_" + this.activeOpertion + "Sites"]();

                case 2:
                  this.activeOpertion = "";
                  this.shadowRoot.querySelector("#grid").set("selectedItems", []);

                case 4:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function _confirmBulkOperation(_x4) {
          return _confirmBulkOperation2.apply(this, arguments);
        }

        return _confirmBulkOperation;
      }()
      /**
       * Delete sites
       */

    }, {
      key: "_deleteSites",
      value: function () {
        var _deleteSites2 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(e) {
          var i;
          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  this.set("deleteParams", {});
                  this.set("deleteParams", {
                    jwt: this.jwt,
                    site: {}
                  });
                  this.notifyPath("deleteParams.*");
                  _context7.t0 = _regeneratorRuntime().keys(this.selectedItems);

                case 4:
                  if ((_context7.t1 = _context7.t0()).done) {
                    _context7.next = 14;
                    break;
                  }

                  i = _context7.t1.value;
                  this.set("activeItem", {});
                  this.set("activeItem", this.selectedItems[i]);
                  this.set("deleteParams.site.name", this.selectedItems[i].metadata.site.name);
                  this.notifyPath("deleteParams.site.name");
                  _context7.next = 12;
                  return this.shadowRoot.querySelector("#deleterequest").generateRequest();

                case 12:
                  _context7.next = 4;
                  break;

                case 14:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function _deleteSites(_x5) {
          return _deleteSites2.apply(this, arguments);
        }

        return _deleteSites;
      }()
      /**
       * Clone sites
       */

    }, {
      key: "_cloneSites",
      value: function () {
        var _cloneSites2 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(e) {
          var i;
          return _regeneratorRuntime().wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  this.set("cloneParams", {});
                  this.set("cloneParams", {
                    jwt: this.jwt,
                    site: {}
                  });
                  this.notifyPath("cloneParams.*");
                  _context8.t0 = _regeneratorRuntime().keys(this.selectedItems);

                case 4:
                  if ((_context8.t1 = _context8.t0()).done) {
                    _context8.next = 14;
                    break;
                  }

                  i = _context8.t1.value;
                  this.set("activeItem", {});
                  this.set("activeItem", this.selectedItems[i]);
                  this.set("cloneParams.site.name", this.selectedItems[i].metadata.site.name);
                  this.notifyPath("cloneParams.site.name");
                  _context8.next = 12;
                  return this.shadowRoot.querySelector("#clonerequest").generateRequest();

                case 12:
                  _context8.next = 4;
                  break;

                case 14:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function _cloneSites(_x6) {
          return _cloneSites2.apply(this, arguments);
        }

        return _cloneSites;
      }()
      /**
       * Clone sites
       */

    }, {
      key: "_publishSites",
      value: function () {
        var _publishSites2 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(e) {
          var i;
          return _regeneratorRuntime().wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  this.set("publishParams", {});
                  this.set("publishParams", {
                    jwt: this.jwt,
                    site: {}
                  });
                  this.notifyPath("publishParams.*");
                  _context9.t0 = _regeneratorRuntime().keys(this.selectedItems);

                case 4:
                  if ((_context9.t1 = _context9.t0()).done) {
                    _context9.next = 14;
                    break;
                  }

                  i = _context9.t1.value;
                  this.set("activeItem", {});
                  this.set("activeItem", this.selectedItems[i]);
                  this.set("publishParams.site.name", this.selectedItems[i].metadata.site.name);
                  this.notifyPath("publishParams.site.name");
                  _context9.next = 12;
                  return this.shadowRoot.querySelector("#publishrequest").generateRequest();

                case 12:
                  _context9.next = 4;
                  break;

                case 14:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function _publishSites(_x7) {
          return _publishSites2.apply(this, arguments);
        }

        return _publishSites;
      }()
      /**
       * sync sites
       */

    }, {
      key: "_syncSites",
      value: function () {
        var _syncSites2 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(e) {
          var i;
          return _regeneratorRuntime().wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  this.set("syncParams", {});
                  this.set("syncParams", {
                    jwt: this.jwt,
                    site: {}
                  });
                  this.notifyPath("syncParams.*");
                  _context10.t0 = _regeneratorRuntime().keys(this.selectedItems);

                case 4:
                  if ((_context10.t1 = _context10.t0()).done) {
                    _context10.next = 14;
                    break;
                  }

                  i = _context10.t1.value;
                  this.set("activeItem", {});
                  this.set("activeItem", this.selectedItems[i]);
                  this.set("syncParams.site.name", this.selectedItems[i].metadata.site.name);
                  this.notifyPath("syncParams.site.name");
                  _context10.next = 12;
                  return this.shadowRoot.querySelector("#syncrequest").generateRequest();

                case 12:
                  _context10.next = 4;
                  break;

                case 14:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function _syncSites(_x8) {
          return _syncSites2.apply(this, arguments);
        }

        return _syncSites;
      }()
      /**
       * Load configuration
       */

    }, {
      key: "_loadConfig",
      value: function _loadConfig() {
        // pass along the jwt for user "session" purposes
        this.set("configParams", {});
        this.set("configParams", {
          jwt: this.jwt,
          token: this.createParams.token
        });
        this.notifyPath("configParams.*");
        this.shadowRoot.querySelector("#getconfigrequest").generateRequest();
      }
      /**
       * Save configuration
       */

    }, {
      key: "_saveConfig",
      value: function _saveConfig(e) {
        window.HAXCMS.config.values = this.shadowRoot.querySelector("#settingsform").value;
        this.set("setConfigParams", {});
        this.set("setConfigParams", {
          jwt: this.jwt,
          token: this.createParams.token,
          values: window.HAXCMS.config.values
        });
        this.notifyPath("setConfigParams.*");
        this.shadowRoot.querySelector("#setconfigrequest").generateRequest();
      }
      /**
       * Standard response that refreshes the listing too
       */

    }, {
      key: "standardResponse",
      value: function standardResponse(toast) {
        var refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (refresh) {
          this.dispatchEvent(new CustomEvent("sites-listing-refresh-data", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: true
          }));
        }

        this.dispatchEvent(new CustomEvent("simple-toast-show", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            text: toast,
            duration: 2000
          }
        }));
      }
      /**
       * Create a new site button was clicked
       */

    }, {
      key: "handleCreateResponse",
      value: function handleCreateResponse(e) {
        // update the listing data
        this._dataSource = this.dataSource + "?" + Math.floor(Date.now() / 1000);
        this.standardResponse(e.detail.response.title + " created!");
      }
      /**
       * Git import site response
       */

    }, {
      key: "handleGitImportResponse",
      value: function handleGitImportResponse(e) {
        // update the listing data
        this._dataSource = this.dataSource + "?" + Math.floor(Date.now() / 1000);
        this.standardResponse(e.detail.response.title + " imported!");
      }
    }, {
      key: "handleConfigResponse",
      value: function handleConfigResponse(e) {
        window.HAXCMS.config = e.detail.response;
        this.shadowRoot.querySelector("#settingsform").schema = {};
        this.shadowRoot.querySelector("#settingsform").schema = window.HAXCMS.config.schema;
        this.shadowRoot.querySelector("#settingsform").value = {};
        this.shadowRoot.querySelector("#settingsform").value = window.HAXCMS.config.values;
        window.dispatchEvent(new Event("resize"));
      }
    }, {
      key: "handleSetConfigResponse",
      value: function handleSetConfigResponse(e) {
        this.shadowRoot.querySelector("#settingsdialog").opened = false;
        this.standardResponse("HAXCMS configuration updated!");
      }
      /**
       * Load user data up from the backend
       */

    }, {
      key: "handleGetUserDataResponse",
      value: function handleGetUserDataResponse(e) {
        this.userData = e.detail.response.data;
      }
      /**
       * Callback after saving a photo to the backend
       */

    }, {
      key: "handleSetUserPhotoResponse",
      value: function handleSetUserPhotoResponse(e) {
        // remove this once we've saved it
        delete this.__cameraBlob;
        this.standardResponse("User photo saved!", false);
      }
      /**
       * Download a site
       */

    }, {
      key: "handleDownloadResponse",
      value: function handleDownloadResponse(e) {
        var element = document.createElement("a");
        element.setAttribute("href", e.detail.response.link);
        element.style.display = "none";
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
        this.standardResponse(this.activeItem.title + " downloaded!");
      }
    }, {
      key: "handleArchiveResponse",
      value: function handleArchiveResponse(e) {
        this.standardResponse(this.activeItem.title + " archived!");
      }
    }, {
      key: "handleDeleteResponse",
      value: function handleDeleteResponse(e) {
        this.standardResponse(this.activeItem.title + " deleted!");
      }
    }, {
      key: "handleCloneResponse",
      value: function handleCloneResponse(e) {
        this.standardResponse(this.activeItem.title + " cloned!");
      }
    }, {
      key: "handlePublishResponse",
      value: function handlePublishResponse(e) {
        this.standardResponse(this.activeItem.title + " published!");
      }
    }, {
      key: "handleSyncResponse",
      value: function handleSyncResponse(e) {
        this.standardResponse(this.activeItem.title + " published!");
      }
      /**
       * Handle the last error rolling in
       */

    }, {
      key: "lastErrorChanged",
      value: function lastErrorChanged(e) {
        if (e.detail.value) {
          var target = (0, _utils.normalizeEventPath)(e)[0]; // check for JWT needing refreshed vs busted but must be 403

          switch (parseInt(e.detail.value.status)) {
            // cookie data not found, need to go get it
            case 401:
              this.dispatchEvent(new CustomEvent("jwt-login-logout", {
                composed: true,
                bubbles: true,
                cancelable: false,
                detail: {
                  redirect: true
                }
              }));
              break;

            case 403:
              // if this was a 403 it should be because of a bad jwt
              // or out of date one. let's kick off a call to get a new one
              // hopefully from the timing token, knowing this ALSO could kick
              // over here.
              this.dispatchEvent(new CustomEvent("jwt-login-refresh-token", {
                composed: true,
                bubbles: true,
                cancelable: false,
                detail: {
                  element: {
                    obj: this,
                    callback: "refreshRequest",
                    params: [target]
                  }
                }
              }));
              break;

            default:
              console.error(e);
              var evt = new CustomEvent("simple-toast-show", {
                bubbles: true,
                composed: true,
                cancelable: true,
                detail: {
                  text: e.detail.value.status + " " + e.detail.value.statusText
                }
              });
              window.dispatchEvent(evt);
              break;
          }
        }
      }
    }, {
      key: "updateJwt",
      value: function updateJwt(e) {
        this.jwt = e.detail;
      }
      /**
       * Attempt to salvage the request that was kicked off
       * when our JWT needed refreshed
       */

    }, {
      key: "refreshRequest",
      value: function refreshRequest(jwt, element) {
        // force the jwt to be the updated jwt
        // this helps avoid any possible event timing issue
        this.jwt = jwt;
        element.body.jwt = jwt;
        setTimeout(function () {
          element.generateRequest();
        }, 0);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "haxcms-site-listing";
      } // render function

    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_c2bfe590809211edaa2833647dc78c6c || (_templateObject_c2bfe590809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors-shared-styles-polymer\">\n        simple-icon-button {\n          --simple-icon-button-ink-color: var(--haxcms-system-action-color);\n        }\n        .toolbar div.main-title {\n          margin-left: 50px;\n          font-size: 24px;\n        }\n        .toolbar {\n          display: flex;\n          padding: 8px;\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          color: var(--simple-colors-default-theme-accent-11, #111111);\n          background-color: var(\n            --simple-colors-default-theme-accent-2,\n            #eeeeee\n          );\n          z-index: 1;\n          line-height: 120%;\n          align-items: center;\n        }\n        a11y-collapse-group {\n          margin-top: 64px;\n        }\n        a11y-collapse div[slot=\"heading\"] {\n          height: 64px;\n          line-height: 64px;\n          font-size: 30px;\n          cursor: pointer;\n        }\n        jos-render {\n          --jos-render-margin: 0px;\n          --jos-render-padding: 8px;\n        }\n        course-card {\n          height: 350px;\n          width: 150px;\n          overflow: hidden;\n          --course-card-filter: grayscale(80%);\n        }\n        course-card:active,\n        course-card:hover {\n          --course-card-filter-hover: grayscale(0%);\n        }\n        vaadin-grid {\n          margin-top: 24px;\n          height: calc(100vh - 64px);\n        }\n        simple-datetime {\n          color: black;\n        }\n        vaadin-checkbox {\n          border: 1px solid black;\n          background-color: var(--simple-colors-default-theme-blue-1);\n        }\n        .login-prompt {\n          margin: 80px auto 0;\n          display: flex;\n          justify-content: center;\n        }\n        .login-prompt[hidden] {\n          display: none;\n        }\n        .login-prompt div#selfie {\n          position: absolute;\n          margin: 0;\n        }\n        .has-snap {\n          z-index: 3;\n        }\n        .hide-camera {\n          display: none;\n        }\n        .login-prompt div#selfie img {\n          z-index: 2;\n          position: absolute;\n          margin: 0 0 0 -138px;\n          height: 355px;\n          display: block;\n        }\n        simple-login {\n          background: #eeeeee;\n          color: var(--haxcms-system-bg);\n          --primary-color: var(--haxcms-system-bg);\n          --primary-text-color: var(--haxcms-system-bg);\n          --simple-fields-accent-color: var(--haxcms-system-action-color);\n          --login-btn-background-color: var(--haxcms-system-bg);\n          --login-btn-raised-background-color: var(\n            --haxcms-system-action-color\n          );\n          --login-form-color: var(--haxcms-system-bg);\n          --login-btn-width: 80%;\n          --login-btn-display: block;\n          text-align: center;\n        }\n        .forgot {\n          margin: 32px 0 -16px 0;\n          padding: 0;\n          font-size: 12px;\n          text-align: center;\n        }\n        hax-logo {\n          margin-top: -50px;\n          margin-bottom: 16px;\n          text-align: center;\n          --hax-logo-font-size: 24px;\n          --hax-logo-letter-spacing: 0px;\n        }\n        .camera-buttons {\n          width: 100%;\n          justify-content: center;\n          display: flex;\n        }\n        simple-modal-template[modal-id=\"help\"] {\n          --simple-modal-width: 60vw;\n        }\n        paper-dialog {\n          width: 60vw;\n        }\n        div.scrollable {\n          overflow: scroll;\n          height: 40vh;\n        }\n        h2.dialog-header {\n          background-color: var(--haxcms-site-listing-color-dark);\n          margin: 0;\n          padding: 28px;\n          color: var(--haxcms-site-listing-color-light);\n        }\n        .buttons {\n          text-align: center;\n          margin: 0 auto;\n          display: flex;\n          justify-content: center;\n          margin-top: 2em;\n          color: var(--haxcms-site-listing-color-dark);\n          font-weight: 500;\n        }\n        .action-button {\n          height: 48px;\n          background-color: var(--haxcms-site-listing-color-dark);\n          color: var(--haxcms-site-listing-color-light);\n          margin-right: 48px;\n        }\n        .action-button:hover,\n        .action-button:active,\n        .action-button:focus {\n          background-color: var(--haxcms-site-listing-color-hover);\n        }\n        button simple-icon {\n          margin-right: 4px;\n        }\n        simple-fields-field {\n          --simple-fields-accent-color: var(--haxcms-site-listing-color-hover);\n        }\n        .small-location {\n          font-size: 11px;\n          font-style: italic;\n        }\n        #grid {\n          font-size: 13px;\n        }\n        #loading {\n          z-index: 1000;\n          opacity: 1;\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          left: 0;\n          right: 0%;\n          padding: 50vh calc(50% - 127.5px);\n          transition: all linear 1s;\n          visibility: visible;\n          background-color: rgba(250, 250, 250, 0.8);\n        }\n        #loading[data-loading] {\n          opacity: 0;\n          visibility: hidden;\n          --hexagon-color: var(\n            --simple-colors-default-theme-light-blue-7,\n            #007ffc\n          );\n        }\n        a {\n          text-decoration: none;\n          color: black;\n        }\n        .site-title {\n          display: block;\n          font-size: 20px;\n          width: 100%;\n          min-width: unset;\n          text-decoration: underline;\n        }\n        .site-title:hover,\n        .site-title:active,\n        .site-title:focus {\n          text-decoration: none;\n        }\n        .operations button {\n          font-weight: 500;\n          color: black;\n          background-color: var(--haxcms-site-listing-color-light);\n          margin: 0 8px;\n          padding: 4px;\n          display: inline-flex;\n          font-size: 12px;\n          line-height: 24px;\n          cursor: pointer;\n        }\n        .operations button:hover,\n        .operations button:active,\n        .operations button:focus {\n          background-color: var(--haxcms-site-listing-color-light);\n          color: var(--haxcms-site-listing-color-hover);\n        }\n        .operations button span {\n          height: 24px;\n        }\n        .operations.right {\n          right: 0;\n          position: absolute;\n          display: inline-flex;\n        }\n        #add {\n          background-color: var(--haxcms-site-listing-color-hover);\n          color: var(--haxcms-site-listing-color-light);\n          transition: 0.2s all linear;\n        }\n        #add:hover,\n        #add:active,\n        #add:focus {\n          background-color: var(--haxcms-site-listing-color-light);\n          color: var(--haxcms-site-listing-color-hover);\n        }\n        .selected-operations {\n          margin: 0 16px;\n          transition: 0.3s linear all;\n          display: inline-flex;\n          visibility: visible;\n          opacity: 1;\n          align-content: center;\n          justify-content: space-evenly;\n          width: 100%;\n        }\n        *[hidden] {\n          visibility: hidden;\n          opacity: 0;\n          display: none;\n        }\n        .selected-operations button {\n          background-color: var(--haxcms-site-listing-color-light);\n          font-weight: 500;\n          font-size: 16px;\n          color: var(--haxcms-site-listing-color-dark);\n          margin: 0;\n          min-width: unset;\n          margin: 8px;\n          height: 48px;\n        }\n        .selected-operations button:active,\n        .selected-operations button:hover,\n        .selected-operations button:focus {\n          background-color: var(--haxcms-site-listing-color-hover);\n          color: var(--haxcms-site-listing-color-light) !important;\n        }\n        .danger {\n          color: var(--simple-colors-default-theme-red-7) !important;\n        }\n        .danger:hover {\n          color: var(--haxcms-site-listing-color-light) !important;\n        }\n        #userphoto {\n          width: 24px;\n          height: 24px;\n          margin-right: 4px;\n          border-radius: 50%;\n        }\n        @media screen and (max-width: 1080px) {\n          .selected-operations .small-hide {\n            display: none;\n          }\n        }\n        @media screen and (max-width: 800px) {\n          .main-title {\n            display: none;\n          }\n        }\n        @media screen and (max-width: 700px) {\n          .small-hide {\n            display: none;\n          }\n        }\n      </style>\n      <jwt-login\n        id=\"jwt\"\n        method=\"[[method]]\"\n        url=\"[[__loginPath]]\"\n        refresh-url=\"[[__refreshPath]]\"\n        logout-url=\"[[__logoutPath]]\"\n        jwt=\"{{jwt}}\"\n      ></jwt-login>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        id=\"loaddata\"\n        auto=\"\"\n        loading=\"{{__loading}}\"\n        url=\"[[dataSource]]\"\n        handle-as=\"json\"\n        debounce-duration=\"250\"\n        last-response=\"{{sitesResponse}}\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        id=\"createrequest\"\n        method=\"[[method]]\"\n        body=\"[[createParams]]\"\n        headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n        content-type=\"application/json\"\n        url=\"[[__createNewSitePath]]\"\n        handle-as=\"json\"\n        on-response=\"handleCreateResponse\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        id=\"gitimportrequest\"\n        method=\"[[method]]\"\n        body=\"[[gitImportParams]]\"\n        headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n        content-type=\"application/json\"\n        url=\"[[__gitImportSitePath]]\"\n        handle-as=\"json\"\n        on-response=\"handleGitImportResponse\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        id=\"downloadrequest\"\n        method=\"[[method]]\"\n        body=\"[[downloadParams]]\"\n        headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n        content-type=\"application/json\"\n        url=\"[[__downloadSitePath]]\"\n        handle-as=\"json\"\n        on-response=\"handleDownloadResponse\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        id=\"archiverequest\"\n        method=\"[[method]]\"\n        body=\"[[archiveParams]]\"\n        headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n        content-type=\"application/json\"\n        url=\"[[__archiveSitePath]]\"\n        handle-as=\"json\"\n        on-response=\"handleArchiveResponse\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        id=\"deleterequest\"\n        method=\"[[method]]\"\n        body=\"[[deleteParams]]\"\n        headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n        content-type=\"application/json\"\n        url=\"[[__deleteSitePath]]\"\n        handle-as=\"json\"\n        on-response=\"handleDeleteResponse\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        id=\"clonerequest\"\n        method=\"[[method]]\"\n        body=\"[[cloneParams]]\"\n        headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n        content-type=\"application/json\"\n        url=\"[[__cloneSitePath]]\"\n        handle-as=\"json\"\n        on-response=\"handleCloneResponse\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        id=\"publishrequest\"\n        method=\"[[method]]\"\n        body=\"[[publishParams]]\"\n        headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n        content-type=\"application/json\"\n        url=\"[[__publishSitePath]]\"\n        handle-as=\"json\"\n        on-response=\"handlePublishResponse\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        id=\"syncrequest\"\n        method=\"[[method]]\"\n        body=\"[[syncParams]]\"\n        headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n        content-type=\"application/json\"\n        url=\"[[__syncSitePath]]\"\n        handle-as=\"json\"\n        on-response=\"handleSyncResponse\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        id=\"getconfigrequest\"\n        method=\"[[method]]\"\n        body=\"[[configParams]]\"\n        headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n        content-type=\"application/json\"\n        url=\"[[__getConfigPath]]\"\n        handle-as=\"json\"\n        on-response=\"handleConfigResponse\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        id=\"setconfigrequest\"\n        method=\"[[method]]\"\n        body=\"[[setConfigParams]]\"\n        headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n        content-type=\"application/json\"\n        url=\"[[__setConfigPath]]\"\n        handle-as=\"json\"\n        on-response=\"handleSetConfigResponse\"\n      ></iron-ajax>\n      <iron-ajax\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        id=\"getuserdatarequest\"\n        method=\"[[method]]\"\n        body=\"[[getUserDataParams]]\"\n        headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n        content-type=\"application/json\"\n        url=\"[[__getUserDataPath]]\"\n        handle-as=\"json\"\n        on-response=\"handleGetUserDataResponse\"\n      ></iron-ajax>\n      <div id=\"loading\" data-loading$=\"[[!__loading]]\">\n        <hexagon-loader item-count=\"4\" loading size=\"large\"></hexagon-loader>\n      </div>\n      <div class=\"toolbar\">\n        <slot name=\"app-header-pre\"></slot>\n        <div class=\"operations\">\n          <button\n            on-click=\"_addTap\"\n            id=\"add\"\n            raised\n            hidden$=\"[[!loggedIn]]\"\n            title=\"Create new site\"\n          >\n            <simple-icon icon=\"icons:add\" dark></simple-icon>\n            <span class=\"small-hide\">New site</span>\n          </button>\n          <button\n            on-click=\"_importTap\"\n            id=\"import\"\n            raised\n            hidden$=\"[[!loggedIn]]\"\n            title=\"Import site\"\n          >\n            <simple-icon icon=\"icons:cloud-download\"></simple-icon>\n            <span class=\"small-hide\">Import</span>\n          </button>\n        </div>\n        <div class=\"main-title\" hidden$=\"[[!loggedIn]]\">[[title]]</div>\n        <div class=\"operations right\">\n          <button\n            on-click=\"_helpTap\"\n            id=\"help\"\n            raised\n            title=\"Help\"\n            hidden$=\"[[!showSpecialButtons(hideGlobalSettings,loggedIn)]]\"\n          >\n            <simple-icon icon=\"icons:help\"></simple-icon>\n            <span class=\"small-hide\">Help</span>\n          </button>\n          <button\n            on-click=\"_settingsTap\"\n            id=\"settings\"\n            raised\n            title=\"Settings\"\n            hidden$=\"[[!showSpecialButtons(hideGlobalSettings,loggedIn)]]\"\n          >\n            <simple-icon icon=\"icons:settings\"></simple-icon>\n            <span class=\"small-hide\">Settings</span>\n          </button>\n          <button\n            hidden$=\"[[!showSpecialButtons(hideLogin,loggedIn)]]\"\n            id=\"login\"\n            on-click=\"_logoutUserRoutine\"\n            title=\"Logout\"\n          >\n            <template is=\"dom-if\" if=\"[[!logoutPhoto]]\">\n              <simple-icon\n                icon=\"[[__loginIcon]]\"\n                class=\"small-hide\"\n              ></simple-icon>\n            </template>\n            <template is=\"dom-if\" if=\"[[logoutPhoto]]\">\n              <img id=\"userphoto\" src=\"[[logoutPhoto]]\" class=\"small-hide\" />\n            </template>\n            [[__loginText]]\n          </button>\n        </div>\n      </div>\n      <a11y-collapse-group heading-button expanded hidden$=\"[[!loggedIn]]\">\n        <a11y-collapse>\n          <div slot=\"heading\">Card view</div>\n          <jos-render slot=\"content\"></jos-render>\n        </a11y-collapse>\n        <a11y-collapse>\n          <div slot=\"heading\">Table view / bulk operations</div>\n          <div slot=\"content\">\n            <div class=\"selected-operations\" id=\"ops\">\n              <button\n                title=\"Publish\"\n                on-click=\"_bulkSitesConfirm\"\n                id=\"publish\"\n                raised\n                data-op=\"publish\"\n              >\n                <simple-icon\n                  icon=\"editor:publish\"\n                  data-op=\"publish\"\n                ></simple-icon>\n                <span class=\"small-hide\" data-op=\"publish\">Publish site</span>\n              </button>\n              <button\n                title=\"Sync git\"\n                on-click=\"_bulkSitesConfirm\"\n                id=\"sync\"\n                data-op=\"sync\"\n                raised\n              >\n                <simple-icon\n                  icon=\"notification:sync\"\n                  data-op=\"sync\"\n                ></simple-icon>\n                <span class=\"small-hide\" data-op=\"sync\">Sync git</span>\n              </button>\n              <button\n                title=\"Copy site\"\n                on-click=\"_bulkSitesConfirm\"\n                id=\"clone\"\n                raised\n                data-op=\"copy\"\n              >\n                <simple-icon\n                  icon=\"icons:content-copy\"\n                  data-op=\"copy\"\n                ></simple-icon>\n                <span class=\"small-hide\" data-op=\"copy\">Copy site</span>\n              </button>\n              <button\n                title=\"Download zip\"\n                on-click=\"_bulkSitesConfirm\"\n                id=\"download\"\n                raised\n                data-op=\"download\"\n              >\n                <simple-icon\n                  icon=\"icons:file-download\"\n                  data-op=\"download\"\n                ></simple-icon>\n                <span class=\"small-hide\" data-op=\"download\">Download zip</span>\n              </button>\n              <button\n                title=\"Archive\"\n                on-click=\"_bulkSitesConfirm\"\n                id=\"archive\"\n                raised\n                data-op=\"archive\"\n              >\n                <simple-icon\n                  icon=\"icons:archive\"\n                  data-op=\"archive\"\n                ></simple-icon>\n                <span class=\"small-hide\" data-op=\"archive\">Archive site</span>\n              </button>\n              <button\n                on-click=\"_bulkSitesConfirm\"\n                id=\"delete\"\n                data-op=\"delete\"\n                raised\n                class=\"danger\"\n                title=\"Delete forever\"\n              >\n                <simple-icon\n                  icon=\"icons:delete-forever\"\n                  data-op=\"delete\"\n                ></simple-icon>\n                <span class=\"small-hide\" data-op=\"delete\">Delete forever</span>\n              </button>\n            </div>\n            <vaadin-grid\n              id=\"grid\"\n              items=\"[[sites]]\"\n              theme=\"row-dividers\"\n              column-reordering-allowed\n              multi-sort\n            >\n              <vaadin-grid-selection-column\n                width=\"5em\"\n                auto-select\n                frozen\n              ></vaadin-grid-selection-column>\n              <vaadin-grid-filter-column\n                header=\"Site name\"\n                width=\"240px\"\n                path=\"title\"\n              >\n                <template>\n                  <portal-launcher>\n                    <a class=\"site-title\" href$=\"[[item.slug]]\">\n                      <div>[[item.title]]</div>\n                      <div class=\"small-location\">\n                        [[cleanLocation(item.slug)]]\n                      </div>\n                    </a>\n                  </portal-launcher>\n                </template>\n              </vaadin-grid-filter-column>\n              <vaadin-grid-filter-column\n                path=\"metadata.theme.name\"\n                header=\"Theme\"\n                width=\"80px\"\n              ></vaadin-grid-filter-column>\n              <vaadin-grid-sort-column header=\"Updated\" path=\"metadata.updated\">\n                <template>\n                  <template is=\"dom-if\" if=\"[[item.metadata.site.updated]]\">\n                    <simple-datetime\n                      format=\"M jS, Y\"\n                      timestamp=\"[[item.metadata.site.updated]]\"\n                      unix\n                    ></simple-datetime>\n                  </template>\n                </template>\n              </vaadin-grid-sort-column>\n              <vaadin-grid-sort-column header=\"Created\" path=\"metadata.created\">\n                <template>\n                  <template is=\"dom-if\" if=\"[[item.metadata.site.created]]\">\n                    <simple-datetime\n                      format=\"M jS, Y\"\n                      timestamp=\"[[item.metadata.site.created]]\"\n                      unix\n                    ></simple-datetime>\n                  </template>\n                </template>\n              </vaadin-grid-sort-column>\n              <vaadin-grid-column header=\"Icon\">\n                <template\n                  ><simple-icon\n                    icon=\"[[item.metadata.theme.variables.icon]]\"\n                  ></simple-icon\n                ></template>\n              </vaadin-grid-column>\n              <vaadin-grid-sort-column\n                header=\"Last published\"\n                path=\"metadata.lastPublished\"\n              >\n                <template>\n                  <template\n                    is=\"dom-if\"\n                    if=\"[[item.metadata.site.static.lastPublished]]\"\n                  >\n                    <simple-datetime\n                      format=\"M jS, Y\"\n                      timestamp=\"[[item.metadata.site.static.lastPublished]]\"\n                      unix\n                    ></simple-datetime>\n                  </template>\n                </template>\n              </vaadin-grid-sort-column>\n              <vaadin-grid-sort-column\n                path=\"metadata.pageCount\"\n                header=\"Pages\"\n              ></vaadin-grid-sort-column>\n              <vaadin-grid-column header=\"Color\">\n                <template>\n                  <div\n                    style$=\"border:1px solid black;width:64px;height:48px;background-color:[[item.metadata.theme.variables.hexCode]];\"\n                  ></div>\n                </template>\n              </vaadin-grid-column>\n              <vaadin-grid-column header=\"Logo\" width=\"64px\">\n                <template\n                  ><img\n                    loading=\"lazy\"\n                    src$=\"[[item.slug]][[item.metadata.site.logo]]\"\n                    style=\"width:64px; height:64px;\"\n                  />\n                </template>\n              </vaadin-grid-column>\n            </vaadin-grid>\n          </div>\n        </a11y-collapse>\n      </a11y-collapse-group>\n      <div class=\"login-prompt\" hidden$=\"[[loggedIn]]\">\n        <simple-login>\n          <hax-logo size=\"mini\" hide-hax><span>HAXcms login</span></hax-logo>\n          <div class=\"camera-buttons\">\n            <simple-icon-button\n              id=\"snap\"\n              icon=\"image:camera-alt\"\n              title=\"Snap photo\"\n            ></simple-icon-button>\n            <simple-icon-button\n              id=\"newsnap\"\n              icon=\"icons:cancel\"\n              title=\"Clear photo\"\n            ></simple-icon-button>\n          </div>\n          <simple-login-avatar>\n            <div id=\"selfie\"></div>\n            <simple-login-camera id=\"camera\" autoplay></simple-login-camera>\n          </simple-login-avatar>\n          <p class=\"forgot\" slot=\"buttons\">\n            Forget your login? Check <strong>_config/config.php</strong>\n          </p>\n        </simple-login>\n        <vaadin-upload\n          capture\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          method=\"[[method]]\"\n          form-data-name=\"file-upload\"\n          hidden\n          id=\"fileupload\"\n        ></vaadin-upload>\n      </div>\n      <simple-modal-template modal-id=\"help\" title=\"Help\">\n        <div slot=\"header\">Help directions</div>\n        <p slot=\"content\">\n          <md-block\n            style=\"overflow:auto;max-height: 50vh;font-size:12px;\"\n            source=\"https://raw.githubusercontent.com/elmsln/HAXcms/master/HAXDocs.md\"\n          ></md-block>\n        </p>\n      </simple-modal-template>\n      <paper-dialog id=\"confirm\">\n        <h2 class=\"dialog-header\">\n          [[activeOpertion]] these [[selectedItems.length]] sites\n        </h2>\n        <div class=\"scrollable\">\n          <ul>\n            <dom-repeat items=\"[[selectedItems]]\" as=\"site\">\n              <template>\n                <li>[[site.title]]</li>\n              </template>\n            </dom-repeat>\n          </ul>\n        </div>\n        <div class=\"buttons\">\n          <button\n            on-click=\"_confirmBulkOperation\"\n            dialog-confirm\n            id=\"bulksites\"\n            class=\"action-button\"\n            raised\n          >\n            <simple-icon icon=\"icons:thumb-up\"></simple-icon> Yes,\n            [[activeOpertion]]\n          </button>\n          <button class=\"action-button\" dialog-dismiss>\n            <simple-icon icon=\"icons:cancel\"></simple-icon> Cancel\n          </button>\n        </div>\n      </paper-dialog>\n      <paper-dialog id=\"createsite\">\n        <h2 class=\"dialog-header\">Create new site</h2>\n        <div class=\"scrollable\">\n          <form>\n            <simple-fields\n              id=\"createsitefields\"\n              autofocus\n              schematizer=\"[[HaxSchematizer]]\"\n              elementizer=\"[[HaxElementizer]]\"\n            >\n            </simple-fields>\n          </form>\n        </div>\n        <div class=\"buttons\">\n          <button\n            on-click=\"_createSite\"\n            class=\"action-button\"\n            dialog-confirm\n            id=\"create\"\n            raised\n          >\n            <simple-icon icon=\"icons:home\" dark></simple-icon> Create your new\n            site!\n          </button>\n          <button class=\"action-button\" dialog-dismiss>\n            <simple-icon dark icon=\"icons:cancel\"></simple-icon> Cancel\n          </button>\n        </div>\n      </paper-dialog>\n      <paper-dialog id=\"importsite\">\n        <h2 class=\"dialog-header\">Import site from git repo</h2>\n        <simple-fields-field\n          id=\"importurl\"\n          label=\"Git url\"\n          type=\"text\"\n        ></simple-fields-field>\n        <div class=\"buttons\">\n          <button\n            on-click=\"_gitImportSite\"\n            class=\"action-button\"\n            dialog-confirm\n            id=\"importsite\"\n            raised\n          >\n            <simple-icon icon=\"icons:home\" dark></simple-icon> Import\n          </button>\n          <button class=\"action-button\" dialog-dismiss>\n            <simple-icon dark icon=\"icons:cancel\"></simple-icon> Cancel\n          </button>\n        </div>\n      </paper-dialog>\n      <paper-dialog id=\"settingsdialog\">\n        <h2 class=\"dialog-header\">Edit HAXCMS configuration</h2>\n        <div class=\"scrollable\">\n          <simple-fields\n            id=\"settingsform\"\n            schematizer=\"[[HaxSchematizer]]\"\n            elementizer=\"[[HaxElementizer]]\"\n          >\n          </simple-fields>\n        </div>\n        <div class=\"buttons\">\n          <button\n            on-click=\"_saveConfig\"\n            dialog-confirm\n            id=\"saveconfig\"\n            class=\"action-button\"\n            raised\n          >\n            <simple-icon icon=\"icons:save\" dark></simple-icon> Save\n          </button>\n          <button class=\"action-button\" dialog-dismiss>\n            <simple-icon icon=\"icons:cancel\" dark></simple-icon> Cancel\n          </button>\n        </div>\n      </paper-dialog>\n    "])));
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          __loading: {
            type: Boolean
          },

          /**
           * Object, JSON Outline Schema format
           */
          sitesResponse: {
            type: Object,
            notify: true,
            observer: "_sitesResponseChanged"
          },
          method: {
            type: String,
            value: "POST"
          },

          /**
           * Title
           */
          title: {
            type: String,
            value: "My sites"
          },
          sites: {
            type: Array,
            notify: true
          },

          /**
           * Base path of where this is located.
           */
          basePath: {
            type: String
          },

          /**
           * If we should hide the login button all the time or not
           */
          hideLogin: {
            type: Boolean,
            value: false
          },

          /**
           * If we should hide the login button all the time or not
           */
          hideGlobalSettings: {
            type: Boolean,
            value: false
          },

          /**
           * Data Source to power the loading of sites in JSON Outline Schema format.
           */
          dataSource: {
            type: String,
            observer: "_dataSourceChanged"
          },

          /**
           * JSON Web token
           */
          jwt: {
            type: String,
            notify: true,
            observer: "_jwtChanged"
          },
          userData: {
            type: Object,
            value: {},
            observer: "_userDataChanged"
          },

          /**
           * Request params for creating a new site
           */
          createParams: {
            type: Object,
            value: {}
          },
          downloadParams: {
            type: Object,
            value: {}
          },
          deleteParams: {
            type: Object,
            value: {}
          },
          cloneParams: {
            type: Object,
            value: {}
          },
          publishParams: {
            type: Object,
            value: {}
          },
          syncParams: {
            type: Object,
            value: {}
          },
          archiveParams: {
            type: Object,
            value: {}
          },
          configParams: {
            type: Object,
            value: {}
          },
          setConfigParams: {
            type: Object,
            value: {}
          },
          getUserDataParams: {
            type: Object,
            value: {}
          },
          activeOpertion: {
            type: String
          },
          HaxSchematizer: {
            type: Object
          },
          HaxElementizer: {
            type: Object
          },
          selectedItems: {
            type: Array,
            value: [],
            observer: "_selectedItemsChanged"
          },

          /**
           * Active item that's being reviewed / has bubbled up.
           */
          activeItem: {
            type: Object,
            notify: true
          },

          /**
           * Logged in state
           */
          loggedIn: {
            type: Boolean,
            value: false,
            notify: true,
            reflectToAttribute: true,
            observer: "_loggedInChanged"
          },

          /**
           * Edit mode
           */
          editMode: {
            type: Boolean,
            notify: true,
            reflectToAttribute: true,
            value: false,
            observer: "_editModeChanged"
          },
          hideCamera: {
            type: Boolean,
            value: false
          },
          logoutPhoto: {
            type: String,
            value: false
          }
        };
      }
    }]);
    return HAXCMSSiteListing;
  }(_polymerElement.PolymerElement);

  _exports.HAXCMSSiteListing = HAXCMSSiteListing;
  customElements.define(HAXCMSSiteListing.tag, HAXCMSSiteListing);
});