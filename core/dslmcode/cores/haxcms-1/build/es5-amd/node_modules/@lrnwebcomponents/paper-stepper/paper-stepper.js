define(["exports", "../../@polymer/polymer/polymer-element.js"], function (_exports, _polymerElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PaperStepper = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `paper-stepper`
   * @element paper-stepper
   * `steps to completion in a vertical display`
   * @demo demo/index.html
   */
  var PaperStepper = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(PaperStepper, _PolymerElement);

    var _super = _createSuper(PaperStepper);

    function PaperStepper() {
      babelHelpers.classCallCheck(this, PaperStepper);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(PaperStepper, [{
      key: "_tapPrevious",
      value: // Private methods
      function _tapPrevious() {
        this.shadowRoot.querySelector("#selector").selectPrevious();
      }
    }, {
      key: "_tapNext",
      value: function _tapNext() {
        this.shadowRoot.querySelector("#selector").selectNext();
      }
      /**
       * Returns true if there is a step before the current and if
       * _getDisablePrevious is set to false
       */

    }, {
      key: "_getDisablePrevious",
      value: function _getDisablePrevious(selected, disablePrevious) {
        return selected > 0 && !disablePrevious;
      }
      /**
       * Returns true if there is a step after the current and if
       * _getDisableNext is set to false
       */

    }, {
      key: "_getDisableNext",
      value: function _getDisableNext(selected, nrItems, disableNext) {
        return selected < nrItems - 1 && !disableNext;
      }
      /**
       * Returns the current progress value
       *
       * Depends on items to ensure that `max` is already set. Otherwise
       * `simple-progress` doesn't show the bar on startup.
       * TODO: Remove parameter `items` once simple-progress can handle
       * setting the property `value` before property `max`.
       */

    }, {
      key: "_computeProgressValue",
      value: function _computeProgressValue(selected, items) {
        return selected + 1;
      }
    }, {
      key: "_onItemsChanged",
      value: function _onItemsChanged(e) {
        this._items = this.shadowRoot.querySelector("#selector").items;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "paper-stepper";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          selected: {
            type: Number,
            notify: true,
            value: 0
          },

          /**
           * True if a progress bar is shown instead of dots.
           *
           * Use a progress bar when there are many steps, or if there are
           * steps that need to be inserted during the process (based o
           * responses to earlier steps).
           */
          progressBar: {
            type: Boolean,
            value: false
          },

          /**
           * Text for the back button. Use this property to localize the element.
           */
          backLabel: {
            type: String,
            value: "Back"
          },

          /**
           * Text for the back button. Use this property to localize the element.
           */
          nextLabel: {
            type: String,
            value: "Next"
          },

          /**
           * Boolean for disabling the previous button.
           */
          disablePrevious: {
            type: Boolean,
            value: false
          },

          /**
           * Boolean for disabling the next button.
           */
          disableNext: {
            type: Boolean,
            value: false
          },

          /**
           * Hide back/next buttons
           */
          noButtons: {
            type: Boolean,
            value: false
          }
        };
      }
    }]);
    return PaperStepper;
  }(_polymerElement.PolymerElement);

  _exports.PaperStepper = PaperStepper;
  customElements.define(PaperStepper.tag, PaperStepper);
});