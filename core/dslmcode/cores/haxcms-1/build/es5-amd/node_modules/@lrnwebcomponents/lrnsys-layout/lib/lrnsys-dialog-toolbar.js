define(["exports", "require", "../../../lit/index.js"], function (_exports, _require, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysDialogToolbar = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_a158b800809211edaa2833647dc78c6c, _templateObject2_a158b800809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnsysDialogToolbar = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(LrnsysDialogToolbar, _LitElement);

    var _super = _createSuper(LrnsysDialogToolbar);

    /**
     * HTMLElement
     */
    function LrnsysDialogToolbar() {
      var _this;

      babelHelpers.classCallCheck(this, LrnsysDialogToolbar);
      _this = _super.call(this);
      _this._secondaryHasChildren = false;
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/app-layout/app-toolbar/app-toolbar.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./lrnsys-dialog-toolbar-button.js"], res, rej);
      });
      return _this;
    }
    /**
     * LitElement ready
     */


    babelHelpers.createClass(LrnsysDialogToolbar, [{
      key: "render",
      value:
      /**
       * LitElement render
       */
      function render() {
        return (0, _index.html)(_templateObject_a158b800809211edaa2833647dc78c6c || (_templateObject_a158b800809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <app-toolbar id=\"primary\">\n        <slot name=\"primary\"></slot>\n        <div main-title=\"\"></div>\n        <lrnsys-dialog-toolbar-button\n          icon=\"close\"\n          id=\"close\"\n          title=\"close dialog\"\n        ></lrnsys-dialog-toolbar-button>\n      </app-toolbar>\n      <app-toolbar id=\"secondary\" .hidden=\"", "\">\n        <div class=\"secondary-buttons\">\n          <slot name=\"secondary\" id=\"secondary-slot\"></slot>\n        </div>\n      </app-toolbar>\n    "])), !this._secondaryHasChildren);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this2 = this;

        // listen to see if buttons have been initialized in the secondary toolbar
        this.shadowRoot.querySelector("#secondary").addEventListener("button-initialized", function (e) {
          _this2._secondaryHasChildren = true;
        });
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject2_a158b800809211edaa2833647dc78c6c || (_templateObject2_a158b800809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --app-toolbar-primary-height: 40px;\n          --app-toolbar-secondary-height: 50px;\n          --app-toolbar-secondary-color: var(\n            --lrnsys-dialog-secondary-background-color\n          );\n          --app-toolbar-primary-color: var(\n            --lrnsys-dialog-toolbar-background-color\n          );\n          position: relative;\n          margin: 0;\n          padding: 0;\n        }\n        app-toolbar#primary {\n          color: var(--lrnsys-dialog-color, #000);\n          background-color: var(--app-toolbar-primary-color);\n          z-index: 10;\n          position: relative;\n          height: var(--app-toolbar-primary-height);\n        }\n        app-toolbar#secondary {\n          color: var(--lrnsys-dialog-color, #000);\n          background-color: var(--app-toolbar-secondary-color);\n          z-index: 5;\n          position: absolute;\n          width: 100%;\n          transform: translateY(-100%);\n          transition: all 0.3s ease-in;\n          height: var(--app-toolbar-primary-height);\n          display: flex;\n          justify-content: center;\n          padding: 0;\n        }\n        :host([secondary-visible]) #secondary {\n          transform: translateY(0);\n          height: var(--app-toolbar-secondary-height);\n        }\n        .secondary-buttons {\n          display: flex;\n        }\n        .secondary-buttons ::slotted(*) {\n          display: inline-flex;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnsys-dialog-toolbar";
      }
      /**
       * LitElement properties / popular convention
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Internal state of secondary toolbar
           */
          _secondaryHasChildren: {
            type: Boolean
          }
        };
      }
    }]);
    return LrnsysDialogToolbar;
  }(_index.LitElement);

  _exports.LrnsysDialogToolbar = LrnsysDialogToolbar;
  customElements.define(LrnsysDialogToolbar.tag, LrnsysDialogToolbar);
});