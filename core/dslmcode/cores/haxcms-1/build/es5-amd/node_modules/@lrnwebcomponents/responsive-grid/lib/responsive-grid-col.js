define(["exports", "../../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ResponsiveGridCol = void 0;

  var _templateObject_dd1b47108e0011ed99ce491205e67b1d, _templateObject2_dd1b47108e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**    
  `responsive-grid-col`
  A column for the responsive grid
  * @demo demo/index.html
  @microcopy - the mental model for this element
    Example: 
    <responsive-grid-col 
      xs="1"    //the number of columns on an extra-small-width screen
      md="2"    //the number of columns on a small-width screen
      lg="3"    //the number of columns on a medium-width screen
      xl="4">   //the number of columns on a large-width screen
      CONTENT HERE
    </responsive-grid-col>
  */
  var ResponsiveGridCol = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(ResponsiveGridCol, _LitElement);

    var _super = _createSuper(ResponsiveGridCol);

    function ResponsiveGridCol() {
      var _this;

      babelHelpers.classCallCheck(this, ResponsiveGridCol);
      _this = _super.call(this);
      _this.xl = 1;
      _this.lg = 1;
      _this.md = 1;
      _this.sm = 1;
      _this.xs = 1;
      return _this;
    }

    babelHelpers.createClass(ResponsiveGridCol, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_dd1b47108e0011ed99ce491205e67b1d || (_templateObject_dd1b47108e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div id=\"col-inner\"><slot></slot></div> "])));
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject2_dd1b47108e0011ed99ce491205e67b1d || (_templateObject2_dd1b47108e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          position: relative;\n          min-height: 1px;\n          float: left;\n        }\n        :host:after {\n          clear: both;\n        }\n        #col-inner {\n          padding-left: var(--responsive-grid-col-inner-padding-left, 15px);\n          padding-right: var(--responsive-grid-col-inner-padding-right, 15px);\n        }\n        /* Hide Print-Only on Screen */\n        @media screen {\n          :host([print-only]) {\n            display: none;\n          }\n        }\n        /* Hide Screen-Only on Print */\n        @media print {\n          :host([screen-only]) {\n            display: none;\n          }\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "responsive-grid-col";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * the width when viewed on an extra large screen
           */
          xl: {
            type: Number
          },

          /**
           * the width when viewed on a large screen
           */
          lg: {
            type: Number
          },

          /**
           * the width when viewed on a medium screen
           */
          md: {
            type: Number
          },

          /**
           * the width when viewed on a small screen
           */
          sm: {
            type: Number
          },

          /**
           * the width when viewed on an extra-small screen
           */
          xs: {
            type: Number
          }
        };
      }
    }]);
    return ResponsiveGridCol;
  }(_index.LitElement);

  _exports.ResponsiveGridCol = ResponsiveGridCol;
  customElements.define(ResponsiveGridCol.tag, ResponsiveGridCol);
});