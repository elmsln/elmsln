define(["exports", "meta", "../../../../../lit/index.js", "../../../../simple-icon/lib/simple-icon-button.js", "../../../../simple-icon/lib/simple-icons.js", "../../../../hax-iconset/lib/simple-hax-iconset.js", "../../../../simple-tooltip/simple-tooltip.js", "./HAXCMSI18NMixin.js", "./HAXCMSThemeParts.js"], function (_exports, meta, _index, _simpleIconButton, _simpleIcons, _simpleHaxIconset, _simpleTooltip, _HAXCMSI18NMixin, _HAXCMSThemeParts2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSButton = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_c2dda6c0809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var ButtonBGLight = new URL("../../../../app-hax/lib/assets/images/ButtonBGLM.svg", meta.url).href;
  var ButtonBGDark = new URL("../../../../app-hax/lib/assets/images/ButtonBGDM.svg", meta.url).href; // translation support baked in, use this class to reduce
  // complexity in adding new buttons to the HAXcms UI for editors

  var HAXCMSButton = /*#__PURE__*/function (_HAXCMSThemeParts) {
    babelHelpers.inherits(HAXCMSButton, _HAXCMSThemeParts);

    var _super = _createSuper(HAXCMSButton);

    function HAXCMSButton() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSButton);
      _this = _super.call(this);
      _this.icon = "mdextra:hexagon-multiple";
      _this.label = "button";
      _this.voiceCommand = "";
      return _this;
    }

    babelHelpers.createClass(HAXCMSButton, [{
      key: "HAXCMSFireButtonEvent",
      value: // wrapper on CustomEvent so we include the payload as these are listened for on window
      function HAXCMSFireButtonEvent(name, target, payload) {
        // send message off so that the control board hands it off to the CMS
        var evt = new CustomEvent(name, {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            originalTarget: target,
            values: payload
          }
        });
        this.dispatchEvent(evt);
      } // this ensures data binding doesn't fail

    }, {
      key: "HAXCMSButtonClick",
      value: function HAXCMSButtonClick(e) {// stub, the classes implementing this will actually do something
        // you always will call super.HAXCMS
      }
    }, {
      key: "renderButton",
      value: function renderButton(label, tooltip) {
        return (0, _index.html)(_templateObject_c2dda6c0809211edaa2833647dc78c6c || (_templateObject_c2dda6c0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <simple-icon-button\n        .part=\"", "\"\n        tabindex=\"", "\"\n        id=\"button\"\n        label=\"", "\"\n        @click=\"", "\"\n        ?dark=\"", "\"\n        icon=\"", "\"\n        accent-color=\"", "\"\n        voice-command=\"", "\"\n      ></simple-icon-button>\n      <simple-tooltip for=\"button\" position=\"bottom\" offset=\"14\">\n        ", "\n      </simple-tooltip>\n    "])), this.editMode ? "edit-mode-active" : "", this.editMode ? "-1" : "", label, this.HAXCMSButtonClick, !this.darkMode, this.icon, this.accentColor, this.voiceCommand, tooltip);
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSButton), "properties", this)), {}, {
          icon: {
            type: String
          },
          label: {
            type: String
          },
          voiceCommand: {
            type: String
          },
          accentColor: {
            type: String,
            attribute: "accent-color"
          }
        });
      }
    }]);
    return HAXCMSButton;
  }((0, _HAXCMSThemeParts2.HAXCMSThemeParts)((0, _HAXCMSI18NMixin.HAXCMSI18NMixin)(_index.LitElement)));

  _exports.HAXCMSButton = HAXCMSButton;
});