define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/iron-flex-layout/iron-flex-layout-classes.js", "../../../@polymer/paper-checkbox/paper-checkbox.js"], function (_exports, _polymerElement, _ironFlexLayoutClasses, _paperCheckbox) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EcoJsonSchemaBoolean = void 0;

  var _templateObject_9d276a60809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var EcoJsonSchemaBoolean = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(EcoJsonSchemaBoolean, _PolymerElement);

    var _super = _createSuper(EcoJsonSchemaBoolean);

    function EcoJsonSchemaBoolean() {
      babelHelpers.classCallCheck(this, EcoJsonSchemaBoolean);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(EcoJsonSchemaBoolean, [{
      key: "_schemaChanged",
      value: function _schemaChanged() {
        var schema = this.schema;
        var inputEl = this.shadowRoot.querySelector("#checkbox");

        if (schema.component && schema.component.properties) {
          Object.keys(schema.component.properties).forEach(function (prop) {
            inputEl[prop] = schema.component.properties[prop];
          });
        }

        if (schema.title) {
          this._label = schema.title;
        }
      }
    }, {
      key: "_isSchemaValue",
      value: function _isSchemaValue(type) {
        return this._isSchemaBoolean(type) || this._isSchemaNumber(type) || this._isSchemaString(type);
      }
    }, {
      key: "_isSchemaBoolean",
      value: function _isSchemaBoolean(type) {
        if (Array.isArray(type)) {
          return type.indexOf("boolean") !== -1;
        } else {
          return type === "boolean";
        }
      }
    }, {
      key: "_isSchemaNumber",
      value: function _isSchemaNumber(type) {
        if (Array.isArray(type)) {
          return type.indexOf("number") !== -1 || type.indexOf("integer") !== -1;
        } else {
          return type === "number" || type === "integer";
        }
      }
    }, {
      key: "_isSchemaString",
      value: function _isSchemaString(type) {
        if (Array.isArray(type)) {
          return type.indexOf("string") !== -1;
        } else {
          return type === "string";
        }
      }
    }, {
      key: "_isSchemaObject",
      value: function _isSchemaObject(type) {
        return type === "object";
      }
    }, {
      key: "_isSchemaArray",
      value: function _isSchemaArray(type) {
        return type === "array";
      }
    }], [{
      key: "tag",
      get: function get() {
        return "eco-json-schema-boolean";
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_9d276a60809211edaa2833647dc78c6c || (_templateObject_9d276a60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style is=\"custom-style\" include=\"iron-flex iron-flex-alignment\">\n        :host ([hidden]) {\n          display: none;\n        }\n        paper-checkbox {\n          display: block;\n          font-size: 16px;\n          white-space: normal;\n          margin: var(--eco-json-field-margin, 0 0 15px);\n          --paper-checkbox-checkmark-color: var(\n            --eco-json-form-bg,\n            var(--primary-background-color, #fff)\n          );\n          --paper-checkbox-unchecked-background-color: var(\n            --eco-json-form-bg,\n            var(--primary-background-color, #fff)\n          );\n          --paper-checkbox-checked-color: var(\n            --eco-json-form-active-color,\n            var(--primary-color, #000)\n          );\n          --paper-checkbox-unchecked-color: var(\n            --eco-json-form-active-color,\n            var(--primary-text-text-color, #222)\n          );\n          --paper-checkbox-label-color: var(\n            --eco-json-form-color,\n            var(--secondary-text-color, #888)\n          );\n        }\n        :host paper-checkbox:focus {\n          --paper-checkbox-unchecked-color: var(\n            --eco-json-form-active-color,\n            var(--primary-color, #000)\n          );\n          --paper-checkbox-label-color: var(\n            --eco-json-form-active-color,\n            var(--primary-text-text-color, #222)\n          );\n        }\n      </style>\n\n      <paper-checkbox\n        id=\"checkbox\"\n        class=\"flex\"\n        hidden$=\"[[hidden]]\"\n        checked=\"{{value}}\"\n        invalid=\"[[error]]\"\n        >[[_label]]</paper-checkbox\n      >\n    "])));
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          schema: {
            type: Object,
            observer: "_schemaChanged"
          },
          value: {
            type: Boolean,
            notify: true,
            value: false
          },
          error: {
            type: Boolean,
            value: false
          },
          _label: {
            type: String,
            notify: true,
            value: ""
          }
        };
      }
    }]);
    return EcoJsonSchemaBoolean;
  }(_polymerElement.PolymerElement);

  _exports.EcoJsonSchemaBoolean = EcoJsonSchemaBoolean;
  customElements.define(EcoJsonSchemaBoolean.tag, EcoJsonSchemaBoolean);
});