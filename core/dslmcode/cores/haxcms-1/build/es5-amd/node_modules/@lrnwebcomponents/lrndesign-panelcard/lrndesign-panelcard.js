define(["exports", "../../@polymer/polymer/polymer-element.js", "../simple-colors/lib/simple-colors-polymer.js"], function (_exports, _polymerElement, _simpleColorsPolymer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignPanelcard = void 0;

  var _templateObject_9c9a10408e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  `lrndesign-panelcard`
  A LRN element
  
  * @demo demo/index.html
  */
  var LrndesignPanelcard = /*#__PURE__*/function (_SimpleColorsPolymer) {
    babelHelpers.inherits(LrndesignPanelcard, _SimpleColorsPolymer);

    var _super = _createSuper(LrndesignPanelcard);

    function LrndesignPanelcard() {
      babelHelpers.classCallCheck(this, LrndesignPanelcard);
      return _super.call(this);
    }

    babelHelpers.createClass(LrndesignPanelcard, null, [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_9c9a10408e0011ed99ce491205e67b1d || (_templateObject_9c9a10408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors-shared-styles-polymer\">\n        :host {\n          display: inline-block;\n          position: relative;\n          box-sizing: border-box;\n          --lrndesign-panelcard-text-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --lrndesign-panelcard-color: var(\n            --simple-colors-default-theme-accent-1\n          );\n        }\n        :host([dark]:not([accent-color=\"grey\"])) {\n          --lrndesign-panelcard-color: var(\n            --simple-colors-default-theme-accent-3\n          );\n        }\n        :host([colored-text]) {\n          --lrndesign-panelcard-text-color: var(\n            --simple-colors-default-theme-accent-9\n          );\n          --lrndesign-panelcard-color: var(\n            --simple-colors-default-theme-grey-1\n          );\n        }\n        .card-panel {\n          transition: box-shadow 0.25s;\n          padding: 24px;\n          margin: 0;\n          border-radius: 2px;\n          color: var(--lrndesign-panelcard-text-color);\n          background-color: var(--lrndesign-panelcard-color);\n          box-shadow: 0 5px 5px rgba(0, 0, 0, 0.7);\n        }\n\n        h3 {\n          padding: 0;\n          margin: 0 0 8px 0;\n        }\n      </style>\n      <aside>\n        <div class=\"card-panel\">\n          <h3>[[title]]</h3>\n          <span><slot></slot></span>\n        </div>\n      </aside>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrndesign-panelcard";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignPanelcard), "properties", this)), {}, {
          /**
           * Title of the panel
           */
          title: {
            type: String,
            value: "Block heading",
            reflectToAttribute: true
          },

          /**
           * Height of the paper.
           */
          elevation: {
            type: Number,
            value: 2,
            reflectToAttribute: true
          },

          /**
           * Applies the color to the text instead of the background
           */
          coloredText: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Note card",
            description: "A small note to offset text used for asides.",
            icon: "icons:check-box-outline-blank",
            color: "grey",
            groups: ["Content", "Visual Treatment"],
            handles: [{
              type: "text",
              text: "title"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            configure: [{
              property: "title",
              title: "Title",
              description: "The heading for this sticky note",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              slot: "",
              title: "Text",
              description: "The text for our sticky note",
              inputMethod: "textarea",
              icon: "editor:title",
              required: false,
              validationType: "text"
            }, {
              property: "accentColor",
              title: "Accent color",
              description: "Select the accent color use",
              inputMethod: "colorpicker",
              icon: "editor:format-color-fill"
            }, {
              property: "dark",
              title: "Dark",
              description: "Use dark theme",
              inputMethod: "boolean",
              icon: "invert-colors"
            }, {
              property: "coloredText",
              title: "Colored Text",
              description: "Apply color to text instead of background.",
              inputMethod: "boolean",
              icon: "editor:format-color-text"
            }, {
              property: "elevation",
              title: "Elevation",
              description: "Visually how high this is off the page",
              inputMethod: "select",
              options: {
                0: "0",
                1: "1",
                2: "2",
                3: "3",
                4: "4",
                5: "5"
              }
            }],
            advanced: []
          }
        };
      }
    }]);
    return LrndesignPanelcard;
  }(_simpleColorsPolymer.SimpleColorsPolymer);

  _exports.LrndesignPanelcard = LrndesignPanelcard;
  window.customElements.define(LrndesignPanelcard.tag, LrndesignPanelcard);
});