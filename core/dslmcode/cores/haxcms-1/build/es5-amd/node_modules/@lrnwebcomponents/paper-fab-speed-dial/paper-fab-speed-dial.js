define(["exports", "require", "../../@polymer/polymer/polymer-element.js"], function (_exports, _require, _polymerElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PaperFabSpeedDial = void 0;
  _require = _interopRequireWildcard(_require);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `paper-fab-speed-dial`
   * @element paper-fab-speed-dial
   * `A speed dial setup for a floating action button`
   *
   * @demo demo/index.html
   */
  var PaperFabSpeedDial = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(PaperFabSpeedDial, _PolymerElement);

    var _super = _createSuper(PaperFabSpeedDial);

    function PaperFabSpeedDial() {
      var _this;

      babelHelpers.classCallCheck(this, PaperFabSpeedDial);
      _this = _super.call(this); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["./lib/paper-fab-speed-dial-overlay.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(PaperFabSpeedDial, [{
      key: "open",
      value: // Public methods
      function open(e) {
        // Required for mobile Safari to avoid passing the tap event to an element below the FAB
        if (e) {
          e.preventDefault();
        }

        this.opened = true;
      }
    }, {
      key: "close",
      value: function close(e) {
        // Required for mobile Safari to avoid passing the tap event to an element below the FAB
        if (e) {
          e.preventDefault();
        }

        this.opened = false;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "paper-fab-speed-dial";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          icon: {
            type: String,
            value: "add"
          },
          opened: {
            type: Boolean,
            notify: true
          },
          disabled: {
            type: Boolean,
            value: false
          }
        };
      }
    }]);
    return PaperFabSpeedDial;
  }(_polymerElement.PolymerElement);

  _exports.PaperFabSpeedDial = PaperFabSpeedDial;
  customElements.define(PaperFabSpeedDial.tag, PaperFabSpeedDial);
});