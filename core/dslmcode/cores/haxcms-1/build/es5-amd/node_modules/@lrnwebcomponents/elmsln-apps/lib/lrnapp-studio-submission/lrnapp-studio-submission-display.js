define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/marked-element/marked-element.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../image-inspector/image-inspector.js", "../../../lrndesign-avatar/lrndesign-avatar.js", "../../../word-count/word-count.js", "../../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../lrnsys-button/lrnsys-button.js", "../../../lrndesign-contentblock/lrndesign-contentblock.js", "../../../lrnsys-layout/lib/lrnsys-dialog.js", "../../../utils/utils.js"], function (_exports, _polymerElement, _markedElement, _domIf, _imageInspector, _lrndesignAvatar, _wordCount, _domRepeat, _lrnsysButton, _lrndesignContentblock, _lrnsysDialog, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioSubmissionDisplay = void 0;

  var _templateObject_b40684a0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappStudioSubmissionDisplay = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappStudioSubmissionDisplay, _PolymerElement);

    var _super = _createSuper(LrnappStudioSubmissionDisplay);

    function LrnappStudioSubmissionDisplay() {
      babelHelpers.classCallCheck(this, LrnappStudioSubmissionDisplay);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappStudioSubmissionDisplay, [{
      key: "_submissionLoaded",
      value:
      /**
       * Submission loaded has to carefully remove what's in the markdown area
       */
      function _submissionLoaded(newValue, oldValue) {
        var _this = this;

        // wipe the slot of the marked area
        if (this.shadowRoot && this.shadowRoot.querySelector("#markedarea")) {
          (0, _utils.wipeSlot)(this.shadowRoot.querySelector("#markedarea"));
          var mdscript = document.createElement("script");
          mdscript.type = "text/markdown";
          mdscript.innerHTML = "";

          if (newValue && newValue.attributes) {
            setTimeout(function () {
              mdscript.innerHTML = newValue.attributes.body;

              _this.shadowRoot.querySelector("#markedarea").appendChild(mdscript);

              _this.shadowRoot.querySelector("#markedarea").markdown = newValue.attributes.body;
            }, 0);
          } // help ensure if a fast object switch of inner content
          // we make sure it's wiped fully
          else if (oldValue && !newValue) {
              this.shadowRoot.querySelector("#markedarea").appendChild(mdscript);
              this.shadowRoot.querySelector("#markedarea").markdown = "";
            }
        }
      }
    }, {
      key: "date",
      value: function date(time) {
        if (time) {
          var parts = time.split("-");
          var times = time.split("T");
          var month = parts[2].split("T");
          times = times[1].split("-");
          return parts[1] + "/" + month[0] + " - " + times[0];
        }
      }
      /**
       * Simple way to convert from object to array.
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (babelHelpers.typeof(obj) === "object" && obj !== null) {
          return Object.keys(obj).map(function (key) {
            return obj[key];
          });
        }

        return [];
      }
      /**
       * get thumbnail or just the image data directly based on truncated data
       */

    }, {
      key: "_getImageThumbnail",
      value: function _getImageThumbnail(image) {
        if (image) {
          if (image.thumbnail) {
            return image.thumbnail;
          }

          return image;
        }

        return "";
      }
      /**
       * get url or just the image data directly based on truncated data
       */

    }, {
      key: "_getImageUrl",
      value: function _getImageUrl(image) {
        if (image) {
          if (image.url) {
            return image.url;
          }

          image - inspector;
          return image;
        }

        return "";
      }
      /**
       * See if this is a GIF, if it is then report back so we
       * know which player to display.
       */

    }, {
      key: "_isGif",
      value: function _isGif(image) {
        // get url from image normalizing for simplified data
        var url = this._getImageUrl(image);

        if (url != "" && url.indexOf(".gif") != -1) {
          return true;
        }

        return false;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_b40684a0809211edaa2833647dc78c6c || (_templateObject_b40684a0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        [hidden] {\n          display: none !important;\n        }\n        :host {\n          display: block;\n        }\n        p {\n          font-size: 14px;\n          line-height: 18px;\n        }\n        h1,\n        h2,\n        h3 {\n          margin: 0;\n          text-align: left;\n        }\n        iron-selector {\n          line-height: 1em;\n        }\n        iron-selector lrnsys-button {\n          display: inline-flex;\n        }\n        image-inspector {\n          --image-inspector-height-rotated: 600px;\n          --image-inspector-height: 85vh;\n        }\n        marked-element {\n          display: block;\n          margin: 0 5em 0 5em;\n        }\n        img.image {\n          margin: 0 0.5em;\n        }\n        lrnsys-dialog {\n          display: inline;\n        }\n        .contain {\n          width: 10em;\n          height: 10em;\n          background: #ddd;\n        }\n        .center {\n          margin: auto;\n          width: 100%;\n        }\n        .title {\n          color: #222;\n          font-size: 2rem;\n          font-weight: 600;\n          line-height: 2.5rem;\n          padding: 0.25rem 0;\n          white-space: nowrap;\n          overflow-x: hidden;\n          text-overflow: ellipsis;\n          margin-top: 1rem;\n          text-align: center;\n        }\n        .author {\n          color: #555;\n          font-size: 1rem;\n          font-weight: 500;\n          font-style: normal;\n          line-height: 1rem;\n          padding: 0.25rem 0 0.5rem 0;\n          margin: 0;\n          text-transform: capitalize;\n        }\n        .date {\n          color: #555;\n          font-size: 16px;\n          font-style: normal;\n          padding: 0.25rem 0 0.5rem 0;\n          margin: 0;\n        }\n        .flex-wrap {\n          display: flex;\n        }\n        .submission-page-card {\n          margin: 0;\n          padding: 16px;\n        }\n        :host([edit-page]) .submission-page {\n          width: 100%;\n        }\n        .image-dialog-header {\n          display: flex;\n        }\n        app-toolbar {\n          width: 36em;\n          background: #ddd;\n        }\n        lrnsys-button {\n          padding: 0.75em;\n        }\n        .top {\n          top: 8em;\n        }\n        div.card {\n          box-shadow: 0 5px 5px rgba(0, 0, 0, 0.7);\n        }\n      </style>\n      <div class=\"submission-page\">\n        <div class=\"submission-page-card ferpa-protect card\">\n          <div class=\"card-content\">\n            <lrndesign-avatar\n              class=\"center\"\n              label=\"[[submission.relationships.author.data.name]]\"\n              src=\"[[submission.relationships.author.data.avatar]]\"\n            ></lrndesign-avatar>\n            <div class=\"author center\">\n              [[submission.relationships.author.data.display_name]]\n            </div>\n            <h2 class=\"title center\">[[submission.attributes.title]]</h2>\n            <div class=\"date center\">\n              Created: [[date(submission.meta.created)]]\n            </div>\n            <div class=\"date center\">\n              Last updated: [[date(submission.meta.changed)]]\n            </div>\n            <!-- ----- Text Submission ----- -->\n            <word-count>\n              <marked-element id=\"markedarea\"> </marked-element>\n            </word-count>\n            <!-- ----- Images Submission ----- -->\n            <template is=\"dom-if\" if=\"[[submission.attributes.images]]\">\n              <lrndesign-contentblock class=\"center\">\n                <template\n                  is=\"dom-repeat\"\n                  items=\"[[_toArray(submission.attributes.images)]]\"\n                  as=\"image\"\n                >\n                  <lrnsys-dialog alt=\"View Image\">\n                    <div class=\"image-dialog-header\"></div>\n                    <span slot=\"button\">\n                      <img\n                        style=\"width:200px; height:200px; background-color: lightgray;\"\n                        class=\"contain image\"\n                        src$=\"[[_getImageThumbnail(image)]]\"\n                        loading=\"lazy\"\n                      />\n                    </span>\n                    <div style=\"text-align: center;\">\n                      <div hidden$=\"[[_isGif(image)]]\">\n                        <image-inspector\n                          src$=\"[[_getImageUrl(image)]]\"\n                          style=\"--image-inspector-height-rotated: 600px;--image-inspector-height: 85vh;\"\n                        >\n                          <span slot=\"toolbar\" style=\"display: inline-flex;\">\n                            <lrnsys-button\n                              alt=\"Download all images\"\n                              icon=\"icons:file-download\"\n                              href=\"[[submission.attributes.download_files]]\"\n                              target=\"_blank\"\n                            ></lrnsys-button>\n                          </span>\n                        </image-inspector>\n                      </div>\n                      <div hidden$=\"[[!_isGif(image)]]\">\n                        <lrnsys-button\n                          alt=\"Download all images\"\n                          icon=\"icons:file-download\"\n                          href=\"[[submission.attributes.download_files]]\"\n                          target=\"_blank\"\n                        ></lrnsys-button>\n                        <img\n                          style=\"background-color: lightgray; max-width:90vw; max-height:90vh;\"\n                          class=\"contain image\"\n                          src$=\"[[_getImageUrl(image)]]\"\n                          loading=\"lazy\"\n                        />\n                      </div>\n                    </div>\n                  </lrnsys-dialog>\n                </template>\n              </lrndesign-contentblock>\n            </template>\n            <!-- ----- Video Submission ----- -->\n            <template is=\"dom-if\" if=\"[[submission.attributes.video]]\">\n              <lrndesign-contentblock class=\"center\">\n                <template\n                  is=\"dom-repeat\"\n                  items=\"[[_toArray(submission.attributes.video)]]\"\n                  as=\"video\"\n                >\n                  <iframe\n                    width=\"460\"\n                    height=\"249\"\n                    src=\"[[video.video_src]]\"\n                  ></iframe>\n                </template>\n              </lrndesign-contentblock>\n            </template>\n            <!-- ----- Links Submission ----- -->\n            <template is=\"dom-if\" if=\"[[submission.attributes.links]]\">\n              <lrndesign-contentblock>\n                <template\n                  is=\"dom-repeat\"\n                  items=\"[[_toArray(submission.attributes.links)]]\"\n                  as=\"link\"\n                >\n                  <p>\n                    <strong>[[link.title]]:</strong>\n                    <a class=\"link\" href=\"[[link.url]]\" target=\"_blank\"\n                      >[[link.url]]</a\n                    >\n                  </p>\n                </template>\n              </lrndesign-contentblock>\n            </template>\n            <!-- ----- Files Submission ----- -->\n            <template is=\"dom-if\" if=\"[[submission.attributes.files]]\">\n              <lrndesign-contentblock title=\"Files Submitted\">\n                <template\n                  is=\"dom-repeat\"\n                  items=\"[[_toArray(submission.attributes.files)]]\"\n                  as=\"file\"\n                >\n                  <p>\n                    <strong>[[file.filename]]:</strong>\n                    <a class=\"link\" href=\"[[file.url]]\" target=\"_blank\"\n                      >[[file.url]]</a\n                    >\n                  </p>\n                </template>\n              </lrndesign-contentblock>\n            </template>\n          </div>\n        </div>\n      </div>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-submission-display";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Object that has all the details of a submission that
           * is being viewed.
           */
          submission: {
            type: Object,
            notify: true,
            observer: "_submissionLoaded"
          },
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          }
        };
      }
    }]);
    return LrnappStudioSubmissionDisplay;
  }(_polymerElement.PolymerElement);

  _exports.LrnappStudioSubmissionDisplay = LrnappStudioSubmissionDisplay;
  customElements.define(LrnappStudioSubmissionDisplay.tag, LrnappStudioSubmissionDisplay);
});