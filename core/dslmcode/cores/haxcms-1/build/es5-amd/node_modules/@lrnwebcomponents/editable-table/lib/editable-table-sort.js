define(["exports", "../../../lit/index.js", "./editable-table-behaviors.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../hax-iconset/lib/simple-hax-iconset.js", "../../simple-toolbar/lib/simple-toolbar-button.js"], function (_exports, _index, _editableTableBehaviors, _simpleIconLite, _simpleIcons, _simpleHaxIconset, _simpleToolbarButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableSort = void 0;

  var _templateObject_9df98770809211edaa2833647dc78c6c, _templateObject2_9df98770809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `editable-table-editor-sort`
   * A column header that functions as a three-state sort button (no sort, sort ascending, sort descending) for table-editor-display mode (table-editor-display.html).
   *
   * @demo ./demo/display.html
   * @customElement
   * @extends LitElement
   * @extends editableTableCellStyles
   */
  var EditableTableSort = /*#__PURE__*/function (_SimpleToolbarButtonB) {
    babelHelpers.inherits(EditableTableSort, _SimpleToolbarButtonB);

    var _super = _createSuper(EditableTableSort);

    function EditableTableSort() {
      var _this;

      babelHelpers.classCallCheck(this, EditableTableSort);
      _this = _super.call(this);
      _this.sortMode = "none";
      _this.sortColumn = -1;
      _this.toggles = true;
      _this.icon = "editable-table:sortable";
      _this.label = "Toggle sort mode.";
      _this.tooltip = "Toggles sorting by this column.";
      _this.describedby = "cell";
      return _this;
    }

    babelHelpers.createClass(EditableTableSort, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_9df98770809211edaa2833647dc78c6c || (_templateObject_9df98770809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div>\n        <slot id=\"cell\"></slot>\n        <span class=\"offscreen asc\">(ascending)</span>\n        <span class=\"offscreen desc\">(descending)</span>\n        ", "\n      </div>\n    "])), babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableSort.prototype), "render", this).call(this));
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableSort.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableSort.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "columnIndex") {
            _this2.toggled = _this2.columnIndex === _this2.sortColumn;
          }

          if (propName == "sortMode" || propName == "columnIndex") {
            _this2.icon = _this2.sortMode == "asc" ? "arrow-drop-up" : _this2.sortMode == "desc" ? "arrow-drop-down" : "editable-table:sortable";
          }
        });
      }
      /**
       * Fires when sort button is clicked
       * @event change-sort-mode
       */

    }, {
      key: "_handleClick",
      value: function _handleClick() {
        this.dispatchEvent(new CustomEvent("change-sort-mode", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableSort), "styles", this) || []), babelHelpers.toConsumableArray(_editableTableBehaviors.editableTableCellStyles), [(0, _index.css)(_templateObject2_9df98770809211edaa2833647dc78c6c || (_templateObject2_9df98770809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-family: inherit;\n          font-size: inherit;\n        }\n        :host > div {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          width: 100%;\n        }\n        button {\n          flex: 0 0 auto !important;\n          width: auto !important;\n        }\n        #cell {\n          flex: 1 1 auto !important;\n          display: inline-block;\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-sort";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableSort), "properties", this)), {}, {
          /**
           * Sort ascending, descending or none
           */
          columnIndex: {
            attribute: "column-index",
            type: Number,
            reflect: true
          },

          /**
           * Sort mode: ascending, descending or none
           */
          sortMode: {
            attribute: "sort-mode",
            type: String,
            reflect: true
          },

          /**
           * Index of current sort column
           */
          sortColumn: {
            attribute: "sort-column",
            type: Number,
            reflect: true
          }
        });
      }
    }]);
    return EditableTableSort;
  }((0, _simpleToolbarButton.SimpleToolbarButtonBehaviors)(_index.LitElement));

  _exports.EditableTableSort = EditableTableSort;
  customElements.define(EditableTableSort.tag, EditableTableSort);
});