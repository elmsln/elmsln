define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../../@polymer/paper-input/paper-input.js", "../../../../@vaadin/vaadin-grid/vaadin-grid.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-column.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-sorter.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-filter.js", "../../../lrnsys-button/lrnsys-button.js", "../../../materializecss-styles/materializecss-styles.js", "../lrnapp-studio-submission/lrnapp-studio-submission-display.js"], function (_exports, _polymerElement, _polymerDom, _paperInput, _vaadinGrid, _vaadinGridColumn, _vaadinGridSorter, _vaadinGridFilter, _lrnsysButton, _materializecssStyles, _lrnappStudioSubmissionDisplay) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappOpenStudioTable = void 0;

  var _templateObject_eadfe7c08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappOpenStudioTable = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappOpenStudioTable, _PolymerElement);

    var _super = _createSuper(LrnappOpenStudioTable);

    function LrnappOpenStudioTable() {
      babelHelpers.classCallCheck(this, LrnappOpenStudioTable);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappOpenStudioTable, [{
      key: "_loadProjectRoute",
      value: function _loadProjectRoute(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var local = normalizedEvent.localTarget; // this will have the id of the current submission

        var project = local.getAttribute("data-project-id");
        var author = local.getAttribute("data-author-id"); // fire event w/ parts of the route to changes

        this.dispatchEvent(new CustomEvent("route-change", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            data: {
              page: "projects"
            },
            queryParams: {
              author: author,
              project: project
            }
          }
        }));
      }
      /**
       * Handle tap on button above to redirect to the correct submission url.
       */

    }, {
      key: "_loadSubmissionUrl",
      value: function _loadSubmissionUrl(e) {
        var root = this;
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var local = normalizedEvent.localTarget; // this will have the id of the current submission

        var active = local.getAttribute("data-submission-id"); // @todo need a cleaner integration but this at least goes the right place for now

        window.location.href = this.basePath + "lrnapp-studio-submission/submissions/" + active;
      }
      /**
       * Handle response for the whole projects object.
       */

    }, {
      key: "_handleResponse",
      value: function _handleResponse(event) {
        this.$.loading.hidden = true;
      }
      /**
       * Simple way to convert from object to array.
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_eadfe7c08e0011ed99ce491205e67b1d || (_templateObject_eadfe7c08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <custom-style>\n        <style is=\"custom-style\" include=\"materializecss-styles\">\n          :host {\n            display: block;\n            align-content: center;\n            padding: 0.8em;\n          }\n          #loading {\n            width: 100%;\n            z-index: 1000;\n            opacity: 0.8;\n            text-align: center;\n            align-content: center;\n            justify-content: center;\n            height: 100vh;\n            position: absolute;\n            background-color: white;\n          }\n          .center-data {\n            text-align: center;\n          }\n          vaadin-grid#material {\n            height: 75vh;\n            font-family: Roboto, sans-serif;\n            --divider-color: rgba(0, 0, 0, var(--dark-divider-opacity));\n\n            --vaadin-grid-cell: {\n              padding: 0;\n            }\n\n            --vaadin-grid-header-cell: {\n              height: 3.5em;\n              color: rgba(0, 0, 0, var(--dark-secondary-opacity));\n              font-size: 1em;\n            }\n\n            --vaadin-grid-body-cell: {\n              height: 3em;\n              color: rgba(0, 0, 0, var(--dark-primary-opacity));\n              font-size: 0.8em;\n            }\n\n            --vaadin-grid-body-row-hover-cell: {\n              background-color: var(--paper-grey-200);\n            }\n\n            --vaadin-grid-body-row-selected-cell: {\n              background-color: var(--paper-grey-100);\n            }\n\n            --vaadin-grid-focused-cell: {\n              box-shadow: none;\n              font-weight: bold;\n            }\n          }\n\n          vaadin-grid#material .cell {\n            overflow: hidden;\n            text-overflow: ellipsis;\n            padding-right: 56px;\n          }\n\n          vaadin-grid#material .cell.last {\n            padding-right: 24px;\n          }\n\n          vaadin-grid#material .cell.numeric {\n            text-align: right;\n          }\n\n          vaadin-grid#material simple-fields-field {\n            --primary-color: var(--paper-indigo-500);\n            margin: 0 24px;\n          }\n\n          vaadin-grid#material vaadin-grid-sorter {\n            --vaadin-grid-sorter-arrow: {\n              display: none !important;\n            }\n          }\n\n          vaadin-grid#material vaadin-grid-sorter .cell {\n            flex: 1;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n          }\n\n          vaadin-grid#material vaadin-grid-sorter simple-icon {\n            transform: scale(0.8);\n          }\n\n          vaadin-grid#material vaadin-grid-sorter:not([direction]) simple-icon {\n            color: rgba(0, 0, 0, var(--dark-disabled-opacity));\n          }\n\n          vaadin-grid#material vaadin-grid-sorter[direction] {\n            color: rgba(0, 0, 0, var(--dark-primary-opacity));\n          }\n\n          vaadin-grid#material\n            vaadin-grid-sorter[direction=\"desc\"]\n            simple-icon {\n            transform: scale(0.8) rotate(180deg);\n          }\n          vaadin-grid-sorter {\n            text-align: center;\n          }\n        </style>\n      </custom-style>\n      <vaadin-grid\n        column-reordering-allowed=\"\"\n        id=\"material\"\n        aria-label=\"Course list\"\n        items=\"{{submissions}}\"\n      >\n        <vaadin-grid-column resizable=\"\">\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"relationships.project.data.title\"\n              >Project</vaadin-grid-sorter\n            >\n          </template>\n          <template>\n            <button\n              on-click=\"_loadProjectRoute\"\n              data-project-id$=\"{{item.relationships.project.data.id}}\"\n              data-author-id$=\"{{item.relationships.author.data.id}}\"\n            >\n              [[item.relationships.project.data.title]]\n            </button>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column resizable=\"\">\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"relationships.assignment.data.title\"\n              >Assignment</vaadin-grid-sorter\n            >\n          </template>\n          <template> [[item.relationships.assignment.data.title]] </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column resizable=\"\" width=\"20em\" flex-grow=\"0\">\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"attributes.title\"\n              >Title</vaadin-grid-sorter\n            >\n          </template>\n          <template>\n            <button\n              on-click=\"_loadSubmissionUrl\"\n              data-submission-id$=\"{{item.id}}\"\n            >\n              [[item.attributes.title]]\n            </button>\n          </template>\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Title\"\n              path=\"attributes.title\"\n              value=\"[[_filterTitle]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"Title\"\n                value=\"{{_filterTitle::input}}\"\n                focus-target=\"\"\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column resizable=\"\">\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"meta.changed\"\n              >Submitted</vaadin-grid-sorter\n            >\n          </template>\n          <template> [[item.meta.humandate]] </template>\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Submitted\"\n              path=\"meta.changed\"\n              value=\"[[_filterSubmitted]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"Submitted\"\n                value=\"{{_filterSubmitted::input}}\"\n                focus-target=\"\"\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column resizable=\"\">\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"relationships.author.data.display_name\"\n              >Author</vaadin-grid-sorter\n            >\n          </template>\n          <template> [[item.relationships.author.data.display_name]] </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column resizable=\"\" width=\"[[_numWidth]]\">\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"meta.comment_count\"\n              >Comments</vaadin-grid-sorter\n            >\n          </template>\n          <template>\n            <span class=\"center-data\">[[item.meta.comment_count]]</span>\n          </template>\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Comments\"\n              path=\"meta.comment_count\"\n              value=\"[[_filterCommentsCount]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"Comments\"\n                value=\"{{_filterCommentsCount::input}}\"\n                focus-target=\"\"\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column resizable=\"\" width=\"[[_numWidth]]\">\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"attributes.images.length\"\n              >Images</vaadin-grid-sorter\n            >\n          </template>\n          <template>\n            <span class=\"center-data\">[[item.attributes.images.length]]</span>\n          </template>\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Images\"\n              path=\"attributes.images.length\"\n              value=\"[[_filterImageCount]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"Images\"\n                value=\"{{_filterImageCount::input}}\"\n                focus-target=\"\"\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column resizable=\"\" width=\"[[_numWidth]]\">\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"attributes.video.length\"\n              >Video</vaadin-grid-sorter\n            >\n          </template>\n          <template>\n            <span class=\"center-data\">[[item.attributes.video.length]]</span>\n          </template>\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Video\"\n              path=\"attributes.video.length\"\n              value=\"[[_filterVideosCount]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"Video\"\n                value=\"{{_filterVideosCount::input}}\"\n                focus-target=\"\"\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column resizable=\"\" width=\"[[_numWidth]]\">\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"attributes.links.length\"\n              >Links</vaadin-grid-sorter\n            >\n          </template>\n          <template>\n            <span class=\"center-data\">[[item.attributes.links.length]]</span>\n          </template>\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Links\"\n              path=\"attributes.links.length\"\n              value=\"[[_filterLinksCount]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"Links\"\n                value=\"{{_filterLinksCount::input}}\"\n                focus-target=\"\"\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column resizable=\"\" width=\"[[_numWidth]]\">\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"attributes.files.length\"\n              >Files</vaadin-grid-sorter\n            >\n          </template>\n          <template>\n            <span class=\"center-data\">[[item.attributes.files.length]]</span>\n          </template>\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Files\"\n              path=\"attributes.files.length\"\n              value=\"[[_filterFileCount]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"Files\"\n                value=\"{{_filterFileCount::input}}\"\n                focus-target=\"\"\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n      </vaadin-grid>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-open-studio-table";
      }
    }, {
      key: "properties",
      get: function get() {
        var _ref;

        return _ref = {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },

          /**
           * The submissions to render
           */
          submissions: {
            type: Array,
            notify: true
          },
          _numWidth: {
            type: String,
            value: "2.25em"
          },

          /**
           * Endpoint for submission data.
           */
          sourcePath: {
            type: String,
            notify: true
          }
        }, babelHelpers.defineProperty(_ref, "basePath", {
          type: String,
          notify: true
        }), babelHelpers.defineProperty(_ref, "activeSubmission", {
          type: String,
          value: null,
          notify: true
        }), _ref;
      }
    }]);
    return LrnappOpenStudioTable;
  }(_polymerElement.PolymerElement);

  _exports.LrnappOpenStudioTable = LrnappOpenStudioTable;
  customElements.define(LrnappOpenStudioTable.tag, LrnappOpenStudioTable);
});