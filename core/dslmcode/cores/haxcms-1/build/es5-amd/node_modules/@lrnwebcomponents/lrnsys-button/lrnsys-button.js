define(["exports", "../../lit/index.js", "../materializecss-styles/lib/colors.js", "../elmsln-apps/lib/elmsln-base-deps.js", "../simple-tooltip/simple-tooltip.js"], function (_exports, _index, _colors, _elmslnBaseDeps, _simpleTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysButton = void 0;

  var _templateObject_6d568280809211edaa2833647dc78c6c, _templateObject2_6d568280809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrnsys-button`
   * `A simple button for use in systems`
   * @demo demo/index.html
   * @element lrnsys-button
   */
  var LrnsysButton = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(LrnsysButton, _LitElement);

    var _super = _createSuper(LrnsysButton);

    function LrnsysButton() {
      var _this;

      babelHelpers.classCallCheck(this, LrnsysButton);
      _this = _super.call(this);
      _this.href = null;
      _this.target = null;
      _this.label = "";
      _this.icon = "";
      _this.alt = "";
      _this.iconClass = "";
      _this.buttonClass = "";
      _this.color = "";
      _this.textColor = "";
      _this.focusState = false;
      _this.disabled = false;
      setTimeout(function () {
        _this.addEventListener("mousedown", _this.tapEventOn.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("mouseover", _this.tapEventOn.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("focusin", _this.tapEventOn.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("focusout", _this.tapEventOff.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("mouseout", _this.tapEventOff.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }

    babelHelpers.createClass(LrnsysButton, [{
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        this.updated(changedProperties);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldvalue, propName) {
          if (_this2.shadowRoot && ["href", "target"].includes(propName)) {
            if (_this2[propName]) {
              _this2.shadowRoot.querySelector("#lrnsys-button-link")[propName] = _this2[propName];
            } else {
              _this2.shadowRoot.querySelector("#lrnsys-button-link").removeAttribute(propName);
            }
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_6d568280809211edaa2833647dc78c6c || (_templateObject_6d568280809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <a\n        tabindex=\"-1\"\n        id=\"lrnsys-button-link\"\n        part=\"lrnsys-button-link\"\n        ?disabled=\"", "\"\n      >\n        <button\n          id=\"button\"\n          title=\"", "\"\n          class=\"", " ", " ", "\"\n          part=\"lrnsys-button-button\"\n          ?disabled=\"", "\"\n          @focus-changed=\"", "\"\n        >\n          <div class=\"inner ", "\" part=\"lrnsys-button-inner-div\">\n            <slot name=\"prefix\"></slot>\n            <simple-icon\n              icon=\"", "\"\n              id=\"icon\"\n              ?dark=\"", "\"\n              accent-color=\"grey\"\n              contrast=\"4\"\n              class=\"", "\"\n              part=\"lrnsys-button-icon\"\n              ?hidden=\"", "\"\n            ></simple-icon>\n            <span\n              class=\"label\"\n              part=\"lrnsys-button-label\"\n              ?hidden=\"", "\"\n            >\n              ", "\n            </span>\n            <slot></slot>\n          </div>\n        </button>\n      </a>\n      <simple-tooltip\n        for=\"lrnsys-button-link\"\n        part=\"lrnsys-button-tooltip\"\n        animation-delay=\"0\"\n        ?hidden=\"", "\"\n        >", "</simple-tooltip\n      >\n    "])), this.disabled, this.alt, this.buttonClass, this.color, this.textColor, this.disabled, this.focusToggle, this.innerClass, this.icon, this.dark, this.iconClass, !this.icon, !this.label, this.label, !this.alt, this.alt);
      }
    }, {
      key: "tapEventOn",
      value:
      /**
       * Class processing on un-tap / hover
       */
      function tapEventOn(e) {
        var _this3 = this;

        if (babelHelpers.typeof(this.hoverClass) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !this.disabled) {
          // break class into array
          var classes = this.hoverClass.split(" "); // run through each and add or remove classes

          classes.forEach(function (item, index) {
            if (item != "") {
              _this3.shadowRoot.querySelector("#button").classList.add(item);

              if (item.indexOf("-") != -1) {
                _this3.shadowRoot.querySelector("#icon").classList.add(item);
              }
            }
          });
        }
      }
      /**
       * Undo class processing on un-tap / hover
       */

    }, {
      key: "tapEventOff",
      value: function tapEventOff(e) {
        var _this4 = this;

        if (babelHelpers.typeof(this.hoverClass) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !this.disabled) {
          // break class into array
          var classes = this.hoverClass.split(" "); // run through each and add or remove classes

          classes.forEach(function (item, index) {
            if (item != "") {
              _this4.shadowRoot.querySelector("#button").classList.remove(item);

              if (item.indexOf("-") != -1) {
                _this4.shadowRoot.querySelector("#icon").classList.remove(item);
              }
            }
          });
        }
      }
      /**
       * Handle toggle for mouse class and manage classList array for button.
       */

    }, {
      key: "focusToggle",
      value: function focusToggle(e) {
        var _this5 = this;

        // weird but reality... focus event is the button inside of here
        if (babelHelpers.typeof(this.hoverClass) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !this.disabled) {
          // break class into array
          var classes = this.hoverClass.split(" "); // run through each and add or remove classes

          classes.forEach(function (item, index) {
            if (item != "") {
              if (!_this5.focusState) {
                _this5.shadowRoot.querySelector("#button").classList.add(item);

                if (item.indexOf("-") != -1) {
                  _this5.shadowRoot.querySelector("#icon").classList.add(item);
                }
              } else {
                _this5.shadowRoot.querySelector("#button").classList.remove(item);

                if (item.indexOf("-") != -1) {
                  _this5.shadowRoot.querySelector("#icon").classList.remove(item);
                }
              }
            }
          });
        }

        this.focusState = !this.focusState;
      }
    }], [{
      key: "styles",
      get: function get() {
        return [_colors.materialCssStyles, (0, _index.css)(_templateObject2_6d568280809211edaa2833647dc78c6c || (_templateObject2_6d568280809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --lrnsys-button-height: 48px;\n        }\n        :host([raised]) {\n          border: 2px solid black;\n        }\n        :host([disabled]) {\n          pointer-events: none;\n        }\n        simple-icon.white-text {\n          --simple-colors-default-theme-accent-12: white;\n        }\n        a {\n          text-decoration: none;\n          display: block;\n          color: var(--lrnsys-button-link-color, #000000);\n          display: flex;\n        }\n        button {\n          padding: 0;\n          margin: 0;\n          min-width: 0.16px;\n          height: inherit;\n          -webkit-justify-content: flex-start;\n          justify-content: flex-start;\n          align-items: center;\n          width: 100%;\n          text-transform: unset;\n          border-radius: unset;\n          display: flex;\n          background-color: transparent;\n          border: none;\n          cursor: pointer;\n        }\n        button:hover {\n          cursor: pointer;\n        }\n        :host([no-padding]) button div.inner {\n          padding: 0;\n        }\n        button simple-icon {\n          --simple-icon-height: var(--lrnsys-button-height);\n          margin: 0 4px;\n        }\n        button simple-icon:first-child {\n          margin: 0 4px 0 0;\n        }\n        button simple-icon:last-child {\n          margin: 0 0 0 4px;\n        }\n        button div.inner {\n          height: var(--lrnsys-button-height);\n          line-height: var(--lrnsys-button-height);\n          display: flex;\n          padding: 0 16px;\n        }\n        button span.label {\n          height: var(--lrnsys-button-height);\n          line-height: var(--lrnsys-button-height);\n        }\n        .no-margin {\n          margin: 0 !important;\n        }\n        .no-right-padding {\n          padding-right: 0 !important;\n        }\n        .no-left-padding {\n          padding-left: 0 !important;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnsys-button";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Standard href pass down
           */
          href: {
            type: String,
            reflect: true
          },

          /**
           * If the button should be visually lifted off the UI.
           */
          raised: {
            type: Boolean,
            reflect: true
          },

          /**
           * Label to place in the text area
           */
          label: {
            type: String
          },

          /**
           * Support for target to open in new windows.
           */
          target: {
            type: String
          },

          /**
           * simple-icon to use (with iconset if needed)
           */
          icon: {
            type: String,
            reflect: true
          },

          /**
           * Classes to add / subtract based on the item being hovered.
           */
          hoverClass: {
            type: String,
            reflect: true,
            attribute: "hover-class"
          },

          /**
           * Button class.
           */
          buttonClass: {
            type: String,
            attribute: "button-class"
          },

          /**
           * Icon class in the event you want it to look different from the text.
           */
          iconClass: {
            type: String,
            attribute: "icon-class"
          },

          /**
           * Inner container classes.
           */
          innerClass: {
            type: String,
            attribute: "inner-class"
          },

          /**
           * Color class work to apply
           */
          color: {
            type: String,
            reflect: true
          },

          /**
           * materializeCSS color class for text
           */
          textColor: {
            type: String,
            attribute: "text-color"
          },

          /**
           * Alt via tooltip.
           */
          alt: {
            type: String
          },

          /**
           * Disabled state.
           */
          disabled: {
            type: Boolean
          },

          /**
           * dark state.
           */
          dark: {
            type: Boolean,
            reflect: true
          },

          /**
           * Tracks if focus state is applied
           */
          focusState: {
            type: Boolean,
            attribute: "focus-state"
          }
        };
      }
    }]);
    return LrnsysButton;
  }(_index.LitElement);

  _exports.LrnsysButton = LrnsysButton;
  customElements.define(LrnsysButton.tag, LrnsysButton);
});