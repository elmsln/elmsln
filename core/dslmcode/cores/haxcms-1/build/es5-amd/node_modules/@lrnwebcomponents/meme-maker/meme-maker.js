define(["exports", "meta", "../../lit/index.js"], function (_exports, meta, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MemeMaker = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_ab6c50608e0011ed99ce491205e67b1d, _templateObject2_ab6c50608e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `meme-maker`
   * Meme all the things
   *
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   *  - go forth and make dank memes yo
   * @element meme-maker
   */
  var MemeMaker = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(MemeMaker, _LitElement);

    var _super = _createSuper(MemeMaker);

    function MemeMaker() {
      var _this;

      babelHelpers.classCallCheck(this, MemeMaker);
      _this = _super.call(this);
      _this.alt = "";
      return _this;
    }

    babelHelpers.createClass(MemeMaker, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_ab6c50608e0011ed99ce491205e67b1d || (_templateObject_ab6c50608e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <figure>\n        <img\n          loading=\"lazy\"\n          src=\"", "\"\n          alt=\"", "\"\n          aria-describedby=\"", "\"\n        />\n        <figcaption class=\"top-text\">", "</figcaption>\n        <figcaption class=\"bottom-text\">", "</figcaption>\n      </figure>\n    "])), this.imageUrl, this.alt || "", this.describedBy || "", this.topText, this.bottomText);
      }
    }, {
      key: "haxHooks",
      value:
      /**
       * Implements haxHooks to tie into life-cycle if hax exists.
       */
      function haxHooks() {
        return {
          activeElementChanged: "haxactiveElementChanged",
          progressiveEnhancement: "haxprogressiveEnhancement",
          gizmoRegistration: "haxgizmoRegistration"
        };
      }
      /**
       * Supply translations for the UI elements of HAX in meme-maker
       */

    }, {
      key: "haxgizmoRegistration",
      value: function haxgizmoRegistration(store) {
        window.dispatchEvent(new CustomEvent("i18n-manager-register-element", {
          detail: {
            namespace: "meme-maker.haxProperties",
            localesPath: new URL("./locales", meta.url).href,
            locales: ["es", "fr"]
          }
        }));
      }
      /**
       * double-check that we are set to inactivate click handlers
       * this is for when activated in a duplicate / adding new content state
       */

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        var figures = this.shadowRoot.querySelectorAll("figcaption");

        if (val) {
          for (var i = 0; i < figures.length; i++) {
            figures[i].setAttribute("contenteditable", true);
          }
        } else {
          for (var i = 0; i < figures.length; i++) {
            figures[i].removeAttribute("contenteditable");
          } // easy, name is flat


          this.topText = this.shadowRoot.querySelector(".top-text").innerText;
          this.bottomText = this.shadowRoot.querySelector(".bottom-text").innerText;
        }

        return false;
      }
      /**
       * Hook for HAX to support progressive enhancement and return a string
       * to place in the slot of this tag for RSS, bots and legacy formats
       */

    }, {
      key: "haxprogressiveEnhancement",
      value: function haxprogressiveEnhancement(el) {
        return "\n    ".concat(this.topText ? "<div>".concat(this.topText, "</div>") : "", "\n      <img src=\"").concat(this.imageUrl, "\" alt=\"").concat(this.alt, "\" preload=\"lazy\" aria-describedby=\"").concat(this.describedBy || "", "\"/>\n    ").concat(this.bottomText ? "<div>".concat(this.bottomText, "</div>") : "");
      }
      /**
       * haxProperties integration via file reference
       */

    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_ab6c50608e0011ed99ce491205e67b1d || (_templateObject2_ab6c50608e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        * {\n          box-sizing: border-box;\n        }\n        figure {\n          position: relative;\n          width: 100%;\n          margin: 0;\n          padding: 0;\n          font-size: 20px;\n          overflow: hidden;\n        }\n        img {\n          width: 100%;\n          height: auto;\n        }\n        .top-text,\n        .bottom-text {\n          position: absolute;\n          left: 0;\n          width: 100%;\n          padding: 3% 2%;\n          text-align: center;\n          text-transform: uppercase;\n          font-weight: 900;\n          font-family: \"Impact\", \"Arial Black\", \"sans serif\";\n          line-height: 1.2;\n          font-size: var(--meme-maker-font-size, 36px);\n          color: white;\n          text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000,\n            1px 1px 0 #000;\n          letter-spacing: 2px;\n        }\n        .top-text {\n          top: 0;\n        }\n        .bottom-text {\n          bottom: 0;\n        }\n        @media (max-width: 800px) {\n          .top-text,\n          .bottom-text {\n            font-size: var(--meme-maker-font-size-medium, 20px);\n          }\n        }\n        @media (max-width: 600px) {\n          .top-text,\n          .bottom-text {\n            font-size: var(--meme-maker-font-size-small, 20px);\n          }\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "meme-maker";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Alt data passed down to appropriate tag
           */
          alt: {
            type: String
          },

          /**
           * Aria-describedby data passed down to appropriate tag
           */
          describedBy: {
            type: String,
            attribute: "described-by"
          },

          /**
           * url to the meme image
           */
          imageUrl: {
            type: String,
            attribute: "image-url",
            reflect: true
          },

          /**
           * Text on top of the image.
           */
          topText: {
            type: String,
            attribute: "top-text",
            reflect: true
          },

          /**
           * Bottom text for the image.
           */
          bottomText: {
            type: String,
            attribute: "bottom-text",
            reflect: true
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/meme-maker.haxProperties.json", meta.url).href;
      }
    }]);
    return MemeMaker;
  }(_index.LitElement);

  _exports.MemeMaker = MemeMaker;
  customElements.define(MemeMaker.tag, MemeMaker);
});