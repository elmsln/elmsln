define(["exports", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/elements/dom-repeat.js", "../../@polymer/iron-meta/iron-meta.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../../@polymer/marked-element/marked-element.js"], function (_exports, _polymerElement, _domRepeat, _ironMeta, _simpleIcon, _simpleIcons, _markedElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.IconsetDemo = void 0;

  var _templateObject_6116d420809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `iconset-demo`
   * @element iconset-demo
   * `iterates through an iconset array to generate a demo of all of the icons`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   * @demo demo/index.html
   */
  var IconsetDemo = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(IconsetDemo, _PolymerElement);

    var _super = _createSuper(IconsetDemo);

    function IconsetDemo() {
      babelHelpers.classCallCheck(this, IconsetDemo);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(IconsetDemo, [{
      key: "connectedCallback",
      value:
      /**
       * life cycle, element is ready
       */
      function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(IconsetDemo.prototype), "connectedCallback", this).call(this);
        var iconSets = new _ironMeta.IronMeta({
          type: "iconset"
        });
        var temp = [],
            root = this; // need to access iconset imperatively now

        if (babelHelpers.typeof(iconSets) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && iconSets.list && iconSets.list.length) {
          var index = 0;
          iconSets.list.forEach(function (item) {
            var name = item.name;

            if (!root._hideIconset(name)) {
              temp.push({
                name: name,
                icons: []
              });
              item.getIconNames().forEach(function (icon) {
                temp[index].icons.push(icon);
              });
              index++;
            }
          });
        }

        this.set("__iconList", []);
        this.set("__iconList", temp);
      }
      /**
       *  determines if a given iconset should be hidden
       *
       * @param {string} name the name of the iconset
       * @returns {boolean} whether or n ot to hide the iconset
       */

    }, {
      key: "_hideIconset",
      value: function _hideIconset(name) {
        var isets = this.includeSets !== null ? this.includeSets.split(/ /) : [],
            included = isets.length === 0 || isets.includes(name),
            esets = this.excludeSets !== null ? this.excludeSets.split(/ /) : [],
            excluded = esets.length.length > 0 && esets.includes(name);
        return !included || excluded;
      }
    }], [{
      key: "template",
      get: // render function
      function get() {
        return (0, _polymerElement.html)(_templateObject_6116d420809211edaa2833647dc78c6c || (_templateObject_6116d420809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <style>\n        :host {\n          display: block;\n          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n          margin-bottom: 40px;\n          padding: 20px 40px;\n        }\n\n        :host .iconset:not(:first-of-type) {\n          border-top: 1px solid #ddd;\n        }\n\n        :host ul {\n          list-style-type: none;\n          padding: 0;\n        }\n\n        :host li {\n          display: inline-block;\n          width: 160px;\n          margin: 16px 8px;\n          text-align: center;\n          font-size: 10px;\n        }\n\n        :host simple-icon {\n          font-size: 14px;\n          color: rgb(97, 97, 97);\n          display: inline-block;\n        }\n\n        :host .iconset:nth-of-type(9n + 2) simple-icon {\n          color: #be3300;\n        }\n\n        :host .iconset:nth-of-type(9n + 3) simple-icon {\n          color: #0000b5;\n        }\n\n        :host .iconset:nth-of-type(9n + 4) simple-icon {\n          color: #750075;\n        }\n\n        :host .iconset:nth-of-type(9n + 5) simple-icon {\n          color: #aa5d00;\n        }\n\n        :host .iconset:nth-of-type(9n + 6) simple-icon {\n          color: #db0a5b;\n        }\n\n        :host .iconset:nth-of-type(9n + 7) simple-icon {\n          color: #005500;\n        }\n\n        :host .iconset:nth-of-type(9n + 8) simple-icon {\n          color: #cf000f;\n        }\n\n        :host .iconset:nth-of-type(9n) simple-icon {\n          color: #005f8b;\n        }\n      </style>\n      <template is=\"dom-repeat\" items=\"[[__iconList]]\" as=\"iconset\">\n        <div class=\"iconset\">\n          <p><strong>[[iconset.name]]</strong></p>\n          <ul>\n            <template is=\"dom-repeat\" items=\"[[iconset.icons]]\" as=\"icon\">\n              <li>\n                <div id=\"icon\">\n                  <simple-icon icon$=\"[[icon]]\"></simple-icon>\n                  <div id=\"icon-text\">[[icon]]</div>\n                </div>\n              </li>\n            </template>\n          </ul>\n        </div>\n      </template>"])));
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(IconsetDemo), "properties", this)), {}, {
          /**
           * all the iconsets
           */
          __iconList: {
            name: "__iconList",
            type: Array,
            value: []
          },

          /**
           * a space-separated whitelist of iconsets by name
           */
          includeSets: {
            name: "includeSets",
            type: String,
            value: null
          },

          /**
           * a space-separated blacklist of iconsets by name
           */
          excludeSets: {
            name: "excludeSets",
            type: String,
            value: null
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "iconset-demo";
      }
    }]);
    return IconsetDemo;
  }(_polymerElement.PolymerElement);

  _exports.IconsetDemo = IconsetDemo;
  window.customElements.define(IconsetDemo.tag, IconsetDemo);
});