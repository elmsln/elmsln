define(["exports", "../../lit/index.js", "../intersection-element/lib/IntersectionObserverMixin.js"], function (_exports, _index, _IntersectionObserverMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TypeWriter = void 0;

  var _templateObject_ad6784208e0011ed99ce491205e67b1d, _templateObject2_ad6784208e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `type-writer`
   * `typewritter effect`
   * based off of https://github.com/PolymerEl/type-writer
   *
   * @demo demo/index.html
   * @element type-writer
   */
  var TypeWriter = /*#__PURE__*/function (_IntersectionObserver) {
    babelHelpers.inherits(TypeWriter, _IntersectionObserver);

    var _super = _createSuper(TypeWriter);

    /**
     * HTMLElement
     */
    function TypeWriter() {
      var _this;

      babelHelpers.classCallCheck(this, TypeWriter);
      _this = _super.call(this);
      _this.delay = 100;
      _this.cursorDuration = 0;
      _this.speed = 150;
      _this.eraseSpeed = 80;
      _this.typing = false;
      return _this;
    }

    babelHelpers.createClass(TypeWriter, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_ad6784208e0011ed99ce491205e67b1d || (_templateObject_ad6784208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <span id=\"text\"></span><span id=\"cursor\">|</span>"])));
      } // haxProperty definition

    }, {
      key: "_observeText",
      value: function _observeText(text, delay, elementVisible) {
        var _this2 = this;

        if (text && delay !== undefined && elementVisible) {
          if (this.shadowRoot.querySelector("#text").textContent) {
            this._oldText = this.shadowRoot.querySelector("#text").textContent;

            if (this.typing && this._cancel) {
              clearTimeout(this._cancel);
              this._cancel = null;
            }

            return this.erase();
          }

          this._length = 0;
          setTimeout(function () {
            _this2.type();
          }, this.delay);
        }
      }
    }, {
      key: "type",
      value: function type() {
        var _this3 = this;

        this.typing = true;
        this.shadowRoot.querySelector("#text").textContent = this.text.substr(0, this._length++);

        if (this._length < this.text.length + 1) {
          this._cancel = setTimeout(function () {
            _this3.type();
          }, this.speed + (Math.random() - 0.5) * this.speed / 2);
          return;
        }

        setTimeout(function () {
          _this3.typing = false;

          _this3.dispatchEvent(new CustomEvent("type-writer-end", {
            detail: _this3.text,
            bubbles: true,
            composed: true
          }));
        }, this.cursorDuration);
      }
    }, {
      key: "erase",
      value: function erase() {
        var _this4 = this;

        this.typing = true;
        this.shadowRoot.querySelector("#text").textContent = this._oldText.substr(0, this._length--);

        if (this._length >= 0) {
          this._cancel = setTimeout(function () {
            _this4.erase();
          }, this.eraseSpeed || this.speed);
          return;
        }

        this.type();
      }
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this5 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (["text", "delay", "elementVisible"].includes(propName)) {
            _this5._observeText(_this5.text, _this5.delay, _this5.elementVisible);
          }
        });
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_ad6784208e0011ed99ce491205e67b1d || (_templateObject2_ad6784208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n          margin: 0px 0.1em;\n        }\n\n        @keyframes flickerAnimation {\n          0% {\n            opacity: 1;\n          }\n\n          50% {\n            opacity: 0;\n          }\n\n          100% {\n            opacity: 1;\n          }\n        }\n        @-o-keyframes flickerAnimation {\n          0% {\n            opacity: 1;\n          }\n\n          50% {\n            opacity: 0;\n          }\n\n          100% {\n            opacity: 1;\n          }\n        }\n        @-moz-keyframes flickerAnimation {\n          0% {\n            opacity: 1;\n          }\n\n          50% {\n            opacity: 0;\n          }\n\n          100% {\n            opacity: 1;\n          }\n        }\n        @-webkit-keyframes flickerAnimation {\n          0% {\n            opacity: 1;\n          }\n\n          50% {\n            opacity: 0;\n          }\n\n          100% {\n            opacity: 1;\n          }\n        }\n\n        #cursor {\n          display: none;\n          opacity: 0;\n        }\n\n        :host([typing]) #cursor {\n          display: inline;\n          -webkit-animation: flickerAnimation 1s infinite;\n          -moz-animation: flickerAnimation 1s infinite;\n          -o-animation: flickerAnimation 1s infinite;\n          animation: flickerAnimation 1s infinite;\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Type writer",
            description: "typewritter effect",
            icon: "icons:android",
            color: "green",
            groups: ["Writer"],
            handles: [],
            meta: {
              author: "HAXTheWeb",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "delay",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "cursorDuration",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "text",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "speed",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "typing",
              description: "",
              inputMethod: "boolean",
              required: false,
              icon: "icons:android"
            }],
            advanced: []
          },
          saveOptions: {
            unsetAttributes: ["element-visible"]
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(TypeWriter), "properties", this)), {}, {
          delay: {
            type: Number
          },
          cursorDuration: {
            type: Number,
            attribute: "cursor-duration"
          },
          text: {
            type: String
          },
          speed: {
            type: Number
          },
          elementVisible: {
            type: Boolean
          },
          eraseSpeed: {
            type: Number,
            attribute: "erase-speed"
          },
          typing: {
            type: Boolean,
            reflect: true
          },
          _length: {
            type: Number
          },
          _oldText: {
            type: String
          }
        });
      }
      /**
       * Convention we use
       */

    }, {
      key: "tag",
      get: function get() {
        return "type-writer";
      }
    }]);
    return TypeWriter;
  }((0, _IntersectionObserverMixin.IntersectionObserverMixin)(_index.LitElement));

  _exports.TypeWriter = TypeWriter;
  customElements.define(TypeWriter.tag, TypeWriter);
});