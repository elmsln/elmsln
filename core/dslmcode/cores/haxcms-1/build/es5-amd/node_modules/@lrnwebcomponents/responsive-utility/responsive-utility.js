define(["exports", "../../lit/index.js", "../../@juggle/resize-observer/lib/exports/resize-observer.js"], function (_exports, _index, _resizeObserver) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ResponsiveUtility = void 0;

  var _templateObject_70fe2dc0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `responsive-utility`
   * A singleton that manages responsive resize events for elements that invoke it.
   *
   * @element responsive-utility
   * @extends IronResizableBehavior
   * @demo ./index.html
   */
  window.ResponsiveUtility = {};
  window.ResponsiveUtility.instance = null;

  var ResponsiveUtility = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(ResponsiveUtility, _LitElement);

    var _super = _createSuper(ResponsiveUtility);

    /**
     * An array of objects. Each object is contains data about an element
     * that will be updated with responsive values.
     *
     * To add an element to this array, fire a 'responsive-element' event
     * with the following data:
     *
     * {
     *   "element": (the element itself),
     *   "attribute": (the attribute that will be set with the size),
     *   "sm": (optional custom sm breakpoint, default is 900),
     *   "md": (optional custom md breakpoint, default is 1200),
     *   "lg": (optional custom lg breakpoint, default is 1500),
     *   "xl": (optional custom xl breakpoint, default is 1800),
     * }
     *
     */

    /**
     * Makes sure there is a utility ready and listening for elements.
     */
    function ResponsiveUtility() {
      var _this;

      babelHelpers.classCallCheck(this, ResponsiveUtility);
      _this = _super.call(this);
      _this.details = [];
      if (window.ResponsiveUtility.instance == null) window.ResponsiveUtility.instance = babelHelpers.assertThisInitialized(_this);
      return _this;
    }

    babelHelpers.createClass(ResponsiveUtility, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_70fe2dc0809211edaa2833647dc78c6c || (_templateObject_70fe2dc0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <slot></slot> "])));
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ResponsiveUtility.prototype), "connectedCallback", this).call(this);
        /* handle element registration */

        window.addEventListener("responsive-element", this.responiveElementEvent.bind(this));
        /* handle element deregistration */

        window.addEventListener("delete-responsive-element", this.deleteResponiveElementEvent.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("responsive-element", this.responiveElementEvent.bind(this));
        /* handle element deregistration */

        window.removeEventListener("delete-responsive-element", this.deleteResponiveElementEvent.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(ResponsiveUtility.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * adds a responsive element to the details array
       *
       * @param {event} e event to add responsive element
       * @memberof ResponsiveUtility
       */

    }, {
      key: "responiveElementEvent",
      value: function responiveElementEvent(e) {
        var detail = {
          element: e.detail.element,
          attribute: e.detail.attribute || "responsive-size",
          sm: e.detail.sm || 900,
          md: e.detail.md || 1200,
          lg: e.detail.lg || 1500,
          xl: e.detail.xl || 1800,
          custom: e.detail.custom || "responsive-width"
        };
        detail.observer = this._getObserver(detail);
        detail.observer.observe(detail.element);
        this.details.push(detail);
        window.ResponsiveUtility.setSize(detail);
      }
    }, {
      key: "_getObserver",
      value: function _getObserver(detail) {
        return new _resizeObserver.ResizeObserver(function (en) {
          return en.forEach(function (e) {
            return window.ResponsiveUtility.setSize(detail, e.contentBoxSize || e.borderBoxSize || e.contentRect || e.target ? e.target.offsetWidth : 0);
          });
        });
      }
      /**
       * deletes the responsive element from the details array
       * @param {event} e event to add responsive element
       */

    }, {
      key: "deleteResponiveElementEvent",
      value: function deleteResponiveElementEvent(e) {
        this.details = this.details.filter(function (detail) {
          return e.detail !== detail;
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return "responsive-utility";
      }
    }]);
    return ResponsiveUtility;
  }(_index.LitElement);

  _exports.ResponsiveUtility = ResponsiveUtility;
  customElements.define(ResponsiveUtility.tag, ResponsiveUtility);

  /**
   * Checks to see if there is an instance available, and if not appends one
   */
  window.ResponsiveUtility.requestAvailability = function () {
    if (window.ResponsiveUtility.instance == null) {
      window.ResponsiveUtility.instance = document.createElement("responsive-utility");
    }

    document.body.appendChild(window.ResponsiveUtility.instance);
  };
  /**
   * Sets responsive size based on detail provided by reponsive element
   * @param {object} detail object with element details, as in {
   *   "element": (the element itself),
   *   "attribute": (the attribute that will be set with the size),
   *   "sm": (optional custom sm breakpoint, default is 900),
   *   "md": (optional custom md breakpoint, default is 1200),
   *   "lg": (optional custom lg breakpoint, default is 1500),
   *   "xl": (optional custom xl breakpoint, default is 1800),
   * }
   */


  window.ResponsiveUtility.setSize = function (detail) {
    var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var size,
        el = detail.element,
        attr = detail.attribute,
        custom = detail.custom;

    if (width < detail.sm) {
      size = "xs";
    } else if (width < detail.md) {
      size = "sm";
    } else if (width < detail.lg) {
      size = "md";
    } else if (width < detail.xl) {
      size = "lg";
    } else {
      size = "xl";
    }

    if (!el.getAttribute(custom) || width !== el.getAttribute(custom)) el.setAttribute(custom, width);
    if (!el.getAttribute(attr) || size !== el.getAttribute(attr)) el.setAttribute(attr, size);
  };
});