define(["exports", "meta", "../../lit/index.js", "../simple-colors/simple-colors.js"], function (_exports, meta, _index, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RpgCharacter = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_ac7757c08e0011ed99ce491205e67b1d, _templateObject2_ac7757c08e0011ed99ce491205e67b1d, _templateObject3_ac7757c08e0011ed99ce491205e67b1d, _templateObject4_ac7757c08e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // default movement speed
  var defaultSpeed = 500; // default list of non-status related hats

  var hatList = ["bunny", "coffee", "construction", "cowboy", "education", "knight", "ninja", "party", "pirate", "watermelon"];
  /**
   * `rpg-character`
   * `Little RPG character that&#39;s remixable`
   * @demo demo/index.html
   * @element rpg-character
   */

  var RpgCharacter = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(RpgCharacter, _SimpleColors);

    var _super = _createSuper(RpgCharacter);

    /**
     * HTMLElement
     */
    function RpgCharacter() {
      var _this;

      babelHelpers.classCallCheck(this, RpgCharacter);
      _this = _super.call(this);
      _this.height = 142;
      _this.width = 113;
      _this.accessories = 0;
      _this.base = 0;
      _this.face = 0;
      _this.faceItem = 0;
      _this.hair = 0;
      _this.pants = 0;
      _this.shirt = 0;
      _this.skin = 0;
      _this.accentColor = "orange";
      _this.seed = null;
      _this.walking = false;
      _this.leg = "";
      _this.speed = 500;
      _this.__walkingTimeout = null;
      _this.circle = false;
      _this.hat = "none";
      _this.hatColor = 0;
      _this.demo = false;
      _this.fire = false;
      _this.reduceMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;
      return _this;
    }

    babelHelpers.createClass(RpgCharacter, [{
      key: "randomColor",
      value: function randomColor() {
        var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        if (seed === null) {
          seed = "" + Math.floor(Math.random() * Object.keys(this.colors).length);
        }

        return Object.keys(this.colors)[seed];
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(RpgCharacter.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(RpgCharacter.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        if (this.seed === null) {
          this.seed = Math.random().toString(36).substring(2, 12);
        }
      }
      /**
       * LitElement render callback
       */

    }, {
      key: "render",
      value: function render() {
        var accessories = new URL("./lib/accessories/".concat(this.accessories, ".svg"), meta.url).href;
        var base = new URL("./lib/base/".concat(this.base).concat(this.leg, ".svg"), meta.url).href;
        var leg = new URL("./lib/base/".concat(this.leg, ".svg"), meta.url).href;
        var face = new URL("./lib/face/".concat(this.face, ".svg"), meta.url).href;
        var faceItem = new URL("./lib/faceItem/".concat(this.faceItem, ".svg"), meta.url).href;
        var hair = new URL("./lib/hair/".concat(this.hair, ".svg"), meta.url).href;
        var pants = new URL("./lib/pants/".concat(this.pants, ".svg"), meta.url).href;
        var shirt = new URL("./lib/shirt/".concat(this.shirt, ".svg"), meta.url).href;
        var skin = new URL("./lib/skin/".concat(this.skin, ".svg"), meta.url).href;
        var hatFileName = this.hat; // special cases to change hat from the one requested

        if (this.fire && this.hat === "none") {
          hatFileName = "coffee";
        } else if (this.hat === "random") {
          hatFileName = hatList[Math.floor(Math.random() * hatList.length)];
        }

        var hat = new URL("./lib/hat/".concat(hatFileName, ".svg"), meta.url).href;
        var hatColor = new URL("./lib/hatColor/".concat(this.hatColor, ".svg"), meta.url).href;
        var fire = new URL("./lib/base/fire.svg", meta.url).href;
        var circle = new URL("./lib/circle.svg", meta.url).href;
        return (0, _index.html)(_templateObject_ac7757c08e0011ed99ce491205e67b1d || (_templateObject_ac7757c08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"wrapper\">\n        ", "\n        ", "\n        ", " ", "\n        ", " ", "\n        ", " ", "\n        ", "\n        ", " ", "\n        ", "\n        ", "\n      </div>\n      ", "\n      <style>\n        #cardcircle {\n          fill: var(\n            --simple-colors-default-theme-", "-8,\n            var(--simple-colors-default-theme-accent-8, yellow)\n          );\n        }\n        div {\n          width: ", ";\n        }\n        .wrapper {\n          height: ", ";\n        }\n      </style>\n    "])), this.renderPiece(skin), this.base === 1 ? this.renderPiece(hair) : "", this.renderPiece(face), this.renderPiece(faceItem), this.renderPiece(shirt), this.renderPiece(pants), this.renderPiece(accessories), this.renderPiece(base), this.leg !== "" ? this.renderPiece(leg) : "", this.renderPiece(hatColor), this.fire ? this.renderPiece(fire) : "", hatFileName !== "none" ? this.renderPiece(hat) : "", this.circle ? this.renderPiece(circle) : "", this.demo ? (0, _index.html)(_templateObject2_ac7757c08e0011ed99ce491205e67b1d || (_templateObject2_ac7757c08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<div id=\"demo\">", "</div>"])), this.seed) : "", this.accentColor, this.width + "px", this.height + "px");
      }
    }, {
      key: "renderPiece",
      value: function renderPiece(piece) {
        return (0, _index.svg)(_templateObject3_ac7757c08e0011ed99ce491205e67b1d || (_templateObject3_ac7757c08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n    <svg xmlns=\"http://www.w3.org/2000/svg\" part=\"rpg-character-item\" viewBox=\"0 0 ", " ", "\" preserveAspectRatio=\"xMidYMid meet\">\n      <image\n        href=\"", "\"\n        width=\"", "px\"\n        height=\"", "px\"\n        focusable=\"false\"\n        preserveAspectRatio=\"xMidYMid meet\"\n      ></image>\n    </svg>"])), this.width, this.height, piece, this.width, this.height);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(RpgCharacter.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(RpgCharacter.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "fire") {
            _this2.speed = _this2[propName] ? 100 : defaultSpeed;
          }

          if (propName === "demo") {
            if (_this2[propName]) {
              _this2.shadowRoot.querySelector(".wrapper").addEventListener("click", function (e) {
                _this2.seed = Math.random().toString(36).substring(2, 12);
              });
            } else {
              _this2.shadowRoot.querySelector(".wrapper").removeEventListener("click", function (e) {
                e.target.seed = Math.random().toString(36).substring(2, 12);
              });
            }
          }

          if ((propName === "leg" || propName === "walking") && _this2.walking && !_this2.reduceMotion) {
            clearTimeout(_this2.__walkingTimeout);
            _this2.__walkingTimeout = setTimeout(function () {
              switch (_this2.leg) {
                case "":
                  _this2.leg = "R";
                  break;

                case "R":
                  _this2.leg = "L";
                  break;

                case "L":
                  _this2.leg = "";
                  break;
              }
            }, _this2.speed);
          }

          if (propName === "seed" && _this2[propName]) {
            // use the seed to generate a random number
            var seed = 54;

            for (var i = 0; i < _this2.seed.length; i++) {
              // hard limit of 64 to be safe bc of calculation since seed is supposed to be like a name
              if (i < 64) {
                seed *= _this2.seed.charCodeAt(i);
              }
            }

            var funKeys = {
              zpg: "7501517984378880262144",
              edtechjoker: "712215550",
              btopro: "7122155501"
            }; // ensure huge numbers dont bust JS max

            seed = BigInt(seed).toString();

            if (Object.keys(funKeys).includes(_this2[propName])) {
              seed = funKeys[_this2[propName]];
            }

            var charBuilder = {
              accessories: 9,
              base: 1,
              leg: ["", "R", "L"],
              face: 5,
              faceItem: 9,
              hair: 9,
              pants: 9,
              shirt: 9,
              skin: 9,
              hatColor: 9
            };
            Object.keys(charBuilder).forEach(function (trait, key) {
              if (seed[key] !== undefined) {
                if (trait === "leg") {
                  _this2[trait] = charBuilder[trait][Math.floor(Math.random() * Object.keys(charBuilder[trait]).length)];
                } // base needs to be even 50/50 split
                else if (trait === "base") {
                    _this2[trait] = seed[key] >= 5 ? 1 : 0;
                  } else if (trait === "face") {
                    _this2[trait] = seed[key] > 5 ? 1 : seed[key];
                  } else {
                    _this2[trait] = seed[key];
                  }
              } else {
                _this2[trait] = 0;
              }
            });
          }
        });
      }
      /**
       * haxProperties integration via file reference
       */

    }], [{
      key: "tag",
      get:
      /**
       * Convention we use
       */
      function get() {
        return "rpg-character";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RpgCharacter), "properties", this)), {}, {
          accessories: {
            type: Number
          },
          height: {
            type: Number
          },
          width: {
            type: Number
          },
          base: {
            type: Number
          },
          face: {
            type: Number
          },
          faceItem: {
            type: Number
          },
          hair: {
            type: Number
          },
          pants: {
            type: Number
          },
          shirt: {
            type: Number
          },
          skin: {
            type: Number
          },
          hatColor: {
            type: Number
          },
          hat: {
            type: String
          },
          walking: {
            type: Boolean,
            reflect: true
          },
          leg: {
            type: String
          },
          seed: {
            type: String,
            reflect: true
          },
          speed: {
            type: Number
          },
          circle: {
            type: Boolean,
            reflect: true
          },
          fire: {
            type: Boolean,
            reflect: true
          },
          demo: {
            type: Boolean
          },
          reduceMotion: {
            type: Boolean
          }
        });
      }
      /**
       * LitElement style callback
       */

    }, {
      key: "styles",
      get: function get() {
        // support for using in other classes
        var styles = [];

        if (babelHelpers.get(babelHelpers.getPrototypeOf(RpgCharacter), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(RpgCharacter), "styles", this);
        }

        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject4_ac7757c08e0011ed99ce491205e67b1d || (_templateObject4_ac7757c08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n          margin: 0;\n          padding: 0;\n          text-align: initial;\n          position: relative;\n        }\n        svg,\n        img {\n          position: absolute;\n          margin: 0;\n          padding: 0;\n          text-align: initial;\n        }\n        div {\n          transition: 0.3s ease-in-out background-color;\n          margin: 0;\n          padding: 0;\n          text-align: initial;\n        }\n        #demo {\n          height: 30px;\n          padding-top: 10px;\n          text-align: center;\n          background-color: black;\n          color: white;\n          font-weight: bold;\n        }\n      "])))]);
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }]);
    return RpgCharacter;
  }(_simpleColors.SimpleColors);

  _exports.RpgCharacter = RpgCharacter;
  customElements.define(RpgCharacter.tag, RpgCharacter);
});