define(["exports", "../../../mobx/dist/mobx.esm.js", "../../haxcms-elements/lib/core/haxcms-site-store.js", "./lrs-bridge.js"], function (_exports, _mobxEsm, _haxcmsSiteStore, _lrsBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrsBridgeHaxcms = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrs-bridge-haxcms`
   * `Adds HAXcms event listeners for our LRS.`
   * @demo demo/index.html
   */
  var LrsBridgeHaxcms = /*#__PURE__*/function (_LrsBridge) {
    babelHelpers.inherits(LrsBridgeHaxcms, _LrsBridge);

    var _super = _createSuper(LrsBridgeHaxcms);

    function LrsBridgeHaxcms() {
      var _this;

      babelHelpers.classCallCheck(this, LrsBridgeHaxcms);
      _this = _super.call(this);
      (0, _mobxEsm.autorun)(function () {
        _this._locationChanged((0, _mobxEsm.toJS)(_haxcmsSiteStore.store.location));
      });
      return _this;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */


    babelHelpers.createClass(LrsBridgeHaxcms, [{
      key: "_locationChanged",
      value: function _locationChanged(location) {
        // trim slash from begining and end
        var trimSlash = function trimSlash(string) {
          return string.replace(/(^\/|\/$)/, "");
        };

        var url = "".concat(trimSlash(location.baseUrl), "/").concat(trimSlash(location.pathname));
        this.recordStatement({
          verb: {
            id: "viewed"
          },
          object: {
            id: url
          }
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return "lrs-bridge-haxcms";
      }
    }]);
    return LrsBridgeHaxcms;
  }(_lrsBridge.LrsBridge);

  _exports.LrsBridgeHaxcms = LrsBridgeHaxcms;
  customElements.define(LrsBridgeHaxcms.tag, LrsBridgeHaxcms);
});