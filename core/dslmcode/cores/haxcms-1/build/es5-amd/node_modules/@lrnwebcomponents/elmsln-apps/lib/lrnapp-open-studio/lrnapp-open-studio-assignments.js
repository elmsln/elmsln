define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../lrnsys-button/lrnsys-button.js", "../../../lrndesign-avatar/lrndesign-avatar.js", "../../../materializecss-styles/materializecss-styles.js", "../lrnapp-studio-submission/lrnapp-studio-submission-display.js"], function (_exports, _polymerElement, _polymerDom, _domIf, _domRepeat, _lrnsysButton, _lrndesignAvatar, _materializecssStyles, _lrnappStudioSubmissionDisplay) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappOpenStudioAssignments = void 0;

  var _templateObject_ead894c08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappOpenStudioAssignments = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappOpenStudioAssignments, _PolymerElement);

    var _super = _createSuper(LrnappOpenStudioAssignments);

    function LrnappOpenStudioAssignments() {
      babelHelpers.classCallCheck(this, LrnappOpenStudioAssignments);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappOpenStudioAssignments, [{
      key: "_loadSubmissionUrl",
      value:
      /**
       * Handle tap on button above to redirect to the correct submission url.
       */
      function _loadSubmissionUrl(e) {
        var root = this;
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var local = normalizedEvent.localTarget; // this will have the id of the current submission

        var active = local.getAttribute("data-submission-id"); // @todo need a cleaner integration but this at least goes the right place for now

        window.location.href = this.basePath + "lrnapp-studio-submission/submissions/" + active;
      }
    }, {
      key: "_activeAssignmentCompute",
      value: function _activeAssignmentCompute(activeAssignmentId, assignments) {
        var activeAssignment = null;

        if (assignments) {
          activeAssignment = assignments.find(function (assignment) {
            return assignment.id == activeAssignmentId;
          });
        }

        return activeAssignment;
      }
    }, {
      key: "_showSubmissions",
      value: function _showSubmissions(activeAssignmentId) {
        if (activeAssignmentId) {
          return true;
        }

        return false;
      }
    }, {
      key: "_scrollToTarget",
      value: function _scrollToTarget(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var local = normalizedEvent.localTarget; // this will have the id of the current submission

        var active = local.getAttribute("data-submission-id");
        this.shadowRoot.querySelector("#submission-" + active).scrollIntoView({
          block: "start",
          behavior: "smooth"
        });
      }
      /**
       * Handle response for the whole assignments object.
       */

    }, {
      key: "_handleResponse",
      value: function _handleResponse(event) {
        this.$.loading.hidden = true;
      }
      /**
       * Simple way to convert from object to array.
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_ead894c08e0011ed99ce491205e67b1d || (_templateObject_ead894c08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"materializecss-styles\"></style>\n      <style>\n        :host {\n          display: block;\n          align-content: center;\n        }\n        #loading {\n          width: 100%;\n          z-index: 1000;\n          opacity: 0.8;\n          text-align: center;\n          align-content: center;\n          justify-content: center;\n          height: 100vh;\n          position: absolute;\n          background-color: white;\n        }\n        h1.empty-title,\n        h1.assignment-title {\n          font-size: 32px;\n        }\n        .submission-title {\n          font-size: 28px;\n          font-weight: bold;\n          width: 100%;\n          margin-bottom: 2rem;\n          text-transform: none;\n        }\n        .submission-list {\n          display: flex;\n          align-items: center;\n        }\n        .submission-list-item {\n          overflow: hidden;\n          text-overflow: ellipsis;\n          word-break: break-all;\n          word-wrap: break-word;\n        }\n      </style>\n      <template is=\"dom-if\" if=\"[[!showSubmissions]]\">\n        <h1 class=\"empty-title black-text\">\n          Please select an Assignment in order to view all submissions\n        </h1>\n      </template>\n      <template is=\"dom-if\" if=\"[[showSubmissions]]\">\n        <h1 class=\"assignment-title black-text\">\n          [[activeAssignment.attributes.title]]\n        </h1>\n        <div class=\"submission-list\">\n          <template is=\"dom-repeat\" items=\"[[submissions]]\" as=\"submission\">\n            <lrnsys-button\n              on-click=\"_scrollToTarget\"\n              raised=\"\"\n              class=\"submission-list-item\"\n              button-class=\"submission-list-item\"\n              hover-class=\"blue white-text\"\n              data-submission-id$=\"[[submission.id]]\"\n            >\n              <span slot=\"button\">\n                <lrndesign-avatar\n                  src=\"[[submission.relationships.author.data.avatar]]\"\n                  label=\"[[submission.relationships.author.data.name]]\"\n                  style=\"display:inline-block;\"\n                  data-submission-id$=\"[[submission.id]]\"\n                ></lrndesign-avatar>\n              </span>\n              <span slot=\"label\"\n                >[[submission.relationships.author.data.display_name]]</span\n              >\n            </lrnsys-button>\n          </template>\n        </div>\n        <template is=\"dom-repeat\" items=\"[[submissions]]\" as=\"submission\">\n          <lrnapp-studio-submission-display\n            id$=\"submission-[[submission.id]]\"\n            submission=\"[[submission]]\"\n            class=\"ferpa-protect\"\n          ></lrnapp-studio-submission-display>\n          <a tabindex=\"-1\"\n            ><button\n              class=\"submission-title ferpa-protect\"\n              on-click=\"_loadSubmissionUrl\"\n              data-submission-id$=\"[[submission.id]]\"\n            >\n              Tap to comment on [[submission.attributes.title]] by\n              [[submission.relationships.author.data.display_name]]\n            </button></a\n          >\n        </template>\n      </template>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-open-studio-assignments";
      }
    }, {
      key: "properties",
      get: function get() {
        return babelHelpers.defineProperty({
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },

          /**
           * The assignments that exist so we can make other calls for data
           */
          assignments: {
            type: Array,
            notify: true
          },

          /**
           * The submissions that exist so we can make other calls for data
           */
          submissions: {
            type: Array,
            notify: true
          },
          activeAssignmentId: {
            type: String,
            reflectToAttribute: true,
            value: null,
            notify: true
          },
          activeAssignment: {
            type: Object,
            notify: true,
            computed: "_activeAssignmentCompute(activeAssignmentId, assignments)"
          },
          activeAuthorId: {
            type: String,
            reflectToAttribute: true,
            value: null,
            notify: true
          },
          showSubmissions: {
            type: Boolean,
            computed: "_showSubmissions(activeAssignmentId)",
            value: false,
            notify: true
          },

          /**
           * Endpoint for submission data.
           */
          sourcePath: {
            type: String,
            notify: true
          }
        }, "basePath", {
          type: String,
          notify: true
        });
      }
    }]);
    return LrnappOpenStudioAssignments;
  }(_polymerElement.PolymerElement);

  _exports.LrnappOpenStudioAssignments = LrnappOpenStudioAssignments;
  customElements.define(LrnappOpenStudioAssignments.tag, LrnappOpenStudioAssignments);
});