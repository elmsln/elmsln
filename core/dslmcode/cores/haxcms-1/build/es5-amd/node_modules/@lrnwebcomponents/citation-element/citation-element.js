define(["exports", "../../lit/index.js", "../schema-behaviors/schema-behaviors.js", "../license-element/license-element.js", "../utils/utils.js"], function (_exports, _index, _schemaBehaviors, _licenseElement, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CitationElement = void 0;

  var _templateObject_63f90c80809211edaa2833647dc78c6c, _templateObject2_63f90c80809211edaa2833647dc78c6c, _templateObject3_63f90c80809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `citation-element`
   * An element dedicated to presenting and managing a correct citation on the web
   * both visually as well as semantically with simple inputs.
   * @demo demo/index.html
   * @element citation-element
   */
  var CitationElement = /*#__PURE__*/function (_SchemaBehaviors) {
    babelHelpers.inherits(CitationElement, _SchemaBehaviors);

    var _super = _createSuper(CitationElement);

    /**
     * HTMLElement
     */
    function CitationElement() {
      var _this;

      babelHelpers.classCallCheck(this, CitationElement);
      _this = _super.call(this);
      _this.scope = "sibling";
      _this.source = "";
      return _this;
    }
    /**
     * LitElement properties changed
     */


    babelHelpers.createClass(CitationElement, [{
      key: "render",
      value:
      /**
       * LitElement render
       */
      function render() {
        return (0, _index.html)(_templateObject_63f90c80809211edaa2833647dc78c6c || (_templateObject_63f90c80809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <meta\n        about=\"", "\"\n        property=\"cc:attributionUrl\"\n        content=\"", "\"\n      />\n      <meta\n        about=\"", "\"\n        property=\"cc:attributionName\"\n        typeof=\"oer:Text\"\n        content=\"", "\"\n      />\n      <meta\n        rel=\"cc:license\"\n        href=\"", "\"\n        content=\"License: ", "\"\n      />\n      <cite\n        ><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"", "\"\n          >", "</a\n        >\n        by\n        ", "", ".\n        Accessed <span class=\"citation-date\">", "</span>.</cite\n      >\n    "])), this.relatedResource, this.source, this.relatedResource, this.title, this.licenseLink, this.licenseName, this.source, this.title, this.creator, this.licenseName ? (0, _index.html)(_templateObject2_63f90c80809211edaa2833647dc78c6c || (_templateObject2_63f90c80809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([", licensed under\n              <a\n                class=\"license-link\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href=\"", "\"\n                ><img\n                  loading=\"lazy\"\n                  alt=\"", " graphic\"\n                  src=\"", "\"\n                  ?hidden=\"", "\"\n                  width=\"44px\"\n                  height=\"16px\"\n                />", "</a\n              >"])), this.licenseLink, this.licenseName, this.licenseImage, !this.licenseImage, this.licenseName) : "", this.date);
      }
      /**
       * convention
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "scope") {
            _this2._scopeChanged(_this2[propName]);
          }

          if (propName == "license") {
            _this2._licenseUpdated(_this2[propName]);
          }

          if (["relatedResource", "licenseLink"].includes(propName)) {
            _this2._aboutLink = _this2._generateAboutLink(_this2.relatedResource, _this2.licenseLink);
          }

          if (propName == "source") {
            _this2._licenseLink = _this2._generateLicenseLink(_this2.source);
          }
        });
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "_generateLicenseLink",
      value:
      /**
       * Generate a license link whenever we have a source
       * @param {href} source
       */
      function _generateLicenseLink(source) {
        // remove existing if this is moving around
        if (this._licenseLink) {
          document.head.removeChild(this._licenseLink);
        }

        var link = document.createElement("link");
        link.setAttribute("typeof", "resource");
        link.setAttribute("rel", "license");
        link.setAttribute("src", source);
        document.head.appendChild(link);
        return link;
      }
      /**
       * Generate an about link whenever we have a related resource and license link
       * @param {uuid / id} relatedResource
       * @param {href} licenseLink
       */

    }, {
      key: "_generateAboutLink",
      value: function _generateAboutLink(relatedResource, licenseLink) {
        // remove existing if this is moving around
        if (this._aboutLink) {
          document.head.removeChild(this._aboutLink);
        }

        var link = document.createElement("link");
        link.setAttribute("about", relatedResource);
        link.setAttribute("property", "cc:license");
        link.setAttribute("content", licenseLink);
        document.head.appendChild(link);
        return link;
      }
      /**
       * Notice scope change.
       */

    }, {
      key: "_scopeChanged",
      value: function _scopeChanged(newValue) {
        // make sure we actually have a sibling first
        if (newValue === "sibling" && this.previousElementSibling !== null) {
          // find the sibling element in the DOM and associate to it's resource ID
          // also generate a resource ID if it doesn't have one
          if (this.previousElementSibling.getAttribute("resource")) {
            this.relatedResource = this.previousElementSibling.getAttribute("resource");
          } else {
            var uuid = (0, _utils.generateResourceID)();
            this.relatedResource = uuid;
            this.previousElementSibling.setAttribute("resource", uuid);
          } // set prefix on the main element itself


          this.previousElementSibling.setAttribute("prefix", this.getAttribute("prefix"));
        } else if (newValue === "parent") {
          // find the parent and associate to it's resource ID, if it doesn't have one
          // then let's make one dynamically
          if (this.parentNode.getAttribute("resource")) {
            this.relatedResource = this.parentNode.getAttribute("resource");
          } else {
            var _uuid = (0, _utils.generateResourceID)();

            this.relatedResource = _uuid;
            this.parentNode.setAttribute("resource", _uuid);
          } // set prefix on the main element itself


          this.parentNode.setAttribute("prefix", this.getAttribute("prefix"));
        }
      }
      /**
       * Attached to the DOM, now fire.
       */

    }, {
      key: "_licenseUpdated",
      value:
      /**
       * License was updated, time to update license name and link.
       */
      function _licenseUpdated(newValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          var list = new _licenseElement.licenseList();

          if (babelHelpers.typeof(list[newValue]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.licenseName = list[newValue].name;
            this.licenseLink = list[newValue].link;
            this.licenseImage = list[newValue].image;
          }
        }
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject3_63f90c80809211edaa2833647dc78c6c || (_templateObject3_63f90c80809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          color: var(--license-text-color);\n        }\n        :host([display-method=\"footnote\"]) {\n          visibility: hidden;\n          opacity: 0;\n        }\n        :host([display-method=\"popup\"]) {\n          display: block;\n        }\n        .license-link {\n          font-size: 16px;\n          line-height: 16px;\n          font-style: italic;\n        }\n        .citation-date {\n          font-size: 16px;\n          line-height: 16px;\n          font-style: italic;\n        }\n        .license-link img {\n          margin-right: 8px;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "citation-element";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(CitationElement), "properties", this)), {}, {
          /**
           * Title of the work.
           */
          title: {
            type: String
          },

          /**
           * License scope
           */
          scope: {
            type: String
          },

          /**
           * How to present the citation on the interface.
           * Can be popup, footnote, or default behavior which is visible
           */
          displayMethod: {
            type: String,
            reflect: true,
            attribute: "display-method"
          },

          /**
           * Person or group that owns / created the work.
           */
          creator: {
            type: String
          },

          /**
           * Original Source of the work in question
           */
          source: {
            type: String
          },

          /**
           * Date the work was accessed.
           */
          date: {
            type: String
          },

          /**
           * License name, calculated or supplied by the end user if we don't have them.
           */
          licenseName: {
            type: String,
            attribute: "license-name"
          },

          /**
           * License link for more details
           */
          licenseLink: {
            type: String,
            attribute: "license-link"
          },

          /**
           * License short hand. Options cc0,
           */
          license: {
            type: String
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: true,
          gizmo: {
            title: "Citation",
            description: "A basic citation element with 3 presentation modes",
            icon: "editor:title",
            color: "grey",
            groups: ["Content", "Copyright"],
            handles: [{
              type: "citation",
              source: "source",
              title: "title",
              author: "creator",
              license: "license",
              accessDate: "date"
            }],
            meta: {
              author: "HAXTheWeb core team"
            }
          },
          settings: {
            configure: [{
              property: "title",
              title: "Title",
              description: "The title of the work being cited.",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "source",
              title: "Source link",
              description: "The source url for the element this is citing.",
              inputMethod: "textfield",
              icon: "link",
              validationType: "url"
            }, {
              property: "date",
              title: "Date accessed",
              description: "The date this was accessed.",
              inputMethod: "textfield",
              icon: "link"
            }, {
              property: "scope",
              title: "Scope",
              description: "Scope of what to cite.",
              inputMethod: "select",
              options: {
                sibling: "Sibling element",
                parent: "Parent element"
              },
              icon: "code"
            }, {
              property: "license",
              title: "License",
              description: "The source url for the element this is citing.",
              inputMethod: "select",
              options: new _licenseElement.licenseList("select"),
              icon: "link"
            }, {
              property: "creator",
              title: "Creator",
              description: "Who made or owns this.",
              inputMethod: "textfield",
              icon: "link"
            }],
            advanced: []
          },
          demoSchema: [{
            tag: "citation-element",
            properties: {
              creator: "Cool Joe",
              license: "by",
              title: "Te Futr Da Biz",
              source: "https://duckduckgo.com/",
              date: "03/07/2020"
            },
            content: ""
          }]
        };
      }
    }]);
    return CitationElement;
  }((0, _schemaBehaviors.SchemaBehaviors)(_index.LitElement));

  _exports.CitationElement = CitationElement;
  customElements.define(CitationElement.tag, CitationElement);
});