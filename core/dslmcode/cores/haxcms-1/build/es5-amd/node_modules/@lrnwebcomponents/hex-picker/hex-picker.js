define(["exports", "../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HexPicker = void 0;

  var _templateObject_a57efae08e0011ed99ce491205e67b1d, _templateObject2_a57efae08e0011ed99ce491205e67b1d, _templateObject3_a57efae08e0011ed99ce491205e67b1d, _templateObject4_a57efae08e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hex-picker`
   * `Choose a color by hex or rgba code`
   * @demo demo/index.html
   * @element hex-picker
   */
  var HexPicker = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HexPicker, _LitElement);

    var _super = _createSuper(HexPicker);

    /**
     * HTMLElement
     */
    function HexPicker() {
      var _this;

      babelHelpers.classCallCheck(this, HexPicker);
      _this = _super.call(this);
      _this.value = "#000000FF";
      _this._rValue = 0;
      _this._gValue = 0;
      _this._bValue = 0;
      _this._oValue = 255;
      _this.disabled = false;
      return _this;
    }

    babelHelpers.createClass(HexPicker, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_a57efae08e0011ed99ce491205e67b1d || (_templateObject_a57efae08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      ", "\n      <div class=\"input-container\">\n        <input\n          aria-label=\"HEX code\"\n          class=\"text-input\"\n          maxlength=\"9\"\n          @input=\"", "\"\n          @keydown=\"", "\"\n          .disabled=", "\n        />\n        <div class=\"color-square\"></div>\n      </div>\n      <div class=\"slider-container\">\n        ", " ", "\n        ", " ", "\n      </div>\n    "])), this.largeDisplay ? (0, _index.html)(_templateObject2_a57efae08e0011ed99ce491205e67b1d || (_templateObject2_a57efae08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<div class=\"large-display\"></div>"]))) : "", this._inputChanged, this._validateInput, this.disabled, this.renderFieldSet("R"), this.renderFieldSet("G"), this.renderFieldSet("B"), this.renderFieldSet("O"));
      }
    }, {
      key: "_validateInput",
      value: function _validateInput(event) {
        var char = String.fromCharCode(event.which);

        if (!char.match(/[0-9A-Fa-f\b]/g) && event.which !== 39 && event.which !== 37) {
          event.preventDefault();
        }
      }
    }, {
      key: "_padHex",
      value: function _padHex(n) {
        return n.length < 2 ? "0" + n : n;
      }
    }, {
      key: "_computeHex",
      value: function _computeHex() {
        var rHex = this._rValue.toString(16),
            gHex = this._gValue.toString(16),
            bHex = this._bValue.toString(16),
            oHex = this._oValue.toString(16),
            hexValue = "#" + this._padHex(rHex) + this._padHex(gHex) + this._padHex(bHex) + this._padHex(oHex);

        return hexValue;
      }
    }, {
      key: "_inputChanged",
      value: function _inputChanged(event) {
        var hexInput = event.target.value;

        if (!hexInput.startsWith("#")) {
          hexInput = "#" + hexInput;
        }

        this.shadowRoot.querySelector(".color-square").style.backgroundColor = hexInput;
        this.value = hexInput;

        if (this.largeDisplay) {
          this.shadowRoot.querySelector(".large-display").style.backgroundColor = hexInput;
        }

        this._dispatchChange(hexInput);

        var rgb = this._hexToRgb(hexInput);

        if (rgb !== null) {
          this._updateSliders(rgb);
        }
      }
    }, {
      key: "_updateSliders",
      value: function _updateSliders(rgb) {
        this.shadowRoot.querySelector("#R").value = rgb.r;
        this.shadowRoot.querySelector("#R_out").value = rgb.r;
        this.shadowRoot.querySelector("#G").value = rgb.g;
        this.shadowRoot.querySelector("#G_out").value = rgb.g;
        this.shadowRoot.querySelector("#B").value = rgb.b;
        this.shadowRoot.querySelector("#B_out").value = rgb.b;
        this.shadowRoot.querySelector("#O").value = rgb.o;
        this.shadowRoot.querySelector("#O_out").value = rgb.o;
      }
    }, {
      key: "_hexToRgb",
      value: function _hexToRgb(hex) {
        if (hex.length === 4) {
          return {
            r: parseInt(hex[1] + "F", 16),
            g: parseInt(hex[2] + "F", 16),
            b: parseInt(hex[3] + "F", 16),
            o: 0
          };
        } else if (hex.length === 5) {
          return {
            r: parseInt(hex[1] + "F", 16),
            g: parseInt(hex[2] + "F", 16),
            b: parseInt(hex[3] + "F", 16),
            o: parseInt(hex[4] + "F", 16)
          };
        } else if (hex.length === 7) {
          return {
            r: parseInt(hex[1] + hex[2], 16),
            g: parseInt(hex[3] + hex[4], 16),
            b: parseInt(hex[5] + hex[6], 16),
            o: 0
          };
        } else if (hex.length === 9) {
          return {
            r: parseInt(hex[1] + hex[2], 16),
            g: parseInt(hex[3] + hex[4], 16),
            b: parseInt(hex[5] + hex[6], 16),
            o: parseInt(hex[7] + hex[8], 16)
          };
        } else {
          return {
            r: 0,
            g: 0,
            b: 0,
            o: 0
          };
        }
      }
    }, {
      key: "_fieldSetChange",
      value: function _fieldSetChange(event) {
        var colorValueLabel = this.shadowRoot.querySelector("#".concat(event.target.id, "_out"));
        var colorSquare = this.shadowRoot.querySelector(".color-square");
        var inputLabel = this.shadowRoot.querySelector("input");
        colorValueLabel.value = event.target.value;

        if (event.target.id === "R") {
          this._rValue = parseInt(event.target.value, 10);
        } else if (event.target.id === "G") {
          this._gValue = parseInt(event.target.value, 10);
        } else if (event.target.id === "B") {
          this._bValue = parseInt(event.target.value, 10);
        } else if (event.target.id === "O") {
          this._oValue = parseInt(event.target.value, 10);
        }

        var computedHex = this._computeHex();

        colorSquare.style.backgroundColor = computedHex;
        inputLabel.value = computedHex;

        if (this.largeDisplay) {
          this.shadowRoot.querySelector(".large-display").style.backgroundColor = computedHex;
        }

        this._dispatchChange(computedHex);
      }
    }, {
      key: "_dispatchChange",
      value: function _dispatchChange() {
        this.dispatchEvent(new CustomEvent("value-changed", {
          bubbles: true,
          cancelable: false,
          composed: false,
          detail: this
        }));
      }
    }, {
      key: "renderFieldSet",
      value: function renderFieldSet(value) {
        return (0, _index.html)(_templateObject3_a57efae08e0011ed99ce491205e67b1d || (_templateObject3_a57efae08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <fieldset>\n        <label for=\"", "\">", "</label>\n        <input\n          @input=", "\n          type=\"range\"\n          min=\"0\"\n          max=\"255\"\n          id=\"", "\"\n          step=\"1\"\n          value=\"0\"\n        />\n        <output for=\"", "\" id=\"", "_out\">0</output>\n      </fieldset>\n    "])), value, value, this._fieldSetChange, value, value, value);
      }
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "value" && _this2[propName]) {
            _this2.shadowRoot.querySelector(".color-square").style.backgroundColor = _this2.value;
            _this2.shadowRoot.querySelector("input").value = _this2.value;

            if (_this2.largeDisplay) {
              _this2.shadowRoot.querySelector(".large-display").style.backgroundColor = _this2.value;
            }

            var rgb = _this2._hexToRgb(_this2.value);

            if (rgb !== null) {
              _this2._updateSliders(rgb);
            }
          }
        });
      }
    }], [{
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: true,
          gizmo: {
            title: "Hex Picker",
            description: "Hexcode color picker",
            icon: "image:colorize",
            color: "grey",
            groups: ["color", "picker"],
            handles: [],
            meta: {
              author: "collinkleest",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "value",
              title: "Value",
              description: "Default hex value",
              inputMethod: "textfield"
            }, {
              property: "disabled",
              title: "Disabled",
              description: "Disable the text field",
              inputMethod: "boolean"
            }, {
              property: "largeDisplay",
              title: "Large Display",
              description: "Include color in large display",
              inputMethod: "boolean"
            }],
            advanced: []
          },
          demoSchema: [{
            tag: "hex-picker",
            properties: {
              org: "elmsln",
              repo: "lrnwebcomponents"
            },
            content: ""
          }]
        };
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HexPicker), "properties", this)), {}, {
          value: {
            type: String,
            reflect: true
          },
          disabled: {
            type: Boolean,
            reflect: true
          },
          largeDisplay: {
            type: Boolean,
            reflect: true,
            attribute: "large-display"
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject4_a57efae08e0011ed99ce491205e67b1d || (_templateObject4_a57efae08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          --color-picker-width: 200px;\n          --color-picker-input-margin: 5px;\n          --color-picker-input-padding: 5px;\n          display: flex;\n          flex-direction: column;\n        }\n\n        .input-container {\n          display: inline-flex;\n          align-items: center;\n          box-sizing: border-box;\n          width: var(--color-picker-width);\n        }\n\n        .color-square {\n          background-color: #000000ff;\n          border: 1px dotted black;\n          width: var(--color-picker-square-width, 15px);\n          height: var(--color-picker-square-height, 15px);\n          margin-left: -35px;\n        }\n\n        .slider-container {\n          width: var(--color-picker-width);\n        }\n\n        fieldset {\n          border: none;\n          display: flex;\n          align-items: center;\n        }\n\n        .text-input {\n          margin-top: var(--color-picker-input-margin);\n          margin-bottom: var(--color-picker-input-margin);\n          padding: var(--color-picker-input-padding);\n          width: calc(\n            var(--color-picker-width) - 8px - var(--color-picker-input-margin)\n          );\n        }\n\n        .large-display {\n          width: var(--color-picker-width);\n          height: var(--color-picker-lg-block-height, 100px);\n          background-color: #000000ff;\n          border: 1px dotted black;\n          border-radius: 2px;\n        }\n      "])))];
      }
      /**
       * Convention we use
       */

    }, {
      key: "tag",
      get: function get() {
        return "hex-picker";
      }
    }]);
    return HexPicker;
  }(_index.LitElement);

  _exports.HexPicker = HexPicker;
  customElements.define(HexPicker.tag, HexPicker);
});