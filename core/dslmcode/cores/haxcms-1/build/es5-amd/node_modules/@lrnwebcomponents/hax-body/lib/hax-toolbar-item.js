define(["exports", "../../../lit/index.js", "../../simple-toolbar/lib/simple-toolbar-button.js", "./hax-ui-styles.js"], function (_exports, _index, _simpleToolbarButton, _haxUiStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxToolbarItemBehaviors = _exports.HaxToolbarItem = void 0;

  var _templateObject_a06cd160809211edaa2833647dc78c6c, _templateObject2_a06cd160809211edaa2833647dc78c6c, _templateObject3_a06cd160809211edaa2833647dc78c6c, _templateObject4_a06cd160809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var HaxToolbarItemBehaviors = function HaxToolbarItemBehaviors(SuperClass) {
    return /*#__PURE__*/function (_SimpleToolbarButtonB) {
      babelHelpers.inherits(_class, _SimpleToolbarButtonB);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.danger = false;
        _this.feature = false;
        _this.menu = false;
        return _this;
      }

      babelHelpers.createClass(_class, [{
        key: "buttonTemplate",
        get:
        /**
         * template for button, based on whether or not the button toggles
         *
         * @readonly
         */
        function get() {
          return this.radio ? (0, _index.html)(_templateObject_a06cd160809211edaa2833647dc78c6c || (_templateObject_a06cd160809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <button\n              id=\"button\"\n              aria-checked=\"", "\"\n              class=\"simple-toolbar-button\"\n              ?disabled=\"", "\"\n              ?controls=\"", "\"\n              @click=\"", "\"\n              @keydown=\"", "\"\n              @mousedown=\"", "\"\n              role=\"radio\"\n              part=\"button\"\n              tabindex=\"", "\"\n            >\n              ", "\n            </button>\n            ", ""])), this.isToggled ? "true" : "false", this.disabled, this.controls, this._handleClick, this._handleKeys, this._handleMousedown, this.isCurrentItem ? 1 : -1, this.buttonInnerTemplate, this.tooltipTemplate) : this.toggles ? (0, _index.html)(_templateObject2_a06cd160809211edaa2833647dc78c6c || (_templateObject2_a06cd160809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <button\n              id=\"button\"\n              aria-pressed=\"", "\"\n              class=\"simple-toolbar-button\"\n              ?disabled=\"", "\"\n              ?controls=\"", "\"\n              @click=\"", "\"\n              @keydown=\"", "\"\n              @mousedown=\"", "\"\n              part=\"button\"\n              tabindex=\"", "\"\n            >\n              ", "\n            </button>\n            ", ""])), this.isToggled ? "true" : "false", this.disabled, this.controls, this._handleClick, this._handleKeys, this._handleMousedown, this.isCurrentItem ? 1 : -1, this.buttonInnerTemplate, this.tooltipTemplate) : (0, _index.html)(_templateObject3_a06cd160809211edaa2833647dc78c6c || (_templateObject3_a06cd160809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <button\n              id=\"button\"\n              class=\"simple-toolbar-button\"\n              ?disabled=\"", "\"\n              ?controls=\"", "\"\n              @click=\"", "\"\n              @keydown=\"", "\"\n              @mousedown=\"", "\"\n              tabindex=\"0\"\n              part=\"button\"\n              tabindex=\"", "\"\n            >\n              ", "\n            </button>\n            ", ""])), this.disabled, this.controls, this._handleClick, this._handleKeys, this._handleMousedown, this.isCurrentItem ? 1 : -1, this.buttonInnerTemplate, this.tooltipTemplate);
        }
      }, {
        key: "_handleClick",
        value: function _handleClick(e) {}
      }, {
        key: "_handleKeys",
        value: function _handleKeys(e) {}
      }, {
        key: "_handleMousedown",
        value: function _handleMousedown(e) {}
      }], [{
        key: "tag",
        get: function get() {
          return "hax-toolbar-item";
        }
      }, {
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)), {}, {
            /**
             * red warning
             */
            danger: {
              type: Boolean,
              reflect: true
            },

            /**
             * Name of the event to bubble up as being tapped.
             * This can be used to tell other elements what was
             * clicked so it can take action appropriately.
             */
            eventName: {
              type: String,
              reflect: true,
              attribute: "event-name"
            },

            /**
             * Inverted display mode
             */
            feature: {
              type: Boolean,
              reflect: true
            },

            /**
             * Hover tip text
             */
            toggledTooltip: {
              type: String
            },

            /**
             * Hover tip text
             */
            tooltip: {
              type: String
            }
          });
        }
      }, {
        key: "simpleButtonThemeStyles",
        get: function get() {
          return _haxUiStyles.HaxButton;
        }
      }, {
        key: "simpleButtonCoreStyles",
        get: function get() {
          return babelHelpers.get(babelHelpers.getPrototypeOf(_class), "simpleButtonCoreStyles", this);
        }
      }, {
        key: "simpleButtonLayoutStyles",
        get: function get() {
          return babelHelpers.get(babelHelpers.getPrototypeOf(_class), "simpleButtonLayoutStyles", this);
        }
      }, {
        key: "styles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(_class), "styles", this)), [(0, _index.css)(_templateObject4_a06cd160809211edaa2833647dc78c6c || (_templateObject4_a06cd160809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n          :host(:hover),\n          :host(:focus-within) {\n            z-index: var(--hax-ui-focus-z-index, 1001) !important;\n          }\n        "])))]);
        }
      }]);
      return _class;
    }((0, _simpleToolbarButton.SimpleToolbarButtonBehaviors)(SuperClass));
  };
  /**
   * `hax-toolbar-item`
   * a button for hax toolbar
   *
   * @customElement
   * @extends HaxToolbarItemBehaviors
   * @extends LitElement
   * @lit-html
   * @lit-element
   * @demo demo/index.html
   */


  _exports.HaxToolbarItemBehaviors = HaxToolbarItemBehaviors;

  var HaxToolbarItem = /*#__PURE__*/function (_HaxToolbarItemBehavi) {
    babelHelpers.inherits(HaxToolbarItem, _HaxToolbarItemBehavi);

    var _super2 = _createSuper(HaxToolbarItem);

    function HaxToolbarItem() {
      babelHelpers.classCallCheck(this, HaxToolbarItem);
      return _super2.apply(this, arguments);
    }

    return babelHelpers.createClass(HaxToolbarItem);
  }(HaxToolbarItemBehaviors(_index.LitElement));

  _exports.HaxToolbarItem = HaxToolbarItem;
  customElements.define(HaxToolbarItem.tag, HaxToolbarItem);
});