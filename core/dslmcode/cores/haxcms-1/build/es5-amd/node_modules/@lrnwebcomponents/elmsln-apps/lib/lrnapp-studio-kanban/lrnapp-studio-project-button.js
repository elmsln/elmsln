define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../@polymer/paper-toast/paper-toast.js", "../../../lrnsys-button/lrnsys-button.js", "../../../utils/utils.js"], function (_exports, _polymerElement, _domIf, _ironAjax, _paperToast, _lrnsysButton, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioProjectButton = void 0;

  var _templateObject_b3f34ac0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /*
  `lrnapp-studio-project-button`
  Allows users to create new projects.
  
  Usage:
  ```
  <lrnapp-studio-project-button classes="amber white-text" icon="add" display-errors="true" end-point="[[endPoint]]" csrf-token=[[csrfToken]]></lrnapp-studio-project-button>
  */
  var LrnappStudioProjectButton = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappStudioProjectButton, _PolymerElement);

    var _super = _createSuper(LrnappStudioProjectButton);

    function LrnappStudioProjectButton() {
      babelHelpers.classCallCheck(this, LrnappStudioProjectButton);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappStudioProjectButton, [{
      key: "lastErrorChanged",
      value:
      /**
       * Handle the last error rolling in
       */
      function lastErrorChanged(e) {
        if (e.detail.value) {
          console.error(e);
          var target = (0, _utils.normalizeEventPath)(e)[0]; // check for JWT needing refreshed vs busted but must be 403

          switch (parseInt(e.detail.value.status)) {
            // cookie data not found, need to go get it
            // @notice this currently isn't possible but we could modify
            // the backend in the future to support throwing 401s dynamically
            // if we KNOW an event must expire the timing token
            case 401:
            case 401:
              // we know what the "target" is as an iron-ajax tag
              // so we know what call was just attempted. Let's await
              // a fetch against the top level site landing page with
              // no-cors will force a hit against the backend to refresh
              // the PHP session / bounce back from Azure as needed
              // so that when we reissue this call it'll go through (magically)
              fetch(window.Drupal.settings.basePath, {
                mode: "no-cors"
              }).then(function (e) {
                console.log(e); // delay just to be sure

                setTimeout(function () {
                  target.generateRequest();
                }, 250);
              });
              break;
          }
        }
      }
    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappStudioProjectButton.prototype), "ready", this).call(this);
        this.createProjectsUrl = this.endPoint + "/api/projects/create-stub?token=" + this.csrfToken;
      }
    }, {
      key: "_createProject",
      value: function _createProject() {
        this.shadowRoot.querySelector("#ajaxCreateStub").generateRequest();
      }
    }, {
      key: "_ajaxCreateStubHandler",
      value: function _ajaxCreateStubHandler(e) {
        var status = e.detail.response.status;
        var response = e.detail.response;

        if (status === 201) {
          var project = e.detail.response.data;

          if (project) {
            this.dispatchEvent(new CustomEvent("project-created", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: {
                project: project
              }
            }));
          }
        } // if we have errors to display


        if (typeof response.errors !== "undefined") {
          var ul = document.createElement("ul");
          var text = "";
          response.errors.forEach(function (error) {
            text = text + " " + error;
          });
          this.shadowRoot.querySelector("#toast").show(text);
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_b3f34ac0809211edaa2833647dc78c6c || (_templateObject_b3f34ac0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n      </style>\n      <template is=\"dom-if\" if=\"[[createProjectsUrl]]\">\n        <lrnsys-button\n          class$=\"[[classes]]\"\n          button-class$=\"[[classes]]\"\n          icon=\"[[icon]]\"\n          on-click=\"_createProject\"\n          label=\"Create project\"\n        ></lrnsys-button>\n        <iron-ajax\n          reject-with-request\n          on-last-error-changed=\"lastErrorChanged\"\n          id=\"ajaxCreateStub\"\n          url=\"[[createProjectsUrl]]\"\n          method=\"POST\"\n          handle-as=\"json\"\n          on-response=\"_ajaxCreateStubHandler\"\n        ></iron-ajax>\n      </template>\n      <template is=\"dom-if\" if=\"[[displayErrors]]\">\n        <paper-toast id=\"toast\"></paper-toast>\n      </template>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-project-button";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },
          auto: {
            type: Boolean,
            reflectToAttribute: true,
            value: false,
            notify: true
          },
          displayErrors: {
            type: Boolean,
            value: true
          },
          createProjectsUrl: {
            type: String,
            value: null
          },
          classes: {
            type: String,
            value: ""
          },
          icon: {
            type: String,
            value: ""
          }
        };
      }
    }]);
    return LrnappStudioProjectButton;
  }(_polymerElement.PolymerElement);

  _exports.LrnappStudioProjectButton = LrnappStudioProjectButton;
  customElements.define(LrnappStudioProjectButton.tag, LrnappStudioProjectButton);
});