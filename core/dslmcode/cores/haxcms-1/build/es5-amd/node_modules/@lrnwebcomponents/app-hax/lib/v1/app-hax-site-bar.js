define(["exports", "meta", "../../../../lit/index.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-button-lite.js", "../../../simple-colors/simple-colors.js", "../../../simple-tooltip/simple-tooltip.js", "../../../../@lit-labs/motion/index.js"], function (_exports, meta, _index, _simpleIcons, _simpleIconButtonLite, _simpleColors, _simpleTooltip, _index2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxSiteBars = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_73071d20809211edaa2833647dc78c6c, _templateObject2_73071d20809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var DropDownBorder = new URL("../assets/images/DropDownBorder.svg", meta.url); // EXPORT (so make available to other documents that reference this file) a class, that extends LitElement
  // which has the magic life-cycles and developer experience below added

  var AppHaxSiteBars = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(AppHaxSiteBars, _SimpleColors);

    var _super = _createSuper(AppHaxSiteBars);

    // HTMLElement life-cycle, built in; use this for setting defaults
    function AppHaxSiteBars() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxSiteBars);
      _this = _super.call(this);
      _this.icon = "link";
      _this.opened = false;
      _this.inprogress = false;
      _this.iconLink = "/";
      _this.textInfo = {};
      _this.siteId = "";
      return _this;
    } // properties that you wish to use as data in HTML, CSS, and the updated life-cycle


    babelHelpers.createClass(AppHaxSiteBars, [{
      key: "updated",
      value: // updated fires every time a property defined above changes
      // this allows you to react to variables changing and use javascript to perform logic
      function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteBars.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteBars.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "opened" && oldValue !== undefined) {
            _this2.dispatchEvent(new CustomEvent("".concat(propName, "-changed"), {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      } // CSS - specific to Lit

    }, {
      key: "__clickButton",
      value: function __clickButton() {
        this.opened = !this.opened;
      } // HTML - specific to Lit

    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_73071d20809211edaa2833647dc78c6c || (_templateObject_73071d20809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"mainCard\">\n        <a href=\"", "\" tabindex=\"-1\" id=\"icon\">\n          <simple-icon-button-lite\n            icon=\"", "\"\n          ></simple-icon-button-lite>\n        </a>\n        <div id=\"labels\">\n          <slot name=\"heading\"></slot>\n        </div>\n        <simple-icon-button-lite\n          icon=\"more-vert\"\n          id=\"dots\"\n          @click=", "\n        ></simple-icon-button-lite>\n      </div>\n      <div id=\"band-container\" ", ">\n        <slot name=\"band\"></slot>\n      </div>\n      <simple-tooltip for=\"icon\" position=\"left\">Access site</simple-tooltip>\n      <simple-tooltip for=\"dots\" position=\"right\">More options</simple-tooltip>\n    "])), this.iconLink, this.icon, this.__clickButton, (0, _index2.animate)());
      } // HAX specific callback
      // This teaches HAX how to edit and work with your web component

      /**
       * haxProperties integration via file reference
       */

    }], [{
      key: "tag",
      get: // a convention I enjoy so you can change the tag name in 1 place
      function get() {
        return "app-hax-site-bar";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteBars), "properties", this)), {}, {
          opened: {
            type: Boolean,
            reflect: true
          },
          icon: {
            type: String
          },
          inprogress: {
            type: Boolean,
            reflect: true
          },
          iconLink: {
            type: String,
            attribute: "icon-link"
          },
          textInfo: {
            type: Object
          },
          siteId: {
            type: String,
            reflect: true,
            attribute: "site-id"
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteBars), "styles", this)), [(0, _index.css)(_templateObject2_73071d20809211edaa2833647dc78c6c || (_templateObject2_73071d20809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          --main-banner-width: 513px;\n          --main-banner-height: 60px;\n          --band-banner-height: 208px;\n          display: inline-block;\n          background-color: var(--simple-colors-default-theme-accent-3);\n          color: var(--simple-colors-default-theme-grey-12);\n          border-color: var(--simple-colors-default-theme-accent-4);\n          border-style: solid;\n          border-width: 5px 10px 5px 10px;\n        }\n\n        #labels {\n          display: block;\n          text-overflow: ellipsis;\n          overflow: hidden;\n          white-space: nowrap;\n        }\n        #labels ::slotted(*) {\n          font-family: \"Press Start 2P\", sans-serif;\n          font-size: 25px;\n        }\n        #labels ::slotted(a) {\n          color: var(--simple-colors-default-theme-accent-11);\n          padding: 8px 0;\n          display: block;\n        }\n        #labels ::slotted(a:focus),\n        #labels ::slotted(a:hover) {\n          color: var(--simple-colors-default-theme-accent-3);\n          background-color: var(--simple-colors-default-theme-accent-11);\n        }\n\n        :host([opened]) {\n          background-color: var(--simple-colors-default-theme-accent-3);\n        }\n        #mainCard {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          align-items: center;\n          width: var(--main-banner-width);\n          height: var(--main-banner-height);\n          padding: 2px 4px;\n        }\n\n        #band-container {\n          display: block;\n          visibility: hidden;\n          height: 1px;\n          width: var(--main-banner-width);\n        }\n\n        :host([opened]) #band-container {\n          height: var(--band-banner-height);\n          visibility: visible;\n        }\n        a {\n          flex: 1;\n        }\n        #labels {\n          flex: 6;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n        #icon {\n          --simple-icon-width: 49px;\n          --simple-icon-height: 49px;\n          color: var(--simple-colors-default-theme-accent-11);\n        }\n        #icon:hover,\n        #icon:focus,\n        #icon:active {\n          color: var(--simple-colors-default-theme-accent-3);\n          background-color: var(--simple-colors-default-theme-accent-11);\n        }\n        #dots {\n          --simple-icon-width: 49px;\n          --simple-icon-height: 49px;\n          color: var(--simple-colors-default-theme-grey-12);\n          background-image: url(", ");\n          background-repeat: no-repeat;\n          background-position: center;\n        }\n      "])), (0, _index.unsafeCSS)(DropDownBorder))]);
      }
    }]);
    return AppHaxSiteBars;
  }(_simpleColors.SimpleColors);

  _exports.AppHaxSiteBars = AppHaxSiteBars;
  customElements.define(AppHaxSiteBars.tag, AppHaxSiteBars);
});