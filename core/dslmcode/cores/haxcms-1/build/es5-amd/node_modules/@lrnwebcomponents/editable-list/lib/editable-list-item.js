define(["exports", "../../../lit/index.js", "../../simple-colors/simple-colors.js", "../../simple-icon/simple-icon.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-button.js", "../../../@polymer/paper-input/paper-input.js", "../../../@polymer/polymer/lib/elements/custom-style.js"], function (_exports, _index, _simpleColors, _simpleIcon, _simpleIcons, _simpleIconButton, _paperInput, _customStyle) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableListItem = void 0;

  var _templateObject_d4c0e9308e0011ed99ce491205e67b1d, _templateObject2_d4c0e9308e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `editable-list-item`
   * `an individual list item`
   *
   * @microcopy - language worth noting:
   *  - an item is a thing in a list of many which can be modified
   *
   * @demo demo/index.html
   * @element editable-list-item
   */
  var EditableListItem = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(EditableListItem, _SimpleColors);

    var _super = _createSuper(EditableListItem);

    function EditableListItem() {
      var _this;

      babelHelpers.classCallCheck(this, EditableListItem);
      _this = _super.call(this);
      _this.editMode = false;
      _this.editing = false;
      _this.canEdit = false;
      _this.canDelete = false;
      return _this;
    } // properties available to the custom element for data binding


    babelHelpers.createClass(EditableListItem, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_d4c0e9308e0011ed99ce491205e67b1d || (_templateObject_d4c0e9308e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <custom-style>\n        <style>\n          paper-input {\n            --paper-input-container-shared-input-style: {\n              height: 40px;\n              padding: 0;\n              margin: 0;\n            }\n          }\n        </style>\n      </custom-style>\n      <paper-input\n        id=\"input\"\n        class=\"input\"\n        value=\"", "\"\n        @value-changed=\"", "\"\n        ?hidden=\"", "\"\n      ></paper-input>\n      <div class=\"input\" ?hidden=\"", "\">", "</div>\n      <div class=\"ops\" ?hidden=\"", "\">\n        <simple-icon-button\n          @click=\"", "\"\n          id=\"edit\"\n          icon=\"icons:create\"\n        ></simple-icon-button>\n        <simple-icon-button\n          @click=\"", "\"\n          id=\"add\"\n          icon=\"icons:add\"\n        ></simple-icon-button>\n        <simple-icon-button\n          @click=\"", "\"\n          id=\"duplicate\"\n          icon=\"icons:content-copy\"\n        ></simple-icon-button>\n        <simple-icon-button\n          @click=\"", "\"\n          id=\"delete\"\n          icon=\"icons:delete\"\n        ></simple-icon-button>\n      </div>\n    "])), this.value, this.valueChanged, !this.editing, !this.editing, this.value, !this.editMode, this._editToggle, this._editToggle, this._editToggle, this._deleteModal);
      }
    }, {
      key: "valueChanged",
      value: function valueChanged(e) {
        this.value = e.detail.value;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "editMode") {
            // notify
            _this2.dispatchEvent(new CustomEvent("edit-mode-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (propName == "editing") {
            _this2._editModeChanged(_this2[propName]);
          }
        });
      }
    }, {
      key: "_editToggle",
      value:
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}
      function _editToggle(e) {
        this.editing = !this.editing;

        if (this.editing) {
          this.shadowRoot.querySelector("#input").focus();
        }
      }
      /**
       * Generate a modal to delete this item, parent has to handle that though
       */

    }, {
      key: "_deleteModal",
      value: function _deleteModal(e) {
        var evt = new CustomEvent("editable-list-item-delete", {
          bubbles: true,
          cancelable: true,
          detail: {
            element: this
          }
        });
        this.dispatchEvent(evt);
      } // Observer editMode for changes

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          if (newValue) {
            this.shadowRoot.querySelector("#edit").icon = "icons:save";
          } else {
            this.shadowRoot.querySelector("#edit").icon = "icons:create";
          }
        }
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(EditableListItem), "styles", this)), [(0, _index.css)(_templateObject2_d4c0e9308e0011ed99ce491205e67b1d || (_templateObject2_d4c0e9308e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host([can-edit]) #edit {\n          visibility: visible;\n          opacity: 1;\n        }\n        :host([can-delete]) #delete {\n          visibility: visible;\n          opacity: 1;\n        }\n        :host #add,\n        #duplicate {\n          visibility: visible;\n          opacity: 1;\n        }\n        simple-icon-button {\n          visibility: hidden;\n          opacity: 0;\n          transition: 0.3s all linear;\n        }\n        .input {\n          display: block;\n          height: 40px;\n          padding: 0;\n          margin: 0;\n          line-height: 40px;\n        }\n        .input[hidden] {\n          display: none;\n        }\n        div.input {\n          z-index: 1;\n        }\n        .ops {\n          position: absolute;\n          display: block;\n          right: 0;\n          top: 0;\n          z-index: 2;\n          background-color: white;\n        }\n        .ops simple-icon-button {\n          border-radius: 50%;\n          --simple-icon-height: 32px;\n          --simple-icon-width: 32px;\n          padding: 4px;\n          margin: 0px;\n        }\n        .ops[hidden] {\n          display: none;\n        }\n        #edit {\n          color: white;\n          background-color: var(--simple-colors-default-theme-green-8, #ddffdd);\n        }\n        #delete {\n          color: white;\n          background-color: var(--simple-colors-default-theme-red-6, #ff5555);\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The value that gets bound into the text field
           */
          value: {
            type: String
          },

          /**
           * ability to edit the items in the list
           */
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          },

          /**
           * Editing state of the item
           */
          editing: {
            type: Boolean
          },

          /**
           * Permission to edit this
           */
          canEdit: {
            type: Boolean,
            reflect: true,
            attribute: "can-edit"
          },

          /**
           * Permission to delete this
           */
          canDelete: {
            type: Boolean,
            reflect: true,
            attribute: "can-delete"
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "editable-list-item";
      }
    }]);
    return EditableListItem;
  }(_simpleColors.SimpleColors);

  _exports.EditableListItem = EditableListItem;
  customElements.define(EditableListItem.tag, EditableListItem);
});