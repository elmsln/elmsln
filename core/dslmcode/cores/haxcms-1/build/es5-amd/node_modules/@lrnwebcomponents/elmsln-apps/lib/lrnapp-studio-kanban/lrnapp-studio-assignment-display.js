define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/marked-element/marked-element.js"], function (_exports, _polymerElement, _markedElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioAssignmentDisplay = void 0;

  var _templateObject_eb0c76008e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappStudioAssignmentDisplay = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappStudioAssignmentDisplay, _PolymerElement);

    var _super = _createSuper(LrnappStudioAssignmentDisplay);

    function LrnappStudioAssignmentDisplay() {
      babelHelpers.classCallCheck(this, LrnappStudioAssignmentDisplay);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappStudioAssignmentDisplay, null, [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_eb0c76008e0011ed99ce491205e67b1d || (_templateObject_eb0c76008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          padding: 16px;\n        }\n        #assignment-body {\n          font-size: 21px;\n        }\n      </style>\n      <h1>[[assignment.attributes.title]]</h1>\n      <marked-element\n        id=\"assignment-body\"\n        markdown=\"[[assignment.attributes.body]]\"\n      ></marked-element>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-assignment-display";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },
          assignment: {
            type: Object
          }
        };
      }
    }]);
    return LrnappStudioAssignmentDisplay;
  }(_polymerElement.PolymerElement);

  _exports.LrnappStudioAssignmentDisplay = LrnappStudioAssignmentDisplay;
  customElements.define(LrnappStudioAssignmentDisplay.tag, LrnappStudioAssignmentDisplay);
});