define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/iron-list/iron-list.js", "../../../@polymer/iron-a11y-keys/iron-a11y-keys.js", "../../../@polymer/paper-input/paper-input.js", "../../simple-icon/simple-icon.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-button.js", "../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _polymerElement, _ironList, _ironA11yKeys, _paperInput, _simpleIcon, _simpleIcons, _simpleIconButton, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysOutlineItem = void 0;

  var _templateObject_d8f9ff008e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  `lrnsys-outline-item`
  A LRN element
  
  * @demo demo/index.html
  
  @microcopy - the mental model for this element
   -
  
  */
  var LrnsysOutlineItem = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnsysOutlineItem, _PolymerElement);

    var _super = _createSuper(LrnsysOutlineItem);

    function LrnsysOutlineItem() {
      var _this;

      babelHelpers.classCallCheck(this, LrnsysOutlineItem);
      _this = _super.call(this);
      setTimeout(function () {
        _this.addEventListener("change", _this._onChange.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("focus", function (e) {
          _this.dispatchEvent(new CustomEvent("focus-item", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: babelHelpers.assertThisInitialized(_this)
          }));
        });

        _this.addEventListener("mouseover", function (e) {
          _this.dispatchEvent(new CustomEvent("focus-item", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: babelHelpers.assertThisInitialized(_this)
          }));
        });

        _this.addEventListener("blur", function (e) {
          _this.dispatchEvent(new CustomEvent("blur-item", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: babelHelpers.assertThisInitialized(_this)
          }));
        });

        _this.addEventListener("mouseout", function (e) {
          _this.dispatchEvent(new CustomEvent("blur-item", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: babelHelpers.assertThisInitialized(_this)
          }));
        });

        _this.addEventListener("focusin", _this._focusin.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("focusout", _this._focusout.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }

    babelHelpers.createClass(LrnsysOutlineItem, [{
      key: "_focusin",
      value: function _focusin(e) {
        this.focusState = true;
      }
    }, {
      key: "_focusout",
      value: function _focusout(e) {
        this.focusState = false;
      }
      /**
       * attached life cycle
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnsysOutlineItem.prototype), "connectedCallback", this).call(this);
        this.dispatchEvent(new CustomEvent("attached-item", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            item: this
          }
        }));
      }
      /**
       * ready life cycle
       */

    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnsysOutlineItem.prototype), "ready", this).call(this);
        this.__inputTarget = this.shadowRoot.querySelector("#input");
        this.shadowRoot.querySelector("#input").addEventListener("focused-changed", this._focusin.bind(this));
        this.dispatchEvent(new CustomEvent("focus-item", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
    }, {
      key: "focus",
      value: function focus() {
        this.shadowRoot.querySelector("#input").focus();
        return this;
      }
    }, {
      key: "value",
      value: function value() {
        this.title = this.shadowRoot.querySelector("#input").value;
        return this.title;
      }
    }, {
      key: "delete",
      value: function _delete() {
        this.dispatchEvent(new CustomEvent("delete-item", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            item: this
          }
        }));
      }
    }, {
      key: "setIndent",
      value: function setIndent(amount) {
        this.dispatchEvent(new CustomEvent("indent-item", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            item: this,
            increase: amount > 0
          }
        }));
      }
    }, {
      key: "add",
      value: function add() {
        var i = this.shadowRoot.querySelector("#input").shadowRoot.querySelector("#" + this.shadowRoot.querySelector("#input")._inputId).inputElement.selectionStart,
            j = this.title;
        this.dispatchEvent(new CustomEvent("add-item", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            item: this,
            value: j.slice(0, i),
            new: j.slice(i, j.length)
          }
        }));
        this.title = j.slice(0, i);
      }
    }, {
      key: "move",
      value: function move(amount) {
        this.dispatchEvent(new CustomEvent("move-item", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            item: this,
            moveUp: amount < 0
          }
        }));
      }
    }, {
      key: "moveUp",
      value: function moveUp(e) {
        this.move(-1);
      }
    }, {
      key: "moveDown",
      value: function moveDown(e) {
        this.move(1);
      }
    }, {
      key: "moveOut",
      value: function moveOut(e) {
        this.setIndent(-1);
      }
    }, {
      key: "moveIn",
      value: function moveIn(e) {
        this.setIndent(1);
      }
    }, {
      key: "setSelection",
      value: function setSelection(start, end) {
        var s = start !== undefined ? start : 0,
            n = end !== undefined ? end : s;

        try {
          this.shadowRoot.querySelector("#input").querySelector("input").setSelectionRange(s, n);
        } catch (e) {
          console.log(e);
        }

        this.focus();
      }
    }, {
      key: "_onChange",
      value: function _onChange() {
        this.dispatchEvent(new CustomEvent("change-item", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            item: this,
            value: this.title
          }
        }));
      }
    }, {
      key: "_onEsc",
      value: function _onEsc() {
        this.focus();

        this._focusout();
      }
    }, {
      key: "_onEnter",
      value: function _onEnter() {
        var i = this.shadowRoot.querySelector("#input").shadowRoot.querySelector("#" + this.shadowRoot.querySelector("#input")._inputId).inputElement.selectionStart,
            j = this.title;
        this.dispatchEvent(new CustomEvent("add-item", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            item: this,
            value: j.slice(0, i),
            new: j.slice(i, j.length)
          }
        }));
        this.title = j.slice(0, i);

        this._focusout();
      }
    }, {
      key: "_onBackspace",
      value: function _onBackspace(e) {
        if (this._getSelection().toString() == this.title) {
          e.detail.keyboardEvent.preventDefault();
          this.dispatchEvent(new CustomEvent("delete-item", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              item: this
            }
          }));
        } else if (this.shadowRoot.querySelector("#input").shadowRoot.querySelector("#" + this.shadowRoot.querySelector("#input")._inputId).inputElement.selectionStart == 0) {
          this.dispatchEvent(new CustomEvent("indent-item", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              item: this,
              increase: false
            }
          }));
        }
      }
      /**
       * Selection normalizer
       */

    }, {
      key: "_getSelection",
      value: function _getSelection() {
        // try and obtain the selection from the nearest shadow
        // which would give us the selection object when running native ShadowDOM
        // with fallback support for the entire window which would imply Shady
        if (this.parentNode && this.parentNode.parentNode && this.parentNode.parentNode.getSelection) {
          return this.parentNode.parentNode.getSelection();
        }

        return window.getSelection();
      }
    }, {
      key: "_onArrowUp",
      value: function _onArrowUp() {
        if (this.shadowRoot.querySelector("#input").shadowRoot.querySelector("#" + this.shadowRoot.querySelector("#input")._inputId).inputElement.selectionStart == 0) {
          this.dispatchEvent(new CustomEvent("focus-item", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              item: this,
              moveUp: true
            }
          }));
        }
      }
    }, {
      key: "_onArrowDown",
      value: function _onArrowDown() {
        if (this.shadowRoot.querySelector("#input").shadowRoot.querySelector("#" + this.shadowRoot.querySelector("#input")._inputId).inputElement.selectionStart == this.title.length) {
          this.dispatchEvent(new CustomEvent("focus-item", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              item: this,
              moveUp: false
            }
          }));
        }
      }
    }, {
      key: "_onShiftTab",
      value: function _onShiftTab() {
        this.setIndent(-1);
      }
    }, {
      key: "_onTab",
      value: function _onTab(e) {
        if (this.shadowRoot.querySelector("#input").shadowRoot.querySelector("#" + this.shadowRoot.querySelector("#input")._inputId).inputElement.selectionStart == 0) {
          e.preventDefault();
          this.setIndent(1);
        }
      }
    }, {
      key: "_onShiftArrowUp",
      value: function _onShiftArrowUp() {
        this.move(-1);
      }
    }, {
      key: "_onShiftArrowDown",
      value: function _onShiftArrowDown() {
        this.move(1);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_d8f9ff008e0011ed99ce491205e67b1d || (_templateObject_d8f9ff008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          --indent-multiplier: 36px;\n        }\n        :host(.collapse-to-remove) #wrapper {\n          height: 0px;\n          background-color: var(--lrnsys-outline-gap-color, #eeeeee);\n          border: 1px solid #999999;\n          overflow: hidden;\n        }\n        :host #wrapper[data-indent=\"0\"] #gap {\n          margin-right: calc(var(--indent-multiplier) * 0);\n        }\n        :host #wrapper[data-indent=\"1\"] #gap {\n          margin-right: calc(var(--indent-multiplier) * 1);\n        }\n        :host #wrapper[data-indent=\"2\"] #gap {\n          margin-right: calc(var(--indent-multiplier) * 2);\n        }\n        :host #wrapper[data-indent=\"3\"] #gap {\n          margin-right: calc(var(--indent-multiplier) * 3);\n        }\n        :host #wrapper[data-indent=\"4\"] #gap {\n          margin-right: calc(var(--indent-multiplier) * 4);\n        }\n        :host #wrapper[data-indent=\"5\"] #gap {\n          margin-right: calc(var(--indent-multiplier) * 5);\n        }\n        :host #wrapper[data-indent=\"6\"] #gap {\n          margin-right: calc(var(--indent-multiplier) * 6);\n        }\n        :host #wrapper[data-indent=\"7\"] #gap {\n          margin-right: calc(var(--indent-multiplier) * 7);\n        }\n        :host #wrapper[data-indent=\"8\"] #gap {\n          margin-right: calc(var(--indent-multiplier) * 8);\n        }\n        :host #wrapper[data-indent=\"9\"] #gap {\n          margin-right: calc(var(--indent-multiplier) * 9);\n        }\n        :host #input {\n          flex-grow: 1;\n          margin-right: 10px;\n        }\n        :host #wrapper {\n          display: flex;\n          height: 40px;\n          border-radius: 16px;\n          transition: 0.1s all ease;\n          background-color: transparent;\n          border: 1px solid transparent;\n          padding: 8px;\n          transition: 0.3s all linear;\n        }\n        :host([focus-state]) #wrapper,\n        :host(:focus) #wrapper,\n        :host(:hover) #wrapper {\n          cursor: pointer;\n          background-color: var(--lrnsys-outline-gap-color, #eeeeee);\n          border: 1px solid #999999;\n        }\n        #gap {\n          padding: 2px;\n          transition: 0.3s all ease;\n          border-left: solid 4px transparent;\n        }\n        :host([focus-state]) #gap,\n        :host(:focus) #gap,\n        :host(:hover) #gap {\n          border-left: solid 4px var(--lrnsys-outline-gap-color, #aaaaaa);\n        }\n        simple-icon-button {\n          font-size: 16px;\n          --simple-icon-height: 36px;\n          padding: 10px;\n          margin: 4px;\n          display: none;\n          border-radius: 0.16px;\n        }\n        :host([focus-state]) simple-icon-button,\n        :host(:focus) simple-icon-button,\n        :host(:hover) simple-icon-button {\n          --simple-icon-width: 36px;\n          display: inline-flex;\n        }\n        simple-icon-button#add {\n          --simple-icon-width: 36px;\n          margin-right: 2px;\n          color: white;\n          background-color: var(--lrnsys-outline-add-button-color, #018dff);\n        }\n        simple-icon-button#delete {\n          color: white;\n          background-color: var(--lrnsys-outline-delete-button-color, #cc0000);\n        }\n      </style>\n      <div id=\"wrapper\" data-indent$=\"[[indentLevel]]\">\n        <div id=\"gap\"></div>\n        <paper-input\n          id=\"input\"\n          label=\"Enter a page title\"\n          value=\"{{title}}\"\n          no-label-float=\"\"\n        >\n        </paper-input>\n        <simple-icon-button\n          id=\"down\"\n          title=\"Move downwards\"\n          icon=\"icons:arrow-downward\"\n          on-click=\"moveDown\"\n        ></simple-icon-button>\n        <simple-icon-button\n          id=\"left\"\n          title=\"Outdent\"\n          icon=\"icons:arrow-back\"\n          on-click=\"moveOut\"\n        ></simple-icon-button>\n        <simple-icon-button\n          id=\"right\"\n          title=\"Indent\"\n          icon=\"icons:arrow-forward\"\n          on-click=\"moveIn\"\n        ></simple-icon-button>\n        <simple-icon-button\n          id=\"up\"\n          title=\"Move upwards\"\n          icon=\"icons:arrow-upward\"\n          on-click=\"moveUp\"\n        ></simple-icon-button>\n        <simple-icon-button\n          id=\"add\"\n          title=\"Add Item\"\n          icon=\"icons:add\"\n          on-click=\"add\"\n        ></simple-icon-button>\n        <simple-icon-button\n          id=\"delete\"\n          title=\"Delete\"\n          icon=\"icons:delete\"\n          on-click=\"delete\"\n        ></simple-icon-button>\n      </div>\n      <iron-a11y-keys\n        target=\"[[__inputTarget]]\"\n        keys=\"esc\"\n        on-keys-pressed=\"_onEsc\"\n      ></iron-a11y-keys>\n      <iron-a11y-keys\n        target=\"[[__inputTarget]]\"\n        keys=\"enter\"\n        on-keys-pressed=\"_onEnter\"\n      ></iron-a11y-keys>\n      <iron-a11y-keys\n        target=\"[[__inputTarget]]\"\n        keys=\"backspace\"\n        on-keys-pressed=\"_onBackspace\"\n      ></iron-a11y-keys>\n      <iron-a11y-keys\n        target=\"[[__inputTarget]]\"\n        keys=\"up\"\n        on-keys-pressed=\"_onArrowUp\"\n      ></iron-a11y-keys>\n      <iron-a11y-keys\n        target=\"[[__inputTarget]]\"\n        keys=\"down\"\n        on-keys-pressed=\"_onArrowDown\"\n      ></iron-a11y-keys>\n      <iron-a11y-keys\n        target=\"[[__inputTarget]]\"\n        keys=\"tab\"\n        on-keys-pressed=\"_onTab\"\n      ></iron-a11y-keys>\n      <iron-a11y-keys\n        target=\"[[__inputTarget]]\"\n        keys=\"shift+tab\"\n        on-keys-pressed=\"_onShiftTab\"\n      ></iron-a11y-keys>\n      <iron-a11y-keys\n        target=\"[[__inputTarget]]\"\n        keys=\"shift+up\"\n        on-keys-pressed=\"_onShiftArrowUp\"\n      ></iron-a11y-keys>\n      <iron-a11y-keys\n        target=\"[[__inputTarget]]\"\n        keys=\"shift+down\"\n        on-keys-pressed=\"_onShiftArrowDown\"\n      ></iron-a11y-keys>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnsys-outline-item";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          indentLevel: {
            type: Number,
            value: 0
          },
          index: {
            type: Number,
            value: 0
          },
          parent: {
            type: String,
            value: null
          },
          title: {
            type: String,
            value: null,
            notify: true,
            reflectToAttribute: true
          },

          /**
           * Tracks if focus state is applied
           */
          focusState: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return LrnsysOutlineItem;
  }(_polymerElement.PolymerElement);

  _exports.LrnsysOutlineItem = LrnsysOutlineItem;
  customElements.define(LrnsysOutlineItem.tag, LrnsysOutlineItem);
});