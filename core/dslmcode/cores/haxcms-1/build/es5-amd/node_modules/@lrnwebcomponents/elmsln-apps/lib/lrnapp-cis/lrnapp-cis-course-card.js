define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js", "../../../materializecss-styles/materializecss-styles.js"], function (_exports, _polymerElement, _simpleIcon, _simpleIcons, _materializecssStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappCisCourseCard = void 0;

  var _templateObject_eac708908e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /*
   `lrnapp-cis-course-card`
   Present a course card
  */
  var LrnappCisCourseCard = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappCisCourseCard, _PolymerElement);

    var _super = _createSuper(LrnappCisCourseCard);

    function LrnappCisCourseCard() {
      babelHelpers.classCallCheck(this, LrnappCisCourseCard);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappCisCourseCard, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappCisCourseCard.prototype), "connectedCallback", this).call(this);
        this.addEventListener("mouseenter", this._mouseEnter.bind(this));
        this.addEventListener("mouseleave", this._mouseLeave.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.removeEventListener("mouseenter", this._mouseEnter.bind(this));
        this.removeEventListener("mouseleave", this._mouseLeave.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappCisCourseCard.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "_mouseEnter",
      value:
      /**
       * Increase elevation while hovering.
       */
      function _mouseEnter(e) {
        this.__oldElevation = this.elevation;

        if (this.elevation + 2 > 5) {
          this.elevation = 5;
        } else {
          this.elevation += 2;
        }
      }
      /**
       * Reset the elevation.
       */

    }, {
      key: "_mouseLeave",
      value: function _mouseLeave(e) {
        this.elevation = this.__oldElevation;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_eac708908e0011ed99ce491205e67b1d || (_templateObject_eac708908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"materializecss-styles\">\n        :host {\n          display: inline-flex;\n        }\n        :host([size=\"micro\"]) {\n          transform: scale(0.5);\n        }\n        :host([size=\"small\"]) {\n          transform: scale(0.8);\n        }\n        .card {\n          border-radius: 4px;\n          margin: 0;\n          width: 100%;\n          box-shadow: 0 5px 5px rgba(0, 0, 0, 0.7);\n        }\n        .card-actions {\n          background-color: #f5f5f5;\n          border-radius: 0 0 4px 4px;\n          padding: 0 8px;\n        }\n        .card-actions .card-action-details {\n          display: inline-block;\n          vertical-align: middle;\n          vertical-align: -webkit-baseline-middle;\n          width: 80%;\n        }\n        .card-control-height {\n          height: 240px;\n        }\n        [elevation=\"0\"] {\n          border: solid 1px #eeeeee;\n        }\n        .text-right {\n          text-align: right;\n        }\n        .text-left {\n          text-align: left;\n        }\n        .name,\n        .title {\n          color: #222;\n          font-size: 14px;\n          font-weight: 600;\n          line-height: 20px;\n          padding: 0 12px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          margin-top: 8px;\n        }\n        .title {\n          font-size: 12px;\n          font-weight: 400;\n        }\n        .divider {\n          height: 1px;\n          width: 100%;\n          background: #efefef;\n        }\n        .course-icon {\n          --simple-icon-height: 100%;\n          --simple-icon-width: 100%;\n          overflow: hidden;\n          color: grey;\n        }\n        .course-icon:hover,\n        .course-icon:focus {\n          color: black;\n        }\n        .center {\n          margin: auto;\n          width: 80%;\n          padding: 16px;\n        }\n        .link {\n          font-size: 16px;\n          line-height: 16px;\n        }\n        .course-info {\n          width: 100%;\n        }\n        .course-preview {\n          height: 160px;\n        }\n        .card-content {\n          padding: 0;\n          margin: 0;\n          overflow: hidden;\n        }\n        .inline {\n          display: inline;\n        }\n      </style>\n      <div class=\"card\">\n        <div class=\"card-content card-control-height card-control-center\">\n          <div class=\"course-preview\">\n            <simple-icon\n              class=\"course-icon\"\n              icon=\"[[icon]]\"\n              hidden$=\"[[!icon]]\"\n            ></simple-icon>\n            <img\n              style=\"width:100%; height:100%; background-color: lightgray;\"\n              loading=\"lazy\"\n              src=\"[[image]]\"\n              hidden$=\"[[!image]]\"\n            />\n          </div>\n          <div class=\"course-info\">\n            <div class=\"divider\"></div>\n            <div class=\"name\">[[name]]</div>\n            <div class=\"title\">[[title]]</div>\n          </div>\n        </div>\n        <div class=\"card-actions\" hidden=\"\">\n          <div class=\"card-action-details\"></div>\n        </div>\n      </div>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-cis-course-card";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          size: {
            type: String
          },

          /**
           * Cover image src.
           */
          image: {
            type: String
          },

          /**
           * Icon to use if image isn't there.
           */
          icon: {
            type: String,
            value: false
          },

          /**
           * name of the course like sing100
           */
          name: {
            type: String,
            value: ""
          },

          /**
           * title of the course like Intro to studies
           */
          title: {
            type: String,
            value: ""
          },

          /**
           * color of the course item
           */
          color: {
            type: String,
            value: "grey"
          },

          /**
           * Visual elevation of the item off the UI via paper element height
           */
          elevation: {
            type: Number,
            value: 1,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return LrnappCisCourseCard;
  }(_polymerElement.PolymerElement);

  _exports.LrnappCisCourseCard = LrnappCisCourseCard;
  customElements.define(LrnappCisCourseCard.tag, LrnappCisCourseCard);
});