define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../simple-colors-shared-styles/simple-colors-shared-styles.js", "./simple-colors-shared-styles-polymer.js"], function (_exports, _polymerElement, _simpleColorsSharedStyles, _simpleColorsSharedStylesPolymer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleColorsPolymer = void 0;

  var _templateObject_dd4627a08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-colors-polymer`
   * shared set of styles for Polymer @lrnwebcomponents
   *
   * @polymer
   * @element simple-colors-polymer
   */
  var SimpleColorsPolymer = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(SimpleColorsPolymer, _PolymerElement);

    var _super = _createSuper(SimpleColorsPolymer);

    function SimpleColorsPolymer() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleColorsPolymer);
      _this = _super.call(this);
      _this.__utils = window.SimpleColorsSharedStyles.requestAvailability();
      _this.colors = window.SimpleColorsSharedStyles.colors;
      return _this;
    }
    /**
     * gets the current shade
     *
     * @param {string} the shade
     * @param {number} the inverted shade
     */


    babelHelpers.createClass(SimpleColorsPolymer, [{
      key: "invertShade",
      value: function invertShade(shade) {
        return this.__utils.invertShade(shade);
      }
      /**
       * gets the color information of a given CSS variable or class
       *
       * @param {string} the CSS variable (eg. `--simple-colors-fixed-theme-red-3`) or a class (eg. `.simple-colors-fixed-theme-red-3-text`)
       * @param {object} an object that includes the theme, color, and shade information
       */

    }, {
      key: "getColorInfo",
      value: function getColorInfo(colorName) {
        return this.__utils.getColorInfo(colorName);
      }
      /**
       * returns a variable based on color name, shade, and fixed theme
       *
       * @param {string} the color name
       * @param {number} the color shade
       * @param {boolean} the color shade
       * @returns {string} the CSS Variable
       */

    }, {
      key: "makeVariable",
      value: function makeVariable() {
        var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "grey";
        var shade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var theme = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "default";
        return this.__utils.makeVariable(color = "grey", shade = 1, theme = "default");
      }
      /**
       * for large or small text given a color and its shade,
       * lists all the colors and shades that would be
       * WCAG 2.0 AA-compliant for contrast
       *
       * @param {boolean} large text? >= 18pt || (bold && >= 14pt)
       * @param {string} color name, e.g. "deep-purple"
       * @param {string} color shade, e.g. 3
       * @param {object} all of the WCAG 2.0 AA-compliant colors and shades
       */

    }, {
      key: "getContrastingColors",
      value: function getContrastingColors(colorName, colorShade, isLarge) {
        return this.__utils.getContrastingColors(colorName, colorShade, isLarge);
      }
      /**
       * for large or small text given a color and its shade,
       * lists all the shades of another color that would be
       * WCAG 2.0 AA-compliant for contrast
       *
       * @param {boolean} large text? >= 18pt || (bold && >= 14pt)
       * @param {string} color name, e.g. "deep-purple"
       * @param {string} color shade, e.g. 3
       * @param {string} contrasting color name, e.g. "grey"
       * @param {array} all of the WCAG 2.0 AA-compliant shades of the contrasting color
       */

    }, {
      key: "getContrastingShades",
      value: function getContrastingShades(isLarge, colorName, colorShade, contrastName) {
        return this.__utils.getContrastingShades(isLarge, colorName, colorShade, contrastName);
      }
      /**
       * determines if two shades are WCAG 2.0 AA-compliant for contrast
       *
       * @param {boolean} large text? >= 18pt || (bold && >= 14pt)
       * @param {string} color name, e.g. "deep-purple"
       * @param {string} color shade, e.g. 3
       * @param {string} contrasting color name, e.g. "grey"
       * @param {string} contrast shade, e.g. 12
       * @param {boolean} whether or not the contrasting shade is WCAG 2.0 AA-compliant
       */

    }, {
      key: "isContrastCompliant",
      value: function isContrastCompliant(isLarge, colorName, colorShade, contrastName, contrastShade) {
        return this.__utils.isContrastCompliant(isLarge, colorName, colorShade, contrastName, contrastShade);
      }
    }], [{
      key: "template",
      get: // render function
      function get() {
        return (0, _polymerElement.html)(_templateObject_dd4627a08e0011ed99ce491205e67b1d || (_templateObject_dd4627a08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors-shared-styles-polymer\"></style>\n      <slot></slot>\n    "])));
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * a selected accent-color: grey, red, pink, purple, etc.
           */
          accentColor: {
            name: "accentColor",
            type: String,
            value: "grey",
            reflectToAttribute: true,
            notify: true
          },

          /**
           * make the default theme dark?
           */
          dark: {
            name: "dark",
            type: Boolean,
            value: false,
            reflectToAttribute: true,
            notify: true
          },

          /**
           * make the default theme dark?
           */
          colors: {
            name: "colors",
            type: Object,
            value: window.SimpleColorsSharedStyles.colors,
            notify: true
          }
        };
      }
    }, {
      key: "tag",
      get: function get() {
        return "simple-colors-polymer";
      }
    }]);
    return SimpleColorsPolymer;
  }(_polymerElement.PolymerElement);

  _exports.SimpleColorsPolymer = SimpleColorsPolymer;
  customElements.define(SimpleColorsPolymer.tag, SimpleColorsPolymer);
});