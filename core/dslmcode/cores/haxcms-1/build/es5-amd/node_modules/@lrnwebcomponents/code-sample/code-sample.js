define(["exports", "../../lit/index.js", "./lib/themes/one-dark.js", "./lib/highlightjs/highlight.js", "./lib/highlightjs/languages/javascript.js", "./lib/highlightjs/languages/yaml.js", "./lib/highlightjs/languages/json.js", "./lib/highlightjs/languages/css.js", "./lib/highlightjs/languages/php.js", "./lib/highlightjs/languages/xml.js"], function (_exports, _index, _oneDark, _highlight2, _javascript, _yaml, _json, _css, _php, _xml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CodeSample = void 0;

  var _templateObject_65d5bbc0809211edaa2833647dc78c6c, _templateObject2_65d5bbc0809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  _highlight2.hljs.registerLanguage("javascript", _javascript.javascript);

  _highlight2.hljs.registerLanguage("json", _json.jsonLang);

  _highlight2.hljs.registerLanguage("css", _css.cssLang);

  _highlight2.hljs.registerLanguage("php", _php.phpLang);

  _highlight2.hljs.registerLanguage("yaml", _yaml.yaml);

  _highlight2.hljs.registerLanguage("xml", _xml.xml);

  _highlight2.hljs.registerLanguage("html", _xml.xml);

  window["hljs"] = _highlight2.hljs;
  /**
   * `code-sample`
   * `<code-sample>` uses [highlight.js](https://highlightjs.org/) for syntax highlighting.
   * @demo demo/index.html
   * @element code-sample
   */

  var CodeSample = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(CodeSample, _LitElement);

    var _super = _createSuper(CodeSample);

    function CodeSample() {
      var _this;

      babelHelpers.classCallCheck(this, CodeSample);
      _this = _super.call(this);
      _this._observer = null;
      _this.theme = _oneDark.oneDark;
      _this.type = "html";
      _this.copyClipboardButton = false;
      return _this;
    }
    /**
     * Implements haxHooks to tie into life-cycle if hax exists.
     */


    babelHelpers.createClass(CodeSample, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_65d5bbc0809211edaa2833647dc78c6c || (_templateObject_65d5bbc0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <div id=\"theme\"></div>\n      <div id=\"demo\" class=\"demo\"></div>\n      <slot></slot>\n      <div id=\"code-container\">\n        <button\n          type=\"button\"\n          ?hidden=\"", "\"\n          id=\"copyButton\"\n          title=\"Copy to clipboard\"\n          @click=\"", "\"\n        >\n          Copy\n        </button>\n        <pre id=\"code\"></pre>\n      </div>"])), !this.copyClipboardButton, this._copyToClipboard);
      } // haxProperty definition

    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          gizmoRegistration: "haxgizmoRegistration"
        };
      }
      /**
       * @see haxHooks: gizmoRegistration
       */

    }, {
      key: "haxgizmoRegistration",
      value: function haxgizmoRegistration(store) {
        var list = ["javascript", "js", "json", "css", "php", "yaml", "xml", "html"];

        for (var i in list) {
          store.keyboardShortcuts["```" + list[i]] = {
            tag: "code-sample",
            properties: {
              type: list[i] === "js" ? "javascript" : list[i]
            },
            content: "<template preserve-content=\"preserve-content\">".concat(this.getExample(list[i]), "</template>")
          };
        } // force the default to now be code-sample instead of code


        store.keyboardShortcuts["```"] = store.keyboardShortcuts["```html"];
      }
      /**
       * returns a very simple example of the type of data requested
       */

    }, {
      key: "getExample",
      value: function getExample(type) {
        switch (type) {
          case "css":
            return "\n  .the-cheet[is=\"tothelimit\"] {\n    padding: 8px;\n    margin: 4px;\n  }\n";
            break;

          case "html":
            return "\n  <blockquote>\n  Dear Strongbad,\n  In 5th grade I have to watch a <em>lame hygiene movie</em>. I was thinking\n  you could make a <strong id=\"bad\">better movie about hygiene</strong> than the cruddy school version.\n  Your friend,\n  John\n  </blockquote>\n";
            break;

          case "javascript":
          case "js":
            return "const everyBody = \"to the limit\";\n  let theCheat = true;\n  if (theCheat) {\n    return `is ${everyBody}`;\n  }";
            break;

          case "xml":
            return "<IAmLike>\n  <ComeOn>fhqwhgads</ComeOn>\n</IAmLike>";
            break;

          case "yaml":
            return "- CaracterList:\n  - Homestar Runner\n  - Strongbad\n  - The Cheat";
            break;

          case "php":
            return "  $MrTheCheat = \"wins the big race\";\nif ($MrTheCheat) {\n  return \"HaVe A tRoPhY\";\n}";
            break;

          case "json":
            return "{\n  \"mainMenu\": [\n    \"Characters\",\n    \"Games\",\n    \"Toons\",\n    \"Email\",\n    \"Store\"\n  ]\n}";
            break;
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(CodeSample.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(CodeSample.prototype), "firstUpdated", this).call(this, changedProperties);
        } // can't allow this to be null for a number of reasons related
        // to the tag's internals. This ensures it's not null on initial paint


        if (this.innerHTML == "") {
          this.innerHTML = '<template preserve-content="preserve-content">const great="example";</template>';
        }

        this._updateContent();

        setTimeout(function () {
          _this2._themeChanged(_this2.theme);
        }, 0);
      }
      /**
       * HTMLElement
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(CodeSample.prototype), "connectedCallback", this).call(this);

        if (this.querySelector("template")) {
          this._observer = new MutationObserver(function (mutations) {
            if (_this3.shadowRoot) {
              _this3._updateContent();
            }
          });

          this._observer.observe(this, {
            attributes: true,
            childList: true,
            subtree: true
          });
        } else if (this.childNodes.length) {
          console.error("<code-sample>:", "content must be provided inside a <template> tag");
        }
      }
      /**
       * HTMLElement
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        if (this._observer) {
          this._observer.disconnect();

          this._observer = null;
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(CodeSample.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * LitElement properties changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "theme" && _this4.shadowRoot) {
            _this4._themeChanged(_this4[propName]);
          }
        });
      }
    }, {
      key: "_themeChanged",
      value: function _themeChanged(theme) {
        if (theme) {
          while (this.shadowRoot.querySelector("#theme").childNodes > 0) {
            this.shadowRoot.querySelector("#theme").removeChild(this.shadowRoot.querySelector("#theme").firstChild);
          }

          (0, _index.render)(theme, this.shadowRoot.querySelector("#theme"));
        }
      }
    }, {
      key: "_updateContent",
      value: function _updateContent() {
        if (this._code && this._code.parentNode) {
          this._code.parentNode.removeChild(this._code);
        }

        var template = this._getCodeTemplate();

        if (!template) {
          template = document.createElement("template");
          template.setAttribute("preserve-content", "preserve-content");
          this.appendChild(template);
        }

        this._highlight(template.innerHTML);
      }
    }, {
      key: "_getCodeTemplate",
      value: function _getCodeTemplate() {
        var nodes = this.children;
        return [].filter.call(nodes, function (node) {
          return node.nodeType === Node.ELEMENT_NODE;
        })[0];
      }
    }, {
      key: "_highlight",
      value: function _highlight(str) {
        this._code = document.createElement("code");
        if (this.type) this._code.classList.add(this.type);
        this._code.innerHTML = this._entitize(this._cleanIndentation(str));

        if (this.shadowRoot && this.shadowRoot.querySelector("#code")) {
          this.shadowRoot.querySelector("#code").appendChild(this._code);

          _highlight2.hljs.highlightBlock(this._code);
        }
      }
    }, {
      key: "_cleanIndentation",
      value: function _cleanIndentation(str) {
        var pattern = str.match(/\s*\n[\t\s]*/);
        return str.replace(new RegExp(pattern, "g"), "\n");
      }
    }, {
      key: "_entitize",
      value: function _entitize(str) {
        return String(str).replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/=""/g, "").replace(/=&gt;/g, "=>").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
      }
    }, {
      key: "_copyToClipboard",
      value: function _copyToClipboard(event) {
        var copyButton = event.target;

        var textarea = this._textAreaWithClonedContent();

        textarea.select();

        try {
          document.execCommand("copy", false);
          copyButton.textContent = "Done";
        } catch (err) {
          console.error(err);
          copyButton.textContent = "Error";
        }

        textarea.remove();
        setTimeout(function () {
          copyButton.textContent = "Copy";
        }, 1000);
      }
    }, {
      key: "_textAreaWithClonedContent",
      value: function _textAreaWithClonedContent() {
        var textarea = document.createElement("textarea");
        document.body.appendChild(textarea);
        textarea.value = this._cleanIndentation(this._getCodeTemplate().innerHTML);
        return textarea;
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_65d5bbc0809211edaa2833647dc78c6c || (_templateObject2_65d5bbc0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]),\n        [hidden] {\n          display: none;\n        }\n\n        pre {\n          margin: 0;\n        }\n\n        pre,\n        code {\n          font-family: var(\n            --code-sample-font-family,\n            Operator Mono,\n            Inconsolata,\n            Roboto Mono,\n            monaco,\n            consolas,\n            monospace\n          );\n          font-size: var(--code-sample-font-size, 0.875rem);\n        }\n\n        .hljs {\n          padding: 0 1.25rem;\n          line-height: var(--code-sample-line-height, 1.3);\n        }\n\n        .demo:not(:empty) {\n          padding: var(--code-sample-demo-padding, 0 0 1.25rem);\n        }\n\n        #code-container {\n          position: relative;\n        }\n\n        button {\n          background: var(--code-sample-copy-button-bg-color, #e0e0e0);\n          border: none;\n          cursor: pointer;\n          display: block;\n          position: absolute;\n          right: 0;\n          top: 0;\n          text-transform: uppercase;\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          type: "element",
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Code sample",
            description: "A sample of code highlighted in the page",
            icon: "icons:code",
            color: "blue",
            groups: ["Code", "Development"],
            meta: {
              author: "HAXTheWeb core team"
            }
          },
          settings: {
            configure: [{
              property: "type",
              title: "Code highlighting",
              description: "Syntax highlighting to apply to the code area",
              inputMethod: "select",
              options: {
                javascript: "JavaScript",
                css: "CSS",
                html: "HTML",
                xml: "XML",
                json: "JSON data",
                php: "PHP",
                yaml: "YAML"
              }
            }, {
              slot: "",
              slotWrapper: "template",
              slotAttributes: {
                "preserve-content": "preserve-content"
              },
              title: "Source",
              description: "The URL for this video.",
              inputMethod: "code-editor"
            }, {
              property: "copyClipboardButton",
              title: "Copy to clipboard button",
              description: "button in top right that says copy to clipboard",
              inputMethod: "boolean"
            }],
            advanced: []
          },
          saveOptions: {
            unsetAttributes: ["theme"]
          },
          demoSchema: [{
            tag: "code-sample",
            content: '<template preserve-content="preserve-content">const great = "example";</template>',
            properties: {
              "copy-clipboard-button": "copy-clipboard-button"
            }
          }]
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(CodeSample), "properties", this)), {}, {
          // Set to true to show a copy to clipboard button.
          copyClipboardButton: {
            type: Boolean,
            attribute: "copy-clipboard-button"
          },
          // Tagged template literal with custom styles.
          // Only supported in Shadow DOM.
          theme: {
            type: Object
          },
          // Code type (optional). (eg.: html, js, css)
          // Options are the same as the available classes for `<code>` tag using highlight.js
          type: {
            type: String,
            reflect: true
          }
        });
      }
      /**
       * Convention
       */

    }, {
      key: "tag",
      get: function get() {
        return "code-sample";
      }
    }]);
    return CodeSample;
  }(_index.LitElement);

  _exports.CodeSample = CodeSample;
  customElements.define(CodeSample.tag, CodeSample);
});