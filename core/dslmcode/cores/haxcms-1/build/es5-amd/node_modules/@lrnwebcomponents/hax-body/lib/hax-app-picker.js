define(["exports", "../../../lit/index.js", "../../simple-modal/lib/simple-modal-template.js", "./hax-picker.js", "./hax-ui-styles.js"], function (_exports, _index, _simpleModalTemplate, _haxPicker, _haxUiStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxAppPicker = void 0;

  var _templateObject_9fa49f60809211edaa2833647dc78c6c, _templateObject2_9fa49f60809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-app-picker`
   * `app pop over + picker with options`
   */
  var HaxAppPicker = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HaxAppPicker, _LitElement);

    var _super = _createSuper(HaxAppPicker);

    function HaxAppPicker() {
      var _this;

      babelHelpers.classCallCheck(this, HaxAppPicker);
      _this = _super.call(this);
      _this.title = "Select an option";
      return _this;
    }

    babelHelpers.createClass(HaxAppPicker, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxAppPicker.prototype), "connectedCallback", this).call(this);
        window.addEventListener("simple-modal-show", this.modalToggle.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("simple-modal-show", this.modalToggle.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxAppPicker.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * a bit hacky but gets around the cloning element and events issue
       */

    }, {
      key: "modalToggle",
      value: function modalToggle(e) {
        if (e.detail.id == "hax-picker") {
          // present options AFTER we know the picker has opened :)
          e.detail.elements.content.children[0].buildOptions(this.elements, this.type, this.title, this.pickerType, this.target);
        }
      }
    }, {
      key: "presentOptions",
      value:
      /**
       * Bridge since everything calls here
       */
      function presentOptions(elements) {
        var _this2 = this;

        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "element";
        var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Select an option";
        var pickerType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "gizmo";
        var target = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : window;
        this.elements = elements;
        this.type = type;
        this.title = title;
        this.pickerType = pickerType;
        this.target = target;
        setTimeout(function () {
          _this2.shadowRoot.querySelector('[modal-id="hax-picker"]').openModal(target);
        }, 0);
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_9fa49f60809211edaa2833647dc78c6c || (_templateObject_9fa49f60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <simple-modal-template\n        .title=\"", "\"\n        modal-id=\"hax-picker\"\n        mode=\"hax-ui\"\n      >\n        <hax-picker slot=\"content\"></hax-picker>\n      </simple-modal-template>\n    "])), this.title);
      }
    }, {
      key: "firstUpdated",
      value:
      /**
       * Attached to the DOM, now fire that we exist.
       */
      function firstUpdated() {
        // fire an event that this is a core piece of the system
        this.dispatchEvent(new CustomEvent("hax-register-core-piece", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            piece: "haxAppPicker",
            object: this
          }
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(_haxUiStyles.HaxComponentStyles), [(0, _index.css)(_templateObject2_9fa49f60809211edaa2833647dc78c6c || (_templateObject2_9fa49f60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: none;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title for the dialog
           */
          title: {
            type: String
          }
        };
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-app-picker";
      }
    }]);
    return HaxAppPicker;
  }(_index.LitElement);

  _exports.HaxAppPicker = HaxAppPicker;
  customElements.define(HaxAppPicker.tag, HaxAppPicker);
});