define(["exports", "../../../lit/index.js", "../../simple-toolbar/lib/simple-toolbar-menu.js", "./hax-ui-styles.js"], function (_exports, _index, _simpleToolbarMenu, _haxUiStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxToolbarMenu = void 0;

  var _templateObject_d7fc3e108e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-toolbar-menu`
   * `An icon / button that has support for multiple options via drop down.`
   *
   * @microcopy - the mental model for this element
   * - panel - the flyout from left or right side that has elements that can be placed
   * - button - an item that expresses what interaction you will have with the content.
   *
   * @extends SimpleToolbarMenuBehaviors
   * @element hax-toolbar-menu
   *
   */
  var HaxToolbarMenu = /*#__PURE__*/function (_SimpleToolbarMenuBeh) {
    babelHelpers.inherits(HaxToolbarMenu, _SimpleToolbarMenuBeh);

    var _super = _createSuper(HaxToolbarMenu);

    function HaxToolbarMenu() {
      var _this;

      babelHelpers.classCallCheck(this, HaxToolbarMenu);
      _this = _super.call(this);
      _this._blockEvent = false;
      return _this;
    }

    babelHelpers.createClass(HaxToolbarMenu, null, [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HaxToolbarMenu), "styles", this));
      }
    }, {
      key: "simpleButtonThemeStyles",
      get: function get() {
        return _haxUiStyles.HaxButton;
      }
    }, {
      key: "simpleButtonCoreStyles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HaxToolbarMenu), "simpleButtonCoreStyles", this)), [(0, _index.css)(_templateObject_d7fc3e108e0011ed99ce491205e67b1d || (_templateObject_d7fc3e108e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        ::slotted([slot=\"menuitem\"]) {\n          --simple-toolbar-button-justify: flex-start;\n          --simple-toolbar-button-label-white-space: nowrap;\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-toolbar-menu";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxToolbarMenu), "properties", this)), {}, {
          /**
           * Internal flag to allow blocking the event firing if machine selects tag.
           */
          _blockEvent: {
            type: Boolean
          },

          /**
           * Name of the event to bubble up as being tapped.
           * This can be used to tell other elements what was
           * clicked so it can take action appropriately.
           */
          eventName: {
            type: String,
            attribute: "event-name"
          }
        });
      }
    }]);
    return HaxToolbarMenu;
  }((0, _simpleToolbarMenu.SimpleToolbarMenuBehaviors)(_index.LitElement));

  _exports.HaxToolbarMenu = HaxToolbarMenu;
  customElements.define(HaxToolbarMenu.tag, HaxToolbarMenu);
});