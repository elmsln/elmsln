define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/flattened-nodes-observer.js", "../../../@polymer/polymer/lib/utils/async.js", "../../../@polymer/iron-ajax/iron-ajax.js", "../../../@polymer/paper-spinner/paper-spinner.js", "../../utils/utils.js"], function (_exports, _polymerElement, _flattenedNodesObserver, _async, _ironAjax, _paperSpinner, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CMSToken = void 0;

  var _templateObject_d493e5c08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  `cms-token`
  Render and process a shortcode / token from a content management system.
  
  * @demo demo/index.html
  
  @microcopy - the mental model for this element
   - cms - Content management system, while writen against Drupal should be
           abstract enough to work with just about anything.
   - token - a snippet / shortcode of logic to unpack and turn into something
             more complex. Usually of the form [actual:thing:here] or
             [[action|thing=stuff|here=place]] style. Either way, it's a
             snippet which will get sent to a backend and dynamically replaced.
  */
  var CMSToken = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(CMSToken, _PolymerElement);

    var _super = _createSuper(CMSToken);

    function CMSToken() {
      babelHelpers.classCallCheck(this, CMSToken);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(CMSToken, [{
      key: "_displayModeChanged",
      value:
      /**
       * Display mode value updated.
       */
      function _displayModeChanged(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && newValue != "" && babelHelpers.typeof(this.token) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // @todo need more sanity checks then this to get default and replace better
          this.token = this.token.replace(oldValue, newValue);
        }
      }
      /**
       * Generate body data.
       */

    }, {
      key: "_generateBodyData",
      value: function _generateBodyData(token, $editingState) {
        if (token !== null && token !== "") {
          var tokenPrefix = this.tokenPrefix;
          var tokenSuffix = this.tokenSuffix;
          return {
            token: "".concat(tokenPrefix).concat(token).concat(tokenSuffix),
            cachedResponse: $editingState
          };
        }
      }
      /**
       * Handle the response from the token processing endpoint
       */

    }, {
      key: "_handleTokenResponse",
      value: function _handleTokenResponse(newValue, oldValue) {
        var _this = this;

        if (newValue !== null && babelHelpers.typeof(newValue.content) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // store the text and url callbacks in the event we're in an editing mode
          if (document.getElementById("cmstokenidtolockonto") != null) {
            document.getElementById("cmstokenidtolockonto").setAttribute("href", newValue.editEndpoint);
            document.getElementById("cmstokenidtolockonto").innerHTML = newValue.editText;
            document.getElementById("cmstokenidtolockonto").addEventListener("click", this.__tokenClicked.bind(this));
          } // wipe our own slot here


          (0, _utils.wipeSlot)(this); // now inject the content we got

          _async.microTask.run(function () {
            var template = document.createElement("template");
            template.innerHTML = newValue.content;

            _this.appendChild(document.importNode(template.content, true));

            setTimeout(function () {
              if (window.WCAutoload) {
                window.WCAutoload.process();
              }
            }, 0);
            _this.loading = false;
          });
        }
      }
      /**
       * Token end point changed
       */

    }, {
      key: "_tokenChanged",
      value: function _tokenChanged(newValue, oldValue) {
        var _this2 = this;

        // ensure we have something and are not loading currently
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && newValue !== "" && !this.loading) {
          // support going from a null element to a real one
          if (babelHelpers.typeof(this.tokenEndPoint) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(window.cmstokenEndPoint) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.tokenEndPoint = window.cmstokenEndPoint;
          }

          if (this.tokenEndPoint) {
            this.loading = true;

            _async.microTask.run(function () {
              _this2.shadowRoot.querySelector("#tokenrequest").generateRequest();
            });
          }
        }
      }
      /**
       * Window visibility callback to monitor when we are being seen
       */

    }, {
      key: "_windowVisibilityChanged",
      value: function _windowVisibilityChanged(e) {
        // ensure we aren't already loading
        if (!this.loading && this._clickInvoked) {
          // generate request which will kick off "loading" state
          this.shadowRoot.querySelector("#tokenrequest").generateRequest(); // kill our clickInvoked handler so we aren't generating requests until the
          // user clicks to edit the thing again

          this._clickInvoked = false;
        }
      }
      /**
       * Notice a click on our edit button and set a flag.
       */

    }, {
      key: "__tokenClicked",
      value: function __tokenClicked(e) {
        // set flag so we know to generate a new request when we come back into focus
        this._clickInvoked = true;
      }
      /**
       * Attached to the DOM, now fire.
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(CMSToken.prototype), "connectedCallback", this).call(this);

        if (babelHelpers.typeof(this.token) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && this.token !== null && this.token !== "") {
          var slot = _flattenedNodesObserver.FlattenedNodesObserver.getFlattenedNodes(this); // only kick off request if there's nothing in it
          // if it has something in it that means we did some
          // remote rendering ahead of time


          if (slot.length === 0 && !this.loading) {
            // support for autoloading the token data needed for the request from globals
            if (babelHelpers.typeof(this.tokenEndPoint) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(window.cmstokenEndPoint) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              this.tokenEndPoint = window.cmstokenEndPoint;
            }

            if (this.tokenEndPoint) {
              this.loading = true;

              _async.microTask.run(function () {
                _this3.shadowRoot.querySelector("#tokenrequest").generateRequest();
              });
            }
          }
        }

        document.addEventListener("visibilitychange", this._windowVisibilityChanged.bind(this));
      }
      /**
       * Detatched life cycle.
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        document.removeEventListener("visibilitychange", this._windowVisibilityChanged.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(CMSToken.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          editModeChanged: "haxeditModeChanged",
          activeElementChanged: "haxactiveElementChanged"
        };
      }
    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(element, value) {
        if (value) {
          this.haxEditMode = value;
        }
      }
    }, {
      key: "haxeditModeChanged",
      value: function haxeditModeChanged(value) {
        this.haxEditMode = value;
      }
    }, {
      key: "postProcessgetHaxJSONSchema",
      value:
      /**
       * Implements getHaxJSONSchema post processing callback.
       */
      function postProcessgetHaxJSONSchema(schema) {
        var href = "";
        var slot = "Edit"; // if we have values populate them

        if (babelHelpers.typeof(this.tokenData) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          href = this.tokenData.editEndpoint;
          slot = this.tokenData.editText;

          for (var i in this.tokenData.schema) {
            schema.properties[i] = this.tokenData.schema[i];
          }
        }

        schema.properties["__editThis"] = {
          type: "string",
          component: {
            name: "a",
            properties: {
              id: "cmstokenidtolockonto",
              href: href,
              target: "_blank"
            },
            slot: slot
          }
        };
        return schema;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_d493e5c08e0011ed99ce491205e67b1d || (_templateObject_d493e5c08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: inline;\n          min-width: 112px;\n          min-height: 112px;\n          transition: 0.6s all ease;\n          background-color: transparent;\n        }\n        :host([hax-edit-mode]) #replacementcontent {\n          pointer-events: none;\n        }\n\n        paper-spinner {\n          transition: 0.6s all ease;\n          position: absolute;\n          visibility: hidden;\n          display: none;\n          opacity: 0;\n          height: 0;\n          width: 0;\n        }\n\n        #replacementcontent {\n          transition: 0.6s all ease;\n          visibility: visible;\n          opacity: 1;\n          height: auto;\n          width: auto;\n        }\n\n        :host([loading]) {\n          text-align: center;\n        }\n\n        :host([loading]) paper-spinner {\n          visibility: visible;\n          opacity: 1;\n          position: relative;\n          height: 80px;\n          width: 80px;\n          padding: 16px;\n          display: flex;\n        }\n\n        :host([loading]) #replacementcontent {\n          opacity: 0;\n          visibility: hidden;\n          height: 0;\n          width: 0;\n        }\n      </style>\n      <iron-ajax\n        id=\"tokenrequest\"\n        method=\"GET\"\n        params=\"[[bodyData]]\"\n        url=\"[[tokenEndPoint]]\"\n        handle-as=\"json\"\n        last-response=\"{{tokenData}}\"\n      ></iron-ajax>\n      <paper-spinner active=\"[[loading]]\"></paper-spinner>\n      <span id=\"replacementcontent\">\n        <slot></slot>\n      </span>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "cms-token";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Loading state
           */
          loading: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * Token changed (somehow) do the token processing.
           */
          token: {
            type: String,
            reflectToAttribute: true
          },

          /**
           * Token end point updated, change the way we do processing.
           */
          tokenEndPoint: {
            type: String
          },

          /**
           * Body data which is just token with some encapsulation.
           */
          bodyData: {
            type: Object,
            computed: "_generateBodyData(token, _clickInvoked)",
            observer: "_tokenChanged"
          },

          /**
           * internal tracking for edit button being clicked in HAX presentation
           */
          _clickInvoked: {
            type: String,
            value: false
          },

          /**
           * Token data from the end point.
           */
          tokenData: {
            type: String,
            observer: "_handleTokenResponse"
          },

          /**
           * Prefix for the token to be processed
           */
          tokenPrefix: {
            type: String,
            value: "["
          },

          /**
           * Suffix for the token to be processed
           */
          tokenSuffix: {
            type: String,
            value: "]"
          },

          /**
           *
           */
          _displayMode: {
            type: String,
            value: "full",
            observer: "_displayModeChanged"
          },
          haxEditMode: {
            type: Boolean,
            value: false,
            attribute: "hax-edit-mode",
            reflectToAttribute: true
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "CMS Token",
            description: "CMS token rendered on the backend",
            icon: "icons:code",
            color: "light-blue",
            groups: ["CMS"],
            handles: [{
              type: "cmstoken",
              token: "token"
            }],
            meta: {
              author: "HAXTheWeb core team"
            }
          },
          settings: {
            configure: [{
              property: "token",
              title: "Token",
              description: "Token from our CMS",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            advanced: []
          },
          saveOptions: {
            wipeSlot: true,
            unsetAttributes: ["loading", "token-data", "body-data", "hax-edit-mode", "token-end-point"]
          }
        };
      }
    }]);
    return CMSToken;
  }(_polymerElement.PolymerElement);

  _exports.CMSToken = CMSToken;
  customElements.define(CMSToken.tag, CMSToken);
});