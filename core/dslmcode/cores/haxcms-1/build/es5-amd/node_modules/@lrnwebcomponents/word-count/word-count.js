define(["exports", "meta", "../../lit/index.js", "../i18n-manager/lib/I18NMixin.js"], function (_exports, meta, _index, _I18NMixin2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WordCount = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_adc9ef708e0011ed99ce491205e67b1d, _templateObject2_adc9ef708e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `word-count`
   * `Count the words on whatever this wraps`
   *
   * @demo demo/index.html
   * @element word-count
   */
  var WordCount = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(WordCount, _I18NMixin);

    var _super = _createSuper(WordCount);

    function WordCount() {
      var _this;

      babelHelpers.classCallCheck(this, WordCount);
      _this = _super.call(this);
      _this.wordsPrefix = "Word count";
      _this.t = {
        wordsPrefix: _this.wordsPrefix
      };

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        basePath: meta.url,
        locales: ["es", "fr", "ja"]
      });

      return _this;
    }

    babelHelpers.createClass(WordCount, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_adc9ef708e0011ed99ce491205e67b1d || (_templateObject_adc9ef708e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <slot></slot>\n      <div class=\"screen-reader-text\">", ": ", "</div>\n    "])), this.wordsPrefix, this.words);
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(WordCount.prototype), "connectedCallback", this).call(this);
        this.__observer = new MutationObserver(this._updateWords.bind(this));

        this.__observer.observe(this, {
          attributes: true,
          characterData: true,
          childList: true,
          subtree: true
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.__observer.disconnect();

        babelHelpers.get(babelHelpers.getPrototypeOf(WordCount.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "update",
      value: function update(changedProperties) {
        babelHelpers.get(babelHelpers.getPrototypeOf(WordCount.prototype), "update", this).call(this, changedProperties);

        if (changedProperties.has("t")) {
          this.wordsPrefix = this.t.wordsPrefix;
        }

        if (changedProperties.has("wordsPrefix")) {
          this.t = {
            wordsPrefix: this.wordsPrefix
          };
          [];
          this.setAttribute("words-text", "".concat(this.wordsPrefix, ": ").concat(this.words));
        }

        if (changedProperties.has("words")) {
          this.setAttribute("words-text", "".concat(this.wordsPrefix, ": ").concat(this.words));
        }
      }
    }, {
      key: "_updateWords",
      value:
      /**
       * Update words based on data in the slot.
       */
      function _updateWords(mutations) {
        if (this.textContent !== "") {
          this.words = parseInt(this.textContent.split(/\s+/g).length - 1);
        } else {
          this.words = 0;
        }
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_adc9ef708e0011ed99ce491205e67b1d || (_templateObject2_adc9ef708e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host:after {\n          content: attr(words-text);\n          position: var(--word-count-position, relative);\n          display: var(--word-count-display, flex);\n          flex-direction: var(--word-count-flex-direction, row-reverse);\n          margin: var(--word-count-margin, 12px);\n          font-size: var(--word-count-font-size, 10px);\n          transition: var(--word-count-transition, 0.3s font-size, color ease);\n          line-height: var(--word-count-line-height, 16px);\n          color: var(--word-count-color, #888888);\n        }\n        :host(:hover):after,\n        :host(:focus):after,\n        :host(:active):after {\n          font-size: var(--word-count-font-size-hover, 12px);\n          font-weight: var(--word-count-font-weight-hover, bold);\n          color: var(--word-count-color-hover, #000000);\n        }\n        .screen-reader-text {\n          border: 0;\n          clip: rect(1px, 1px, 1px, 1px);\n          clip-path: inset(50%);\n          height: 1px;\n          margin: -1px;\n          width: 1px;\n          overflow: hidden;\n          position: absolute !important;\n          word-wrap: normal !important;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "word-count";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(WordCount), "properties", this)), {}, {
          words: {
            type: Number
          },
          wordsPrefix: {
            type: String,
            attribute: "words-prefix"
          }
        });
      }
    }]);
    return WordCount;
  }((0, _I18NMixin2.I18NMixin)(_index.LitElement));

  _exports.WordCount = WordCount;
  customElements.define(WordCount.tag, WordCount);
});