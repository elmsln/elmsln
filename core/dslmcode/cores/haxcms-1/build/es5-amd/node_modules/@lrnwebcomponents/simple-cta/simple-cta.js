define(["exports", "../../lit/index.js", "../utils/lib/remoteLinkBehavior.js", "../utils/lib/activeStateBehavior.js", "../simple-colors/simple-colors.js"], function (_exports, _index, _remoteLinkBehavior, _activeStateBehavior2, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleCta = void 0;

  var _templateObject_71b63320809211edaa2833647dc78c6c, _templateObject2_71b63320809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-cta`
   * `Simple call to action button`
   * @demo demo/index.html
   * @element simple-cta
   */
  var SimpleCta = /*#__PURE__*/function (_activeStateBehavior) {
    babelHelpers.inherits(SimpleCta, _activeStateBehavior);

    var _super = _createSuper(SimpleCta);

    /**
     * HTMLElement
     */
    function SimpleCta() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleCta);
      _this = _super.call(this);
      _this.link = "#";
      _this.title = null;
      _this.accentColor = "green";

      if (_this.querySelector("a")) {
        _this.link = _this.querySelector("a").getAttribute("href");
        _this.title = _this.querySelector("a").innerText;
        _this.innerHTML = null;
      }

      return _this;
    }
    /**
     * Implements haxHooks to tie into life-cycle if hax exists.
     */


    babelHelpers.createClass(SimpleCta, [{
      key: "render",
      value: // Template return function
      function render() {
        return (0, _index.html)(_templateObject_71b63320809211edaa2833647dc78c6c || (_templateObject_71b63320809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <a\n      href=\"", "\"\n      role=\"button\"\n      part=\"simple-cta-link\"\n      @click=\"", "\"\n      ?contenteditable=\"", "\"\n    >\n      <span><span id=\"title\">", "</span><slot></slot></span>\n    </a>"])), this.link, this._clickCard, this.editMode, this.title);
      } // haxProperty definition

    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          editModeChanged: "haxeditModeChanged",
          activeElementChanged: "haxactiveElementChanged"
        };
      }
      /**
       * Set a flag to test if we should block link clicking on the entire card
       * otherwise when editing in hax you can't actually edit it bc its all clickable.
       * if editMode goes off this helps ensure we also become clickable again
       */

    }, {
      key: "haxeditModeChanged",
      value: function haxeditModeChanged(val) {
        this.editMode = val;
      }
      /**
       * special support for HAX since the whole card is selectable
       */

    }, {
      key: "_clickCard",
      value: function _clickCard(e) {
        if (this.editMode) {
          // do not do default
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
        }
      }
      /**
       * double-check that we are set to inactivate click handlers
       * this is for when activated in a duplicate / adding new content state
       */

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        // flag for HAX to not trigger active on changes
        this.alignState();
        this.editMode = val;
        return false;
      }
    }, {
      key: "alignState",
      value: function alignState() {
        // easy, name is flat
        this.title = this.shadowRoot.querySelector("#title").innerText;
      }
      /**
       * LitElement ready
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleCta.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleCta.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        this.remoteLinkTarget = this.shadowRoot.querySelector("a");
      }
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleCta.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleCta.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "link") {
            _this2.remoteLinkURL = _this2[propName];
          }
          /* notify example
           // notify
           if (propName == 'format') {
             this.dispatchEvent(
               new CustomEvent(`${propName}-changed`, {
                 detail: {
                   value: this[propName],
                 }
               })
             );
           }
           */

          /* observer example
           if (propName == 'activeNode') {
             this._activeNodeChanged(this[propName], oldValue);
           }
           */

          /* computed example
           if (['id', 'selected'].includes(propName)) {
             this.__selectedChanged(this.selected, this.id);
           }
           */

        });
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleCta), "styles", this)), [(0, _index.css)(_templateObject2_71b63320809211edaa2833647dc78c6c || (_templateObject2_71b63320809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n          --simple-cta-color: var(\n            --simple-colors-default-theme-accent-1,\n            white\n          );\n          --simple-cta-outline: var(\n            --simple-colors-default-theme-accent-12,\n            black\n          );\n          --simple-cta-bg-color-is-user-selected: var(\n            --simple-colors-default-theme-accent-10,\n            darkgreen\n          );\n          --simple-cta-bg-color: var(\n            --simple-colors-default-theme-accent-8,\n            green\n          );\n          margin: 60px 0 0;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        :host([contenteditable]) a {\n          pointer-events: none;\n        }\n\n        :host([is-user-selected]) a {\n          background-color: var(--simple-cta-bg-color-is-user-selected);\n          outline: 1px solid var(--simple-cta-outline);\n        }\n\n        a {\n          display: block;\n          color: var(--simple-cta-color);\n          background-color: var(--simple-cta-bg-color);\n          transition: background 0.3s linear, border 0.3s linear,\n            border-radius 0.3s linear, box-shadow 0.3s linear;\n          text-decoration: none;\n          font-size: 1em;\n          text-transform: uppercase;\n          border-radius: 100px 100px 100px 100px;\n          box-shadow: 0 6px 26px 0 rgba(0, 0, 0, 0.16);\n          padding: 16px 40px;\n          font-family: Sans-serif;\n          font-weight: 500;\n        }\n\n        a span {\n          display: flex;\n          justify-content: center;\n        }\n      "])))]);
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          type: "element",
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Call to action",
            description: "A simple button with a link to take action.",
            icon: "image:crop-16-9",
            color: "orange",
            groups: ["Marketing", "Content"],
            handles: [{
              type: "link",
              source: "link",
              title: "title"
            }],
            meta: {
              author: "HAXTheWeb core team"
            }
          },
          settings: {
            configure: [{
              property: "title",
              title: "Title",
              description: "Enter title for stop-note.",
              inputMethod: "textfield",
              required: true
            }, {
              property: "link",
              title: "Link",
              description: "Enter a link to any resource",
              inputMethod: "haxupload",
              required: true
            }, {
              property: "accentColor",
              title: "Accent Color",
              description: "An optional accent color.",
              inputMethod: "colorpicker",
              icon: "editor:format-color-fill"
            }, {
              property: "dark",
              title: "Dark Theme",
              description: "Enable Dark Theme",
              inputMethod: "boolean",
              icon: "icons:invert-colors"
            }],
            advanced: []
          },
          demoSchema: [{
            tag: "simple-cta",
            properties: {
              title: "Click to learn more",
              link: "https://haxtheweb.org/"
            },
            content: ""
          }]
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleCta), "properties", this)), {}, {
          link: {
            type: String
          },
          title: {
            type: String
          },
          editMode: {
            type: Boolean
          }
        });
      }
      /**
       * Convention we use
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-cta";
      }
    }]);
    return SimpleCta;
  }((0, _activeStateBehavior2.activeStateBehavior)((0, _remoteLinkBehavior.remoteLinkBehavior)(_simpleColors.SimpleColors)));

  _exports.SimpleCta = SimpleCta;
  customElements.define(SimpleCta.tag, SimpleCta);
});