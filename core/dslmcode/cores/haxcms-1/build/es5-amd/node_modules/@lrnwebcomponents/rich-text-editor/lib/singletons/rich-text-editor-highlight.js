define(["exports", "../../../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorHighlight = void 0;

  var _templateObject_e9c2b7f08e0011ed99ce491205e67b1d, _templateObject2_e9c2b7f08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-highlight`
   * `A highlights range when toolbar UI has focus.`
   *
   * @customElement
   * @lit-html
   * @lit-element
   * @element rich-text-editor-highlight
   */
  var RichTextEditorHighlight = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(RichTextEditorHighlight, _LitElement);

    var _super = _createSuper(RichTextEditorHighlight);

    /**
     * Makes sure there is a utility ready and listening for elements.
     */
    function RichTextEditorHighlight() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorHighlight);
      _this = _super.call(this);
      _this.haxUIElement = true;
      var hex = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      _this.id = "rte-" + "ss-s-s-s-sss".replace(/s/g, hex);
      return _this;
    }

    babelHelpers.createClass(RichTextEditorHighlight, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_e9c2b7f08e0011ed99ce491205e67b1d || (_templateObject_e9c2b7f08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<slot></slot>"])));
      }
      /**
       * Store tag name to make it easier to obtain directly.
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorHighlight.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorHighlight.prototype), "firstUpdated", this).call(this, changedProperties);
        }
      }
    }, {
      key: "emptyContents",
      value: function emptyContents() {
        var _this2 = this;

        var nodes = babelHelpers.toConsumableArray(this.childNodes);
        nodes.forEach(function (node) {
          if (_this2.parentNode) _this2.parentNode.insertBefore(node, _this2);
        });
        document.body.append(this);
        this.hidden = true;
        this.range = undefined;
      }
    }, {
      key: "wrap",
      value: function wrap(range) {
        if (!range) return;
        if (!this.hidden && range !== this.range) this.emptyContents();
        this.range = range;
        var contents = range.extractContents();
        this.append(contents);

        try {
          range.insertNode(this);
        } catch (e) {}

        range.selectNodeContents(this);
        this.hidden = false;
      }
    }, {
      key: "unwrap",
      value: function unwrap(range) {
        var nodes = babelHelpers.toConsumableArray(this.childNodes).reverse(),
            collapse = nodes.length < 1;
        if (range) range.setStartBefore(this);
        nodes.forEach(function (node, i) {
          if (range) range.insertNode(node);
        });
        document.body.append(this);
        this.hidden = true;
        this.range = range;
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_e9c2b7f08e0011ed99ce491205e67b1d || (_templateObject2_e9c2b7f08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          outline: 1px dotted currentColor;\n        }\n        :host(:empty) {\n          outline: none;\n          border-left: 1px dotted currentColor;\n          margin-right: -0.2em;\n        }\n        :host([hidden]) {\n          display: none !important;\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          hidden: {
            type: Boolean,
            reflect: true
          },
          id: {
            type: String,
            reflect: true
          },
          range: {
            type: Object
          }
        };
      }
    }, {
      key: "tag",
      get: function get() {
        return "rich-text-editor-highlight";
      }
    }]);
    return RichTextEditorHighlight;
  }(_index.LitElement);

  _exports.RichTextEditorHighlight = RichTextEditorHighlight;
  customElements.define(RichTextEditorHighlight.tag, RichTextEditorHighlight);
  // register globally so we can make sure there is only one
  window.RichTextEditorHighlight = window.RichTextEditorHighlight || {}; // request if this exists. This helps invoke element existing in dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through same modal

  window.RichTextEditorHighlight.requestAvailability = function () {
    if (!window.RichTextEditorHighlight.instance) {
      window.RichTextEditorHighlight.instance = document.createElement("rich-text-editor-highlight");
      document.body.appendChild(window.RichTextEditorHighlight.instance);
    }

    return window.RichTextEditorHighlight.instance;
  };
});