define(["exports", "../../../lit/index.js", "./simple-fields-field.js"], function (_exports, _index, _simpleFieldsField) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsCombo = void 0;

  var _templateObject_dd6b3bd08e0011ed99ce491205e67b1d, _templateObject2_dd6b3bd08e0011ed99ce491205e67b1d, _templateObject3_dd6b3bd08e0011ed99ce491205e67b1d, _templateObject4_dd6b3bd08e0011ed99ce491205e67b1d, _templateObject5_dd6b3bd08e0011ed99ce491205e67b1d, _templateObject6_dd6b3bd08e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   *`simple-fields-combo`
   * input tags and validate an array of input
   * can return as a string or object based on
   * requirements of the implementing element
   *
   * @customElement
   * @group simple-fields
   * @class SimpleFieldsCombo
   * @extends {SimpleFieldsFieldBehaviors(LitElement)}
   * @demo ./demo/index.html Demo
   */
  var SimpleFieldsCombo = /*#__PURE__*/function (_SimpleFieldsFieldBeh) {
    babelHelpers.inherits(SimpleFieldsCombo, _SimpleFieldsFieldBeh);

    var _super = _createSuper(SimpleFieldsCombo);

    function SimpleFieldsCombo() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFieldsCombo);
      _this = _super.call(this);
      _this.expanded = false;
      _this.filter = "";
      _this.filteredOptions = [];
      _this.inputFocus = false;
      _this.inputHover = false;
      _this.isNone = true;
      _this.isList = false;
      _this.isBoth = false;
      _this.listFocus = false;
      _this.listHover = false;
      _this.option = false;
      _this.autocomplete = "none";
      return _this;
    }

    babelHelpers.createClass(SimpleFieldsCombo, [{
      key: "stateInfo",
      get: function get() {
        return {
          activeDescendant: this.activeDescendant,
          filteredOptions: this.filteredOptions,
          filter: this.filter,
          option: this.option,
          _selectedOption: this._selectedOption,
          value: this.value,
          firstOption: this.firstOption,
          lastOption: this.lastOption,
          input: !this.input ? false : this.input.value
        };
      }
    }, {
      key: "fieldElementTag",
      get: function get() {
        return "input";
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCombo.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCombo.prototype), "firstUpdated", this).call(this, changedProperties);
        this.filter = !!this.value ? this.value : "";
        this.filterOptions(this.filter, this.option);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCombo.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCombo.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "autocomplete") _this2.autocompleteChanged();
          if (propName === "value" && _this2.value !== oldValue) _this2.fieldValueChanged();
          if (propName === "itemsList" || propName === "options") _this2.filterOptions(_this2.filter, _this2.option);
        });
      }
    }, {
      key: "fieldValueChanged",
      value: function fieldValueChanged() {
        if (this.input && this.input.value !== this.value) this.input.value = this.value;

        this._fireValueChanged();
      }
    }, {
      key: "autocompleteChanged",
      value: function autocompleteChanged() {
        if (typeof this.autocomplete === "string") {
          var autocomplete = this.autocomplete.toLowerCase();
          this.isNone = autocomplete === "none";
          this.isList = autocomplete === "list";
          this.isBoth = autocomplete === "both";
        } else {
          this.isNone = true;
        }
      }
    }, {
      key: "inputTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject_dd6b3bd08e0011ed99ce491205e67b1d || (_templateObject_dd6b3bd08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <input\n        .aria-activedescendant=\"", "\"\n        .aria-autocomplete=\"", "\"\n        .aria-descrbedby=\"", "\"\n        .aria-expanded=\"", "\"\n        aria-haspopup=\"true\"\n        .aria-invalid=\"", "\"\n        .aria-owns=\"", "-list\"\n        ?autofocus=\"", "\"\n        @blur=\"", "\"\n        @change=\"", "\"\n        class=\"field box-input ", "\"\n        @click=\"", "\"\n        ?disabled=\"", "\"\n        @focus=\"", "\"\n        id=\"", "\"\n        @keydown=\"", "\"\n        @keyup=\"", "\"\n        name=\"", "\"\n        .placeholder=\"", "\"\n        part=\"option-input\"\n        ?readonly=\"", "\"\n        ?required=\"", "\"\n        tabindex=\"0\"\n        type=\"text\"\n        value=\"", "\"\n      />\n    "])), this.activeDescendant, this.autocomplete, this.describedBy, this.expanded, this.error ? "true" : "false", this.id, this.autofocus, this._onInputBlur, this._handleFieldChange, this.inputFocus ? "focus" : "", this._onInputClick, this.disabled, this._onInputFocus, this.id, this._onInputKeydown, this._onInputKeyup, this.id, this.placeholder || "", this.readonly, this.required, this.value || "");
      }
    }, {
      key: "expandButtonTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject2_dd6b3bd08e0011ed99ce491205e67b1d || (_templateObject2_dd6b3bd08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <simple-icon-button-lite\n        icon=\"arrow-drop-down\"\n        ?hidden=\"", "\"\n        label=\"open\"\n        @click=\"", "\"\n        part=\"option-icon\"\n        tabindex=\"-1\"\n      >\n      </simple-icon-button-lite>\n    "])), this.sortedOptions.length < 1, this._onButtonClick);
      }
    }, {
      key: "listboxTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject3_dd6b3bd08e0011ed99ce491205e67b1d || (_templateObject3_dd6b3bd08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <ul\n        .aria-labelledBy=\"", "-label\"\n        class=\"", "\"\n        data-items=\"", "\"\n        data-options=\"", "\"\n        ?hidden=\"", "\"\n        id=\"", "-list\"\n        @mouseout=\"", "\"\n        @mouseover=\"", "\"\n        role=\"listbox\"\n        part=\"listbox\"\n      >\n        ", "\n      </ul>\n    "])), this.fieldId, this.listFocus ? "focus" : "", this.itemsList.join(), this.filteredOptions.map(function (option) {
          return option.value;
        }).join(), this.isListboxHidden, this.id, this._onListboxMouseout, this._onListboxMouseover, this.listboxInnerTemplate);
      }
    }, {
      key: "listboxInnerTemplate",
      get: function get() {
        var _this3 = this;

        return (this.filteredOptions || []).map(function (option) {
          return _this3.getListItem(option);
        });
      }
      /**
       * determines if listbox is hidden
       *
       * @readonly
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "isListboxHidden",
      get: function get() {
        return this.hidden || !this.expanded || this.filteredOptions.length < 1;
      }
    }, {
      key: "getListItem",
      value: function getListItem(option) {
        var _this4 = this;

        return (0, _index.html)(_templateObject4_dd6b3bd08e0011ed99ce491205e67b1d || (_templateObject4_dd6b3bd08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <li\n        aria-selected=\"", "\"\n        id=\"option", "\"\n        role=\"option\"\n        part=\"listbox-li\"\n        @click=\"", "\"\n        @mouseout=\"", "\"\n        @mouseover=\"", "\"\n      >\n        ", "\n      </li>\n    "])), this._isSelected(option), option.id, function (e) {
          return _this4._onOptionClick(e, option);
        }, function (e) {
          return _this4._onOptionMouseout(e, option);
        }, function (e) {
          return _this4._onOptionMouseover(e, option);
        }, this.getListItemInner(option));
      }
    }, {
      key: "getListItemInner",
      value: function getListItemInner(option) {
        return option.value;
      }
      /**
       * template label and field
       *
       * @readonly
       * @returns {object}
       * @memberof SimpleFieldsField
                  @input="${this._handleFieldChange}"
       */

    }, {
      key: "fieldMainTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject5_dd6b3bd08e0011ed99ce491205e67b1d || (_templateObject5_dd6b3bd08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"field-main\" part=\"field-main\" ?hidden=\"", "\">\n        ", "\n        <div id=\"field-main-inner\" part=\"field-main-inner\">\n          ", "\n          <span class=\"input-option\" part=\"option-inner\">\n            ", " ", "\n            ", "\n          </span>\n          ", "\n        </div>\n      </div>\n    "])), this.hidden, this.labelTemplate, this.prefixTemplate, this.inputTemplate, this.suffixTemplate, this.expandButtonTemplate, this.listboxTemplate);
      }
    }, {
      key: "hasOptions",
      get: function get() {
        return this.filteredOptions.length > 0;
      }
      /**
       * sets aria-activeDescendant
       *
       * @param {object} option
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "setActiveDescendant",
      value: function setActiveDescendant(option) {
        if (option && this.listFocus) {
          this.activeDescendant = "option".concat(option.id);
        } else {
          this.activeDescendant = "";
        }
      }
      /**
       * sets the combobox value
       *
       * @param {*} value
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "setValue",
      value: function setValue(value) {
        this.filter = value;
        this.input.setSelectionRange(this.filter.length, this.filter.length);

        if (this.isList || this.isBoth) {
          this.filterOptions(this.filter, this.option);
        }
      }
      /**
       * sets the selected option
       *
       * @param {object} option
       * @param {string} flag
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "setOption",
      value: function setOption(option) {
        var _this5 = this;

        var flag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (option) {
          this.option = option;
          this.setCurrentOptionStyle(this.option);
          this.setActiveDescendant(this.option);

          if (this.isBoth) {
            this.value = this.option.value;
            this.input.value = this.option.value;

            if (flag) {
              setTimeout(function () {
                _this5.input.setSelectionRange(option.value.length, option.value.length);
              }, 0);
            } else {
              setTimeout(function () {
                _this5.input.setSelectionRange(_this5.filter.length, option.value.length);
              }, 0);
            }
          }
        }
      }
      /**
       * switches focus to input
       *
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "setVisualFocusTextbox",
      value: function setVisualFocusTextbox() {
        this.listFocus = false;
        this.inputFocus = true;
        this.setActiveDescendant(false);
      }
      /**
       * switches focus to listbox
       *
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "setVisualFocusListbox",
      value: function setVisualFocusListbox() {
        this.inputFocus = false;
        this.listFocus = true;
        this.setActiveDescendant(this.option);
      }
      /**
       * switches focus from text box and listbox
       *
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "removeVisualFocusAll",
      value: function removeVisualFocusAll() {
        this.inputFocus = false;
        this.listFocus = true; //??

        this.option = false;
        this.setActiveDescendant(false);
      }
      /**
       * handles the dropdown button click
       *
       * @param {event} event
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "_onButtonClick",
      value: function _onButtonClick(event) {
        if (this.expanded) {
          this.close(true);
        } else {
          this.open();
        }

        this.input.focus();
        this.setVisualFocusTextbox();
      }
      /**
       * handles input click
       *
       * @param {event} event
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "_onInputClick",
      value: function _onInputClick(event) {
        if (this.expanded) {
          this.close(true);
        } else {
          this.open();
        }
      }
      /**
       * handles input blur
       *
       * @param {event} event
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "_onInputBlur",
      value: function _onInputBlur(event) {
        if (!!this.hoveredOption) return;
        this.listFocus = false;
        this.setCurrentOptionStyle(null);
        this.removeVisualFocusAll();
        setTimeout(this.close(false), 300);
      }
      /**
       * handles input focus
       *
       * @param {event} event
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "_onInputFocus",
      value: function _onInputFocus(event) {
        this.setVisualFocusTextbox();
        this.option = false;
        this.setCurrentOptionStyle(null);
      }
      /**
       * handles input keydown
       *
       * @param {event} event
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "_onInputKeydown",
      value: function _onInputKeydown(event) {
        var flag = false,
            altKey = event.altKey;

        switch (event.keyCode) {
          case this.keyCode.RETURN:
            if ((this.listFocus || this.isBoth) && this.option) {
              this.setValue(this.option.value);
            }

            this.close(true);
            flag = true;
            break;

          case this.keyCode.DOWN:
            if (this.hasOptions) {
              if (this.listFocus || this.isBoth && this.option) {
                this.setOption(this.nextItem, true);
              } else {
                this.open();

                if (!altKey) {
                  this.setOption(this.firstItem, true);
                }
              }

              this.setVisualFocusListbox();
            }

            flag = true;
            break;

          case this.keyCode.UP:
            if (this.hasOptions) {
              if (this.listFocus || this.isBoth && this.option) {
                this.setOption(this.previousItem, true);
              } else {
                this.open();

                if (!altKey) {
                  this.setOption(this.lastItem, true);
                }
              }

              this.setVisualFocusListbox();
            }

            flag = true;
            break;

          case this.keyCode.ESC:
            this.close(true);
            this.setVisualFocusTextbox();
            this.setValue("");
            this.option = false;
            flag = true;
            break;

          case this.keyCode.TAB:
            this.close(true);

            if (this.listFocus) {
              if (this.option) {
                this.setValue(this.option.value);
              }
            }

            break;

          default:
            break;
        }

        if (flag) {
          event.stopPropagation();
          event.preventDefault();
        }
      }
      /**
       * handles input keyup
       *
       * @param {event} event
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "_onInputKeyup",
      value: function _onInputKeyup(event) {
        this.dispatchEvent(new CustomEvent("combo-input-keyup", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: event
        }));
        var flag = false,
            option = false,
            char = event.key || "";

        function isPrintableCharacter(str) {
          return str.length === 1 && str.match(/\S/);
        }

        if (isPrintableCharacter(char)) {
          this.filter += char;
        } // this is for the case when a selection in the textbox has been deleted


        if (this.input && (this.input.value || "").length < this.filter.length) {
          this.filter = this.input.value || "";
          this.option = false;
        }

        if (event.keyCode === this.keyCode.ESC) {
          return;
        }

        switch (event.keyCode) {
          case this.keyCode.BACKSPACE:
            this.setValue(this.input.value);
            this.setVisualFocusTextbox();
            this.setCurrentOptionStyle(false);
            this.option = false;
            flag = true;
            break;

          case this.keyCode.LEFT:
          case this.keyCode.RIGHT:
          case this.keyCode.HOME:
          case this.keyCode.END:
            if (this.isBoth) {
              this.filter = this.input.value;
            } else {
              this.option = false;
              this.setCurrentOptionStyle(false);
            }

            this.setVisualFocusTextbox();
            flag = true;
            break;

          default:
            if (isPrintableCharacter(char)) {
              this.setVisualFocusTextbox();
              this.setCurrentOptionStyle(false);
              flag = true;
            }

            break;
        }

        if (event.keyCode !== this.keyCode.RETURN) {
          if (this.isList || this.isBoth) {
            option = this.filterOptions(this.filter, this.option);

            if (option) {
              if (!this.expanded && (this.input.value || "").length) this.open();

              if (option.textComparison.indexOf((this.input.value || "").toLowerCase()) === 0) {
                this.option = option;

                if (this.isBoth || this.listFocus) {
                  this.setCurrentOptionStyle(option);

                  if (this.isBoth && isPrintableCharacter(char)) {
                    this.setOption(option);
                  }
                }
              } else {
                this.option = false;
                this.setCurrentOptionStyle(false);
              }
            } else {
              this.close();
              this.option = false;
              this.setActiveDescendant(false);
            }
          } else {
            if (this.input && (this.input.value || "").length) {
              this.open();
            }
          }
        }

        if (flag) {
          event.stopPropagation();
          event.preventDefault();
        }
      }
      /**
       * gets a sorted list of option
       *
       * @readonly
       * @memberof SimpleFieldsField
       */

    }, {
      key: "sortedOptions",
      get: function get() {
        var _this6 = this;

        var sorted = (this.itemsList || []).map(function (item, i) {
          return babelHelpers.typeof(item) === "object" ? item : {
            id: i,
            value: item
          };
        });
        Object.keys(this.options || {}).sort(function (a, b) {
          return a > b ? 1 : -1;
        }).forEach(function (key) {
          return sorted.push({
            id: sorted.length,
            value: _this6.options[key]
          });
        });
        return sorted;
      }
      /**
       * updates options list
       *
       * @param {event} event
       * @memberof SimpleFieldsCombo
       */

    }, {
      key: "filterOptions",
      value: function filterOptions(filter, currentOption) {
        if (typeof filter !== "string") {
          filter = "";
        }

        var firstMatch = false,
            i,
            option,
            textContent,
            numItems;
        filter = filter.toLowerCase();
        this.filteredOptions = [];
        this.firstChars = [];

        for (i = 0; i < this.sortedOptions.length; i++) {
          option = this.sortedOptions[i];
          option.id = i;
          option.textComparison = option.value.toLowerCase();

          if (filter.length === 0 || option.textComparison.indexOf(filter) === 0) {
            this.filteredOptions.push(option);
            textContent = option.value.trim();
            this.firstChars.push(textContent.substring(0, 1).toLowerCase());
          }
        } // Use populated.filteredOptions array to initialize firstOption and lastOption.


        numItems = this.filteredOptions.length;

        if (numItems > 0) {
          this.firstOption = this.filteredOptions[0];
          this.lastOption = this.filteredOptions[numItems - 1];
          var filteredText = this.filteredOptions.map(function (o) {
            return o.textComparison;
          });

          if (currentOption && currentOption.textComparison && filteredText.includes(currentOption.textComparison)) {
            option = currentOption;
          } else {
            option = this.firstOption;
          }
        } else {
          this.firstOption = false;
          option = false;
          this.lastOption = false;
        }

        return option;
      }
    }, {
      key: "setCurrentOptionStyle",
      value: function setCurrentOptionStyle(option) {
        this._selectedOption = option;
        if (!!this.listbox && !!option && !!this.shadowRoot && !!this.shadowRoot.querySelector("#option".concat(option.id))) this.listbox.scrollTop = this.shadowRoot.querySelector("#option".concat(option.id)).offsetTop;
      }
    }, {
      key: "_isSelected",
      value: function _isSelected(option) {
        return option && this._selectedOption && option.textComparison === this._selectedOption.textComparison ? "true" : "false";
      }
    }, {
      key: "_onListboxMouseover",
      value: function _onListboxMouseover(event) {
        this.listHover = true;
      }
    }, {
      key: "_onListboxMouseout",
      value: function _onListboxMouseout(event) {
        this.listHover = false;
        this.hoveredOption = undefined;
        setTimeout(this.close(false), 300);
      }
    }, {
      key: "open",
      value: function open() {
        if (!this.exapanded) this.expanded = true;
      }
    }, {
      key: "close",
      value: function close(force) {
        //return;
        if (typeof force !== "boolean") {
          force = false;
        }

        if (force || !this.inputFocus && !this.hasHover && !this.hasHover) {
          this.setCurrentOptionStyle(false);
          this.expanded = false;
          this.setActiveDescendant(false);
        }
      }
    }, {
      key: "_onOptionClick",
      value: function _onOptionClick(e, option) {
        if (option) {
          this.setOption(option);
          this.setValue(option.value);
        }

        this.close(true);
      }
    }, {
      key: "_onOptionMouseover",
      value: function _onOptionMouseover(e, option) {
        this.hoveredOption = option;
        this.listHover = true;
        this.open();
      }
    }, {
      key: "_onOptionMouseout",
      value: function _onOptionMouseout(e, option) {
        this.listHover = false;
        this.hoveredOption = undefined;
        setTimeout(this.close(false), 300);
      }
    }, {
      key: "previousItem",
      get: function get() {
        var index,
            optionText = !this.option ? undefined : this.option.textComparison,
            firstText = !this.firstOption ? undefined : this.firstOption.textComparison,
            filteredtext = this.filteredOptions.map(function (o) {
          return o.textComparison;
        });

        if (optionText !== firstText) {
          index = filteredtext.indexOf(optionText);
          return this.filteredOptions[index - 1];
        }

        return this.lastOption;
      }
    }, {
      key: "nextItem",
      get: function get() {
        var index,
            optionText = !this.option ? undefined : this.option.textComparison,
            lastText = !this.lastOption ? undefined : this.lastOption.textComparison,
            filteredtext = this.filteredOptions.map(function (o) {
          return o.textComparison;
        });

        if (optionText !== lastText) {
          index = filteredtext.indexOf(optionText);
          return this.filteredOptions[index + 1];
        }

        return this.firstOption;
      }
    }, {
      key: "listbox",
      get: function get() {
        if (!this._listbox) this._listbox = this.shadowRoot && this.shadowRoot.querySelector("#".concat(this.id, "-list")) ? this.shadowRoot.querySelector("#".concat(this.id, "-list")) : undefined;
        return this._listbox;
      }
    }, {
      key: "input",
      get: function get() {
        if (!this._input) this._input = this.field ? this.field : this.shadowRoot && this.shadowRoot.querySelector("#".concat(this.id)) ? this.shadowRoot.querySelector("#".concat(this.id)) : undefined;
        return this._input;
      }
    }, {
      key: "keyCode",
      get: function get() {
        return {
          BACKSPACE: 8,
          TAB: 9,
          RETURN: 13,
          ESC: 27,
          SPACE: 32,
          PAGEUP: 33,
          PAGEDOWN: 34,
          END: 35,
          HOME: 36,
          LEFT: 37,
          UP: 38,
          RIGHT: 39,
          DOWN: 40
        };
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-fields-combo";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCombo), "styles", this)), [(0, _index.css)(_templateObject6_dd6b3bd08e0011ed99ce491205e67b1d || (_templateObject6_dd6b3bd08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host([expanded]) {\n          overflow: visible;\n        }\n        :host(:focus-within),\n        :host(:hover),\n        ul:hover,\n        li:hover {\n          z-index: 2;\n        }\n        .input-option {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          flex: 1 1 100%;\n        }\n        .box-input {\n          flex: 1 1 auto;\n        }\n        ul[role=\"listbox\"] {\n          opacity: 0;\n          position: absolute;\n          list-style: none;\n          max-height: var(--simple-fields-combo-max-height, 12em);\n          max-width: 100%;\n          left: 0;\n        }\n        :host([align-right]) ul[role=\"listbox\"] {\n          right: 0;\n          left: unset;\n        }\n        :host([justify]) ul[role=\"listbox\"] {\n          right: 0;\n          left: 0;\n        }\n        :host([expanded]:hover) ul[role=\"listbox\"],\n        :host([expanded]:focus-within) ul[role=\"listbox\"] {\n          opacity: 1;\n        }\n\n        ul[role=\"listbox\"] li[role=\"option\"] {\n          margin: 0;\n          padding: 0;\n          padding-left: 0.125em;\n          border-top: 1px solid transparent;\n          border-bottom: 1px solid transparent;\n          background-color: var(--simple-fields-background-color, white);\n        }\n\n        [role=\"listbox\"] [role=\"option\"] {\n          display: block;\n          margin: 0.25em;\n          padding: 0;\n          font-size: 100%;\n        }\n\n        [role=\"listbox\"] [role=\"option\"][aria-selected=\"true\"] {\n          background-color: var(--simple-fields-active-color, #eeeeee);\n        }\n\n        [role=\"listbox\"].focus [role=\"option\"][aria-selected=\"true\"] {\n          background-color: var(--simple-fields-accent-color-light, #d9eaff);\n          border-color: var(--simple-fields-accent-color, #3f51b5);\n        }\n\n        [role=\"listbox\"] li[role=\"option\"]:hover {\n          background-color: var(--simple-fields-accent-color-light, #d9eaff);\n        }\n        ::slotted([slot=\"prefix\"]:not(:empty)) {\n          margin-right: 0.25em;\n        }\n        ::slotted([slot=\"suffix\"]:not(:empty)) {\n          margin: 0 0.25em;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCombo), "properties", this)), {}, {
          /**
           * id of active option
           */
          activeDescendant: {
            type: String
          },

          /**
           * whether listbox is aligned on the right edge
           */
          alignRight: {
            type: Boolean,
            reflect: true,
            attribute: "align-right"
          },

          /**
           * whether listbox is expanded
           */
          expanded: {
            type: Boolean,
            reflect: true
          },

          /**
           * whether listbox is full-width
           */
          justify: {
            type: Boolean,
            reflect: true
          },

          /**
           * input text to filter listbox options
           */
          filter: {
            type: String
          },

          /**
           * aray of filtered listbox options
           */
          filteredOptions: {
            type: Array
          },

          /**
           * whether input has focus
           */
          inputFocus: {
            type: Boolean
          },

          /**
           * whether input is hovered
           */
          inputHover: {
            type: Boolean
          },

          /**
           * whether list has focus
           */
          listFocus: {
            type: Boolean
          },

          /**
           * whether list is hovered
           */
          listHover: {
            type: Boolean
          },
          hoveredOption: {
            type: Object
          }
        });
      }
    }]);
    return SimpleFieldsCombo;
  }((0, _simpleFieldsField.SimpleFieldsFieldBehaviors)(_index.LitElement));

  _exports.SimpleFieldsCombo = SimpleFieldsCombo;
  customElements.define(SimpleFieldsCombo.tag, SimpleFieldsCombo);
});