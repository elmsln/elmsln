define(["exports", "require", "../../@polymer/polymer/polymer-element.js"], function (_exports, _require, _polymerElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SelectMenu = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_ac8206208e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `select-menu`
   * @element select-menu
   * accepts an array of values and human-readable text and creates a paper-dropdown-menu, provides the value fo the selected item
   *
  
   * @polymer
   * @polymerLegacy
   * @demo demo/index.html
   */
  var SelectMenu = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(SelectMenu, _PolymerElement);

    var _super = _createSuper(SelectMenu);

    function SelectMenu() {
      var _this;

      babelHelpers.classCallCheck(this, SelectMenu);
      _this = _super.call(this);
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-dropdown-menu/paper-dropdown-menu.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-item/paper-item.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-listbox/paper-listbox.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(SelectMenu, [{
      key: "_setSelectedValue",
      value:
      /**
       * Get the value of the selected item.
       */
      function _setSelectedValue(e) {
        if (e.detail.value !== null) {
          var val = e.detail.value.getAttribute("value");
          this.setAttribute("value", val);
          this.dispatchEvent(new CustomEvent("change", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              value: val
            }
          }));
        }
      }
      /**
       * Get the index of the default value.
       */

    }, {
      key: "_getSelectedIndex",
      value: function _getSelectedIndex() {
        this.__items = this.getElementsByTagName("paper-item");

        for (var i = 0; i < this.__items.length; i++) {
          console.log(this.value, this.__items[i], this.__items[i].getAttribute("value"));

          if (this.value == this.__items[i].getAttribute("value")) {
            return i;
          }
        }

        return null;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_ac8206208e0011ed99ce491205e67b1d || (_templateObject_ac8206208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        paper-dropdown-menu,\n        paper-listbox {\n          width: 250px;\n        }\n        paper-dropdown-menu {\n          height: 200px;\n          margin: auto;\n          display: block;\n        }\n      </style>\n      <paper-dropdown-menu\n        id=\"menu\"\n        label$=\"[[label]]\"\n        on-click=\"_menubuttonTap\"\n        on-selected-item-changed=\"_setSelectedValue\"\n      >\n        <paper-listbox\n          id=\"listbox\"\n          slot=\"dropdown-content\"\n          selected=\"{{selectedIndex}}\"\n        >\n          <slot></slot>\n        </paper-listbox>\n      </paper-dropdown-menu>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "select-menu";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The label of the select menu
           */
          label: {
            type: String,
            value: "Select an option."
          },

          /**
           * The default value
           */
          value: {
            type: String,
            value: null
          },

          /**
           * The index of the selected item
           */
          selectedIndex: {
            type: Number,
            reflectToAttribute: true,
            notify: true,
            computed: "_getSelectedIndex()"
          }
        };
      }
    }]);
    return SelectMenu;
  }(_polymerElement.PolymerElement);

  _exports.SelectMenu = SelectMenu;
  customElements.define(SelectMenu.tag, SelectMenu);
});