define(["exports", "meta", "require", "../../../lit/index.js", "../../hax-body-behaviors/hax-body-behaviors.js", "../../utils/utils.js", "./hax-store.js"], function (_exports, meta, _require, _index, _haxBodyBehaviors, _utils, _haxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxAutoloader = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);

  var _templateObject_d735e0d08e0011ed99ce491205e67b1d, _templateObject2_d735e0d08e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-autoloader`
   * @element hax-autoloader
   * `Automatically load elements based on the most logical location with future fallback support for CDNs.`
   * @microcopy - the mental model for this element
   * - hax-autoloader - autoloading of custom element imports which can then emmit events as needed
   * @element hax-autoloader
   */
  var HaxAutoloader = /*#__PURE__*/function (_HAXElement) {
    babelHelpers.inherits(HaxAutoloader, _HAXElement);

    var _super = _createSuper(HaxAutoloader);

    function HaxAutoloader() {
      var _this;

      babelHelpers.classCallCheck(this, HaxAutoloader);
      _this = _super.call(this);
      _this.processedList = {};
      return _this;
    }
    /**
     * LitElement ready life cycle
     */


    babelHelpers.createClass(HaxAutoloader, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_d735e0d08e0011ed99ce491205e67b1d || (_templateObject_d735e0d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<slot></slot>"])));
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        // fire an event that this is a core piece of the system
        this.dispatchEvent(new CustomEvent("hax-register-core-piece", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            piece: "haxAutoloader",
            object: this
          }
        }));
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HaxAutoloader.prototype), "connectedCallback", this).call(this);
        this.observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            mutation.addedNodes.forEach(function (node) {
              _this2.processNewElements(node);
            });
          });
        });
        this.observer.observe(this, {
          childList: true
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.observer.disconnect();
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxAutoloader.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Process new elements
       */

    }, {
      key: "processNewElements",
      value: function processNewElements(e) {
        var _this3 = this;

        // when new nodes show up in the slots then fire the needed pieces
        var effectiveChildren = this.childNodes;

        for (var i = 0; i < effectiveChildren.length; i++) {
          // strip invalid tags / textnodes
          if (babelHelpers.typeof(effectiveChildren[i].tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(this.processedList[effectiveChildren[i].tagName]) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            // attempt a dynamic import with graceful failure / fallback
            try {
              var propName;
              var i;

              (function () {
                var name = effectiveChildren[i].tagName.toLowerCase(); // see if we already have this definition

                if (typeof effectiveChildren[i].getHaxProperties === "function") {
                  var evt = new CustomEvent("hax-register-properties", {
                    bubbles: true,
                    composed: true,
                    cancelable: true,
                    detail: {
                      tag: name,
                      properties: effectiveChildren[i].getHaxProperties(),
                      polymer: true
                    }
                  });
                  context.dispatchEvent(evt);
                } else if (typeof effectiveChildren[i].HAXWiring === "function") {
                  var _evt = new CustomEvent("hax-register-properties", {
                    bubbles: true,
                    cancelable: true,
                    composed: true,
                    detail: {
                      tag: name,
                      properties: effectiveChildren[i].HAXWiring.getHaxProperties(),
                      polymer: false
                    }
                  });

                  context.dispatchEvent(_evt);
                } else {
                  // @todo support CDN failover or a flag of some kind to ensure
                  // this delivers locally or from remote
                  // @todo need to support name spacing of packages so that we
                  // don't assume they are all relative to lrnwebcomponents
                  if (!window.customElements.get(name)) {
                    // fallback support since we now support import / a complex object
                    var nameLocation = (0, _utils.varGet)(_haxStore.HAXStore, "__appStoreData.autoloader.".concat(name, ".import"), (0, _utils.varGet)(_haxStore.HAXStore, "__appStoreData.autoloader.".concat(name), "@lrnwebcomponents/".concat(name, "/").concat(name, ".js")));
                    new Promise(function (res, rej) {
                      return _require.default(["".concat(new URL("./../../../", meta.url).href).concat(nameLocation)], res, rej);
                    }).then(function (response) {
                      // get the custom element definition we used to add that file
                      var CEClass = window.customElements.get(name);

                      if (!CEClass) {
                        console.error("".concat(name, " was not a valid custom element yet a load was attempted"));
                      } else if (typeof CEClass.getHaxProperties === "function") {
                        _this3.setHaxProperties(CEClass.getHaxProperties(), name);
                      } else if (typeof CEClass.HAXWiring === "function") {
                        _this3.setHaxProperties(CEClass.HAXWiring.getHaxProperties(), name);
                      } else if (CEClass.haxProperties) {
                        _this3.setHaxProperties(CEClass.haxProperties, name);
                      } // appstore definition
                      else if ((0, _utils.varGet)(_haxStore.HAXStore, "__appStoreData.autoloader.".concat(name, ".haxProperties"), false)) {
                          _this3.setHaxProperties((0, _utils.varGet)(_haxStore.HAXStore, "__appStoreData.autoloader.".concat(name, ".haxProperties"), false), name);
                        } else {
                          console.warn("".concat(name, " didn't have hax wiring in the end"));
                        }
                    }).catch(function (error) {
                      /* Error handling */
                      console.warn(error);
                    });
                  } else {
                    // get the custom element definition we used to add that file
                    var CEClass = window.customElements.get(name);

                    if (!CEClass) {
                      console.error("".concat(name, " was not a valid custom element yet a load was attempted"));
                    } else if (typeof CEClass.getHaxProperties === "function") {
                      _this3.setHaxProperties(CEClass.getHaxProperties(), name);
                    } else if (typeof CEClass.HAXWiring === "function") {
                      _this3.setHaxProperties(CEClass.HAXWiring.getHaxProperties(), name);
                    } else if (CEClass.haxProperties) {
                      _this3.setHaxProperties(CEClass.haxProperties, name);
                    } else {
                      console.warn("".concat(name, " didn't have hax wiring so HAX guessed as best it can. See https://haxtheweb.org/documentation-1/hax-development/hax-schema for documentation on adding custom wiring for better UX."));

                      try {
                        var wiring = new _haxBodyBehaviors.HAXWiring();
                        var props = wiring.prototypeHaxProperties();
                        props.gizmo.title = name;
                        props.gizmo.handles = [];
                        props.settings.configure = [];
                        props.settings.advanced = [];
                        props = wiring.standardAdvancedProps(props);
                        props.saveOptions = {};
                        props.demoSchema = []; // try and make this have SOME fields, again, really guessing here

                        var tmpProps; // relatively cross library

                        if (customElements.get(name)) {
                          tmpProps = customElements.get(name).properties;
                        }

                        if (tmpProps) {
                          for (propName in tmpProps) {
                            if (tmpProps[propName].type && tmpProps[propName].type.name) {
                              switch (tmpProps[propName].type.name) {
                                case "String":
                                  props.settings.configure.push({
                                    property: propName,
                                    title: propName,
                                    description: "",
                                    inputMethod: "textfield"
                                  });
                                  break;

                                case "Number":
                                  props.settings.configure.push({
                                    property: propName,
                                    title: propName,
                                    description: "",
                                    inputMethod: "number"
                                  });
                                  break;

                                case "Boolean":
                                  props.settings.configure.push({
                                    property: propName,
                                    title: propName,
                                    description: "",
                                    inputMethod: "boolean"
                                  });
                                  break;
                              }
                            }
                          }
                        } else {
                          var _tmpProps = document.createElement(name).getAttributeNames();

                          for (i = 0; i < _tmpProps.length; i++) {
                            props.settings.configure.push({
                              attribute: _tmpProps[i],
                              title: _tmpProps[i],
                              description: "",
                              inputMethod: "textfield"
                            });
                          }
                        }

                        wiring.readyToFireHAXSchema(name, props, _this3);
                      } catch (e) {
                        console.warn("HAX failed to create wiring that worked");
                      }
                    }
                  }
                }

                _this3.processedList[name] = name;
              })();
            } catch (err) {// error in the event this is a double registration
            }
          }

          effectiveChildren[i].remove();
        }
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject2_d735e0d08e0011ed99ce491205e67b1d || (_templateObject2_d735e0d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: none;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-autoloader";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxAutoloader), "properties", this)), {}, {
          /**
           * List of elements processed so we don't double process
           */
          processedList: {
            type: Object
          }
        });
      }
    }]);
    return HaxAutoloader;
  }((0, _haxBodyBehaviors.HAXElement)(_index.LitElement));

  _exports.HaxAutoloader = HaxAutoloader;
  customElements.define(HaxAutoloader.tag, HaxAutoloader);
});