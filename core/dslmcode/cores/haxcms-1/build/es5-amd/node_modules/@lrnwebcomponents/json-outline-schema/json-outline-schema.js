define(["exports", "./lib/json-outline-schema-item.js"], function (_exports, _jsonOutlineSchemaItem) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "JSONOutlineSchemaItem", {
    enumerable: true,
    get: function get() {
      return _jsonOutlineSchemaItem.JSONOutlineSchemaItem;
    }
  });
  _exports.JsonOutlineSchema = void 0;

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // register globally so we can make sure there is only one
  window.JSONOutlineSchema = window.JSONOutlineSchema || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same json-outline-schema element, making it a singleton.

  window.JSONOutlineSchema.requestAvailability = function () {
    // if there is no single instance, generate one and append it to end of the document
    if (!window.JSONOutlineSchema.instance) {
      window.JSONOutlineSchema.instance = document.createElement("json-outline-schema");
      document.body.appendChild(window.JSONOutlineSchema.instance);
    }

    return window.JSONOutlineSchema.instance;
  };
  /**
   * `json-outline-schema`
   * `JS based state management helper for the json outline schema spec`
   * @demo demo/index.html Demo
   * @demo demo/listing.html Listing
   * @element json-outline-schema
   */


  var JsonOutlineSchema = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(JsonOutlineSchema, _HTMLElement);

    var _super = _createSuper(JsonOutlineSchema);

    /**
     * life cycle
     */
    function JsonOutlineSchema() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, JsonOutlineSchema);
      _this = _super.call(this); // set tag for later use

      _this.tag = JsonOutlineSchema.tag;
      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      if (!delayRender) {
        _this.render();
      }

      _this.__ready = false;
      _this.file = null;
      _this.id = _this.generateUUID();
      _this.title = "New site";
      _this.author = "";
      _this.description = "";
      _this.license = "by-sa";
      _this.metadata = {};
      _this.items = [];
      _this.debug = false;
      window.JSONOutlineSchema.instance = babelHelpers.assertThisInitialized(_this);
      return _this;
    }
    /**
     * life cycle, element is afixed to the DOM
     */


    babelHelpers.createClass(JsonOutlineSchema, [{
      key: "html",
      get: // render function
      function get() {
        return "\n<style>\n:host {\n  display: block;\n}\n:host([debug]) {\n  font-family: monospace;\n  white-space: pre;\n  margin: 16px 0px;\n}\n:host([hidden]) {\n  display: none;\n}\n        </style>\n<slot></slot>";
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        if (window.ShadyCSS) {
          window.ShadyCSS.styleElement(this);
        }

        window.addEventListener("json-outline-schema-debug-toggle", this._toggleDebug.bind(this));
        var evt = new CustomEvent("json-outline-schema-ready", {
          bubbles: true,
          cancelable: false,
          composed: true,
          detail: true
        });
        this.dispatchEvent(evt);
        this.__ready = true;
      }
    }, {
      key: "_copyAttribute",
      value: function _copyAttribute(name, to) {
        var recipients = this.shadowRoot.querySelectorAll(to);
        var value = this.getAttribute(name);
        var fname = value == null ? "removeAttribute" : "setAttribute";

        var _iterator = _createForOfIteratorHelper(recipients),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var node = _step.value;
            node[fname](name, value);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "_setProperty",
      value: function _setProperty(_ref) {
        var name = _ref.name,
            value = _ref.value;
        this[name] = value;
      }
    }, {
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
      /**
       * life cycle, element is removed from the DOM
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("json-outline-schema-debug-toggle", this._toggleDebug.bind(this));
        var evt = new CustomEvent("json-outline-schema-unready", {
          bubbles: true,
          cancelable: false,
          detail: true
        });
        this.dispatchEvent(evt);
      }
      /**
       * Get a clone of this JSONOutlineSchema object
       * @return Object
       */

    }, {
      key: "clone",
      value: function clone() {
        var schema = {
          id: this.id,
          title: this.title,
          author: this.author,
          description: this.description,
          license: this.license,
          metadata: this.metadata,
          items: this.items
        };
        var obj = JSON.parse(JSON.stringify(schema));
        return obj;
      }
      /**
       * Get a new item matching schema standards
       * @return new JSONOutlineSchemaItem Object
       */

    }, {
      key: "newItem",
      value: function newItem() {
        return new _jsonOutlineSchemaItem.JSONOutlineSchemaItem();
      }
      /**
       * Add an item to the outline
       * @var item an array of values, keyed to match JSON Outline Schema
       * @return count of items in the array
       */

    }, {
      key: "addItem",
      value: function addItem(item) {
        var safeItem = this.validateItem(item);
        this.items.push(safeItem);
        return this.items.length;
      }
      /**
       * Validate that an item matches JSONOutlineSchemaItem format
       * @var item JSONOutlineSchemaItem
       * @return JSONOutlineSchemaItem matching the specification
       */

    }, {
      key: "validateItem",
      value: function validateItem(item) {
        // create a generic schema item
        var tmp = new _jsonOutlineSchemaItem.JSONOutlineSchemaItem();

        for (var key in tmp) {
          // only set what the element from spec allows into a new object
          if (babelHelpers.typeof(item[key]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            tmp[key] = item[key];
          }
        }

        return tmp;
      }
      /**
       * Remove an item from the outline if it exists
       * @var id an id that's in the array of items
       * @return JSONOutlineSchemaItem or false if not found
       */

    }, {
      key: "removeItem",
      value: function removeItem(id) {
        for (var key in this.items) {
          if (this.items[key].id == id) {
            var tmp = this.items[key];
            delete this.items[key];
            return tmp;
          }
        }

        return false;
      }
      /**
       * Remove an item from the outline if it exists
       * @var id an id that's in the array of items
       * @return JSONOutlineSchemaItem or false if not found
       */

    }, {
      key: "updateItem",
      value: function updateItem(item) {
        var save = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        // verify this is a legit item
        var safeItem = this.validateItem(item);

        for (var key in this.items) {
          // match the current item's ID to our safeItem passed in
          if (this.items[key].id == safeItem.id) {
            // overwrite the item
            this.items[key] = safeItem; // if we save, then we let that return the whole file

            if (save) {
              return this.save();
            } // this was successful


            return true;
          }
        } // we didn't find a match on the ID to bother saving an update


        return false;
      }
      /**
       * Load a schema from a file
       */

    }, {
      key: "load",
      value: function () {
        var _load = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(location) {
          var data, fileData, key, item, newItem;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!location) {
                    _context.next = 9;
                    break;
                  }

                  this.file = location;
                  _context.next = 4;
                  return fetch(location).then(function (response) {
                    return response.text();
                  });

                case 4:
                  data = _context.sent;
                  fileData = JSON.parse(data);

                  for (key in fileData) {
                    if (babelHelpers.typeof(this[key]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && key !== "items") {
                      this[key] = fileData[key];
                    }
                  } // check for items and escalate to full JSONOutlineSchemaItem object
                  // also ensures data matches only what is supported


                  if (fileData.items) {
                    for (key in fileData.items) {
                      item = fileData.items[key];
                      newItem = new _jsonOutlineSchemaItem.JSONOutlineSchemaItem();
                      newItem.id = item.id;
                      newItem.indent = item.indent;
                      newItem.location = item.location;
                      newItem.slug = item.slug;
                      newItem.order = item.order;
                      newItem.parent = item.parent;
                      newItem.title = item.title;
                      newItem.description = item.description; // metadata can be anything so whatever

                      newItem.metadata = item.metadata;
                      this.items[key] = newItem;
                    }
                  }

                  return _context.abrupt("return", true);

                case 9:
                  return _context.abrupt("return", false);

                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function load(_x) {
          return _load.apply(this, arguments);
        }

        return load;
      }()
      /**
       * Save data back to the file system location
       */

    }, {
      key: "save",
      value: function save() {
        var schema = {
          id: this.id,
          title: this.title,
          author: this.author,
          description: this.description,
          license: this.license,
          metadata: this.metadata,
          items: this.items
        }; // @todo write contents
        //return @file_put_contents(this.file, JSON.stringify(schema, null, 2));

        return JSON.stringify(schema, null, 2);
      }
      /**
       * Generate a UUID
       */

    }, {
      key: "generateUUID",
      value: function generateUUID() {
        return "ss-s-s-s-sss".replace(/s/g, this._uuidPart);
      }
    }, {
      key: "_uuidPart",
      value: function _uuidPart() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      }
      /**
       * Allow toggling of debug mode which visualizes the outline and writes it to console.
       */

    }, {
      key: "_toggleDebug",
      value: function _toggleDebug(e) {
        this.debug = !this.debug;

        this._triggerDebugPaint(this.debug);
      }
      /**
       * Paint the slot in order to debug the object inside
       */

    }, {
      key: "_triggerDebugPaint",
      value: function _triggerDebugPaint(debug) {
        if (debug) {
          var obj = {
            file: this.file,
            id: this.id,
            title: this.title,
            author: this.author,
            description: this.description,
            license: this.license,
            metadata: this.metadata,
            items: this.items
          };
          var span = document.createElement("span");
          span.innerHTML = JSON.stringify(obj, null, 2);
          this.shadowRoot.appendChild(span.cloneNode(true));
        } else {
          this.render();
        }
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(attr, oldValue, newValue) {
        if (this.debug) {
          this.render();

          this._triggerDebugPaint(this.debug);
        }
      }
    }, {
      key: "file",
      get: function get() {
        return this.getAttribute("file");
      },
      set: function set(newValue) {
        if (this.__ready) {
          this.setAttribute("file", newValue);
        }
      }
    }, {
      key: "id",
      get: function get() {
        return this.getAttribute("id");
      },
      set: function set(newValue) {
        if (this.__ready) {
          this.setAttribute("id", newValue);
        }
      }
    }, {
      key: "title",
      get: function get() {
        return this.getAttribute("title");
      },
      set: function set(newValue) {
        if (this.__ready) {
          this.setAttribute("title", newValue);
        }
      }
    }, {
      key: "author",
      get: function get() {
        return this.getAttribute("author");
      },
      set: function set(newValue) {
        if (this.__ready) {
          this.setAttribute("author", newValue);
        }
      }
    }, {
      key: "description",
      get: function get() {
        return this.getAttribute("description");
      },
      set: function set(newValue) {
        if (this.__ready) {
          this.setAttribute("description", newValue);
        }
      }
    }, {
      key: "license",
      get: function get() {
        return this.getAttribute("license");
      },
      set: function set(newValue) {
        if (this.__ready) {
          this.setAttribute("license", newValue);
        }
      }
    }, {
      key: "debug",
      get: function get() {
        return this.getAttribute("debug");
      },
      set: function set(newValue) {
        if (this.__ready && newValue) {
          this.setAttribute("debug", newValue);
        } else {
          this.removeAttribute("debug");
        }
      }
      /**
       * Set individual key values pairs on metdata so we can notice it change
       */

    }, {
      key: "updateMetadata",
      value: function updateMetadata(key, value) {
        this.metadata[key] = value;

        if (this.debug) {
          this.render();

          this._triggerDebugPaint(this.debug);
        }
      }
      /**
       * Return some items populated correctly
       */

    }, {
      key: "getItemValues",
      value: function getItemValues(item) {
        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var valid;

        if (item) {
          valid = this.validateItem(item);
        } else {
          valid = new _jsonOutlineSchemaItem.JSONOutlineSchemaItem();
        } // treat this item as the parent


        if (parent) {
          valid.parent = parent.id;
        }

        return valid;
      }
      /**
       * Return valid JSON Schema relative to what asked for
       */

    }, {
      key: "getItemSchema",
      value: function getItemSchema() {
        var requested = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "item";
        var schema = {
          $schema: "http://json-schema.org/schema#",
          title: this.title,
          type: "object",
          properties: {}
        };
        var obj;

        if (requested == "item") {
          obj = new _jsonOutlineSchemaItem.JSONOutlineSchemaItem();
        } else {
          // current object definition but without the outline
          obj = {
            file: this.file,
            id: this.id,
            title: this.title,
            author: this.author,
            description: this.description,
            license: this.license,
            metadata: this.metadata
          }; // support this as fallback

          if (requested == "outline") {
            obj.items = this.items;
          }
        }

        for (var key in obj) {
          var props = {
            title: key,
            type: "string",
            value: obj[key]
          };

          switch (key) {
            case "file":
            case "id":
            case "title":
            case "author":
            case "description":
            case "license":
            case "location": // @todo break parent out into selector

            case "parent":
              props.component = {
                name: "paper-input",
                valueProperty: "value",
                properties: {
                  required: true
                }
              };
              break;

            case "indent":
            case "order":
              props.component = {
                name: "paper-input",
                valueProperty: "value",
                properties: {
                  required: true
                },
                attributes: {
                  type: "number"
                }
              };

            case "metadata":
            case "items":
              props.type = "array";
              props.items = {
                type: "object",
                properties: {
                  key: {
                    title: "key",
                    type: "string",
                    component: {
                      name: "paper-input",
                      valueProperty: "value",
                      properties: {
                        required: true
                      }
                    }
                  },
                  value: {
                    title: "value",
                    type: "string",
                    component: {
                      name: "paper-input",
                      valueProperty: "value",
                      properties: {
                        required: true
                      }
                    }
                  }
                }
              };
              break;

            default:
              console.warn(key);
              break;
          }

          schema.properties[key] = props;
        }

        return schema;
      }
      /**
       * Take the items of the manifest (or passed in) and generate an HTML list hierarchy from it
       */

    }, {
      key: "itemsToNodes",
      value: function itemsToNodes() {
        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        if (items.length === 0) {
          items = this.items;
        }

        var tree = this.unflattenItems(items);
        return this.treeToNodes(tree, document.createElement("ul"));
      }
    }, {
      key: "treeToNodes",
      value: function treeToNodes(tree, appendTarget) {
        for (var i in tree) {
          var li = document.createElement("li");
          li.innerText = tree[i].title;
          li.setAttribute("data-jos-id", tree[i].id);

          if (tree[i].location) {
            li.setAttribute("data-jos-location", tree[i].location);
          }

          if (tree[i].slug) {
            li.setAttribute("data-jos-slug", tree[i].slug);
          }

          if (typeof tree[i].metadata !== "undefined") {
            if (typeof tree[i].metadata.published !== "undefined") {
              li.setAttribute("data-jos-published", tree[i].metadata.published);
            }
          }

          appendTarget.appendChild(li);

          if (tree[i].children && tree[i].children.length > 0) {
            appendTarget.appendChild(this.treeToNodes(tree[i].children, document.createElement("ul")));
          }
        }

        return appendTarget;
      }
      /**
       * Helper to unflatten an array and make it into a tree
       */

    }, {
      key: "unflattenItems",
      value: function unflattenItems(items, parent, tree) {
        var _this2 = this;

        tree = typeof tree !== "undefined" ? tree : [];
        parent = typeof parent !== "undefined" ? parent : {
          id: null
        };
        var children = items.filter(function (child) {
          return child.parent === parent.id;
        });

        if (children.length) {
          if (!parent.id) {
            tree = children;
          } else {
            parent.children = children;
          } // sort order at this level


          children.sort(function (a, b) {
            if (a.order < b.order) {
              return -1;
            } else if (a.order > b.order) {
              return 1;
            }

            return 0;
          }); // forcibly reset the order based on how many child there are
          // the previous sort will respect the order they came in
          // and then this one ensures duplicate entries get healed

          children.map(function (item, i) {
            children[i].order = i;
          });
          children.forEach(function (child) {
            _this2.unflattenItems(items, child);
          });
        }

        return tree;
      }
      /**
       * Scrubs data-jos metadata from node and any children of the node.
       * Useful when dealing with text based data being turned into nodes (like a paste)
       */

    }, {
      key: "scrubElementJOSData",
      value: function scrubElementJOSData(node) {
        // attempt to replace things inside very aggressively
        for (var i in node.children) {
          node.removeAttribute("data-jos-id");
          node.removeAttribute("data-jos-location");
          node.removeAttribute("data-jos-slug"); // deep scrub child references

          if (node.children[i].children) {
            this.scrubElementJOSData(node.children[i]);
          }
        }
      }
      /**
       * Take an HTML node and convert it into a JSON Outline Schema based
       * on parent child relationshios found in the node. Commonly used with ul / ol
       */

    }, {
      key: "nodesToItems",
      value: function nodesToItems(node) {
        var save = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var items = this.getChildOutline(node);

        if (save) {
          this.items = items; // update if debugging is turned on

          if (this.debug) {
            this.render();

            this._triggerDebugPaint(this.debug);
          }
        }

        return items;
      }
      /**
       * Generate a flat listing of items in JSON OUtline Schema format
       * from a hierarchy of HTML nodes
       */

    }, {
      key: "getChildOutline",
      value: function getChildOutline(node) {
        var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var indent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        // deep clone the first node so we don't destroy the original
        var clone = node.cloneNode(true);
        var items = [];
        var item = {};

        while (clone.firstChild !== null) {
          // only work on things if they are valid HTML nodes
          if (babelHelpers.typeof(clone.firstChild.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            var child = clone.firstChild; // walk deeper as this element has a child element

            if (child.firstChild !== null && babelHelpers.typeof(child.firstChild.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              // usually this will happen but it's possible to have a corrupted
              // structure in HTML where there are lots of ULs with no immediate children
              // in this case we defer to whoever the parent of this item was
              // This means on a recall that the visual issue would be corrected
              // but it also means the data will technically transform the HTML structure
              // which for our purposes, is a good thing.
              var parentPassdown = parent; // ensure this is set

              if (babelHelpers.typeof(item.id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                parentPassdown = item.id;
              } // recursive; dive in using the current child as the starting point
              // and merge in everything we dig up from there


              items = items.concat(this.getChildOutline(child, 0, indent + 1, parentPassdown));
            } else {
              item = new _jsonOutlineSchemaItem.JSONOutlineSchemaItem(); // allow for DOM to have defined an id ahead of time

              if (child.getAttribute("data-jos-id")) {
                item.id = child.getAttribute("data-jos-id");
              }

              if (child.getAttribute("data-jos-location")) {
                item.location = child.getAttribute("data-jos-location");
              } else {
                item.location = "";
              }

              if (child.getAttribute("data-jos-slug")) {
                item.slug = child.getAttribute("data-jos-slug");
              } else {
                item.slug = "";
              }

              item.indent = indent;
              item.order = order;
              order = order + 1; // @todo mayyyyyy work but if nested structures may not for text
              // @todo need to look for a textNode that has the element content

              item.title = child.innerText;
              item.parent = parent;
              items.push(item);
            }
          }

          clone.removeChild(clone.firstChild);
        }

        return items;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "json-outline-schema";
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        return ["file", "id", "title", "author", "description", "license", "debug"];
      }
    }]);
    return JsonOutlineSchema;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.JsonOutlineSchema = JsonOutlineSchema;
  customElements.define(JsonOutlineSchema.tag, JsonOutlineSchema);
});