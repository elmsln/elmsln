define(["exports", "require", "../../lit/index.js", "../simple-modal/simple-modal.js"], function (_exports, _require, _index, _simpleModal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableList = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_a141c6608e0011ed99ce491205e67b1d, _templateObject2_a141c6608e0011ed99ce491205e67b1d, _templateObject3_a141c6608e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `editable-list`
   * `a listing of items that can be edited in place with operations`
   * @demo demo/index.html
   * @element editable-list
   */
  var EditableList = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(EditableList, _LitElement);

    var _super = _createSuper(EditableList);

    /**
     * HTMLElement
     */
    function EditableList() {
      var _this;

      babelHelpers.classCallCheck(this, EditableList);
      _this = _super.call(this);
      _this.editMode = false;
      _this.items = [];
      window.SimpleModal.requestAvailability();
      new Promise(function (res, rej) {
        return _require.default(["./lib/editable-list-item.js"], res, rej);
      });
      setTimeout(function () {
        _this.shadowRoot.querySelector("#list").addEventListener("editable-list-item-delete", _this.triggerDeleteModal.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }
    /**
     * LitElement properties changed
     */


    babelHelpers.createClass(EditableList, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_a141c6608e0011ed99ce491205e67b1d || (_templateObject_a141c6608e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div id=\"list\">\n      ", "\n    </div>"])), this.items.map(function (item) {
          return (0, _index.html)(_templateObject2_a141c6608e0011ed99ce491205e67b1d || (_templateObject2_a141c6608e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          <editable-list-item\n            ?edit-mode=\"", "\"\n            ?can-edit=\"", "\"\n            ?can-delete=\"", "\"\n            value=\"", "\"\n          ></editable-list-item>\n        "])), item.metadata.canEdit, item.metadata.canEdit, item.metadata.canDelete, item.title);
        }));
      } // properties available to the custom element for data binding

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "items") {
            _this2._itemsChanged(_this2[propName], oldValue);
          }

          if (propName == "editMode") {
            _this2._editModeChanged(_this2[propName], oldValue); // notify


            _this2.dispatchEvent(new CustomEvent("edit-mode-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
    }, {
      key: "triggerDeleteModal",
      value: function triggerDeleteModal(e) {
        this.activeElement = e.detail.element;
        var c = document.createElement("div");
        c.innerHTML = "<div>Are you sure you want to delete <strong>".concat(e.detail.element.value, "</strong>?</div>");
        var button1 = document.createElement("button");
        button1.raised = true;
        button1.addEventListener("click", this._deleteItemConfirm.bind(this));
        button1.appendChild(document.createTextNode("Delete"));
        var button2 = document.createElement("button");
        button2.raised = true;
        button2.setAttribute("dialog-dismiss", "dialog-dismiss");
        button2.appendChild(document.createTextNode("cancel"));
        var b = document.createElement("div");
        b.appendChild(button1);
        b.appendChild(button2);
        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            title: "Delete ".concat(e.detail.element.value),
            elements: {
              content: c,
              buttons: b
            },
            styles: {
              "--simple-modal-width": "20vw",
              "--simple-modal-max-width": "20vw",
              "--simple-modal-z-index": "100000000",
              "--simple-modal-height": "20vh",
              "--simple-modal-max-height": "20vh"
            },
            invokedBy: e.detail.element.shadowRoot.querySelector("#delete"),
            clone: false
          }
        });
        this.dispatchEvent(evt);
      }
      /**
       * Confirm deleting the active item
       */

    }, {
      key: "_deleteItemConfirm",
      value: function _deleteItemConfirm(e) {
        // @todo delete the thing
        var evt = new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {}
        });
        this.dispatchEvent(evt);
      } // Observer editMode for changes

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this._itemsChanged(this.items);

          for (var i in this.items) {
            if (this.items[i].metadata) {
              var tmp = this.items[i].metadata;
              tmp.canEdit = newValue;
              this.items[i].metadata = _objectSpread({}, tmp);
            }
          }
        }
      } // Observer items for changes

    }, {
      key: "_itemsChanged",
      value: function _itemsChanged(newValue, oldValue) {
        // support for string evaluations
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && typeof newValue === "string") {
          this.items = babelHelpers.toConsumableArray(JSON.parse(newValue));
        }
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject3_a141c6608e0011ed99ce491205e67b1d || (_templateObject3_a141c6608e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        #list {\n          height: 100%;\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(EditableList), "properties", this)), {}, {
          /**
           * ability to edit the items in the list
           */
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          },

          /**
           * items array
           */
          items: {
            type: Array,
            reflect: false
          },

          /**
           * Active element being worked on in the list
           */
          activeElement: {
            type: Object
          }
        });
      }
      /**
       * convention
       */

    }, {
      key: "tag",
      get: function get() {
        return "editable-list";
      }
    }]);
    return EditableList;
  }(_index.LitElement);

  _exports.EditableList = EditableList;
  customElements.define(EditableList.tag, EditableList);
});