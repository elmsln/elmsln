define(["exports", "meta", "../../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.QRCodeElement = void 0;
  meta = _interopRequireWildcard(meta);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var QRCodeElement = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(QRCodeElement, _HTMLElement);

    var _super = _createSuper(QRCodeElement);

    function QRCodeElement() {
      var _this;

      babelHelpers.classCallCheck(this, QRCodeElement);
      _this = _super.call(this); // method bindings

      _this._defineProperty = _this._defineProperty.bind(babelHelpers.assertThisInitialized(_this)); // Shadow DOM

      _this.attachShadow({
        mode: "open"
      }); // Define Properties


      Object.keys(QRCodeElement.defaultAttributes).map(_this._defineProperty);
      var location = new URL("./qr.js", meta.url).href;
      window.addEventListener("es-bridge-qr-loaded", _this._qrLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      window.ESGlobalBridge.requestAvailability().load("qr", location);
      return _this;
    }

    babelHelpers.createClass(QRCodeElement, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-qr-loaded", this._qrLoaded.bind(this));

        if (babelHelpers.get(babelHelpers.getPrototypeOf(QRCodeElement.prototype), "disconnectedCallback", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(QRCodeElement.prototype), "disconnectedCallback", this).call(this);
        }
      }
    }, {
      key: "_qrLoaded",
      value: function _qrLoaded() {
        // q-r library has loaded, now try to generate
        this.generate();
      }
    }, {
      key: "attributeChangedCallback",
      value: // LifeCycle Callbacks
      //
      function attributeChangedCallback(attributeName, oldValue, newValue) {
        var fn = this[attributeName + "Changed"];

        if (fn && typeof fn === "function") {
          fn.call(this, oldValue, newValue);
        }

        if (window.ESGlobalBridge.requestAvailability().imports["qr"] === true) {
          this.generate();
        }
      } // Methods
      //

    }, {
      key: "_defineProperty",
      value: function _defineProperty(attributeName) {
        var _this2 = this;

        Object.defineProperty(this, attributeName, {
          get: function get() {
            var value = _this2.getAttribute(attributeName);

            return value === null ? QRCodeElement.defaultAttributes[attributeName] : value;
          },
          set: function set(value) {
            _this2.setAttribute(attributeName, value);
          }
        });
      }
    }, {
      key: "getOptions",
      value: function getOptions() {
        var modulesize = this.modulesize,
            margin = this.margin;
        return {
          modulesize: modulesize !== null ? parseInt(modulesize) : modulesize,
          margin: margin !== null ? parseInt(margin) : margin
        };
      }
    }, {
      key: "generate",
      value: function generate() {
        if (this.data !== null) {
          if (this.format === "png") {
            this.generatePNG();
          } else if (this.format === "html") {
            this.generateHTML();
          } else if (this.format === "svg") {
            this.generateSVG();
          } else {
            this.shadowRoot.innerHTML = "<div>qr-code: " + this.format + " not supported!</div>";
          }
        } else {
          this.shadowRoot.innerHTML = "<div>qr-code: no data!</div>";
        }
      }
    }, {
      key: "generatePNG",
      value: function generatePNG() {
        try {
          var img = document.createElement("img");
          img.src = window.QRCode.generatePNG(this.data, this.getOptions());
          this.clear();
          this.shadowRoot.appendChild(img);
        } catch (e) {
          this.shadowRoot.innerHTML = "<div>qr-code: no canvas support!</div>";
        }
      }
    }, {
      key: "generateHTML",
      value: function generateHTML() {
        var div = window.QRCode.generateHTML(this.data, this.getOptions());
        this.clear();
        this.shadowRoot.appendChild(div);
      }
    }, {
      key: "generateSVG",
      value: function generateSVG() {
        var div = window.QRCode.generateSVG(this.data, this.getOptions());
        this.clear();
        this.shadowRoot.appendChild(div);
      }
    }, {
      key: "clear",
      value: function clear() {
        while (this.shadowRoot.lastChild) {
          this.shadowRoot.removeChild(this.shadowRoot.lastChild);
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "qr-code";
      }
    }, {
      key: "defaultAttributes",
      get: function get() {
        return {
          data: null,
          format: "png",
          modulesize: 5,
          margin: 4
        };
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        return Object.keys(QRCodeElement.defaultAttributes);
      }
    }]);
    return QRCodeElement;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.QRCodeElement = QRCodeElement;
  customElements.define(QRCodeElement.tag, QRCodeElement);
});