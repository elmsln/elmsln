define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../haxcms-elements/lib/core/HAXCMSPolymerElementTheme.js", "../haxcms-elements/lib/core/haxcms-site-store.js", "../../mobx/dist/mobx.esm.js"], function (_exports, _require, _polymerElement, _HAXCMSPolymerElementTheme, _haxcmsSiteStore, _mobxEsm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ExampleHaxcmsTheme = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_66d55170809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `example-haxcms-theme`
   * @element example-haxcms-theme
   * `A basic, well documented example theme for HAXcms`
   *
   * @microcopy - language worth noting:
   *  - HAXcms - A content management system that builds state of the art one page apps via GUI
   *
  
   * @polymerElement
   * @demo demo/index.html
   */
  var ExampleHaxcmsTheme = /*#__PURE__*/function (_HAXCMSPolymerElement) {
    babelHelpers.inherits(ExampleHaxcmsTheme, _HAXCMSPolymerElement);

    var _super = _createSuper(ExampleHaxcmsTheme);

    /**
     * life cycle, constructor
     */
    function ExampleHaxcmsTheme() {
      var _this;

      babelHelpers.classCallCheck(this, ExampleHaxcmsTheme);
      _this = _super.call(this); // dynamic import ensures that your theme will end users a better experience
      // by reducing the time to first paint. JS Modules block the tree until all imports
      // at the top of the document have been resolved. Dynamic imports ike these
      // can be used to ensure that they still load but that the user starts to see
      // content prior to all assets loading.
      // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/navigation/site-top-menu.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/navigation/site-breadcrumb.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/layout/site-modal.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/navigation/site-menu-button.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../haxcms-elements/lib/ui-components/site/site-search.js"], res, rej);
      }); // create a blank array to store mobx reactions
      // this allows us to nicely clean up state after the theme
      // has been disconnected from the DOM

      _this.__disposer = [];
      return _this;
    }
    /**
     * life cycle, element is afixed to the DOM
     */


    babelHelpers.createClass(ExampleHaxcmsTheme, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _polymerElement.html)(_templateObject_66d55170809211edaa2833647dc78c6c || (_templateObject_66d55170809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <style>\n        :host {\n          display: block;\n\n          --example-haxcms-theme-color: #222222;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        :host([edit-mode]) #slot {\n          display: none;\n        }\n\n        :host #slot ::slotted(*) {\n          color: var(--example-haxcms-theme-color);\n        }\n      </style>\n      <site-top-menu noink indicator=\"arrow\" arrow-size=\"8\">\n        <site-title slot=\"prefix\" class=\"spacing\"></site-title>\n        <site-modal\n          slot=\"suffix\"\n          icon=\"icons:search\"\n          title=\"Search site\"\n          button-label=\"Search\"\n        >\n          <site-search></site-search>\n        </site-modal>\n      </site-top-menu>\n      <site-breadcrumb></site-breadcrumb>\n      <div id=\"contentcontainer\">\n        <div id=\"slot\">\n          <slot></slot>\n        </div>\n      </div>\n      <site-menu-button type=\"prev\" position=\"top\"></site-menu-button>\n      <site-menu-button type=\"next\" position=\"top\"></site-menu-button>"])));
      } // properties available to the custom element for data binding

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(ExampleHaxcmsTheme.prototype), "connectedCallback", this).call(this); // HAXcms's theme layer uses Mobx to ensure state is simple and maintained
        // accurately across theme changes and the many site- elements.
        // This example will maintain the active manifest index in this theme
        // meaning the array position of the currently active page. This is
        // useful when creating in theme pagination or reacting to specific
        // indexes like 1st and last.

        (0, _mobxEsm.autorun)(function (reaction) {
          _this2.activeManifestIndex = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.activeManifestIndex);

          _this2.__disposer.push(reaction);
        }); // editMode is the global state of the HAXeditor as reflected in HAXcms

        (0, _mobxEsm.autorun)(function (reaction) {
          _this2.editMode = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.editMode);

          _this2.__disposer.push(reaction);
        });
      }
      /**
       * life cycle, element is removed from the DOM
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        // this ensures that we clean up the listeners on mobx after the theme
        // has been disconnected. This happens when we have multiple theme tags or
        // the user has defined that specific nodes should have different designs
        // which then disconnects this theme and connects the new one.
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(ExampleHaxcmsTheme.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(ExampleHaxcmsTheme), "properties", this)), {}, {
          /**
           * Edit mode which will be updated whenever HAXcms store
           * has been updated. It's also reflected to attribute which
           * is a Polymer convention to allow it to be leveraged in
           * CSS styling.
           */
          editMode: {
            name: "editMode",
            type: Boolean,
            reflectToAttribute: true
          },

          /**
           * Current array index of the active page that's been loaded.
           */
          activeManifestIndex: {
            name: "activeManifestIndex",
            type: Number
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "example-haxcms-theme";
      }
    }]);
    return ExampleHaxcmsTheme;
  }(_HAXCMSPolymerElementTheme.HAXCMSPolymerElementTheme);

  _exports.ExampleHaxcmsTheme = ExampleHaxcmsTheme;
  customElements.define(ExampleHaxcmsTheme.tag, ExampleHaxcmsTheme);
});