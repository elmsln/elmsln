define(["exports", "meta", "require", "../../../../lit/index.js", "./haxcms-site-store.js", "../../../hax-body/lib/hax-store.js", "../../../../mobx/dist/mobx.esm.js", "../../../utils/utils.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js", "./utils/HAXCMSThemeParts.js", "./utils/HAXCMSI18NMixin.js", "../../../rpg-character/rpg-character.js", "../../../app-hax/lib/v1/app-hax-top-bar.js", "../../../app-hax/lib/v1/app-hax-user-menu.js", "../../../app-hax/lib/v1/app-hax-user-menu-button.js", "../../../../wired-elements/lib/wired-button.js", "../../../simple-colors/simple-colors.js", "../../../simple-modal/simple-modal.js", "./haxcms-site-insights.js", "../../../simple-fields/lib/simple-fields-form.js", "./micros/haxcms-button-add.js", "./haxcms-darkmode-toggle.js", "../ui-components/site/site-remote-content.js"], function (_exports, meta, _require, _index, _haxcmsSiteStore, _haxStore, _mobxEsm, _utils, _simpleIcon, _simpleIcons, _HAXCMSThemeParts2, _HAXCMSI18NMixin, _rpgCharacter, _appHaxTopBar, _appHaxUserMenu, _appHaxUserMenuButton, _wiredButton, _simpleColors, _simpleModal, _haxcmsSiteInsights, _simpleFieldsForm, _haxcmsButtonAdd, _haxcmsDarkmodeToggle, _siteRemoteContent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSSiteEditorUI = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);

  var _templateObject_b03c5d40809211edaa2833647dc78c6c, _templateObject2_b03c5d40809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var haxLogo = new URL("../../../app-hax/lib/assets/images/HAXLogo.svg", meta.url).href;
  var ButtonBGLight = new URL("../../../app-hax/lib/assets/images/ButtonBGLM.svg", meta.url).href;
  var ButtonBGDark = new URL("../../../app-hax/lib/assets/images/ButtonBGDM.svg", meta.url).href;
  var LogOut = new URL("../../../app-hax/lib/assets/images/Logout.svg", meta.url).href;
  /**
   * `haxcms-site-editor-ui`
   * `haxcms editor element buttons that you see`
   *
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   */

  var HAXCMSSiteEditorUI = /*#__PURE__*/function (_HAXCMSThemeParts) {
    babelHelpers.inherits(HAXCMSSiteEditorUI, _HAXCMSThemeParts);

    var _super = _createSuper(HAXCMSSiteEditorUI);

    function HAXCMSSiteEditorUI() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSSiteEditorUI);
      _this = _super.call(this);
      _this.rpgHat = "none";
      _this.darkMode = false;
      _this.__settingsText = "";
      _this.__editText = "";
      _this.userMenuOpen = false;
      _this.soundIcon = "";
      _this.__disposer = _this.__disposer || [];
      _this.t = _this.t || {};
      window.addEventListener("hax-store-ready", _this.haxStoreReady.bind(babelHelpers.assertThisInitialized(_this)));

      if (_haxStore.HAXStore.ready) {
        var s = document.createElement('site-remote-content');

        _haxStore.HAXStore.haxAutoloader.appendChild(s); // site-remote-content injects citation element so ensure it's in there too!


        var ce = document.createElement('citation-element');

        _haxStore.HAXStore.haxAutoloader.appendChild(ce); // links need to be given support for internal linkage updates on the form


        if (!_haxStore.HAXStore.primativeHooks.a) {
          _haxStore.HAXStore.primativeHooks.a = {};
        }

        _haxStore.HAXStore.primativeHooks.a.setupActiveElementForm = function (props) {
          var itemManifest = _haxcmsSiteStore.store.getManifestItems(true); // default to null parent as the whole site


          var items = [{
            text: "-- ".concat(_this.t.selectPage, " --"),
            value: null
          }];
          itemManifest.forEach(function (el) {
            if (el.id != _this.itemId) {
              (function () {
                // calculate -- depth so it looks like a tree
                var itemBuilder = el; // walk back through parent tree

                var distance = "- ";

                while (itemBuilder && itemBuilder.parent != null) {
                  itemBuilder = itemManifest.find(function (i) {
                    return i.id == itemBuilder.parent;
                  }); // double check structure is sound

                  if (itemBuilder) {
                    distance = "--" + distance;
                  }
                }

                items.push({
                  text: distance + el.title,
                  value: el.id
                });
              })();
            }
          });
          props.settings.configure.splice(1, 0, {
            property: "data-uuid",
            title: "Internal content",
            description: "Link to content internal to this site",
            inputMethod: "select",
            itemsList: items
          });
          setTimeout(function () {
            _haxStore.HAXStore.haxTray.shadowRoot.querySelector("[name='settings.configure.data-uuid']").addEventListener("value-changed", _this._internalLinkChanged.bind(babelHelpers.assertThisInitialized(_this)));
          }, 100);
        };
      }

      _this.t = _objectSpread(_objectSpread({}, _this.t), {}, {
        selectPage: "Select page",
        backToSiteList: "Back to site list",
        cancelEditing: "Cancel editing",
        editDetails: "Page details",
        addPage: "Add page",
        deletePage: "Delete page",
        shareSite: "Share site",
        closeSiteSettings: "Close site settings",
        editSiteSettings: "Site settings",
        savePageContent: "Save page",
        editPageContent: "Edit page",
        newJourney: "New Journey",
        accountInfo: "Account Info",
        outlineDesigner: "Outline designer",
        more: "More",
        insights: "Insights",
        logOut: "Log out",
        menu: "Menu",
        showMore: "More"
      });
      _this.backText = "Site list";
      _this.painting = true;
      _this.pageAllowed = false;
      _this.editMode = false;
      _this.__editIcon = "hax:page-edit";
      _this.icon = "hax:site-settings";
      _this.manifestEditMode = false;
      _this.backLink = "../../";

      if (window.appSettings && window.appSettings.backLink) {
        _this.backLink = window.appSettings.backLink;
      }

      (0, _mobxEsm.autorun)(function () {
        var badDevice = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.badDevice); // good device, we can inject font we use

        if (badDevice === false) {
          var link = document.createElement("link");
          link.setAttribute("href", "https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap");
          link.setAttribute("rel", "stylesheet");
          link.setAttribute("fetchpriority", "low");
          document.head.appendChild(link);
        } else if (badDevice === true) {
          document.body.classList.add("bad-device");
        }
      });
      (0, _mobxEsm.autorun)(function () {
        _this.darkMode = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.darkMode);
        _this.dark = _this.darkMode;

        if ((0, _mobxEsm.toJS)(_haxcmsSiteStore.store.darkMode)) {
          _haxStore.HAXStore.globalPreferences.haxUiTheme = "haxdark";
        } else {
          _haxStore.HAXStore.globalPreferences.haxUiTheme = "hax";
        }
      });
      (0, _mobxEsm.autorun)(function () {
        _this.soundIcon = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.soundStatus) ? new URL("../../../app-hax/lib/assets/images/FullVolume.svg", meta.url).href : new URL("../../../app-hax/lib/assets/images/Silence.svg", meta.url).href;
      });
      setTimeout(function () {
        // prettier-ignore
        new Promise(function (res, rej) {
          return _require.default(["./haxcms-outline-editor-dialog.js"], res, rej);
        }); // prettier-ignore

        new Promise(function (res, rej) {
          return _require.default(["./haxcms-share-dialog.js"], res, rej);
        }); // prettier-ignore

        new Promise(function (res, rej) {
          return _require.default(["./haxcms-site-dashboard.js"], res, rej);
        });
      }, 0);
      return _this;
    }

    babelHelpers.createClass(HAXCMSSiteEditorUI, [{
      key: "_internalLinkChanged",
      value: // ability to link to internal content inside of the 'a' tag
      function _internalLinkChanged(e) {
        // look up the UUID
        if (e.detail.value && _haxcmsSiteStore.store.findItem(e.detail.value)) {
          var item = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.findItem(e.detail.value));
          _haxStore.HAXStore.haxTray.shadowRoot.querySelector("[name='settings.configure.href']").value = item.slug;
        }
      }
    }, {
      key: "haxStoreReady",
      value: function haxStoreReady(e) {
        // it is safe to add in elements that we want the editor to have every haxcms instance
        if (e.detail) {
          var s = document.createElement('site-remote-content');

          _haxStore.HAXStore.haxAutoloader.appendChild(s);
        }
      }
    }, {
      key: "soundToggle",
      value: function soundToggle() {
        var status = !(0, _mobxEsm.toJS)(_haxcmsSiteStore.store.soundStatus);
        _haxcmsSiteStore.store.soundStatus = status;
        (0, _utils.localStorageSet)("app-hax-soundStatus", status);

        if (!status) {
          _haxcmsSiteStore.store.toast("Sound off.. hey.. HELLO!?!", 2000, {
            fire: true
          });
        } else {
          _haxcmsSiteStore.store.toast("Can you hear me now? Good.", 2000, {
            hat: "random"
          });

          _haxcmsSiteStore.store.playSound("click");
        }
      }
    }, {
      key: "toggleMenu",
      value: function toggleMenu() {
        this.userMenuOpen = !this.userMenuOpen;

        _haxcmsSiteStore.store.playSound("click");
      } // render function

    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_b03c5d40809211edaa2833647dc78c6c || (_templateObject_b03c5d40809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <app-hax-top-bar part=\"top-bar\">\n        <span slot=\"left\">\n          <a\n            href=\"", "\"\n            class=\"haxLogo\"\n            id=\"backtosites\"\n            part=\"hax-logo\"\n          >\n            <simple-icon-lite src=\"", "\"></simple-icon-lite>\n          </a>\n          <simple-tooltip for=\"backtosites\" position=\"right\"\n            >", "</simple-tooltip\n          >\n          <slot name=\"haxcms-site-editor-ui-prefix-avatar\"></slot>\n        </span>\n        <simple-toolbar\n          slot=\"center\"\n          ?dark=\"", "\"\n          icon-position=\"top\"\n          show-text-label\n          label=\"", "\"\n        >\n          <slot name=\"haxcms-site-editor-ui-prefix-buttons\"></slot>\n          <simple-toolbar-button\n            hidden\n            id=\"editbutton\"\n            icon=\"", "\"\n            icon-position=\"top\"\n            @click=\"", "\"\n            label=\"", "\"\n            show-text-label\n            voice-command=\"edit (this) page\"\n          ></simple-toolbar-button>\n          <simple-toolbar-menu\n            id=\"addmenubutton\"\n            ?disabled=\"", "\"\n            icon=\"hax:add-page\"\n            icon-position=\"top\"\n            label=\"", "\"\n            tabindex=\"", "\"\n            @dblclick=\"", "\"\n            show-text-label\n          >\n            <simple-toolbar-menu-item>\n              <haxcms-button-add\n                hidden\n                ?disabled=\"", "\"\n                show-text-label\n                id=\"addbutton\"\n                show-text-label\n              >\n              </haxcms-button-add>\n            </simple-toolbar-menu-item>\n            <simple-toolbar-menu-item>\n              <haxcms-button-add\n                hidden\n                ?disabled=\"", "\"\n                id=\"addbuttonchild\"\n                type=\"child\"\n                show-text-label\n              ></haxcms-button-add>\n            </simple-toolbar-menu-item>\n            <simple-toolbar-menu-item>\n              <haxcms-button-add\n                hidden\n                ?disabled=\"", "\"\n                type=\"duplicate\"\n                id=\"duplicatebutton\"\n                show-text-label\n              ></haxcms-button-add>\n            </simple-toolbar-menu-item>\n            <simple-toolbar-menu-item>\n              <haxcms-button-add\n                hidden\n                ?disabled=\"", "\"\n                type=\"docximport\"\n                id=\"docximport\"\n                show-text-label\n              ></haxcms-button-add>\n            </simple-toolbar-menu-item>\n          </simple-toolbar-menu>\n          <simple-toolbar-button\n            ?disabled=\"", "\"\n            tabindex=\"", "\"\n            id=\"deletebutton\"\n            hidden\n            icon-position=\"top\"\n            icon=\"icons:delete\"\n            @click=\"", "\"\n            label=\"", "\"\n            show-text-label\n            voice-command=\"delete page\"\n          ></simple-toolbar-button>\n          <simple-toolbar-button\n            ?disabled=\"", "\"\n            tabindex=\"", "\"\n            id=\"outlinebutton\"\n            @click=\"", "\"\n            icon-position=\"top\"\n            icon=\"hax:site-map\"\n            part=\"outlinebtn\"\n            show-text-label\n            label=\"", "\"\n          ></simple-toolbar-button>\n          <simple-toolbar-button\n            ?disabled=\"", "\"\n            tabindex=\"", "\"\n            id=\"insightsbutton\"\n            icon=\"hax:clipboard-pulse\"\n            part=\"insightsbtn\"\n            icon-position=\"top\"\n            @click=\"", "\"\n            label=\"", "\"\n            show-text-label\n            voice-command=\"insights\"\n          ></simple-toolbar-button>\n          <simple-toolbar-menu\n            show-text-label\n            ?disabled=\"", "\"\n            icon=\"more-vert\"\n            part=\"morebtn\"\n            icon-position=\"top\"\n            label=\"", "\"\n            tabindex=\"", "\"\n          >\n            <simple-toolbar-menu-item>\n            <simple-toolbar-button\n              id=\"editdetails\"\n              hidden\n              ?disabled=\"", "\"\n              icon=\"hax:page-details\"\n              icon-position=\"left\"\n              @click=\"", "\"\n              label=\"", "\"\n              show-text-label\n              voice-command=\"edit (page) details\"\n              part=\"detailsbtn\"\n              tabindex=\"", "\"\n            ></simple-toolbar-button>\n            </simple-toolbar-menu-item>\n            <simple-toolbar-menu-item>\n              <simple-toolbar-button\n                @click=\"", "\"\n                icon-position=\"left\"\n                icon=\"", "\"\n                part=\"manifestbtn\"\n                show-text-label\n                tabindex=\"", "\"\n                label=\"", "\"\n              ></simple-toolbar-button>\n            </simple-toolbar-menu-item>\n          </simple-toolbar-menu>\n          <simple-toolbar-button\n            id=\"cancelbutton\"\n            icon=\"icons:cancel\"\n            icon-position=\"top\"\n            @click=\"", "\"\n            .hidden=\"", "\"\n            show-text-label\n            tabindex=\"", "\"\n            label=\"", "\"\n            voice-command=\"cancel (editing)\"\n          ></simple-toolbar-button>\n          <slot name=\"haxcms-site-editor-ui-suffix-buttons\"></slot>\n        </simple-toolbar>\n\n        <app-hax-user-menu slot=\"right\" id=\"user-menu\" part=\"app-hax-user-menu\">\n          <button\n            class=\"topbar-character\"\n            slot=\"menuButton\"\n            @click=\"", "\"\n          >\n            <rpg-character\n              seed=\"", "\"\n              width=\"68\"\n              height=\"68\"\n              part=\"rpgcharacter\"\n              aria-label=\"", "\"\n              hat=\"", "\"\n            ></rpg-character>\n            <span class=\"characterbtn-name\">", "</span>\n            <slot name=\"haxcms-site-editor-ui-topbar-character-button\"></slot>\n          </button>\n          <div slot=\"pre-menu\" class=\"ops-panel\">\n            <slot name=\"haxcms-site-editor-ui-pre-menu\"></slot>\n            <wired-button\n              elevation=\"1\"\n              class=\"soundToggle\"\n              @click=\"", "\"\n            >\n              <simple-icon-lite\n                src=\"", "\"\n                loading=\"lazy\"\n                decoding=\"async\"\n              ></simple-icon-lite>\n            </wired-button>\n            <haxcms-darkmode-toggle></haxcms-darkmode-toggle>\n          </div>\n          <!-- <app-hax-user-menu-button\n          slot=\"main-menu\"\n          icon=\"face\"\n          label=\"", "\"\n        ></app-hax-user-menu-button> -->\n          <slot slot=\"main-menu\" name=\"haxcms-site-editor-ui-main-menu\"></slot>\n\n          <app-hax-user-menu-button\n            id=\"sharebutton\"\n            @click=\"", "\"\n            slot=\"main-menu\"\n            icon=\"social:share\"\n            part=\"sharebtn\"\n            label=\"", "\"\n          ></app-hax-user-menu-button>\n\n          <app-hax-user-menu-button\n            slot=\"main-menu\"\n            icon=\"add\"\n            label=\"", "\"\n            part=\"newjourneybtn\"\n            @click=\"", "\"\n          ></app-hax-user-menu-button>\n          <slot slot=\"post-menu\" name=\"haxcms-site-editor-ui-post-menu\"></slot>\n          <app-hax-user-menu-button\n            slot=\"post-menu\"\n            part=\"logoutbtn\"\n            class=\"logout\"\n            label=\"", "\"\n            @click=", "\n          ></app-hax-user-menu-button>\n        </app-hax-user-menu>\n      </app-hax-top-bar>\n    "])), this.backLink, haxLogo, this.backText, !this.darkMode, this.t.showMore, this.__editIcon, this._editButtonTap, this.__editText, this.editMode, this.t.addPage, this.editMode ? "-1" : "0", this._addPageClick, this.editMode, this.editMode, this.editMode, this.editMode, this.editMode, this.editMode ? "-1" : "0", this._deleteButtonTap, this.t.deletePage, this.editMode, this.editMode ? "-1" : "0", this._outlineButtonTap, this.t.outlineDesigner, this.editMode, this.editMode ? "-1" : "0", this._insightsButtonTap, this.t.insights, this.editMode, this.t.more, this.editMode ? "-1" : "0", this.editMode, this._editDetailsButtonTap, this.t.editDetails, this.editMode ? "-1" : "0", this._manifestButtonTap, this.icon, this.editMode ? "0" : "-1", this.__settingsText, this._cancelButtonTap, !this.editMode, this.editMode ? "0" : "-1", this.t.cancelEditing, this.toggleMenu, this.userName, this.t.menu, this.rpgHat, this.userName, this.soundToggle, this.soundIcon, this.t.accountInfo, this._shareButtonTap, this.t.shareSite, this.t.newJourney, this._addButtonTap, this.t.logOut, this._logout);
      }
    }, {
      key: "_logout",
      value: function _logout() {
        window.dispatchEvent(new CustomEvent("jwt-login-logout", {
          composed: true,
          bubbles: true,
          cancelable: false,
          detail: true
        }));
        this.__logoutUserAction = true;
      } // only care about logouts

    }, {
      key: "_jwtLoggedIn",
      value: function _jwtLoggedIn(e) {
        if (e.detail === false && this.__logoutUserAction) {
          this.__logoutUserAction = false;
          setTimeout(function () {
            window.location.reload();
          }, 100);
        }
      }
    }, {
      key: "_addPageClick",
      value: function _addPageClick(e) {
        // ensure they see thes operations
        if (!this.editMode && this.shadowRoot.querySelector("simple-toolbar-menu-item haxcms-button-add:not([hidden])")) {
          this.shadowRoot.querySelector("simple-toolbar-menu-item haxcms-button-add:not([hidden])").HAXCMSButtonClick();
        }
      }
      /**
       * update buttons since these are triggered by a mix of
       * differnet backend types we can't leverage the store
       * since a CMS needs to just hardcode these at run time
       * for some environments
       */

    }, {
      key: "updateAvailableButtons",
      value: function updateAvailableButtons() {
        var _this2 = this;

        if (this.shadowRoot) {
          setTimeout(function () {
            // backText
            if (window.appSettings && window.appSettings.backText) {
              _this2.backText = window.appSettings.backText;
            }

            var ary = [{
              varPath: "getNodeFieldsPath",
              selector: "#editdetails"
            }, {
              varPath: "deleteNodePath",
              selector: "#deletebutton"
            }, {
              varPath: "saveNodePath",
              selector: "#editbutton"
            }, {
              varPath: "createNodePath",
              selector: "#addbutton"
            }, {
              varPath: "createNodePath",
              selector: "#addbuttonchild"
            }, {
              varPath: "createNodePath",
              selector: "#duplicatebutton"
            }, {
              varPath: "createNodePath",
              selector: "#docximport"
            }]; // see which features should be enabled

            ary.forEach(function (pair) {
              if (window.appSettings && window.appSettings[pair.varPath] && window.appSettings[pair.varPath] != null && window.appSettings[pair.varPath] != "" && window.appSettings[pair.varPath] != "null") {
                if (pair.dep) {
                  if (window.appSettings[pair.dep] != null && window.appSettings[pair.dep] != "" && window.appSettings[pair.dep] != "null") {
                    _this2.shadowRoot.querySelector(pair.selector).removeAttribute("hidden");
                  } else {// a dependency didn't meet the requirement
                  }
                } else {
                  _this2.shadowRoot.querySelector(pair.selector).removeAttribute("hidden");
                }
              }
            });
          }, 100);
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        this.updateAvailableButtons(); // load user data

        this.dispatchEvent(new CustomEvent("haxcms-load-user-data", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: true
        }));
        this.shadowRoot.querySelectorAll("[voice-command]").forEach(function (el) {
          if (el.getAttribute("id") == "editbutton") {
            _this3.dispatchEvent(new CustomEvent("hax-add-voice-command", {
              bubbles: true,
              composed: true,
              cancelable: false,
              detail: {
                command: ":name: save (this) page",
                context: el,
                callback: "click"
              }
            }));
          }

          _this3.dispatchEvent(new CustomEvent("hax-add-voice-command", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
              command: ":name: " + el.getAttribute("voice-command"),
              context: el,
              callback: "click"
            }
          }));
        });
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "userMenuOpen" && oldValue !== undefined) {
            if (_this4.userMenuOpen) {
              _this4.rpgHat = "edit";
            } else {
              _this4.rpgHat = "none";
            }
          }

          if (propName == "editMode") {
            if (_this4.editMode) {
              _this4.rpgHat = "construction";
            } else {
              _this4.rpgHat = "none";
            } // observer


            _this4._editModeChanged(_this4[propName], oldValue); // notify


            _this4.dispatchEvent(new CustomEvent("edit-mode-changed", {
              detail: _this4[propName]
            }));
          }

          if (propName == "manifestEditMode") {
            // observer
            _this4._manifestEditModeChanged(_this4[propName], oldValue); // notify


            _this4.dispatchEvent(new CustomEvent("manifest-edit-mode-changed", {
              detail: _this4[propName]
            }));
          }

          if (propName == "dashboardOpened" || propName == "t") {
            // observer
            _this4._dashboardOpenedChanged(_this4.dashboardOpened);
          } // make sure edit matches but state doesnt shift


          if (propName === "t") {
            if (_this4.editMode) {
              _this4.__editText = _this4.t.savePageContent;
            } else {
              _this4.__editText = _this4.t.editPageContent;
            }
          }
        });
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this5 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI.prototype), "connectedCallback", this).call(this);
        window.addEventListener("jwt-logged-in", this._jwtLoggedIn.bind(this));
        (0, _mobxEsm.autorun)(function (reaction) {
          if (_haxcmsSiteStore.store.userData) {
            _this5.userName = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.userData.userName);
            _this5.userPicture = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.userData.userPicture); // update buttons to match since we got a state response

            _this5.updateAvailableButtons();
          }

          _this5.__disposer.push(reaction);
        });
        (0, _mobxEsm.autorun)(function (reaction) {
          _this5.editMode = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.editMode);

          _this5.__disposer.push(reaction);
        });
        (0, _mobxEsm.autorun)(function (reaction) {
          _this5.manifest = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.manifest);
          _this5.icon = "hax:site-settings";

          _this5.__disposer.push(reaction);
        });
        (0, _mobxEsm.autorun)(function (reaction) {
          _this5.dashboardOpened = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.dashboardOpened);

          _this5.__disposer.push(reaction);
        });
        (0, _mobxEsm.autorun)(function (reaction) {
          var activeItem = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.activeItem); // update buttons to match since we got a state response

          _this5.updateAvailableButtons();

          if (activeItem && activeItem.id) {
            _this5.activeTitle = activeItem.title;
            _this5.pageAllowed = true;
          } else {
            _this5.pageAllowed = false;
          }

          _this5.__disposer.push(reaction);
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        window.removeEventListener("jwt-logged-in", this._jwtLoggedIn.bind(this));
        window.removeEventListener("hax-store-ready", this.haxStoreReady.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "_dashboardOpenedChanged",
      value: function _dashboardOpenedChanged(newValue) {
        if (newValue) {
          this.__settingsText = this.t.closeSiteSettings;
          this.icon = "icons:cancel";
        } else if (!newValue) {
          this.__settingsText = this.t.editSiteSettings;
          this.icon = "hax:site-settings";
        }
      }
      /**
       * toggle state on button tap
       */

    }, {
      key: "_editButtonTap",
      value: function _editButtonTap(e) {
        _haxcmsSiteStore.store.playSound("click");

        this.editMode = !this.editMode; // save button shifted to edit

        if (!this.editMode) {
          this.dispatchEvent(new CustomEvent("haxcms-save-node", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: _haxcmsSiteStore.store.activeItem
          }));
        }

        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
    }, {
      key: "_editDetailsButtonTap",
      value: function _editDetailsButtonTap(e) {
        _haxcmsSiteStore.store.playSound("click");

        var evt = new CustomEvent("haxcms-load-node-fields", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: e.target
        });
        window.dispatchEvent(evt);
      }
    }, {
      key: "_insightsButtonTap",
      value: function _insightsButtonTap(e) {
        _haxcmsSiteStore.store.playSound("click");

        var c = document.createElement("haxcms-site-insights");
        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            title: this.t.insights,
            styles: {
              "--simple-modal-titlebar-background": "orange",
              "--simple-modal-titlebar-color": "black",
              "--simple-modal-width": "94vw",
              "--simple-modal-min-width": "300px",
              "--simple-modal-z-index": "100000000",
              "--simple-modal-height": "94vh",
              "--simple-modal-min-height": "300px",
              "--simple-modal-titlebar-height": "80px"
            },
            elements: {
              content: c
            },
            invokedBy: this.shadowRoot.querySelector("#insightsbutton"),
            clone: false,
            modal: false
          }
        });
        window.dispatchEvent(evt);
      }
    }, {
      key: "_cancelButtonTap",
      value: function _cancelButtonTap(e) {
        this.editMode = false;

        _haxcmsSiteStore.store.playSound("error");

        this.dispatchEvent(new CustomEvent("hax-cancel", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: e.detail
        }));
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * create new item
       */

    }, {
      key: "_createNewItem",
      value: function _createNewItem(e) {
        var evt = new CustomEvent("haxcms-create-node", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            values: this.__newForm.value
          }
        });
        this.dispatchEvent(evt);
      }
      /**
       * Fire item
       */

    }, {
      key: "_updateItem",
      value: function _updateItem(e) {
        var local = e.target;
        var values;

        if (!local.__form) {
          values = local.parentNode.__form.value;
        } else {
          values = local.__form.value;
        } // fire event with details for saving


        window.dispatchEvent(new CustomEvent("haxcms-save-node-details", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: values
        })); // fire event to close the modal

        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * Delete button hit, confirm they want to do this
       */

    }, {
      key: "_deleteButtonTap",
      value: function _deleteButtonTap(e) {
        _haxcmsSiteStore.store.playSound("click");

        var c = document.createElement("span");
        c.innerHTML = "\"".concat(_haxcmsSiteStore.store.activeItem.title, "\" will be removed from the outline but its content stays on the file system.");
        var b1 = document.createElement("button");
        b1.appendChild(document.createTextNode("Confirm"));
        b1.classList.add("hax-modal-btn");
        b1.addEventListener("click", this._deleteActive.bind(this));
        var b2 = document.createElement("button");
        b2.appendChild(document.createTextNode("cancel"));
        b2.addEventListener("click", function () {
          return _haxcmsSiteStore.store.playSound("error");
        });
        b2.setAttribute("dialog-dismiss", "dialog-dismiss");
        b2.classList.add("hax-modal-btn");
        b2.classList.add("cancel");
        var b = document.createElement("span");
        b.appendChild(b1);
        b.appendChild(b2);
        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            title: "Are you sure you want to delete this page?",
            styles: {
              "--simple-modal-titlebar-background": "orange",
              "--simple-modal-titlebar-color": "black",
              "--simple-modal-width": "25vw",
              "--simple-modal-min-width": "300px",
              "--simple-modal-z-index": "100000000",
              "--simple-modal-height": "15vh",
              "--simple-modal-min-height": "300px",
              "--simple-modal-titlebar-height": "80px"
            },
            elements: {
              content: c,
              buttons: b
            },
            invokedBy: this.shadowRoot.querySelector("#deletebutton"),
            clone: false,
            modal: true
          }
        });
        window.dispatchEvent(evt);
      }
      /**
       * delete active item
       */

    }, {
      key: "_deleteActive",
      value: function _deleteActive(e) {
        _haxcmsSiteStore.store.playSound("click");

        var evt = new CustomEvent("haxcms-delete-node", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            item: _haxcmsSiteStore.store.activeItem
          }
        });
        this.dispatchEvent(evt);
      }
      /**
       * toggle share button
       */

    }, {
      key: "_shareButtonTap",
      value: function _shareButtonTap(e) {
        _haxcmsSiteStore.store.playSound("click");

        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            title: this.t.shareSite,
            styles: {
              "--simple-modal-titlebar-background": "orange",
              "--simple-modal-titlebar-color": "black",
              "--simple-modal-width": "55vw",
              "--simple-modal-min-width": "300px",
              "--simple-modal-z-index": "100000000",
              "--simple-modal-height": "50vh",
              "--simple-modal-min-height": "300px",
              "--simple-modal-titlebar-height": "80px"
            },
            elements: {
              content: document.createElement("haxcms-share-dialog")
            },
            invokedBy: this.shadowRoot.querySelector("#sharebutton"),
            clone: false,
            modal: false
          }
        });
        window.dispatchEvent(evt);
      }
      /**
       * toggle state on button tap
       */

    }, {
      key: "_outlineButtonTap",
      value: function _outlineButtonTap(e) {
        _haxcmsSiteStore.store.playSound("click");

        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            title: this.t.outlineDesigner,
            styles: {
              "--simple-modal-titlebar-background": "orange",
              "--simple-modal-titlebar-color": "black",
              "--simple-modal-z-index": "100000000",
              "--simple-modal-titlebar-height": "80px",
              "--simple-modal-width": "85vw",
              "--simple-modal-max-width": "85vw",
              "--simple-modal-height": "90vh",
              "--simple-modal-max-height": "90vh"
            },
            elements: {
              content: document.createElement("haxcms-outline-editor-dialog")
            },
            invokedBy: this.shadowRoot.querySelector("#outlinebutton"),
            clone: false,
            modal: true
          }
        });
        window.dispatchEvent(evt);
      }
    }, {
      key: "_addButtonTap",
      value: function _addButtonTap() {
        var _this6 = this;

        _haxcmsSiteStore.store.playSound("click");

        setTimeout(function () {
          window.location = _this6.backLink + "createSite-step-1";
        }, 100);
      }
      /**
       * toggle state on button tap
       */

    }, {
      key: "_manifestButtonTap",
      value: function _manifestButtonTap(e) {
        _haxcmsSiteStore.store.playSound("click");

        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
        window.dispatchEvent(new CustomEvent("haxcms-load-site-dashboard", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: e.target
        }));
      }
      /**
       * Edit state has changed.
       */

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue, oldValue) {
        if (newValue) {
          // enable it some how
          this.__editIcon = "icons:save";
          this.__editText = this.t.savePageContent;
        } else {
          // disable it some how
          this.__editIcon = "hax:page-edit";
          this.__editText = this.t.editPageContent;
        }

        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          _haxcmsSiteStore.store.editMode = newValue; // force tray status to be the opposite of the editMode
          // to open when editing and close when not

          _haxStore.HAXStore.haxTray.collapsed = !newValue;
        }
      }
      /**
       * Note changes to the outline / structure of the page's items
       */

    }, {
      key: "_outlineEditModeChanged",
      value: function _outlineEditModeChanged(newValue, oldValue) {
        this.dispatchEvent(new CustomEvent("haxcms-outline-edit-mode-changed", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: newValue
        }));
      }
      /**
       * Note changes to the outline / structure of the page's items
       */

    }, {
      key: "_manifestEditModeChanged",
      value: function _manifestEditModeChanged(newValue, oldValue) {
        this.dispatchEvent(new CustomEvent("haxcms-manifest-edit-mode-changed", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: newValue
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI), "styles", this)), [(0, _index.css)(_templateObject2_b03c5d40809211edaa2833647dc78c6c || (_templateObject2_b03c5d40809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host *:not(:defined) {\n          display: none;\n        }\n        :host {\n          display: block;\n          position: relative;\n          height: 48px;\n          left: 0;\n          top: 0;\n          right: 0;\n          background-color: var(--haxcms-system-bg, #37474f);\n          z-index: 10000;\n          visibility: visible;\n        }\n        :host([edit-mode]) {\n          z-index: 9999;\n        }\n        :host([dashboard-opened]) {\n          left: 50vw;\n        }\n        /**\n         * Dashboard open trumps all contextual settings\n         */\n        :host([dashboard-opened]) #editbutton,\n        :host([dashboard-opened]) #editdetails,\n        :host([dashboard-opened]) #deletebutton,\n        :host([dashboard-opened]) #addbutton,\n        :host([dashboard-opened]) #outlinebutton,\n        :host([dashboard-opened]) #insightsbutton,\n        :host([dashboard-opened]) #addmenubutton,\n        :host([dashboard-opened]) #addbuttonchild,\n        :host([dashboard-opened]) #duplicatebutton {\n          display: none !important;\n        }\n        :host *[hidden] {\n          display: none;\n        }\n        simple-tooltip:not(:defined) {\n          display: none !important;\n        }\n        :host([painting]) {\n          opacity: 0;\n          visibility: hidden;\n        }\n        #editbutton {\n          visibility: hidden;\n          opacity: 0;\n        }\n        :host([page-allowed]) #editbutton,\n        :host([page-allowed]) #editdetails,\n        :host([page-allowed]) #deletebutton {\n          visibility: visible;\n          opacity: 1;\n        }\n        #editbutton[icon=\"icons:save\"]:focus,\n        #editbutton[icon=\"icons:save\"]:active,\n        #editbutton[icon=\"icons:save\"]:hover {\n          background-color: var(--simple-colors-default-theme-green-2);\n        }\n        #editbutton[icon=\"icons:save\"] {\n          background-color: var(--simple-colors-default-theme-green-1);\n          color: var(--simple-colors-default-theme-green-8);\n        }\n        #cancelbutton {\n          color: var(--hax-ui-color-danger-secondary);\n          background-color: var(--simple-colors-default-theme-red-1);\n        }\n        #cancelbutton:hover,\n        #cancelbutton:active,\n        #cancelbutton:focus {\n          background-color: var(--simple-colors-default-theme-red-2);\n        }\n        simple-toolbar-menu:hover,\n        simple-toolbar-menu:active,\n        simple-toolbar-menu:focus,\n        simple-toolbar-button:hover,\n        simple-toolbar-button:active,\n        simple-toolbar-button:focus {\n          background-color: var(--hax-ui-background-color-accent);\n          color: var(--hax-ui-color);\n        }\n\n        :host(:hover),\n        :host(:active),\n        :host(:focus) {\n          opacity: 1;\n        }\n        simple-tooltip {\n          --simple-tooltip-background: #000000;\n          --simple-tooltip-opacity: 1;\n          --simple-tooltip-text-color: #ffffff;\n          --simple-tooltip-delay-in: 0;\n          --simple-tooltip-duration-in: 200ms;\n          --simple-tooltip-duration-out: 0;\n          --simple-tooltip-border-radius: 0;\n          --simple-tooltip-font-size: 14px;\n          font-family: \"Press Start 2P\", sans-serif;\n        }\n        app-hax-top-bar {\n          z-index: 1000;\n          right: 0;\n          left: 0;\n          position: fixed;\n        }\n        :host([dark-mode]) app-hax-top-bar {\n          --bg-color: #222;\n          --accent-color: #fff;\n        }\n        app-hax-top-bar::part(top-bar) {\n          grid-template-columns: 20% 60% 20%;\n          overflow: visible;\n        }\n        @media (max-width: 600px) {\n          app-hax-top-bar::part(top-bar) {\n            grid-template-columns: 15% 70% 15%;\n          }\n        }\n        .haxLogo {\n          color: var(--simple-colors-default-theme-accent-12, black);\n        }\n        :host([dark-mode]) .haxLogo {\n          color: var(--simple-colors-default-theme-accent-1, white);\n        }\n        :host([dark-mode]) .haxLogo:hover,\n        :host([dark-mode]) .haxLogo:focus,\n        :host([dark-mode]) .haxLogo:active,\n        .haxLogo:hover,\n        .haxLogo:focus,\n        .haxLogo:active {\n          color: var(--haxcms-color);\n        }\n        .haxLogo simple-icon-lite {\n          --simple-icon-height: 40px;\n          --simple-icon-width: 40px;\n          margin: 4px;\n        }\n        .soundToggle {\n          position: relative;\n          display: inline-flex;\n          vertical-align: top;\n        }\n\n        .soundToggle img {\n          width: 24px;\n          height: 24px;\n        }\n\n        app-hax-search-bar {\n          vertical-align: middle;\n          display: inline-flex;\n        }\n        simple-toolbar {\n          align-items: stretch;\n          justify-content: center;\n          height: var(--top-bar-height);\n          --simple-toolbar-button-disabled-border-color: transparent;\n          --simple-toolbar-button-disabled-opacity: 0.3;\n          --simple-toolbar-button-padding: 3px 6px;\n        }\n        simple-toolbar[dark-mode] {\n          --simple-toolbar-button-color: #e0e0e0;\n          --simple-toolbar-button-hover-color: #fff;\n          --simple-toolbar-button-bg: #222;\n          --simple-toolbar-button-hover-bg: #000;\n        }\n        simple-toolbar::part(buttons) {\n          flex: 0 1 auto;\n        }\n        .ops-panel {\n          justify-content: space-around;\n          display: flex;\n          padding: 4px 0px;\n        }\n\n        .topbar-character {\n          cursor: pointer;\n          display: inline-block;\n          border: none;\n          border-radius: 0px;\n          padding: 0 8px;\n          margin: 0 0 0 16px;\n          background-color: transparent;\n          height: 48px;\n          max-width: 160px;\n          transition: all 0.5 ease-in-out;\n        }\n        .characterbtn-name {\n          font-family: \"Press Start 2P\", sans-serif;\n          margin-left: 8px;\n          font-size: 12px;\n          vertical-align: bottom;\n          line-height: 48px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          height: 48px;\n          word-break: break-all;\n        }\n        :host([dark-mode]) .topbar-character,\n        :host([dark-mode]) .topbar-character {\n          color: #e0e0e0;\n          background-color: #222;\n        }\n        .topbar-character rpg-character {\n          margin: -4px -14px 0px -10px;\n          height: 52px;\n          width: 64px;\n          display: inline-block;\n          transform: scale(0.7);\n          transition: all 0.5 ease-in-out;\n        }\n        .topbar-character:hover rpg-character,\n        .topbar-character:focus rpg-character {\n          transform: scale(0.9);\n        }\n\n        .logout::part(menu-button) {\n          background-image: url(\"", "\");\n          background-repeat: no-repeat;\n          background-position: center center;\n          text-align: center;\n          background-size: cover;\n          border-top: 0px;\n          border-bottom: 0px;\n          padding: 10px;\n          font-family: \"Press Start 2P\", sans-serif;\n        }\n        app-hax-user-menu app-hax-user-menu-button::part(menu-button) {\n          font-family: \"Press Start 2P\", sans-serif;\n          font-size: 12px;\n        }\n\n        @media screen and (max-width: 800px) {\n          :host([dashboard-opened]) {\n            left: 90vw;\n          }\n          :host([edit-mode]) {\n            bottom: unset;\n          }\n          .topbar-character {\n            padding: 0;\n            margin: 0;\n          }\n          .characterbtn-name {\n            padding: 0;\n            margin: 0;\n            width: 30px;\n            display: inline-flex;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            letter-spacing: -2px;\n            margin-left: -6px;\n          }\n          simple-toolbar {\n            --simple-toolbar-button-padding: 3px 3px;\n          }\n          .characterbtn-name,\n          haxcms-button-add,\n          simple-toolbar-menu,\n          simple-toolbar-button {\n            font-size: 10px;\n          }\n          simple-toolbar-menu {\n            --icon-offset-right: 2px;\n            --icon-offset-left: 2px;\n          }\n          simple-toolbar-menu::part(dropdown-icon) {\n            right: 0;\n            top: 10px;\n          }\n          :host([edit-mode]) #deletebutton,\n          :host([edit-mode]) #addmenubutton,\n          :host([edit-mode]) #editdetails {\n            display: none;\n          }\n        }\n      "])), (0, _index.unsafeCSS)(LogOut))]);
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "haxcms-site-editor-ui";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI), "properties", this)), {}, {
          userName: {
            type: String,
            attribute: "user-name"
          },
          rpgHat: {
            type: String
          },
          userPicture: {
            type: String,
            attribute: "user-picture"
          },
          userMenuOpen: {
            type: Boolean
          },
          soundIcon: {
            type: String
          },
          darkMode: {
            type: Boolean,
            reflect: true,
            attribute: "dark-mode"
          },
          backLink: {
            type: String
          },
          backText: {
            type: String
          },
          __editIcon: {
            type: String
          },
          __editText: {
            type: String
          },
          __settingsText: {
            type: String
          },

          /**
           * small visual lock that events break on initial paint
           */
          painting: {
            type: Boolean,
            reflect: true
          },

          /**
           * page allowed
           */
          pageAllowed: {
            type: Boolean,
            attribute: "page-allowed",
            reflect: true
          },

          /**
           * if the page is in an edit state or not
           */
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          },

          /**
           * Manifest editing state
           */
          manifestEditMode: {
            type: Boolean,
            attribute: "manifest-edit-mode",
            reflect: true
          },
          activeTitle: {
            type: String,
            attribute: "active-title"
          },
          manifest: {
            type: Object
          },
          icon: {
            type: String
          },
          dashboardOpened: {
            type: Boolean,
            reflect: true,
            attribute: "dashboard-opened"
          }
        });
      }
    }]);
    return HAXCMSSiteEditorUI;
  }((0, _HAXCMSThemeParts2.HAXCMSThemeParts)((0, _HAXCMSI18NMixin.HAXCMSI18NMixin)(_simpleColors.SimpleColors)));

  _exports.HAXCMSSiteEditorUI = HAXCMSSiteEditorUI;
  customElements.define(HAXCMSSiteEditorUI.tag, HAXCMSSiteEditorUI);
});