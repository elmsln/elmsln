define(["exports", "../../lit/index.js", "./lib/buttons/rich-text-editor-button.js", "./lib/toolbars/rich-text-editor-toolbar.js", "./lib/toolbars/rich-text-editor-toolbar-mini.js", "./lib/toolbars/rich-text-editor-toolbar-full.js"], function (_exports, _index, _richTextEditorButton, _richTextEditorToolbar, _richTextEditorToolbarMini, _richTextEditorToolbarFull) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorBehaviors = _exports.RichTextEditor = void 0;

  var _templateObject_ac5d19008e0011ed99ce491205e67b1d, _templateObject2_ac5d19008e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  
   * RichTextEditorBehaviors
   * @extends RichTextStyles
   *
   * @customElement
   * @class
   * @lit-html
   * @lit-element
   */
  var RichTextEditorBehaviors = function RichTextEditorBehaviors(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.placeholder = "Click to edit";
        _this.toolbarId = "";
        _this.type = "rich-text-editor-toolbar";
        _this.id = "";
        _this.range = undefined;
        _this.disabled = false;
        _this.__focused = false;
        _this.__hovered = false;
        _this.editing = false;

        _this.setAttribute("tabindex", 1);

        _this.addEventListener("click", _this._handleClick);

        return _this;
      }

      babelHelpers.createClass(_class, [{
        key: "render",
        value: // render function
        function render() {
          var _this2 = this;

          return (0, _index.html)(_templateObject_ac5d19008e0011ed99ce491205e67b1d || (_templateObject_ac5d19008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div\n        id=\"container\"\n        @focus=\"", "\"\n        @blur=\"", "\"\n        @mouseover=\"", "\"\n        @mouseout=\"", "\"\n      >\n        <slot></slot>\n      </div>"])), function (e) {
            return _this2.__focused = true;
          }, function (e) {
            return _this2.__focused = false;
          }, function (e) {
            return _this2.__hovered = true;
          }, function (e) {
            return _this2.__hovered = false;
          });
        }
      }, {
        key: "editable",
        get: function get() {
          return !!this.contenteditable && this.contenteditable !== "false";
        }
      }, {
        key: "isEmpty",
        get: function get() {
          return !this.innerHTML || this.innerHTML.replace(/<!--[^(-->)]*-->/g, "").replace(/[\s\t\r\n]/gim, "") == "";
        }
      }, {
        key: "firstUpdated",
        value: function firstUpdated() {
          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this).call(this);

          if (this.isEmpty && !!this.rawhtml) {
            this.innerHTML = this.rawhtml.trim();
          } else if (this.isEmpty) {
            this.innerHTML = "";
          }
        }
      }, {
        key: "updated",
        value: function updated(changedProperties) {
          var _this3 = this;

          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this).call(this, changedProperties);
          changedProperties.forEach(function (oldValue, propName) {
            if (propName === "rawhtml" && !!_this3.rawhtml) {
              _this3.innerHTML = _this3.rawhtml.trim();
            }

            if (propName === "contenteditable") _this3._contenteditableChange();
          });
          if (!this.innerHTML) this.innerHTML = "";
        }
        /**
         * focuses on the contenteditable region
         * @memberof RichTextEditor
         */

      }, {
        key: "focus",
        value: function focus() {
          if (!this.disabled) {
            this.contenteditable = "true";
            this.__focused = true;
          }

          this.dispatchEvent(new CustomEvent("focus", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: this.querySelector("*")
          }));
        }
        /**
         * allows editor to fit within a stick toolbar
         *
         * @param {boolean} sticky
         * @memberof RichTextEditor
         */

      }, {
        key: "makeSticky",
        value: function makeSticky() {
          var sticky = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

          if (!sticky) {
            this.classList.add("heightmax");
          } else {
            this.classList.remove("heightmax");
          }
        }
        /**
         * fires when contenteditable changed
         * @event contenteditable-changed
         *
         */

      }, {
        key: "_contenteditableChange",
        value: function _contenteditableChange() {
          this.dispatchEvent(new CustomEvent("contenteditable-change", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: this
          }));
        }
        /**
         * Handles clicking to edit.
         *
         * @param {event} e click event
         * @returns {void}
         */

      }, {
        key: "_handleClick",
        value: function _handleClick(e) {
          var _this4 = this;

          e.preventDefault();

          if (!this.disabled && !this.editable && !this.__toolbar) {
            //get toolbar by id
            var toolbar,
                filter = !this.toolbarId ? [] : (window.RichTextEditorToolbars || []).filter(function (toolbar) {
              return toolbar.id === _this4.toolbarId;
            }); //get toolbar by type

            if (filter.length === 0) {
              filter = !this.type ? [] : (window.RichTextEditorToolbars || []).filter(function (toolbar) {
                return toolbar.type === _this4.type;
              });
            } //get any toolbar


            if (filter.length === 0) filter = window.RichTextEditorToolbars;

            if (filter[0]) {
              toolbar = filter[0];
            } else if (filter.length === 0) {
              //make toolbar
              toolbar = document.createElement(this.type || "rich-text-editor-toolbar");
            }

            this.__toolbar = toolbar;
            if (!this.disabled && this.__toolbar && this.__toolbar.setTarget) this.__toolbar.setTarget(this);
          }
        }
      }], [{
        key: "styles",
        get: //styles function
        function get() {
          return [].concat(babelHelpers.toConsumableArray(_richTextEditorButton.RichTextStyles), [(0, _index.css)(_templateObject2_ac5d19008e0011ed99ce491205e67b1d || (_templateObject2_ac5d19008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          :host {\n            display: block;\n          }\n          :host([hidden]) {\n            display: none;\n          }\n          :host([disabled]) {\n            cursor: not-allowed;\n          }\n          :host(:empty) {\n            opacity: 0.7;\n          }\n          :host(:focus) {\n            outline: none;\n          }\n\n          :host(.heightmax[contenteditable=\"true\"]) {\n            max-height: calc(100vh - 200px);\n            overflow-y: scroll;\n          }\n\n          #container,\n          #wysiwyg {\n            display: block;\n            width: 100%;\n          }\n          #source,\n          #wysiwyg {\n            margin: 0;\n            padding: 0;\n            min-height: var(--rich-text-editor-min-height, 20px);\n            cursor: pointer;\n            outline: none;\n            flex: 1 1 100%;\n            width: 100%;\n          }\n          :host(:empty) {\n            min-height: 20px;\n          }\n          :host(:empty)::after {\n            display: block;\n            content: attr(aria-placeholder);\n          }\n\n          :host(:hover),\n          :host(:focus-within) {\n            opacity: 1;\n            outline: var(--rich-text-editor-border-width, 1px) dotted\n              var(--rich-text-editor-focus-color, currentColor);\n          }\n          :host([disabled]),\n          :host([view-source]) {\n            outline: none !important;\n          }\n\n          #source:hover,\n          #source:focus-within {\n            outline: var(--rich-text-editor-border-width, 1px) dotted\n              var(--rich-text-editor-focus-color, currentColor);\n          }\n          :host([contenteditable=\"true\"][view-source]) #container {\n            display: flex;\n            align-items: stretch;\n            justify-content: space-between;\n            width: 100%;\n          }\n          :host([contenteditable=\"true\"][view-source]) #source,\n          :host([contenteditable=\"true\"][view-source]) #wysiwyg {\n            resize: horizontal;\n            overflow: auto;\n            flex: 1 1 auto;\n            width: 50%;\n          }\n          :host([contenteditable=\"true\"][view-source]) #source {\n            min-width: 300px;\n          }\n          :host([contenteditable=\"true\"][view-source]) #wysiwyg {\n            cursor: not-allowed;\n            margin-right: 10px;\n            width: calc(50% - 10px);\n          }\n          ::slotted(*:first-child) {\n            margin-top: 0px;\n          }\n          ::slotted(*:last-child) {\n            margin-bottom: 0px;\n          }\n        "])))]);
        }
      }, {
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)), {}, {
            /**
             * editor's unique id
             */
            id: {
              name: "id",
              type: String,
              reflect: true,
              attribute: "id"
            },

            /**
             * Maps to editing attribute
             */
            contenteditable: {
              name: "contenteditable",
              type: String,
              reflect: true,
              attribute: "contenteditable"
            },

            /**
             * don't reveal toolbar on mouseover
             */
            disabled: {
              name: "disabled",
              type: Boolean,
              attribute: "disabled",
              reflect: true
            },

            /**
             * don't reveal toolbar on mouseover
             */
            disableHover: {
              name: "disableHover",
              type: Boolean,
              attribute: "disable-hover"
            },

            /**
             * Placeholder text for empty editable regions
             */
            placeholder: {
              name: "placeholder",
              type: String,
              reflect: false,
              attribute: "aria-placeholder"
            },

            /**
             * id for toolbar
             */
            toolbarId: {
              name: "toolbarId",
              type: String,
              reflect: true,
              attribute: "toolbar-id"
            },

            /**
             * current range
             */
            range: {
              name: "range",
              type: Object,
              attribute: "range"
            },

            /**
             * raw html
             */
            rawhtml: {
              type: String,
              attribute: "rawhtml"
            },

            /**
             * type of editor toolbar, i.e.
             * full - full for full toolbar with breadcrumb,
             * mini - mini for mini floating toolbar, or
             * default toolbar if neither.
             */
            type: {
              name: "type",
              type: String,
              reflect: true,
              attribute: "type"
            },

            /**
             * whether editor is view source code mode
             */
            viewSource: {
              type: Boolean,
              attribute: "view-source",
              reflect: true
            },

            /**
             * code-editor for view source
             */
            __codeEditorValue: {
              type: String
            },

            /**
             * has focus
             */
            __needsUpdate: {
              type: Boolean
            },

            /**
             * has focus
             */
            __focused: {
              type: Boolean
            },

            /**
             * is hovered
             */
            __hovered: {
              type: Boolean
            }
          });
        }
        /**
         * Store the tag name to make it easier to obtain directly.
         * @notice function name must be here for tooling to operate correctly
         */

      }, {
        key: "tag",
        get: function get() {
          return "rich-text-editor";
        }
      }]);
      return _class;
    }(SuperClass);
  };
  /**
   * `rich-text-editor`
   * a standalone rich text editor
   * (can customize by extending RichTextEditorBehaviors)
  ### Styling
  
  `<rich-text-editor>`  uses RichTextStyles variables, 
  as well as an additional style:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  --rich-text-editor-min-height | minimum height of editor | 20px
   *
   * @extends RichTextEditorBehaviors
   * @extends LitElement
   * @customElement
   * @element rich-text-editor
   * @lit-html
   * @lit-element
   * @demo ./demo/index.html demo
   * @demo ./demo/mini.html mini floating toolbar
   * @demo ./demo/full.html toolbar with breadcrumb
   * @demo ./demo/config.html custom configuration
   * @demo ./demo/rawhtml.html raw HTML
   */


  _exports.RichTextEditorBehaviors = RichTextEditorBehaviors;

  var RichTextEditor = /*#__PURE__*/function (_RichTextEditorBehavi) {
    babelHelpers.inherits(RichTextEditor, _RichTextEditorBehavi);

    var _super2 = _createSuper(RichTextEditor);

    function RichTextEditor() {
      babelHelpers.classCallCheck(this, RichTextEditor);
      return _super2.apply(this, arguments);
    }

    return babelHelpers.createClass(RichTextEditor);
  }(RichTextEditorBehaviors(_index.LitElement));

  _exports.RichTextEditor = RichTextEditor;
  customElements.define(RichTextEditor.tag, RichTextEditor);
});