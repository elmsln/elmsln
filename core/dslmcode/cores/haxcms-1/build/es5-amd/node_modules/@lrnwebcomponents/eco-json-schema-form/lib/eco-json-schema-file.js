define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/async.js", "../../../@polymer/iron-flex-layout/iron-flex-layout-classes.js", "../../../@polymer/app-localize-behavior/app-localize-behavior.js", "../../../@polymer/polymer/lib/legacy/class.js", "../../../@polymer/paper-input/paper-input.js", "../../simple-icon/simple-icon.js", "../../simple-icon/lib/simple-icons.js", "../../simple-progress/simple-progress.js", "../../../@polymer/polymer/lib/elements/dom-repeat.js"], function (_exports, _polymerElement, _async, _ironFlexLayoutClasses, _appLocalizeBehavior, _class, _paperInput, _simpleIcon, _simpleIcons, _simpleProgress, _domRepeat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EcoJsonSchemaFile = void 0;

  var _templateObject_d4d4e6608e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  `eco-json-schema-file` takes in a JSON schema of type number and string and
  contains a `paper-input`, exposing a `value` property that represents the schema.
  
  Validation is handled for strings and number/integers by mapping JSON schema
  validation keywords to `paper-input` attributes; form elements will automatically
  try and validate themselves as users provide input:
  
  Please see the `eco-json-schema-object` documentation for further information.
  
  @group eco Elements
  @element eco-json-schema-file
  * @demo demo/index.html
  */
  var EcoJsonSchemaFile = /*#__PURE__*/function (_mixinBehaviors) {
    babelHelpers.inherits(EcoJsonSchemaFile, _mixinBehaviors);

    var _super = _createSuper(EcoJsonSchemaFile);

    function EcoJsonSchemaFile() {
      babelHelpers.classCallCheck(this, EcoJsonSchemaFile);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(EcoJsonSchemaFile, [{
      key: "clear",
      value:
      /**
       * Clears the list of files
       */
      function clear() {
        this.set("files", []);
        this.shadowRoot.querySelector("#fileInput").value = "";

        this._showDropText();
      }
    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(EcoJsonSchemaFile.prototype), "ready", this).call(this);

        if (this.raised) {
          this.toggleAttribute("raised", true, this.shadowRoot.querySelector("#button"));
        }

        if (this.noink) {
          this.toggleAttribute("noink", true, this.shadowRoot.querySelector("#button"));
        }

        if (this.droppable) {
          this._showDropText();

          this.setupDrop();
        }
      }
      /**
       * A function to set up a drop area for drag-and-drop file uploads
       */

    }, {
      key: "setupDrop",
      value: function setupDrop() {
        var uploadBorder = this.shadowRoot.querySelector("#UploadBorder");
        this.toggleClass("enabled", true, uploadBorder);

        this.ondragover = function (e) {
          e.stopPropagation();
          this.toggleClass("hover", true, uploadBorder); // Workaround for allowgin drop from Chome's download footer on OSX
          // See https://bugs.chromium.org/p/chromium/issues/detail?id=234931

          var effect = e.dataTransfer && e.dataTransfer.dropEffect;
          var effectAllowed = e.dataTransfer && e.dataTransfer.effectAllowed;

          if (effect === "none" && effectAllowed !== "none") {
            e.dataTransfer.dropEffect = effectAllowed === "move" ? "move" : "copy";
          } // end of workaround


          return false;
        };

        this.ondragleave = function () {
          this.toggleClass("hover", false, uploadBorder);
          return false;
        };

        this.ondrop = function (event) {
          this.toggleClass("hover", false, uploadBorder);
          event.preventDefault(); // Check if multiple upload is allowed

          if (!this.multi && this.files.length !== 0) {
            return;
          }

          var length = event.dataTransfer.files.length;

          for (var i = 0; i < length; i++) {
            var file = event.dataTransfer.files[i]; //if (this.value.indexOf(window.btoa(unescape(encodeURIComponent(file.name)))) >= 0 ) {
            //  continue;
            //}
            // Check if filetype is accepted

            var mimeType = file.type !== "" ? file.type.match(/^[^\/]*\//)[0] : null;
            var fileType = file.name.match(/\.[^\.]*$/)[0];

            if (this.accept !== "" && !(this.accept.indexOf(mimeType) > -1 || this.accept.indexOf(fileType) > -1)) {
              continue;
            }

            file.progress = 0;
            file.error = false;
            file.complete = false;
            this.push("files", file);
            this.uploadFile(file);
          }
        };
      }
      /**
       * Clicks the invisible file input
       */

    }, {
      key: "_fileClick",
      value: function _fileClick() {
        var elem = this.shadowRoot.querySelector("#fileInput");

        if (elem && document.createEvent) {
          // sanity check
          var evt = document.createEvent("MouseEvents");
          evt.initEvent("click", true, false);
          elem.dispatchEvent(evt);
        }
      }
      /**
       * Called whenever the list of selected files changes
       *
       * @param {object} e An event object
       */

    }, {
      key: "_fileChange",
      value: function _fileChange(e) {
        var length = e.target.files.length;

        for (var i = 0; i < length; i++) {
          var file = e.target.files[i];
          file.progress = 0;
          file.error = false;
          file.complete = false;
          this.push("files", file);

          if (!this.multi && this.files.length !== 0) {
            this.set("files", []);
            this.set("value", {});
          }

          this.uploadFile(file);
        }
      }
      /**
       * Cancels the file upload for a specific file
       *
       * @param {object} file An element of the files array
       */

    }, {
      key: "cancel",
      value: function cancel(file) {
        if (file) {
          if (file.xhr) {
            file.xhr.abort();
          }

          this.splice("files", this.files.indexOf(file), 1);

          this._showDropText();
        }
      }
      /**
       * Cancels the file upload
       *
       * @param {object} e An event object
       */

    }, {
      key: "_cancelUpload",
      value: function _cancelUpload(e) {
        this.cancel(e.model.__data__.item);
      }
      /**
       * Retries to upload the file
       *
       * @param {object} e An event object
       */

    }, {
      key: "_retryUpload",
      value: function _retryUpload(e) {
        e.model.set("item.error", false);
        e.model.set("item.progress", 0); // The async helps give visual feedback of a retry occurring, even though it's less efficient.

        var self = this;

        _async.microTask.run(function () {
          self.uploadFile(e.model.__data__.item);
        });
      }
      /**
       * Whether or not to display the drop text
       */

    }, {
      key: "_showDropText",
      value: function _showDropText() {
        this.set("_shownDropText", !this.files.length && this.droppable);
      }
      /**
       * Uploads a file
       *
       * @param {object} file An element of the files array
       */

    }, {
      key: "uploadFile",
      value: function uploadFile(file) {
        if (!file) {
          return;
        }

        this.dispatchEvent(new CustomEvent("before-upload", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: true
        }));

        this._showDropText();

        var prefix = "files." + this.files.indexOf(file);
        var self = this;
        var reader = new FileReader();
        reader.addEventListener("load", function () {
          var r = reader.result; //self.push('value', {"name": unescape(encodeURIComponent( file.name )),"content":r});
          //self.value.push({"name": unescape(encodeURIComponent( file.name )),"content":r});
          //console.log('value.'+self.files.indexOf(file));

          self.set("value." + self.attributes.name.value + "." + self.files.indexOf(file), r); //self.notifyPath('value');
        }, false);

        if (!self.value.hasOwnProperty(self.attributes.name.value)) {
          this.set("value." + self.attributes.name.value, {});
        }

        reader.readAsDataURL(file);
      }
    }, {
      key: "_valueChanged",
      value: function _valueChanged() {
        console.log("this.value: " + JSON.stringify(this.value));
      }
    }, {
      key: "_schemaChanged",
      value: function _schemaChanged() {
        var schema = this.schema;
        /*
        var inputEl = this.shadowRoot.querySelector('#fileInput');
        if (schema.required) {
          inputEl.required = true;
        }
        //inputEl.type = 'file';
         if (schema.component && schema.component.properties) {
          Object.keys(schema.component.properties).forEach(function(prop) {
            inputEl[prop] = schema.component.properties[prop];
          });
        }
        */

        /*
        inputEl.alwaysFloatLabel = true; // label doesn't float when value not set
         if (schema.title) {
          inputEl.label = schema.title;
        }
        */
      }
      /*
      _errorChanged() {
        if (this.error) {
          this.shadowRoot.querySelector('#fileInput').errorMessage = this.error;
          this.shadowRoot.querySelector('#fileInput').invalid = true;
        } else {
          this.shadowRoot.querySelector('#fileInput').invalid = false;
          this.shadowRoot.querySelector('#fileInput').errorMessage = null;
        }
      },
      */

    }, {
      key: "_isSchemaValue",
      value: function _isSchemaValue(type) {
        return this._isSchemaFile(type);
      }
    }, {
      key: "_isSchemaFile",
      value: function _isSchemaFile(type) {
        if (Array.isArray(type)) {
          return type.indexOf("file") !== -1;
        } else {
          return type === "file";
        }
      }
    }, {
      key: "_isSchemaBoolean",
      value: function _isSchemaBoolean(type) {
        if (Array.isArray(type)) {
          return type.indexOf("boolean") !== -1;
        } else {
          return type === "boolean";
        }
      }
    }, {
      key: "_isSchemaNumber",
      value: function _isSchemaNumber(type) {
        if (Array.isArray(type)) {
          return type.indexOf("number") !== -1 || type.indexOf("integer") !== -1;
        } else {
          return type === "number" || type === "integer";
        }
      }
    }, {
      key: "_isSchemaString",
      value: function _isSchemaString(type) {
        if (Array.isArray(type)) {
          return type.indexOf("string") !== -1;
        } else {
          return type === "string";
        }
      }
    }, {
      key: "_isSchemaObject",
      value: function _isSchemaObject(type) {
        return type === "object";
      }
    }, {
      key: "_isSchemaArray",
      value: function _isSchemaArray(type) {
        return type === "array";
      }
    }, {
      key: "stringify",
      value: function stringify(s) {
        return JSON.stringify(s);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "eco-json-schema-file";
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_d4d4e6608e0011ed99ce491205e67b1d || (_templateObject_d4d4e6608e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style is=\"custom-style\" include=\"iron-flex iron-flex-alignment\">\n        :host ([hidden]) {\n          display: none;\n        }\n        paper-input {\n          padding: 2px;\n          --paper-input-container-label: {\n            white-space: normal;\n            position: static;\n            font-size: 22px;\n            color: #212121;\n          }\n        }\n\n        :host {\n          display: inline-block;\n        }\n\n        .enabled {\n          border: 1px dashed #555;\n          @apply --file-upload-upload-border-enabled;\n        }\n\n        .hover {\n          opacity: 0.7;\n          border: 1px dashed #111;\n          @apply --file-upload-upload-border-hover;\n        }\n\n        #UploadBorder {\n          vertical-align: middle;\n          color: #555;\n          padding: 20px;\n          max-height: 300px;\n          overflow-y: auto;\n          display: inline-block;\n          @apply --file-upload-upload-border;\n        }\n\n        #dropArea {\n          text-align: center;\n          @apply --file-upload-drop-area;\n        }\n\n        button#button {\n          margin-bottom: 20px;\n          @apply --file-upload-button;\n        }\n\n        .file {\n          padding: 10px 0px;\n          @apply --file-upload-file;\n        }\n\n        .commands {\n          float: right;\n          @apply --file-upload-commands;\n        }\n\n        .commands iron-icon:not([icon=\"check-circle\"]) {\n          cursor: pointer;\n          opacity: 0.9;\n          @apply --file-upload-commands-faded;\n        }\n\n        .commands iron-icon:hover {\n          opacity: 1;\n          @apply --file-upload-commands-hovered;\n        }\n\n        [hidden] {\n          display: none;\n        }\n\n        .error {\n          color: #f40303;\n          font-size: 11px;\n          margin-top: 2px;\n          @apply --file-upload-error;\n        }\n\n        .progress-bar {\n          margin-top: 2px;\n        }\n\n        simple-progress {\n          --simple-progress-color: #03a9f4;\n        }\n\n        simple-progress[error] {\n          --simple-progress-color: #f40303;\n        }\n      </style>\n\n      <div class=\"layout horizontal nowrap\">\n        <div>\n          <button\n            id=\"button\"\n            on-click=\"_fileClick\"\n            alt=\"{{paperButtonAlt}}\"\n            raised=\"\"\n          >\n            <simple-icon icon=\"editor:attach-file\"></simple-icon\n            >{{paperButtonTitle}}\n          </button>\n          <div id=\"UploadBorder\">\n            <div id=\"dropArea\" hidden$=\"{{!_shownDropText}}\">{{dropText}}</div>\n            <template is=\"dom-repeat\" items=\"{{files}}\">\n              <div class=\"file\">\n                <div class=\"name\">\n                  <span>{{item.name}}</span>\n                  <div class=\"commands\">\n                    <simple-icon\n                      icon=\"autorenew\"\n                      title=\"{{retryText}}\"\n                      on-click=\"_retryUpload\"\n                      hidden$=\"{{!item.error}}\"\n                    ></simple-icon>\n                    <simple-icon\n                      icon=\"cancel\"\n                      title=\"{{removeText}}\"\n                      on-click=\"_cancelUpload\"\n                      hidden$=\"{{item.complete}}\"\n                    ></simple-icon>\n                    <simple-icon\n                      icon=\"check-circle\"\n                      title=\"{{successText}}\"\n                      hidden$=\"{{!item.complete}}\"\n                    ></simple-icon>\n                  </div>\n                </div>\n                <div class=\"error\" hidden$=\"{{!item.error}}\">{{errorText}}</div>\n              </div>\n            </template>\n          </div>\n        </div>\n        <input\n          type=\"file\"\n          id=\"fileInput\"\n          on-change=\"_fileChange\"\n          hidden=\"\"\n          multiple=\"{{multi}}\"\n          accept=\"{{accept}}\"\n        />\n      </div>\n    "])));
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          language: {
            value: "en",
            notify: true
          },
          resources: {
            value: function value() {
              return {};
            },
            notify: true
          },
          schema: {
            type: Object,
            observer: "_schemaChanged"
          },
          value: {
            type: Object,
            notify: true,
            value: function value() {
              return {};
            },
            observer: "_valueChanged"
          },

          /**
          error: {
            type: String,
            observer: '_errorChanged',
            value: null
          },
          */

          /**
           * `target`
           * @element target is the target url to upload the files to.
           * Additionally by adding '<name>' in your url, it will be replaced by
           * the file name.
           */
          target: {
            type: String,
            value: ""
          },

          /**
           * `accept`
           * @element accept is the set of comma separated file extensions or mime types
           * to filter as accepted.
           */
          accept: {
            type: String,
            value: ""
          },

          /**
           * `droppable`
           * @element droppable indicates whether or not to allow file drop.
           */
          droppable: {
            type: Boolean,
            value: false
          },

          /**
           * `dropText`
           * @element dropText is the  text to display in the file drop area.
           */
          dropText: {
            type: String,
            value: "Drop Files Here"
          },

          /**
           * `multi`
           * @element multi indicates whether or not to allow multiple files to be uploaded.
           */
          multi: {
            type: Boolean,
            value: true
          },

          /**
           * `files`
           * @element files is the list of files to be uploaded
           */
          files: {
            type: Array,
            notify: true,
            value: function value() {
              return [];
            }
          },

          /**
           * `raised`
           * @element raised indicates whether or not the button should be raised
           */
          raised: {
            type: Boolean,
            value: true
          },

          /**
           * `noink`
           * @element noink indicates that the button should not have an ink effect
           */
          noink: {
            type: Boolean,
            value: false
          },

          /**
           * `headers`
           * @element headers is a key value map of header names and values
           */
          headers: {
            type: Object,
            value: {}
          },

          /**
           * `retryText`
           * @element retryText is the text for the tooltip to retry an upload
           */
          retryText: {
            type: String,
            value: "Retry Upload"
          },

          /**
           * `removeText`
           * @element removeText is the text for the tooltip to remove an upload
           */
          removeText: {
            type: String,
            value: "Remove"
          },

          /**
           * `successText`
           * @element successText is the text for the tooltip of a successful upload
           */
          successText: {
            type: String,
            value: "Success"
          },

          /**
           * `errorText`
           * @element errorText is the text to display for a failed upload
           */
          errorText: {
            type: String,
            value: "Error uploading file..."
          },

          /**
           * `_shownDropText`
           * @element _shownDropText indicates whether or not the drop text should be shown
           */
          _shownDropText: {
            type: Boolean,
            value: false
          },

          /**
           * `additional`
           * @element additional object of key-pair values to send additional values along with file.
           */
          additional: {
            type: Object,
            value: {}
          },

          /**
           * `fileDataName`
           * @element fileDataName is the name for the file data in the `formData` object.
           */
          fileDataName: {
            type: String,
            value: "file"
          },

          /**
           * `paperButtonAlt`
           * @element paperButtonAlt allows changing the alt property on the paper button
           */
          paperButtonAlt: {
            type: String,
            value: ""
          },

          /**
           * `paperButtonTitle`
           * @element paperButtonTitle allows changing the title property on the paper button
           */
          paperButtonTitle: {
            type: String,
            value: ""
          }
        };
      }
    }]);
    return EcoJsonSchemaFile;
  }((0, _class.mixinBehaviors)([_appLocalizeBehavior.AppLocalizeBehavior], _polymerElement.PolymerElement));

  _exports.EcoJsonSchemaFile = EcoJsonSchemaFile;
  customElements.define(EcoJsonSchemaFile.tag, EcoJsonSchemaFile);
});