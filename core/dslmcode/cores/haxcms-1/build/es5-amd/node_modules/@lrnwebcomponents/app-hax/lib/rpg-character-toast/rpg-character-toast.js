define(["exports", "meta", "../../../../lit/index.js", "../../../simple-toast/lib/simple-toast-el.js", "../../../rpg-character/rpg-character.js"], function (_exports, meta, _index, _simpleToastEl, _rpgCharacter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RPGCharacterToast = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_a7d184a0809211edaa2833647dc78c6c, _templateObject2_a7d184a0809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var SpeechBubbleL = new URL("./images/SpeechBubbleL.svg", meta.url).href;
  var SpeechBubbleMiddle = new URL("./images/SpeechBubbleMiddle.svg", meta.url).href;
  var SpeechBubbleR = new URL("./images/SpeechBubbleR.svg", meta.url).href;

  var RPGCharacterToast = /*#__PURE__*/function (_SimpleToastEl) {
    babelHelpers.inherits(RPGCharacterToast, _SimpleToastEl);

    var _super = _createSuper(RPGCharacterToast);

    function RPGCharacterToast() {
      var _this;

      babelHelpers.classCallCheck(this, RPGCharacterToast);
      _this = _super.call(this);

      _this.setDefaultToast();

      _this.key = null;
      _this.phrases = {};
      _this.fire = false;
      _this.hat = "coffee";
      _this.walking = false;
      _this.word = null;

      _this.addEventListener("click", function () {
        _this.opened = false;
      });

      return _this;
    }

    babelHelpers.createClass(RPGCharacterToast, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_a7d184a0809211edaa2833647dc78c6c || (_templateObject_a7d184a0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <div class=\"bubble\">\n      <span class=\"bubble leftedge\"></span>\n      <span class=\"bubble mid\">\n        ", "\n        <slot></slot>\n      </span>\n      <span class=\"bubble rightedge\"></span>\n      <rpg-character\n        height=\"130\"\n        width=\"130\"\n        seed=\"", "\"\n        ?fire=\"", "\"\n        hat=\"", "\"\n        ?walking=\"", "\"\n      ></rpg-character>\n    </div>"])), this.text, this.userName, this.fire, this.hat, this.walking);
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RPGCharacterToast.prototype), "connectedCallback", this).call(this);
        window.addEventListener("rpg-character-toast-hide", this.hideSimpleToast.bind(this));
        window.addEventListener("rpg-character-toast-show", this.showSimpleToast.bind(this));
      }
      /**
       * life cycle, element is removed from the DOM
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("rpg-character-toast-hide", this.hideSimpleToast.bind(this));
        window.removeEventListener("rpg-character-toast-show", this.showSimpleToast.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(RPGCharacterToast.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Hide callback
       */

    }, {
      key: "hideSimpleToast",
      value: function hideSimpleToast() {
        this.hide();
      }
    }, {
      key: "openedChanged",
      value: function openedChanged(e) {
        this.opened = e.detail.value;
      }
    }, {
      key: "setDefaultToast",
      value: function setDefaultToast() {
        this.opened = false;
        this.text = "Saved";
        this.classStyle = "";
        this.duration = 3000;
        this.accentColor = "grey";
        this.dark = false;
        this.eventCallback = null;

        while (this.firstChild !== null) {
          this.removeChild(this.firstChild);
        }
      }
      /**
       * Show / available callback
       */

    }, {
      key: "showSimpleToast",
      value: function showSimpleToast(e) {
        this.hideSimpleToast(); // establish defaults and then let event change settings

        this.setDefaultToast(); // add your code to run when the singleton is called for

        if (e.detail.duration) {
          this.duration = e.detail.duration;
        }

        if (e.detail.fire) {
          this.fire = e.detail.fire;
        }

        if (e.detail.hat) {
          this.hat = e.detail.hat;
        }

        if (e.detail.walking) {
          this.walking = e.detail.walking;
        }

        if (e.detail.text) {
          this.text = e.detail.text;
        }

        if (e.detail.classStyle) {
          this.classStyle = e.detail.classStyle;
        }

        if (e.detail.eventCallback) {
          this.eventCallback = e.detail.eventCallback;
        }

        if (e.detail.slot) {
          this.appendChild(e.detail.slot);
        }

        if (e.detail.accentColor) {
          this.accentColor = e.detail.accentColor;
        }

        if (e.detail.dark) {
          this.dark = e.detail.dark;
        }

        this.show();
      }
    }, {
      key: "show",
      value: function show() {
        this.opened = true;
      }
    }, {
      key: "hide",
      value: function hide() {
        this.duration = 0;
        this.fire = false;
        this.hat = "coffee";
        this.walking = false;

        if (this.eventCallback) {
          var evt = new CustomEvent(this.eventCallback, {
            bubbles: true,
            cancelable: true,
            detail: true,
            composed: true
          });
          this.dispatchEvent(evt);
        }

        this.opened = false;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "rpg-character-toast";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RPGCharacterToast), "styles", this)), [(0, _index.css)(_templateObject2_a7d184a0809211edaa2833647dc78c6c || (_templateObject2_a7d184a0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host([opened]) {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n        :host {\n          --simple-toast-bottom: 0px;\n          height: 142px;\n          display: none;\n          width: var(--simple-toast-width, auto);\n          color: var(\n            --simple-toast-color,\n            var(--simple-colors-default-theme-accent-12, black)\n          );\n          background-color: transparent;\n          top: var(--simple-toast-top);\n          margin: var(--simple-toast-margin, 4px);\n          padding: var(--simple-toast-padding, 4px);\n          bottom: var(--simple-toast-bottom, 36px);\n          right: var(--simple-toast-right, 0px);\n          border: var(--simple-toast-border);\n          z-index: var(--simple-toast-z-index, 10000000);\n          font-size: var(--simple-toast-font-size, 18px);\n          font-family: \"Press Start 2P\", sans-serif;\n          font-weight: bold;\n          text-align: center;\n          vertical-align: middle;\n        }\n        rpg-character {\n          margin: 30px -30px 0 -30px;\n          width: 145px;\n        }\n        .bubble {\n          height: 142px;\n          display: inline-flex;\n          margin-top: 6px;\n        }\n        .mid {\n          line-height: 142px;\n          background-color: white;\n          background-repeat: repeat-x;\n          background-image: url(\"", "\");\n        }\n        .leftedge {\n          background-image: url(\"", "\");\n          width: 24px;\n          background-color: white;\n        }\n        .rightedge {\n          background-image: url(\"", "\");\n          width: 54px;\n          background-color: white;\n        }\n        :host([dark-mode]) .mid,\n        :host([dark-mode]) .leftedge,\n        :host([dark-mode]) .rightedge {\n          filter: invert(1);\n        }\n        @media (max-width: 800px) {\n          :host {\n            --simple-toast-width: 80vw;\n            --simple-toast-font-size: 12px;\n          }\n          rpg-character {\n            width: 100px;\n            margin: 70px -24px 0 -24px;\n          }\n        }\n        @media (max-width: 500px) {\n          :host {\n            height: 50px;\n            line-height: 50px;\n            border: none;\n          }\n          rpg-character {\n            display: none;\n          }\n          .rightedge {\n            display: none;\n          }\n          .leftedge {\n            display: none;\n          }\n          .mid {\n            height: 50px;\n            line-height: 50px;\n            background-image: unset;\n          }\n          .bubble {\n            height: 50px;\n            margin: 0;\n            border: 2px solid black;\n            border-radius: 5px;\n          }\n        }\n      "])), (0, _index.unsafeCSS)(SpeechBubbleMiddle), (0, _index.unsafeCSS)(SpeechBubbleL), (0, _index.unsafeCSS)(SpeechBubbleR))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RPGCharacterToast), "properties", this)), {}, {
          darkMode: {
            type: Boolean,
            reflect: true,
            attribute: "dark-mode"
          },
          fire: {
            type: Boolean
          },
          hat: {
            type: String
          },
          walking: {
            type: Boolean
          },

          /**
           * Opened state of the toast, use event to change
           */
          opened: {
            type: Boolean,
            reflect: true
          },

          /**
           * Plain text based message to display
           */
          text: {
            type: String
          },

          /**
           * Class name, fit-bottom being a useful one
           */
          classStyle: {
            type: String,
            attribute: "class-style"
          },

          /**
           * How long the toast message should be displayed
           */
          duration: {
            type: Number
          },

          /**
           * Event callback when hide is called
           */
          eventCallback: {
            type: String,
            attribute: "event-callback"
          }
        });
      }
    }]);
    return RPGCharacterToast;
  }(_simpleToastEl.SimpleToastEl);

  _exports.RPGCharacterToast = RPGCharacterToast;
  customElements.define(RPGCharacterToast.tag, RPGCharacterToast);
});