define(["exports", "../../../lit/index.js", "./editable-table-behaviors.js", "../../a11y-menu-button/lib/a11y-menu-button-item.js", "../../simple-toolbar/lib/simple-toolbar-menu.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _index, _editableTableBehaviors, _a11yMenuButtonItem, _simpleToolbarMenu, _simpleIconLite, _simpleIcons, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableEditorRowcol = void 0;

  var _templateObject_d52f62708e0011ed99ce491205e67b1d, _templateObject2_d52f62708e0011ed99ce491205e67b1d, _templateObject3_d52f62708e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `editable-table-editor-rowcol`
   * A header label and menu for inserting and deleting a row or a column of editable-table interface (editable-table.html).
   *
   * @demo ./demo/editor.html
   * @customElement
   * @extends cellBehaviors
   * @extends A11yMenuButton
   */
  var EditableTableEditorRowcol = /*#__PURE__*/function (_SimpleToolbarMenuBeh) {
    babelHelpers.inherits(EditableTableEditorRowcol, _SimpleToolbarMenuBeh);

    var _super = _createSuper(EditableTableEditorRowcol);

    function EditableTableEditorRowcol() {
      babelHelpers.classCallCheck(this, EditableTableEditorRowcol);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(EditableTableEditorRowcol, [{
      key: "type",
      get:
      /**
       *
       * Gets row or column type
       * @readonly
       * @memberof EditableTableEditorRowcol
       */
      function get() {
        return this.row ? "Row" : "Column";
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorRowcol.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorRowcol.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "index") {
            _this.controls = _this.row ? "cell-0-".concat(_this.index) : "cell-".concat(_this.index, "-0");
          }

          if (propName === "index" || propName === "row") {
            _this.label = _this.row ? _this._getLabel(_this.index, true) : _this._getLabel(_this.index, false);
          }

          if (propName === "row") {
            _this.position = _this.row ? "right" : "bottom";
          }
        });
      }
    }, {
      key: "listItemTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject_d52f62708e0011ed99ce491205e67b1d || (_templateObject_d52f62708e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <slot name=\"menuitem\">\n        ", " ", " ", "\n      </slot>\n      <slot></slot>\n    "])), this._getItem(), this._getItem(false, true), this._getItem(true));
      }
      /**
       * Fires when  selection is made from menu button
       * @event delete-rowcol
       * @param {number} index index to perform action
       * @param {boolean} whether action is to insert
       */

    }, {
      key: "rowColAction",
      value: function rowColAction() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.index;
        var insert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.dispatchEvent(new CustomEvent("rowcol-action", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            insert: insert,
            row: this.row,
            index: index
          }
        }));
      }
    }, {
      key: "_getItem",
      value: function _getItem() {
        var deleteItem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var after = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var label = "".concat(deleteItem ? "Delete " : "Insert ").concat(this.type).concat(deleteItem ? "" : after ? " After " : " Before ");
        return (0, _index.html)(_templateObject2_d52f62708e0011ed99ce491205e67b1d || (_templateObject2_d52f62708e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <simple-toolbar-menu-item slot=\"menuitem\">\n      <simple-toolbar-button\n        role=\"menuitem\"\n        label=\"", "\"\n        show-text-label\n        align-horizontal=\"left\"\n        @button-toggled=\"", "\"\n      >\n      </simple-toolbar-button>\n    </simple-toolbar-menu-item>"])), label, deleteItem ? this._onDelete : after ? this._onInsertAfter : this._onInsertBefore);
      }
      /**
       * Handles when Delete Row/Column is clicked
       * @param {event} e button event
       */

    }, {
      key: "_onDelete",
      value: function _onDelete(e) {
        this.rowColAction(this.index, false);
      }
      /**
       * Handles when Insert Row/Column is clicked
       * @param {event} e button event
       */

    }, {
      key: "_onInsertBefore",
      value: function _onInsertBefore(e) {
        this.rowColAction(this.row ? this.index - 1 : this.index);
      }
      /**
       * Handles when Insert Row/Column After is clicked
       * @param {event} e button event
       */

    }, {
      key: "_onInsertAfter",
      value: function _onInsertAfter(e) {
        this.rowColAction(this.row ? this.index : this.index + 1);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorRowcol), "styles", this) || []), babelHelpers.toConsumableArray(_editableTableBehaviors.editableTableCellStyles), [(0, _index.css)(_templateObject3_d52f62708e0011ed99ce491205e67b1d || (_templateObject3_d52f62708e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host [part=\"button\"],\n        :host [part=\"button\"]:focus,\n        :host(:focus-within) [part=\"button\"],\n        :host(:hover) [part=\"button\"],\n        :host [part=\"button\"]:hover {\n          border-radius: 0;\n          background-color: transparent;\n          border: none;\n        }\n        [role=\"menuitem\"] {\n          --simple-toolbar-button-hover-border-color: transparent;\n        }\n        [role=\"menuitem\"]::part(button):hover,\n        [role=\"menuitem\"]::part(button):focus,\n        [role=\"menuitem\"]::part(button):focus-within {\n          border: none;\n          background-color: var(\n            --editable-table-rowcol-hover-bg-color,\n            var(--editable-table-stripe-bg-color, #f0f0f0)\n          );\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-editor-rowcol";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorRowcol), "properties", this)), {}, {
          /**
           * Index of row or column
           */
          index: {
            type: Number
          },

          /**
           * Whether menu button controls a row
           */
          row: {
            type: Boolean
          }
        });
      }
    }]);
    return EditableTableEditorRowcol;
  }((0, _simpleToolbarMenu.SimpleToolbarMenuBehaviors)((0, _editableTableBehaviors.cellBehaviors)(_index.LitElement)));

  _exports.EditableTableEditorRowcol = EditableTableEditorRowcol;
  customElements.define(EditableTableEditorRowcol.tag, EditableTableEditorRowcol);
});