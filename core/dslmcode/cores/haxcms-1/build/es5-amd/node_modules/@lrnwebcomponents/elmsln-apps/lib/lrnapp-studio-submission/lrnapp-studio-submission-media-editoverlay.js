define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-button.js", "../../../hax-iconset/lib/simple-hax-iconset.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../../@polymer/paper-dialog/paper-dialog.js"], function (_exports, _polymerElement, _simpleIcon, _simpleIcons, _simpleIconButton, _simpleHaxIconset, _domIf, _paperDialog) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioSubmissionMediaEditoverlay = void 0;

  var _templateObject_b41fd900809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappStudioSubmissionMediaEditoverlay = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappStudioSubmissionMediaEditoverlay, _PolymerElement);

    var _super = _createSuper(LrnappStudioSubmissionMediaEditoverlay);

    function LrnappStudioSubmissionMediaEditoverlay() {
      babelHelpers.classCallCheck(this, LrnappStudioSubmissionMediaEditoverlay);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappStudioSubmissionMediaEditoverlay, [{
      key: "_embedClicked",
      value: function _embedClicked(e) {
        // @todo switch to singleton
        this.shadowRoot.querySelector("#dialog").open();
      }
    }, {
      key: "_deleteClicked",
      value: function _deleteClicked(e) {
        this.dispatchEvent(new CustomEvent("deleted", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: true
        }));
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_b41fd900809211edaa2833647dc78c6c || (_templateObject_b41fd900809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: flex;\n          align-items: stretch;\n          justify-content: stretch;\n        }\n\n        .wrapper {\n          position: relative;\n          z-index: 1;\n          overflow: hidden;\n          display: flex;\n          align-items: center;\n        }\n\n        .actions {\n          overflow: hidden;\n          position: absolute;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          top: 0;\n          left: 0;\n          z-index: 5;\n          color: white;\n          background: rgba(0, 0, 0, 0.7);\n          height: 100%;\n          width: 100%;\n          transition: all 0.2s ease-in-out;\n          transform: translateY(-100%);\n        }\n\n        .wrapper:hover .actions {\n          transform: translateY(0);\n        }\n\n        paper-dialog {\n          width: 50%;\n          width: 50vmax;\n          padding: 1em;\n        }\n      </style>\n      <div class=\"wrapper\">\n        <slot></slot>\n        <div class=\"actions\">\n          <template is=\"dom-if\" if=\"[[embedcode]]\">\n            <simple-icon-button\n              icon=\"code\"\n              dark\n              class=\"embed\"\n              on-click=\"_embedClicked\"\n            ></simple-icon-button>\n          </template>\n          <simple-icon-button\n            icon=\"delete\"\n            dark\n            class=\"delete\"\n            on-click=\"_deleteClicked\"\n          ></simple-icon-button>\n        </div>\n      </div>\n      <template is=\"dom-if\" if=\"[[embedcode]]\">\n        <paper-dialog id=\"dialog\">\n          <h2>Embed Code</h2>\n          <p>Paste this into the text area and your image will appear.</p>\n          <div style=\"height:50vh;width:100%;overflow:scroll;\">\n            <pre>{{embedcode}}</pre>\n          </div>\n        </paper-dialog>\n      </template>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-submission-media-editoverlay";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          embedcode: {
            type: String
          }
        };
      }
    }]);
    return LrnappStudioSubmissionMediaEditoverlay;
  }(_polymerElement.PolymerElement);

  _exports.LrnappStudioSubmissionMediaEditoverlay = LrnappStudioSubmissionMediaEditoverlay;
  customElements.define(LrnappStudioSubmissionMediaEditoverlay.tag, LrnappStudioSubmissionMediaEditoverlay);
});