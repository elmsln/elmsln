define(["exports", "../../lit/index.js", "../../@polymer/polymer/lib/utils/flattened-nodes-observer.js", "./lib/loading-indicator.js"], function (_exports, _index, _flattenedNodesObserver, _loadingIndicator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.IframeLoader = void 0;

  var _templateObject_7615b2204fbd11edb93baf2315d3222f, _templateObject2_7615b2204fbd11edb93baf2315d3222f;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var IframeLoader = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(IframeLoader, _LitElement);

    var _super = _createSuper(IframeLoader);

    function IframeLoader() {
      var _this;

      babelHelpers.classCallCheck(this, IframeLoader);
      _this = _super.call(this);
      _this.loading = true;
      _this.__iframeLoaded = false;
      _this.__iframeHeight = 100;
      _this.__iframe = null;
      _this.__mutationObserver = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
          if (mutation.target.offsetHeight) {
            // if we are still in the loading state
            if (_this.loading) {
              _this.__iframeHeight = mutation.target.offsetHeight;
            }
          }
        });
      });
      return _this;
    }

    babelHelpers.createClass(IframeLoader, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(IframeLoader.prototype), "disconnectedCallback", this).call(this);

        if (this.__iframe) {
          this.__iframe.removeEventListener("load", function (e) {
            setTimeout(function () {
              _this2.loading = false;

              if (e.path[0].height) {
                _this2.__iframeHeight = e.path[0].height;
              }
            }, 500);
          });
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(IframeLoader.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(IframeLoader.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        this.__observer = new _flattenedNodesObserver.FlattenedNodesObserver(this.shadowRoot.querySelector("slot"), function (info) {
          if (info.addedNodes.length > 0) {
            info.addedNodes.forEach(function (item) {
              var iframe = null;

              if (item.nodeName === "IFRAME") {
                iframe = item;
              } else if (item.querySelector) {
                var selector = item.querySelector("iframe");

                if (selector) {
                  iframe = selector;
                }
              }

              if (iframe) {
                _this3.__iframe = iframe; // Listen for new

                _this3.__iframe.addEventListener("load", function (e) {
                  setTimeout(function () {
                    _this3.loading = false;

                    if (e.path[0].height) {
                      _this3.__iframeHeight = e.path[0].height;
                    }
                  }, 500);
                });

                _this3.__mutationObserver.observe(_this3.__iframe, {
                  attributes: true
                });
              }
            });
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_7615b2204fbd11edb93baf2315d3222f || (_templateObject_7615b2204fbd11edb93baf2315d3222f = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"container\" class=\"", "\">\n        <div id=\"loading-screen\" style=\"height:", "px;\">\n          <loading-indicator></loading-indicator>\n        </div>\n        <div id=\"slot\" style=\"display: ", "\">\n          <slot></slot>\n        </div>\n      </div>\n    "])), this.loading ? "loading" : "loaded", this.__iframeHeight, this.loading ? "none" : "block");
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          loading: {
            type: Boolean
          },
          __iframeHeight: {
            type: Number
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return (0, _index.css)(_templateObject2_7615b2204fbd11edb93baf2315d3222f || (_templateObject2_7615b2204fbd11edb93baf2315d3222f = babelHelpers.taggedTemplateLiteral(["\n      :host {\n        display: block;\n      }\n      #container {\n        position: relative;\n      }\n      #loading-screen {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n      .loaded #loading-screen {\n        display: none;\n      }\n    "])));
      }
    }]);
    return IframeLoader;
  }(_index.LitElement);

  _exports.IframeLoader = IframeLoader;
  customElements.define("iframe-loader", IframeLoader);
});