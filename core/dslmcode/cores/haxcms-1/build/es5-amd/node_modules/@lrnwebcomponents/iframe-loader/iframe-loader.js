define(["exports", "meta", "../../lit/index.js", "./lib/loading-indicator.js"], function (_exports, meta, _index, _loadingIndicator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.IframeLoader = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_69c28650809211edaa2833647dc78c6c, _templateObject2_69c28650809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var IframeLoader = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(IframeLoader, _LitElement);

    var _super = _createSuper(IframeLoader);

    function IframeLoader() {
      var _this;

      babelHelpers.classCallCheck(this, IframeLoader);
      _this = _super.call(this);
      _this.disabled = false;
      _this.loading = true;
      _this.height = 100;
      _this.width = "100%";
      _this.__iframe = null; // if we have an initial iframe, go for it

      if (_this.querySelector('iframe')) {
        _this.__iframe = _this.querySelector('iframe');

        _this.__iframe.addEventListener("load", _this.iframeLoadingCallback.bind(babelHelpers.assertThisInitialized(_this))); // ensure source matches iframe source


        if (_this.__iframe.getAttribute('src')) {
          _this.source = _this.__iframe.getAttribute('src');
          _this.height = _this.__iframe.getAttribute('height') || _this.height;
          _this.width = _this.__iframe.getAttribute('width') || _this.width;
        }
      } else {
        _this.source = null;
      }

      _this.__mutationObserver = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
          if (mutation.target.offsetHeight) {
            // if we are still in the loading state
            if (_this.loading) {
              _this.height = mutation.target.offsetHeight;
            }
          }
        });
      });
      _this.__observer = new MutationObserver(function (mutations) {
        if (_this.querySelector('iframe')) {
          _this.__iframe = _this.querySelector('iframe');
          _this.source = _this.__iframe.getAttribute('src'); // Listen for new

          _this.__iframe.addEventListener("load", _this.iframeLoadingCallback.bind(babelHelpers.assertThisInitialized(_this)));

          _this.__mutationObserver.observe(_this.__iframe, {
            attributes: true
          });
        }
      });

      _this.__observer.observe(babelHelpers.assertThisInitialized(_this), {
        childList: true
      });

      return _this;
    }

    babelHelpers.createClass(IframeLoader, [{
      key: "iframeLoadingCallback",
      value: function iframeLoadingCallback(e) {
        var _this2 = this;

        setTimeout(function () {
          _this2.loading = false;

          if (e.path[0].height) {
            _this2.height = e.path[0].height;
          }
        }, 500);
      } // Support being an editing interface element for HAX

    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          preProcessNodeToContent: "haxpreProcessNodeToContent",
          editModeChanged: "haxeditModeChanged",
          activeElementChanged: "haxactiveElementChanged"
        };
      } // about to convert to content, ensure we are no longer the editable-table

    }, {
      key: "haxpreProcessNodeToContent",
      value: function () {
        var _haxpreProcessNodeToContent = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(node) {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  node.disabled = false;
                  return _context.abrupt("return", node);

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function haxpreProcessNodeToContent(_x) {
          return _haxpreProcessNodeToContent.apply(this, arguments);
        }

        return haxpreProcessNodeToContent;
      }() // ALWAYS enable edit mode if HAX is around

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        this.disabled = true;
        el.disabled = true;
        return el;
      } // allow HAX to toggle edit state when activated

    }, {
      key: "haxeditModeChanged",
      value: function haxeditModeChanged(val) {
        this.disabled = val;
      }
      /**
       * haxProperties integration via file reference
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(IframeLoader.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(IframeLoader.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        if (!this.querySelector('iframe')) {
          this.__iframe = document.createElement('iframe');

          this.__iframe.setAttribute('width', this.width);

          this.__iframe.setAttribute('height', this.height);

          this.__mutationObserver.observe(this.__iframe, {
            attributes: true
          });

          this.__iframe.setAttribute('src', this.source);

          this.appendChild(this.__iframe);
        }
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(IframeLoader.prototype), "disconnectedCallback", this).call(this);

        if (this.__iframe) {
          this.__iframe.removeEventListener("load", this.iframeLoadingCallback.bind(this));
        }

        this.__observer.disconnect();
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(IframeLoader.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(IframeLoader.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === 'source') {
            if (_this3.__iframe) {
              _this3.__iframe.setAttribute('src', _this3.source);
            } else {
              _this3.__iframe = document.createElement('iframe');

              _this3.__iframe.setAttribute('width', _this3.width);

              _this3.__iframe.setAttribute('height', _this3.height);

              _this3.__mutationObserver.observe(_this3.__iframe, {
                attributes: true
              });

              _this3.__iframe.setAttribute('src', _this3.source);

              _this3.appendChild(_this3.__iframe);
            }
          } else if (['height', 'width'].includes(propName)) {
            if (_this3.__iframe) {
              _this3.__iframe.setAttribute(propName, _this3[propName]);
            }
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_69c28650809211edaa2833647dc78c6c || (_templateObject_69c28650809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"container\" class=\"", "\">\n        <div id=\"loading-screen\" style=\"height:", "px;\">\n          <loading-indicator ?loading=\"", "\"></loading-indicator>\n        </div>\n        <div id=\"slot\" style=\"display: ", "\">\n          <slot></slot>\n        </div>\n      </div>\n    "])), this.loading ? "loading" : "loaded", this.height, this.loading, this.loading ? "none" : "block");
      }
    }], [{
      key: "tag",
      get: function get() {
        return "iframe-loader";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          loading: {
            type: Boolean
          },
          height: {
            type: String
          },
          width: {
            type: String
          },
          disabled: {
            type: Boolean,
            reflect: true
          },
          source: {
            type: String,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return (0, _index.css)(_templateObject2_69c28650809211edaa2833647dc78c6c || (_templateObject2_69c28650809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      :host {\n        display: block;\n      }\n      #container {\n        position: relative;\n      }\n      :host([disabled]) #container {\n        z-index: 1;\n        opacity: .2;\n        background-color: white;\n        transition: .3s linear all;\n      }\n      :host([disabled]) #container:hover {\n        opacity: .6;\n      }\n      :host([disabled]) #slot {\n        z-index: -1;\n        pointer-events: none;\n      }\n      #loading-screen {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n      .loaded #loading-screen {\n        display: none;\n      }\n    "])));
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }]);
    return IframeLoader;
  }(_index.LitElement);

  _exports.IframeLoader = IframeLoader;
  customElements.define(IframeLoader.tag, IframeLoader);
});