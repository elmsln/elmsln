define(["exports", "require", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/app-localize-behavior/app-localize-behavior.js", "../../../@polymer/polymer/lib/legacy/class.js", "../../../@polymer/iron-flex-layout/iron-flex-layout-classes.js", "../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../simple-icon/simple-icon.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-button.js"], function (_exports, _require, _polymerElement, _appLocalizeBehavior, _class, _ironFlexLayoutClasses, _domRepeat, _simpleIcon, _simpleIcons, _simpleIconButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EcoJsonSchemaArray = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_d4c79ff08e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  `eco-json-schema-array` takes in a JSON schema of type array and builds a form,
  exposing a `value` property that represents an array described by the schema.
  
  Please see the `eco-json-schema-object` documentation for further information.
  
  @group eco Elements
  @element eco-json-schema-array
  * @demo demo/index.html
  */
  var EcoJsonSchemaArray = /*#__PURE__*/function (_mixinBehaviors) {
    babelHelpers.inherits(EcoJsonSchemaArray, _mixinBehaviors);

    var _super = _createSuper(EcoJsonSchemaArray);

    function EcoJsonSchemaArray() {
      var _this;

      babelHelpers.classCallCheck(this, EcoJsonSchemaArray);
      _this = _super.call(this);
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["../../simple-tooltip/simple-tooltip.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../a11y-collapse/a11y-collapse.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../a11y-collapse/lib/a11y-collapse-group.js"], res, rej);
        });
      }, 0);
      return _this;
    }

    babelHelpers.createClass(EcoJsonSchemaArray, [{
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
    }, {
      key: "ready",
      value: function ready() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(EcoJsonSchemaArray.prototype), "ready", this).call(this);
        this.__headings = [];

        this._schemaChanged(); //update the headings if the data changes


        this.addEventListener("form-field-changed", function (e) {
          _this2._updateHeadings(e);
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var _this3 = this;

        this.removeEventListener("form-field-changed", function (e) {
          _this3._updateHeadings(e);
        });
        babelHelpers.get(babelHelpers.getPrototypeOf(EcoJsonSchemaArray.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * updates the array fields if the schema (which includes values) changes
       */

    }, {
      key: "_schemaChanged",
      value: function _schemaChanged() {
        var _this4 = this;

        //make sure the content is there first
        setTimeout(function () {
          var itemLabel = _this4.schema.items.itemLabel;

          if (_this4.schema && Array.isArray(_this4.schema.value)) {
            _this4.schema.value.forEach(function (val) {
              _this4.push("__headings", val[itemLabel]);
            });
          }

          _this4.shadowRoot.querySelectorAll(".item-fields").forEach(function (item) {
            var index = item.getAttribute("data-index"),
                propertyName = "".concat(_this4.propertyPrefix).concat(_this4.propertyName),
                prefix = "".concat(propertyName, ".").concat(index),
                //path = `${propertyName}.properties.${index}`,
            val = _this4.schema.value[index]; //for each array item, request the fields frrom eco-json-schema-object

            _this4.dispatchEvent(new CustomEvent("build-fieldset", {
              bubbles: false,
              cancelable: true,
              composed: true,
              detail: {
                container: item,
                path: propertyName,
                prefix: prefix,
                properties: _this4.schema.properties.map(function (prop) {
                  var newprop = JSON.parse(JSON.stringify(prop));
                  newprop.value = val[prop.name];
                  return newprop;
                }),
                type: EcoJsonSchemaArray.tag,
                value: _this4.schema.value || []
              }
            }));
          });
        }, 0);
      }
      /**
       * handles adding an array item
       * @param {event} e the add item button tap event
       */

    }, {
      key: "_onAddItem",
      value: function _onAddItem(e) {
        var val = {}; //add default values to the new item

        this.schema.properties.forEach(function (prop) {
          val[prop.name] = prop.value;
        });
        this.push("schema.value", val);
        this.notifyPath("schema.*");
        this.notifyPath("schema.value.*");

        this._schemaChanged();
      }
      /**
       * handles removing an array item
       * @param {event} e the remove item button tap event
       */

    }, {
      key: "_onRemoveItem",
      value: function _onRemoveItem(e) {
        //remove the data for an item at a given index
        var index = e.target.controls.replace(/item-/, "");
        this.splice("schema.value", index, 1);
        this.notifyPath("schema.*");
        this.notifyPath("schema.value.*");

        this._schemaChanged();
      }
      /**
       * updates the list expandable headings for each item
       * @param {event} e the event that triggers an update
       */

    }, {
      key: "_updateHeadings",
      value: function _updateHeadings(e) {
        var propname = e.detail.getAttribute("name"),
            val = e.detail.value,
            pathArr = propname ? propname.split(".") : [],
            index = pathArr.length > 2 ? pathArr[pathArr.length - 2] : null,
            update = e.detail.propertyName === this.schema.items.itemLabel ? val : this.__headings[index];
        if (index) this.set("__headings.".concat(index), update);
      }
      /**
       * labels the collapse heading based on a given property
       * @param {object} headings item the array item
       * @param {string} label prop the property that will populate the collapse heading
       * @param {number} index the index of the item
       * @returns {string} the expanable heading label
       */

    }, {
      key: "_getHeading",
      value: function _getHeading(headings, label, index) {
        //if there is no heading, number the item instead
        return this.__headings && this.__headings[index] && typeof this.__headings[index] === "string" && this.__headings[index].trim("") !== "" ? this.__headings[index].trim("") : label && typeof label === "string" && label.trim("") !== "" ? "".concat(label.trim(""), " ").concat(index + 1) : "Item ".concat(index + 1);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "eco-json-schema-array";
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_d4c79ff08e0011ed99ce491205e67b1d || (_templateObject_d4c79ff08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"iron-flex iron-flex-alignment\">\n        :host {\n          color: var(--eco-json-form-color);\n          background-color: var(--eco-json-form-bg);\n          font-family: var(--eco-json-form-font-family);\n        }\n        :host([hidden]),\n        [hidden] {\n          display: none;\n        }\n        :host fieldset {\n          border-radius: var(--eco-json-form-border-radius);\n          border-style: solid;\n          border-width: 1px;\n          border-color: var(--eco-json-form-faded-color);\n          transition: all 0.5s;\n        }\n        :host legend {\n          transition: all 0.5s;\n          color: var(--eco-json-form-faded-color);\n        }\n        :host fieldset:focus #legend,\n        :host fieldset:focus-within #legend {\n          color: var(--eco-json-form-active-color);\n        }\n        :host .array-item-button {\n          color: var(--eco-json-form-faded-color);\n          background-color: var(--eco-json-form-bg);\n          text-transform: none;\n          margin-bottom: 0;\n        }\n        :host .array-item-button:focus,\n        :host .array-item-button:hover {\n          color: var(--eco-json-form-active-color);\n        }\n        :host .add-array-item iron-icon {\n          padding: 8px;\n        }\n        :host .add-array-item {\n          color: var(--eco-json-form-add-color);\n          border-radius: 0 0 var(--eco-json-form-border-radius);\n          border: 1px solid var(--eco-json-form-bg);\n          margin: 0;\n          padding: 0 8px 0 16px;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n        }\n        :host .add-array-item:focus,\n        :host .add-array-item:hover {\n          color: var(--eco-json-form-add-color);\n          background-color: var(--eco-json-form-faded-bg);\n          border: 1px solid var(--eco-json-form-faded-color);\n        }\n        :host .remove-array-item {\n          color: var(--eco-json-form-remove-color);\n          background-color: var(--eco-json-form-bg);\n          margin: 15px 0 0 0;\n          border-radius: 100%;\n        }\n        :host .remove-array-item:focus,\n        :host .remove-array-item:hover {\n          color: var(--eco-json-form-remove-color);\n          background-color: var(--eco-json-form-faded-bg);\n        }\n        :host a11y-collapse-group {\n          margin: 0;\n          border-radius: var(--eco-json-form-border-radius);\n          --a11y-collapse-border: 1px solid var(--eco-json-form-faded-color);\n        }\n        :host a11y-collapse {\n          border: 1px solid var(--eco-json-form-bg);\n          --a11y-collapse-padding-right: 8px;\n          --a11y-collapse-heading-color: var(--eco-json-form-faded-color);\n          --a11y-collapse-heading-background-color: var(--eco-json-form-bg);\n          --a11y-collapse-heading-font-weight: normal;\n          --a11y-collapse-heading-margin: 0;\n          --a11y-collapse-icon-padding: 8px;\n        }\n        :host a11y-collapse:focus,\n        :host a11y-collapse:hover,\n        :host a11y-collapse[expanded] {\n          border: 1px solid var(--eco-json-form-faded-color);\n          --a11y-collapse-heading-color: var(--eco-json-form-color);\n          --a11y-collapse-heading-background-color: var(\n            --eco-json-form-faded-bg\n          );\n          --a11y-collapse-heading-font-weight: normal;\n          --a11y-collapse-heading-margin: 0;\n        }\n        :host p[slot=\"heading\"] {\n          margin: 0;\n        }\n        :host div[slot=\"content\"] > div {\n          width: 100%;\n          display: flex;\n          align-items: flex-end;\n          justify-content: space-between;\n        }\n        :host .item-fields {\n          flex: 1 0 auto;\n        }\n      </style>\n      <fieldset>\n        <legend id=\"legend\" class=\"flex\" hidden$=\"[[!schema.title]]\">\n          [[schema.title]]\n        </legend>\n        <a11y-collapse-group\n          id=\"form\"\n          icon=\"settings\"\n          class=\"vertical flex layout\"\n          global-options=\"[[globalOptions]]\"\n        >\n          <template is=\"dom-repeat\" items=\"[[schema.value]]\" as=\"item\">\n            <a11y-collapse\n              accordion\n              id$=\"item-[[index]]\"\n              icon$=\"[[globalOptions.icon]]\"\n              tooltip$=\"[[globalOptions.tooltip]]\"\n            >\n              <p slot=\"heading\">\n                [[_getHeading(__headings.*,schema.label,index)]]\n              </p>\n              <div slot=\"content\">\n                <div>\n                  <div\n                    id$=\"value-[[index]]\"\n                    class=\"item-fields\"\n                    data-index$=\"[[index]]\"\n                  ></div>\n                  <simple-icon-button\n                    id=\"remove-[[index]]\"\n                    icon=\"icons:delete\"\n                    aria-label=\"Remove this item\"\n                    aria-describedby=\"item-[[index]]\"\n                    class=\"remove-array-item array-item-button\"\n                    controls=\"item-[[index]]\"\n                    on-tap=\"_onRemoveItem\"\n                    role=\"button\"\n                  >\n                  </simple-icon-button>\n                  <simple-tooltip for=\"remove-[[index]]\"\n                    >Remove this item</simple-tooltip\n                  >\n                </div>\n              </div>\n            </a11y-collapse>\n          </template>\n        </a11y-collapse-group>\n        <button\n          class=\"add-array-item array-item-button\"\n          on-click=\"_onAddItem\"\n          role=\"button\"\n        >\n          Add an item\n          <simple-icon icon=\"add-circle\"></simple-icon>\n        </button>\n      </fieldset>\n    "])));
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          globalOptions: {
            type: Object,
            value: {
              icon: "settings",
              tooltip: "configure item"
            },
            notify: true
          },
          propertyName: {
            type: String,
            value: null
          },
          schema: {
            type: Object,
            value: {},
            notify: true,
            observer: "_schemaChanged"
          },
          __headings: {
            type: Array,
            value: [],
            notify: true
          }
        };
      }
    }]);
    return EcoJsonSchemaArray;
  }((0, _class.mixinBehaviors)([_appLocalizeBehavior.AppLocalizeBehavior], _polymerElement.PolymerElement));

  _exports.EcoJsonSchemaArray = EcoJsonSchemaArray;
  customElements.define(EcoJsonSchemaArray.tag, EcoJsonSchemaArray);
});