define(["exports", "require", "../../lit/index.js"], function (_exports, _require, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.JsonEditor = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_69df5d20809211edaa2833647dc78c6c, _templateObject2_69df5d20809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `json-editor`
   * `simple JSON blob data binding to a text area`
   * @demo demo/index.html
   * @element json-editor
   */
  var JsonEditor = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(JsonEditor, _LitElement);

    var _super = _createSuper(JsonEditor);

    function JsonEditor() {
      var _this;

      babelHelpers.classCallCheck(this, JsonEditor);
      _this = _super.call(this);
      _this.label = "JSON data";
      _this.error = false;
      _this.disabled = false;
      _this.maxRows = 0;
      _this.value = "";
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-input/paper-textarea.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(JsonEditor, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_69df5d20809211edaa2833647dc78c6c || (_templateObject_69df5d20809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <custom-style>\n        <style>\n          :host([error]) paper-textarea {\n            --iron-autogrow-textarea: {\n              background-color: #ffeeee;\n            }\n          }\n          paper-textarea {\n            --iron-autogrow-textarea: {\n              font-family: \"Lucida Console\", Monaco, monospace;\n              font-weight: 600;\n              white-space: pre;\n              line-height: 20px;\n              padding: 9.5px;\n              margin: 0 0 10px;\n              font-size: 13px;\n              color: #000000;\n              word-break: break-all;\n              word-wrap: break-word;\n              background-color: #f5f5f5;\n              border: 1px solid #ccc;\n              border-radius: 4px;\n              transition: 0.3s linear all;\n            }\n          }\n        </style>\n      </custom-style>\n      <paper-textarea\n        label=\"", "\"\n        value=\"", "\"\n        @value-changed=\"", "\"\n        error-message=\"Invalid JSON!\"\n        ?readonly=\"", "\"\n        ?invalid=\"", "\"\n        max-rows=\"", "\"\n      ></paper-textarea>"])), this.label, this.value, this.valueEvent, this.disabled, this.error, this.maxRows);
      } // properties available to the custom element for data binding

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          var notifiedProps = ["currentData", "value"];

          if (notifiedProps.includes(propName)) {
            // notify
            var eventName = "".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), "-changed");

            _this2.dispatchEvent(new CustomEvent(eventName, {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (propName == "value") {
            _this2.formatTest = _this2._computeFormattedValue(_this2[propName]);
            _this2.currentData = _this2._computeCurrentData(_this2[propName]);

            _this2._valueChanged(_this2[propName]);
          }
        });
      }
    }, {
      key: "valueEvent",
      value: function valueEvent(e) {
        this.value = e.detail.value;
      } // Observer value for changes

    }, {
      key: "_valueChanged",
      value: function _valueChanged(newValue, oldValue) {
        // try to evaluate this as json, otherwise return an error
        try {
          var v = JSON.parse(newValue);

          if (v) {
            this.error = false;
          }
        } catch (e) {
          this.error = true;
        }
      }
    }, {
      key: "_computeFormattedValue",
      value: function _computeFormattedValue(value) {
        try {
          var formatted = JSON.stringify(JSON.parse(formatted), null, 2);

          if (formatted !== value) {
            this.value = formatted;
          }
        } catch (e) {}
      }
      /**
       * Computed value based on parsing the value in question
       */

    }, {
      key: "_computeCurrentData",
      value: function _computeCurrentData(value) {
        try {
          return JSON.parse(value);
        } catch (e) {}
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_69df5d20809211edaa2833647dc78c6c || (_templateObject2_69df5d20809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(JsonEditor), "properties", this)), {}, {
          /**
           * label for the text area
           */
          label: {
            type: String
          },

          /**
           * State of being valid JSON object
           */
          error: {
            type: Boolean,
            reflect: true
          },

          /**
           * toggling disabled state of the editor
           */
          disabled: {
            type: Boolean,
            reflect: true
          },

          /**
           * max rows in the textarea
           */
          maxRows: {
            type: Number,
            reflect: true,
            attribute: "max-rows"
          },

          /**
           * String based value of the editor, use this to set initial value
           */
          value: {
            type: String,
            reflect: false
          },

          /**
           * format test to update value so it's pretty printed
           */
          formatTest: {
            type: String,
            attribute: "format-test"
          },

          /**
           * The current data object
           */
          currentData: {
            type: Object,
            attribute: "current-data"
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "json-editor";
      }
    }]);
    return JsonEditor;
  }(_index.LitElement);

  _exports.JsonEditor = JsonEditor;
  customElements.define(JsonEditor.tag, JsonEditor);
});