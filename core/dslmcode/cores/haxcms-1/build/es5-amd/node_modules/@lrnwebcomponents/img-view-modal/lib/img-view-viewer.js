define(["exports", "require", "../../../lit/index.js", "../../img-pan-zoom/img-pan-zoom.js", "../../fullscreen-behaviors/fullscreen-behaviors.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../utils/utils.js"], function (_exports, _require, _index, _imgPanZoom, _fullscreenBehaviors, _simpleIconLite, _simpleIcons, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ImgViewViewer = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_a0e86a00809211edaa2833647dc78c6c, _templateObject2_a0e86a00809211edaa2833647dc78c6c, _templateObject3_a0e86a00809211edaa2833647dc78c6c, _templateObject4_a0e86a00809211edaa2833647dc78c6c, _templateObject5_a0e86a00809211edaa2833647dc78c6c, _templateObject6_a0e86a00809211edaa2833647dc78c6c, _templateObject7_a0e86a00809211edaa2833647dc78c6c, _templateObject8_a0e86a00809211edaa2833647dc78c6c, _templateObject9_a0e86a00809211edaa2833647dc78c6c, _templateObject10_a0e86a00809211edaa2833647dc78c6c, _templateObject11_a0e86a00809211edaa2833647dc78c6c, _templateObject12_a0e86a00809211edaa2833647dc78c6c, _templateObject13_a0e86a00809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `img-view-viewer`
   * Combines img-pan-zoom and simple-modal for an easy image zoom solution
   * 
  ### Styling
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--img-view-viewer-height` | viewer height | 500px
  `--img-view-viewer-backgroundColor` | background color | white
  `--img-view-viewer-color` | text color | black
  `--img-view-viewer-borderColor` | border color | #ddd
  `--img-view-viewer-toggled-backgroundColor` | background color of toggled buttons and kbd commands | #eee
   *
   * @demo demo/viewer.html
   * @element img-view-viewer
   * 
   */
  var ImgViewViewer = /*#__PURE__*/function (_FullscreenBehaviors) {
    babelHelpers.inherits(ImgViewViewer, _FullscreenBehaviors);

    var _super = _createSuper(ImgViewViewer);

    function ImgViewViewer() {
      var _this;

      babelHelpers.classCallCheck(this, ImgViewViewer);
      _this = _super.call(this);
      _this.minZoomImageRatio = 1;
      _this.maxZoomPixelRatio = 3;
      _this.__screenfullLoaded = false;
      new Promise(function (res, rej) {
        return _require.default(["../../simple-tooltip/simple-tooltip.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(ImgViewViewer, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_a0e86a00809211edaa2833647dc78c6c || (_templateObject_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      ", "\n      <div id=\"container\">\n        ", "\n        <div>\n          <div\n            id=\"viewer\"\n            style=\"height:calc(var(--img-view-viewer-height, 500px) - ", "px)\"\n          ></div>\n        </div>\n        <div id=\"placeholder\">\n          <div id=\"info\" ?hidden=\"", "\">", "</div>\n        </div>\n        ", "\n      </div>\n    "])), !this.dzi ? (0, _index.html)(_templateObject2_a0e86a00809211edaa2833647dc78c6c || (_templateObject2_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n            ", "\n          "])), this.hideSpinner ? "" : (0, _index.html)(_templateObject3_a0e86a00809211edaa2833647dc78c6c || (_templateObject3_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n                  <div id=\"loader\" ?hidden=\"", "\">\n                    <hexagon-loader\n                      ?loading=", "\n                      item-count=\"4\"\n                    ></hexagon-loader>\n                  </div>\n                  <img-loader\n                    ?loaded=\"", "\"\n                    @loaded-changed=\"", "\"\n                    ?loading=\"", "\"\n                    @loading-changed=\"", "\"\n                    src=\"", "\"\n                    described-by=\"", "\"\n                  ></img-loader>\n                "])), this.loaded, this.loading || !this.loaded, this.loaded, this.loadedChangedEvent, this.loading, this.loadingChangedEvent, this.loadSrc, this.describedBy || "")) : "", this.getToolbars("top"), this.toolbarsHeight, !this.info, this.info, this.getToolbars("bottom"));
      }
    }, {
      key: "toolbarsHeight",
      get: function get() {
        var height = 0,
            toolbars = this.customToolbars || this.toolbars;
        if (toolbars.top) height += 52;
        if (toolbars.bottom) height += 52;
        return height;
      }
    }, {
      key: "getToolbars",
      value: function getToolbars() {
        var topOrBottom = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "bottom";
        var toolbars = this.customToolbars || this.toolbars,
            toolbar = toolbars && toolbars[topOrBottom] ? toolbars[topOrBottom] : false,
            div = toolbar ? this._item(toolbar, topOrBottom === "top") : "";
        return div;
      }
      /**
       * default home button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "homebutton",
      get: function get() {
        return {
          id: "homebutton",
          icon: "home",
          text: "return image to home position"
        };
      }
      /**
       * default toggle fullscreen button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "fullscreenbutton",
      get: function get() {
        return {
          id: "fullscreenbutton",
          icon: "fullscreen",
          toggleProp: "__fullscreen",
          enabledProp: "fullscreenEnabled",
          text: (0, _index.html)(_templateObject4_a0e86a00809211edaa2833647dc78c6c || (_templateObject4_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" toggle fullscreen "])))
        };
      }
      /**
       * element to make fullscreen, can be overidden
       *
       * @readonly
       */

    }, {
      key: "fullscreenTarget",
      get: function get() {
        return this.shadowRoot && this.shadowRoot.querySelector("#container") ? this.shadowRoot.querySelector("#container") : this;
      }
      /**
       * default toggle navigate window button configuration
       * Uses <a href="https://openseadragon.github.io/examples/ui-viewport-navigator/">Viewport Navigator</a>
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "navigatorbutton",
      get: function get() {
        return {
          id: "navigatorbutton",
          icon: "picture-in-picture",
          toggleProp: "navigatorToggled",
          shownProp: "showNavigator",
          enabledProp: "showNavigator",
          text: "toggle nav window"
        };
      }
      /**
       * default toggle info button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "infobutton",
      get: function get() {
        return {
          id: "infobutton",
          icon: "info-outline",
          toggleProp: "infoToggled",
          hiddenProp: "noSources",
          text: "toggle information"
        };
      }
      /**
       * default toggle keyboard shorcuts help button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "kbdbutton",
      get: function get() {
        return {
          id: "kbdbutton",
          icon: "help-outline",
          toggleProp: "kbdToggled",
          text: "toggle keyboard shorcuts help",
          details: (0, _index.html)(_templateObject5_a0e86a00809211edaa2833647dc78c6c || (_templateObject5_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        <table>\n          <caption>\n            Keyboard Shortcuts (when image has focus)\n          </caption>\n          <tbody>\n            <tr>\n              <th scope=\"row\">pan\xA0up</th>\n              <td><kbd>w</kbd> or <kbd>&uarr;</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">pan\xA0down</th>\n              <td><kbd>s</kbd> or <kbd>&darr;</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">pan left</th>\n              <td><kbd>a</kbd> or <kbd>&larr;</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">pan\xA0right</th>\n              <td><kbd>d</kbd> or <kbd>&rarr;</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">home</th>\n              <td><kbd>0</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">zoom out</th>\n              <td><kbd>-</kbd> or <kbd>_</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">zoom in</th>\n              <td><kbd>+</kbd> or <kbd>=</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">rotate clockwise</th>\n              <td><kbd>r</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">rotate counterclockwise</th>\n              <td><kbd>shift+r</kbd></td>\n            </tr>\n          </tbody>\n        </table>\n      "])))
        };
      }
      /**
       * default flip horizontal button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "flipbutton",
      get: function get() {
        return {
          id: "flipbutton",
          icon: "image:flip",
          text: "flip horizontal",
          toggleProp: "flipToggled"
        };
      }
      /**
       * default rotate button group configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "rotategroup",
      get: function get() {
        return {
          id: "rotategroup",
          type: "toolbar-group",
          contents: [this.rotateccwbutton, this.rotatecwbutton]
        };
      }
      /**
       * default rotate counterclockwise button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "rotateccwbutton",
      get: function get() {
        return {
          id: "rotateccwbutton",
          icon: "image:rotate-left",
          text: "rotate counterclockwise"
        };
      }
      /**
       * default rotate counter button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "rotatecwbutton",
      get: function get() {
        return {
          id: "rotatecwbutton",
          icon: "image:rotate-right",
          text: "rotate clockwise"
        };
      }
      /**
       * default pan button group configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "pangroup",
      get: function get() {
        return {
          id: "pangroup",
          type: "toolbar-group",
          contents: [this.panleftbutton, this.panupbutton, this.pandownbutton, this.panrightbutton]
        };
      }
      /**
       * default pan left button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "panleftbutton",
      get: function get() {
        return {
          id: "panleftbutton",
          icon: "arrow-back",
          text: "pan left"
        };
      }
      /**
       * default pan up button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "panupbutton",
      get: function get() {
        return {
          id: "panupbutton",
          icon: "arrow-upward",
          text: "pan up"
        };
      }
      /**
       * default pan down button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "pandownbutton",
      get: function get() {
        return {
          id: "pandownbutton",
          icon: "arrow-downward",
          text: "pan down"
        };
      }
      /**
       * default pan right button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "panrightbutton",
      get: function get() {
        return {
          id: "panrightbutton",
          icon: "arrow-forward",
          text: "pan right"
        };
      }
      /**
       * default zoom button group configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "zoomgroup",
      get: function get() {
        return {
          id: "zoomgroup",
          type: "toolbar-group",
          contents: [this.zoominbutton, this.zoomoutbutton]
        };
      }
      /**
       * default zoom in button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "zoominbutton",
      get: function get() {
        return {
          id: "zoominbutton",
          icon: "zoom-in",
          text: "zoom in"
        };
      }
      /**
       * default zoom out button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "zoomoutbutton",
      get: function get() {
        return {
          id: "zoomoutbutton",
          icon: "zoom-out",
          text: "zoom out"
        };
      }
      /**
       * default prev button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "prevbutton",
      get: function get() {
        return {
          id: "prevbutton",
          showText: true,
          icon: "chevron-left",
          text: "prev",
          disabledProp: "prevDisabled",
          flexGrow: true
        };
      }
      /**
       * default next button configuration
       * @return {object} as { id, icon, iconRight, text, and showText }
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "nextbutton",
      get: function get() {
        return {
          id: "nextbutton",
          icon: "chevron-right",
          iconRight: true,
          disabledProp: "nextDisabled",
          text: "next",
          showText: true,
          flexGrow: true
        };
      }
    }, {
      key: "pages",
      get: function get() {
        return this.figures || [];
      }
    }, {
      key: "noSources",
      get: function get() {
        this.pages.length === 0;
      }
    }, {
      key: "prevDisabled",
      get: function get() {
        return this.page <= 0;
      }
    }, {
      key: "nextDisabled",
      get: function get() {
        return this.page + 1 >= this.pages.length;
      }
    }, {
      key: "info",
      get: function get() {
        return this.kbdToggled && this.kbdbutton.details ? this.kbdbutton.details : this.infoToggled && this.figures && this.figures[this.page] && this.figures[this.page].info ? this.figures[this.page].info : undefined;
      }
      /**
       * default x of y text for toolbar
       * @returns {string} 'x of y'
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "pageXofY",
      get: function get() {
        return "".concat((this.page || 0) + 1, " of ").concat(this.pages.length);
      }
    }, {
      key: "navXofY",
      get: function get() {
        var _this2 = this;

        return {
          id: "navXofY",
          type: "misc-item",
          contents: (0, _index.html)(_templateObject6_a0e86a00809211edaa2833647dc78c6c || (_templateObject6_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        <p>\n          <label for=\"pageX\" class=\"sr-only\">Page</label>\n          <input\n            ?disabled=\"", "\"\n            id=\"pageX\"\n            type=\"number\"\n            min=\"1\"\n            max=\"", "\"\n            value=\"", "\"\n            @change=\"", "\"\n          />\n          of ", "\n        </p>\n      "])), this.disabled, this.pages.length, this.page + 1, function (e) {
            return _this2._xOfYClick(e, _this2.disabled);
          }, this.pages.length)
        };
      }
      /**
       * default toolbar config object,
       * where "top" contains config for toolbar above image(s),
       * and "bottom" contains config for toolbar above image(s)
       * @return {object} as { top: { id="top", contents:[]},  id="bottom", contents:[]}, }
       *
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "defaultToolbars",
      get: function get() {
        return {
          bottom: {
            id: "bottom",
            type: "toolbar-group",
            contents: ["prevbutton", "homebutton", "rotategroup", "zoomgroup", "pageXofY", "pangroup", "fullscreenbutton", "nextbutton"]
          }
        };
      }
      /**
       * makes a toolbar item from config
       *  TOOLBAR CONFIG SCHEMA: {
       *    id : {{itemid / certain ids have default configs and bindings that can be used or overridden}},
       *    config: {{if item is a button, button config}},
       *    contents: {{if item is a group, string of text or array of items}},
       *  }
       * @param {*} [config={}]
       * @param {boolean} [top=false] on top toolbar?
       * @memberof imgViewViewer
       */

    }, {
      key: "_item",
      value: function _item() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (typeof config === "string" && this[config]) config = this[config];

        if (babelHelpers.typeof(config) !== "object") {
          return (0, _index.html)(_templateObject7_a0e86a00809211edaa2833647dc78c6c || (_templateObject7_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <div class=\"misc-item\">", "</div> "])), config);
        } else if (config && babelHelpers.typeof(config.contents) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          return this._button(config, top);
        } else {
          return this._group(config, top);
        }
      }
      /**
       * makes a toolbar group from config
       *  GROUP CONFIG SCHEMA: {
       *    id : {{groupid / certain ids have default item groupings that can be used or overridden}},
       *    type: {{group type to add to classlist}},
       *    contents: {{sting of text content or array of items in the group}}
       *  }
       * @param {object} [config={}]
       * @param {boolean} [top=false] on top toolbar?
       * @returns toolbar group html template
       * @memberof imgViewViewer
       */

    }, {
      key: "_group",
      value: function _group() {
        var _this3 = this;

        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (typeof config === "string" && this[config]) config = this[config];
        return !config ? "" : (0, _index.html)(_templateObject8_a0e86a00809211edaa2833647dc78c6c || (_templateObject8_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n          <div\n            .id=\"", "\"\n            class=\"button-group ", "\"\n          >\n            ", "\n          </div>\n        "])), config.id || undefined, config.type || "", !Array.isArray(config.contents) ? config.contents : (config.contents || []).map(function (item) {
          return _this3._item(item, top);
        }));
      }
      /**
       * makes a toolbar button from config
       *  BUTTON CONFIG SCHEMA: {
       *    toggleProp : {{optional: if button toggles, property button toggles}},
       *    enabledProp : {{optional: disable button if prop is false}},
       *    disabledProp : {{optional: prop to make button disabled}},
       *    shownProp : {{optional: hide button if prop is false}},
       *    hiddenProp : {{optional: prop to make button hidden}},
       *    icon: {{button icon}},
       *    iconRight: {{show icon to the right of text intead of left}},
       *    text: {{button text / default tooltip}},
       *    showText: {{show button text even if button has an icon}},
       *    tooltip: {{override button text as tooltip}}
       *  }
       * @param {object} [config={}]
       * @param {boolean} [top=false] on top toolbar?
       * @returns button html template
       * @memberof imgViewViewer
       */

    }, {
      key: "_button",
      value: function _button() {
        var _this4 = this;

        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (typeof config === "string" && this[config]) config = this[config]; //if (config) this._bindButton(config.id, config.tooltip || config.text);

        return !config ? "" : !config.toggleProp || !this[config.toggleProp] ? (0, _index.html)(_templateObject9_a0e86a00809211edaa2833647dc78c6c || (_templateObject9_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n          <button\n            .id=\"", "\"\n            class=\"", "\"\n            @click=\"", "\"\n            controls=\"container\"\n            ?disabled=\"", "\"\n            ?hidden=\"", "\"\n          >\n            ", "\n          </button>\n          ", "\n        "])), config.id || undefined, this._buttonClass(config), function (e) {
          return _this4._toolbarButtonClick(config.id, e, _this4._buttonDisabled(config));
        }, this._buttonDisabled(config), this._buttonHidden(config), this._buttonInner(config), this._buttonTooltip(config, top)) : (0, _index.html)(_templateObject10_a0e86a00809211edaa2833647dc78c6c || (_templateObject10_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n          <button\n            .id=\"", "\"\n            aria-pressed=\"", "\"\n            class=\"", "\"\n            @click=\"", "\"\n            controls=\"container\"\n            ?disabled=\"", "\"\n            ?hidden=\"", "\"\n          >\n            ", " ", "\n          </button>\n        "])), config.id || undefined, this[config.toggleProp] ? "true" : "false", this._buttonClass(config), function (e) {
          return _this4._toolbarButtonClick(config.id, e, _this4._buttonDisabled(config));
        }, this._buttonDisabled(config), this._buttonHidden(config), this._buttonInner(config), this._buttonTooltip(config));
      }
    }, {
      key: "_buttonDisabled",
      value: function _buttonDisabled(config) {
        return config.disabledProp && this[config.disabledProp] || config.enabledProp && !this[config.enabledProp] || this.disabled;
      }
    }, {
      key: "_buttonHidden",
      value: function _buttonHidden(config) {
        return config.hiddenProp && this[config.hiddenProp] || config.shownProp && !this[config.shownProp];
      }
    }, {
      key: "_buttonClass",
      value: function _buttonClass(config) {
        return "".concat(config.iconRight ? "icon-right" : "").concat(config.flexGrow ? " flex-grow" : "");
      }
    }, {
      key: "_buttonInner",
      value: function _buttonInner(config) {
        return !config ? "" : (0, _index.html)(_templateObject11_a0e86a00809211edaa2833647dc78c6c || (_templateObject11_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n          <p>\n            <simple-icon-lite\n              aria-hidden=\"true\"\n              icon=\"", "\"\n            ></simple-icon-lite>\n            <span class=\"", "\"\n              >", "</span\n            >\n          </p>\n        "])), config.icon, config.icon && !config.showText ? "sr-only" : "", config.text);
      }
    }, {
      key: "_buttonTooltip",
      value: function _buttonTooltip(config) {
        var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return !config || !config.id ? "" : (0, _index.html)(_templateObject12_a0e86a00809211edaa2833647dc78c6c || (_templateObject12_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n          <simple-tooltip\n            for=\"", "\"\n            position=\"", "\"\n            >", "</simple-tooltip\n          >\n        "])), config.id, top ? "bottom" : "top", config.text);
      }
    }, {
      key: "src",
      get: function get() {
        return this.figures && this.figures[0] ? this.figures[0].src : undefined;
      }
    }, {
      key: "loadSrc",
      get: function get() {
        return this.figures && this.figures[this.page] ? this.figures[this.page].src : undefined;
      }
    }, {
      key: "sources",
      get: function get() {
        return this.figures ? this.figures.map(function (fig) {
          return fig.src;
        }).slice(1) : undefined;
      }
      /**
       * overrides fullscreen API
       *
       * @param {boolean} toggle on or off, default is opposite current state
       */

    }, {
      key: "_setFullscreen",
      value: function _setFullscreen(mode) {
        return;
      }
    }, {
      key: "_toolbarButtonClick",
      value: function _toolbarButtonClick(buttonId, e) {
        var disabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (!disabled) {
          /**
           * Fires when constructed, so that parent radio group can listen for it.
           *
           * @event toolbar-button-click
           */
          this.dispatchEvent(new CustomEvent("toolbar-button-click", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              buttonId: buttonId,
              eventType: e,
              viewer: this
            }
          }));
          if (buttonId === "homebutton") this.resetZoom();
          if (buttonId === "panupbutton") this.pan(0, 0.2);
          if (buttonId === "pandownbutton") this.pan(0, -0.2);
          if (buttonId === "panleftbutton") this.pan(0.2, 0);
          if (buttonId === "panrightbutton") this.pan(-0.2, 0);
          if (buttonId === "zoominbutton") this.zoomIn(0.2);
          if (buttonId === "zoomoutbutton") this.zoomOut(0.2);
          if (buttonId === "rotateccwbutton") this.rotate(-90);
          if (buttonId === "rotatecwbutton") this.rotate(90);
          if (buttonId === "navigatorbutton") this.navigatorToggled = !this.navigatorToggled;
          if (buttonId === "fullscreenbutton") this.toggleFullscreen();
          if (buttonId === "flipbutton") this.flipToggled = !this.flipToggled;

          if (buttonId === "infobutton") {
            this.kbdToggled = false;
            this.infoToggled = !this.infoToggled;
          }

          if (buttonId === "kbdbutton") {
            this.infoToggled = false;
            this.kbdToggled = !this.kbdToggled;
          }

          if (buttonId === "nextbutton") {
            this.page = Math.min(this.page + 1, this.pages.length - 1);
          }

          if (buttonId === "prevbutton") {
            this.page = Math.max(0, this.page - 1);
          }
        }
      }
    }, {
      key: "_xOfYClick",
      value: function _xOfYClick(e, disabled) {
        this._toolbarButtonClick("navXofY", e, disabled);

        if (!disabled) this.goToPageXofY(e);
      }
    }, {
      key: "goToPageXofY",
      value: function goToPageXofY(e) {
        var eventPath = (0, _utils.normalizeEventPath)(e);
        this.page = eventPath ? eventPath[0].value - 1 : e.target.value;
      }
    }, {
      key: "loadedChangedEvent",
      value: function loadedChangedEvent(e) {
        this.loaded = e.detail.value;

        if (this.loaded) {
          this.loading = false;
        }
      }
    }, {
      key: "loadingChangedEvent",
      value: function loadingChangedEvent(e) {
        this.loading = e.detail.value;
      }
    }, {
      key: "_addImage",
      value: function _addImage() {
        this.viewer.addSimpleImage({
          url: this.loadSrc,
          index: this.page,
          clone: true
        });
      }
    }, {
      key: "_addTiledImage",
      value: function _addTiledImage() {
        this.viewer.addTiledImage({
          tileSource: this.loadSrc,
          index: this.page,
          clone: true
        });
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject13_a0e86a00809211edaa2833647dc78c6c || (_templateObject13_a0e86a00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          height: var(--img-view-viewer-height, 500px);\n          --hexagon-color: var(--img-view-viewer-focus-borderColor, blue);\n        }\n        :host([hidden]),\n        *[hidden] {\n          display: none !important;\n        }\n        .sr-only {\n          position: absolute;\n          left: -9999999px;\n          width: 0;\n          overflow: hidden;\n        }\n        #viewer {\n          display: block;\n          position: relative;\n          height: calc(var(--img-view-viewer-height, 500px) - 104px);\n          width: auto;\n          border: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n        #loader {\n          display: none;\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: space-around;\n          width: 100%;\n          height: var(--img-view-viewer-height, 500px);\n          margin-bottom: calc(0px - var(--img-view-viewer-height, 104px));\n          z-index: 1;\n        }\n        hexagon-loader {\n          position: absolute;\n          opacity: 0;\n          transition: opacity 700ms;\n          margin: auto;\n        }\n        hexagon-loader[loading] {\n          opacity: 1;\n        }\n        #container {\n          display: flex;\n          flex-direction: column;\n          align-items: stretch;\n          justify-content: space-between;\n          height: 100%;\n          background-color: var(--img-view-viewer-backgroundColor, white);\n          color: var(--img-view-viewer-color, black);\n        }\n        #container > * {\n          flex: 1 1 auto;\n        }\n        .misc-item,\n        .button-group {\n          display: flex;\n          align-items: stretch;\n          justify-content: center;\n        }\n        .misc-item {\n          align-items: center;\n          padding: 5px;\n        }\n        #top,\n        #bottom {\n          margin: 0;\n          flex: 1 0 46px;\n          border: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n        #top > *,\n        #bottom > * {\n          margin: 0;\n        }\n        #top > *:not(:first-child),\n        #bottom > *:not(:first-child) {\n          border-left: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n        button {\n          border: none;\n          background-color: transparent;\n          color: var(--img-view-viewer-color);\n        }\n        button[disabled] {\n          opacity: 0.5;\n          cursor: not-allowed;\n        }\n        button.flex-grow {\n          flex: 1 0 auto;\n        }\n        button p {\n          display: flex;\n          align-items: center;\n          justify-content: flex-start;\n        }\n        button.icon-right p {\n          flex-direction: row-reverse;\n          justify-content: end;\n        }\n        button[aria-pressed=\"true\"] {\n          --img-view-viewer-backgroundColor: var(\n            --img-view-viewer-toggled-backgroundColor,\n            #eee\n          );\n        }\n\n        button:focus,\n        button:hover,\n        #viewer:focus-within {\n          outline: 1px solid var(--img-view-viewer-focus-borderColor, blue);\n          z-index: 2;\n        }\n        simple-tooltip:not(:defined) {\n          display: none;\n        }\n        #placeholder {\n          position: relative;\n          max-height: 0;\n          overflow: visible;\n        }\n        #info {\n          position: absolute;\n          bottom: 0;\n          right: 0;\n          padding: 5px;\n          background-color: var(--img-view-viewer-backgroundColor, white);\n          border: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n        table {\n          border-collapse: collapse;\n        }\n        th,\n        td {\n          padding: 2px 5px;\n          line-height: 140%;\n          border-top: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n        th {\n          font-weight: normal;\n          text-align: left;\n        }\n        kbd {\n          border-radius: 2px;\n          padding: 1px 3px;\n          font-family: sans-serif;\n          font-size: 80%;\n          background: var(--img-view-viewer-toggled-backgroundColor, #eee);\n          border: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n        input[type=\"number\"] {\n          max-width: 4em;\n          border: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "img-view-viewer";
      }
    }, {
      key: "properties",
      get: function get() {
        var props = _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(ImgViewViewer), "properties", this));

        delete props.src;
        delete props.sources;
        return _objectSpread(_objectSpread({}, props), {}, {
          disabled: {
            type: Boolean,
            reflect: true,
            attribute: "disabled"
          },
          figures: {
            type: Array
          },

          /**
           * whether info mode is toggled
           */
          infoToggled: {
            type: Boolean,
            attribute: "info-mode",
            reflect: true
          },

          /**
           * whether keyboard shortcuts help mode is toggled
           */
          kbdToggled: {
            type: Boolean,
            attribute: "keyboard-help-mode",
            reflect: true
          },

          /**
           * if used with multiple images and paged navigation, index of current item
           */
          toolbars: {
            type: Object,
            attribute: "toolbars",
            reflect: true
          },
          __screenfullLoaded: {
            type: Boolean
          }
        });
      }
    }]);
    return ImgViewViewer;
  }((0, _fullscreenBehaviors.FullscreenBehaviors)(_imgPanZoom.ImgPanZoom));

  _exports.ImgViewViewer = ImgViewViewer;
  customElements.define(ImgViewViewer.tag, ImgViewViewer);
});