define(["exports", "../../lit/index.js", "../intersection-element/lib/IntersectionObserverMixin.js", "./lib/countup.js"], function (_exports, _index, _IntersectionObserverMixin, _countup) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "CountUp", {
    enumerable: true,
    get: function get() {
      return _countup.CountUp;
    }
  });
  _exports.CountUpElement = void 0;

  var _templateObject_64246240809211edaa2833647dc78c6c, _templateObject2_64246240809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `count-up`
   * `count up js wrapper with minimal styling`
   * @litElement
   * @demo demo/index.html
   * @element count-up
   */
  var CountUpElement = /*#__PURE__*/function (_IntersectionObserver) {
    babelHelpers.inherits(CountUpElement, _IntersectionObserver);

    var _super = _createSuper(CountUpElement);

    function CountUpElement() {
      var _this;

      babelHelpers.classCallCheck(this, CountUpElement);
      _this = _super.call(this);
      _this.start = 0;
      _this.end = 100;
      _this.duration = 2.5;
      _this.noeasing = false;
      _this.decimalplaces = 0;
      _this.separator = ",";
      _this.decimal = ".";
      _this.prefixtext = " ";
      _this.suffixtext = " ";
      return _this;
    }
    /**
     * LitElement ready
     */


    babelHelpers.createClass(CountUpElement, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_64246240809211edaa2833647dc78c6c || (_templateObject_64246240809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <div class=\"wrapper\">\n      <slot name=\"prefix\"></slot>\n      <div id=\"counter\"></div>\n      <slot name=\"suffix\"></slot>\n    </div>"])));
      } // haxProperty definition

    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        var options = {
          startVal: this.start,
          decimalPlaces: this.decimalplaces,
          duration: this.duration,
          useEasing: !this.noeasing,
          separator: this.separator,
          decimal: this.decimal,
          prefix: this.prefixtext,
          suffix: this.suffixtext
        };
        this._countUp = new _countup.CountUp(this.shadowRoot.querySelector("#counter"), this.end, options);
      }
      /**
       * When our interection element claims we are visible then
       * we can start counting
       */

    }, {
      key: "updated",
      value: function updated(propertiesChanged) {
        var _this2 = this;

        propertiesChanged.forEach(function (oldValue, propName) {
          if (propName == "elementVisible" && _this2[propName]) {
            _this2._countUp.start();
          }
        });
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_64246240809211edaa2833647dc78c6c || (_templateObject2_64246240809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n          --count-up-color: #000000;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        .wrapper {\n          display: block;\n          text-align: center;\n          width: 100%;\n          height: 100%;\n        }\n\n        #counter {\n          color: var(--count-up-color);\n          font-weight: var(--count-up-number-font-weight);\n          font-size: var(--count-up-number-font-size);\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Count up",
            description: "count up js wrapper with minimal styling",
            icon: "icons:android",
            color: "green",
            groups: ["Up"],
            handles: [],
            meta: {
              author: "HAXTheWeb core team",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "start",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "end",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "duration",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "noeasing",
              description: "",
              inputMethod: "boolean"
            }, {
              property: "decimalplaces",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "separator",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "decimal",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "prefix",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "suffix",
              description: "",
              inputMethod: "textfield"
            }],
            advanced: []
          },
          saveOptions: {
            unsetAttributes: ["element-visible"]
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(CountUpElement), "properties", this)), {}, {
          /**
           * Starting point for counting
           */
          start: {
            type: Number
          },

          /**
           * End point for counting stopping
           */
          end: {
            type: Number
          },

          /**
           * Duration to count
           */
          duration: {
            type: Number
          },

          /**
           * Disable easing animation
           */
          noeasing: {
            type: Boolean
          },

          /**
           * decimal places to show
           */
          decimalplaces: {
            type: Number
          },

          /**
           * separator for 100s groupings
           */
          separator: {
            type: String
          },

          /**
           * decimal point character
           */
          decimal: {
            type: String
          },

          /**
           * prefix string before the number counting
           */
          prefixtext: {
            type: String
          },

          /**
           * suffix string after the number counting
           */
          suffixtext: {
            type: String
          },
          thresholds: {
            type: Array
          },
          rootMargin: {
            type: String,
            attribute: "root-margin"
          },
          ratio: {
            type: Number,
            reflect: true
          },
          elementVisible: {
            type: Boolean
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "count-up";
      }
    }]);
    return CountUpElement;
  }((0, _IntersectionObserverMixin.IntersectionObserverMixin)(_index.LitElement));

  _exports.CountUpElement = CountUpElement;
  customElements.define(CountUpElement.tag, CountUpElement);
});