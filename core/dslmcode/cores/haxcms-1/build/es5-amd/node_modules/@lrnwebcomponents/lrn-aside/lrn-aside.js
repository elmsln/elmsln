define(["exports", "require", "../../lit/index.js"], function (_exports, _require, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnAside = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_611a2f80809211edaa2833647dc78c6c, _templateObject2_611a2f80809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrn-aside`
   * A content aside as a panel
   * @demo demo/index.html
   * @element lrn-aside
   */
  var LrnAside = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(LrnAside, _LitElement);

    var _super = _createSuper(LrnAside);

    function LrnAside() {
      var _this;

      babelHelpers.classCallCheck(this, LrnAside);
      _this = _super.call(this);
      _this.title = "Related content";
      _this.sticky = false;
      _this.direction = "";
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["../lrndesign-panelcard/lrndesign-panelcard.js"], res, rej);
        });
      }, 0);
      return _this;
    }

    babelHelpers.createClass(LrnAside, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_611a2f80809211edaa2833647dc78c6c || (_templateObject_611a2f80809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <aside>\n        <lrndesign-panelcard title=\"", "\">\n          <slot></slot>\n        </lrndesign-panelcard>\n      </aside>\n    "])), this.title);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_611a2f80809211edaa2833647dc78c6c || (_templateObject2_611a2f80809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: flex;\n          padding: 8px;\n        }\n        :host([sticky]) {\n          top: 0;\n          position: sticky;\n        }\n        :host([direction=\"left\"]) {\n          float: left;\n          max-width: 480px;\n        }\n        :host([direction=\"right\"]) {\n          float: right;\n          max-width: 480px;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrn-aside";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title for the aside.
           */
          title: {
            type: String
          },

          /**
           * Apply CSS sticky styling
           */
          sticky: {
            type: Boolean,
            reflect: true
          },

          /**
           * Direction to hang off UI if sticky, left or right.
           */
          direction: {
            type: String,
            reflect: true
          }
        };
      }
      /**
       * Attached to the DOM, now fire.
       */

    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Sticky note",
            description: "A sticky note to present some basic info offset on the page.",
            icon: "av:note",
            color: "yellow",
            groups: ["Content"],
            handles: [{
              type: "text",
              title: "title"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            configure: [{
              property: "title",
              title: "Title",
              description: "Enter title for sticky note.",
              inputMethod: "textfield",
              required: true
            }, {
              slot: "",
              title: "Content",
              description: "Content of the sticky note",
              inputMethod: "code-editor",
              required: true
            }, {
              property: "sticky",
              title: "Stick to page on scroll",
              description: "Appear sticky when the user scrolls past it",
              inputMethod: "boolean"
            }, {
              property: "direction",
              title: "Direction to hang",
              description: "Location of the sticky note to hang",
              inputMethod: "select",
              options: {
                "": "none",
                right: "Right",
                left: "Left"
              }
            }],
            advanced: []
          }
        };
      }
    }]);
    return LrnAside;
  }(_index.LitElement);

  _exports.LrnAside = LrnAside;
  window.customElements.define(LrnAside.tag, LrnAside);
});