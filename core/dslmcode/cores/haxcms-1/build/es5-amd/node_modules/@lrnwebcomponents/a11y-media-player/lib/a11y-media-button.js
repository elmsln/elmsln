define(["exports", "require", "../../../lit/index.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js"], function (_exports, _require, _index, _simpleIconLite, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yMediaButton = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_ae5cb9908e0011ed99ce491205e67b1d, _templateObject2_ae5cb9908e0011ed99ce491205e67b1d, _templateObject3_ae5cb9908e0011ed99ce491205e67b1d, _templateObject4_ae5cb9908e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `a11y-media-button`
   * a button used in a11y-media-controls and a11y-media-transcript-controls.
   *
   * @element a11y-media-button
   */
  var A11yMediaButton = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(A11yMediaButton, _LitElement);

    var _super = _createSuper(A11yMediaButton);

    //inherit styles from a11y-media-player or a11y-media-transcript
    function A11yMediaButton() {
      var _this;

      babelHelpers.classCallCheck(this, A11yMediaButton);
      _this = _super.call(this);
      _this.accentColor = "red";
      _this.dark = false;
      _this.controls = "video";
      _this.disabled = false;
      _this.toggle = false;
      _this.tooltipPosition = "bottom";
      new Promise(function (res, rej) {
        return _require.default(["../../simple-tooltip/simple-tooltip.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(A11yMediaButton, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_ae5cb9908e0011ed99ce491205e67b1d || (_templateObject_ae5cb9908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <button\n        id=\"button\"\n        aria-label=\"", "\"\n        aria-pressed=\"", "\"\n        controls=\"", "\"\n        tabindex=\"0\"\n        @click=\"", "\"\n        ?disabled=\"", "\"\n        ?toggle=\"", "\"\n      >\n        <simple-icon-lite icon=\"", "\"></simple-icon-lite>\n      </button>\n      ", "\n    "])), this.label, this.toggle ? "true" : "false", this.controls, this._buttonClick, this.disabled, this.toggle, this.icon, this.label ? (0, _index.html)(_templateObject2_ae5cb9908e0011ed99ce491205e67b1d || (_templateObject2_ae5cb9908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n            <simple-tooltip for=\"button\" position=\"", "\"\n              >", "</simple-tooltip\n            >\n          "])), this.tooltipPosition, this.label) : "");
      }
      /**
       * lets player know this button was clicked
       */

    }, {
      key: "_buttonClick",
      value: function _buttonClick(e) {
        /**
         * Fires when button is clicked
         * @event click-details
         */
        this.dispatchEvent(new CustomEvent("button-click", {
          detail: this
        }));
      }
    }], [{
      key: "properties",
      get: // properties available to the custom element for data binding
      function get() {
        return {
          accentColor: {
            attribute: "accent-color",
            type: String
          },
          dark: {
            type: Boolean
          },

          /**
           * is button action to send as an event
           */
          action: {
            attribute: "action",
            reflect: true,
            type: String
          },

          /*
           * id of element button controls
           */
          controls: {
            attribute: "controls",
            reflect: true,
            type: String
          },

          /*
           * simple-icon type
           */
          icon: {
            attribute: "icon",
            type: String
          },

          /*
           * button label
           */
          label: {
            attribute: "label",
            type: String
          },

          /*
           * Is it toggled on?
           */
          toggle: {
            attribute: "toggle",
            type: Boolean,
            reflect: true
          },

          /*
           * Is it disabled?
           */
          disabled: {
            attribute: "disabled",
            type: Boolean
          },

          /*
           * Is it disabled?
           */
          tooltipPosition: {
            attribute: "tooltip-position",
            type: String
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
        */

    }, {
      key: "tag",
      get: function get() {
        return "a11y-media-button";
      }
    }, {
      key: "styles",
      get: function get() {
        return [this.buttonStyles, (0, _index.css)(_templateObject3_ae5cb9908e0011ed99ce491205e67b1d || (_templateObject3_ae5cb9908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          margin: 0;\n          padding: 0;\n        }\n        #button {\n          margin: 0;\n          padding: 8px;\n          line-height: 1;\n          border: none;\n          transition: color 0.25s;\n          color: var(--a11y-media-button-color);\n          background-color: var(--a11y-media-button-bg-color);\n        }\n        :host([toggle]) #button {\n          color: var(--a11y-media-button-toggle-color);\n          background-color: var(--a11y-media-button-toggle-bg-color);\n        }\n        :host([toggle]:active) #button,\n        :host([toggle]:focus) #button,\n        :host([toggle]:hover) #button,\n        :host(:active) #button,\n        :host(:focus) #button,\n        :host(:hover) #button {\n          color: var(--a11y-media-button-hover-color);\n          background-color: var(--a11y-media-button-hover-bg-color);\n        }\n        :host([disabled]) #button {\n          color: var(--a11y-media-button-disabled-color);\n          cursor: not-allowed;\n        }\n        .sr-only {\n          position: absolute;\n          left: -99999;\n          top: 0;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        simple-tooltip {\n          z-index: 100;\n        }\n        simple-tooltip:not(:defined) {\n          display: none;\n        }\n        simple-icon-lite {\n          display: inline-block;\n        }\n      "])))];
      }
    }, {
      key: "buttonStyles",
      get: function get() {
        return [(0, _index.css)(_templateObject4_ae5cb9908e0011ed99ce491205e67b1d || (_templateObject4_ae5cb9908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        #button {\n          margin: 0;\n          border: none;\n        }\n        .sr-only {\n          position: absolute;\n          left: -99999;\n          top: 0;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        simple-tooltip {\n          z-index: 100;\n        }\n        simple-tooltip:not(:defined) {\n          display: none;\n        }\n      "])))];
      }
    }]);
    return A11yMediaButton;
  }(_index.LitElement);

  _exports.A11yMediaButton = A11yMediaButton;
  customElements.define(A11yMediaButton.tag, A11yMediaButton);
});