define(["exports", "../../../lit/index.js", "../../rich-text-editor/lib/buttons/rich-text-editor-prompt-button.js", "../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _index, _richTextEditorPromptButton, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxTextEditorButton = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-text-editor-button`
   * a custom-element button for hax text editor (custom buttons can extend this)
   *
   * @extends RichTextEditorPromptButtonBehaviors
   * @extends LitElement
   * @customElement
   * @demo demo/index.html
   */
  var HaxTextEditorButton = /*#__PURE__*/function (_RichTextEditorPrompt) {
    babelHelpers.inherits(HaxTextEditorButton, _RichTextEditorPrompt);

    var _super = _createSuper(HaxTextEditorButton);

    function HaxTextEditorButton() {
      var _this;

      babelHelpers.classCallCheck(this, HaxTextEditorButton);
      _this = _super.call(this);
      _this.tag = HaxTextEditorButton.tag;
      _this.toggles = true;
      _this.command = "insertHTML";
      return _this;
    }

    babelHelpers.createClass(HaxTextEditorButton, [{
      key: "targetedNode",
      get: function get() {
        var firstMatch = this.__highlight.querySelectorAll(this.tagsList);

        return firstMatch.length === 1 ? firstMatch[0] : this.__highlight;
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        this.updateElement();
        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorButton.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorButton.prototype), "firstUpdated", this).call(this, changedProperties);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorButton.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "element" && _this2.element) _this2.updateElement();
        });
      }
      /**
       * updates element based on hax properties of element
       */

    }, {
      key: "updateElement",
      value: function updateElement() {
        this.dispatchEvent(new CustomEvent("deregister-button", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
        var el = this.element || {},
            settings = el.settings || {},
            gizmo = el.gizmo || {};
        this.fields = babelHelpers.toConsumableArray((settings.configure || []).map(function (f) {
          if (f.slot === "") f.property = "innerHTML";
          return f;
        }));
        this.tagsList = gizmo.tag || "span";
        this.icon = gizmo.icon || "add";
        this.label = gizmo.title || gizmo.tag;
        this.value = this.getValue(undefined);
        this.dispatchEvent(new CustomEvent("deregister-button", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * overrides RichTextEditorPromptButtonBehaviors
       * to get custom gizmo property and slot values
       *
       * @param {object} node selected node
       * @memberof HaxTextEditorButton
       */

    }, {
      key: "getValue",
      value: function getValue() {
        var _this3 = this;

        var val = babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorButton.prototype), "getValue", this).call(this);
        this.fields.forEach(function (field) {
          if (field.property && field.property !== "innerHTML") val[field.property] = _this3.targetedNode && _this3.targetedNode.getAttribute ? _this3.targetedNode.getAttribute(field.property) : undefined;
          if (field.slot && field.slot !== "") _this3.targetedNode && _this3.targetedNode.querySelector && _this3.targetedNode.querySelector("[slot=".concat(field.slot, "]")) ? _this3.targetedNode.querySelector("[slot=".concat(field.slot, "]")).innerHTML : undefined;
          if (field.slot && field.slot === "") _this3.targetedNode && babelHelpers.toConsumableArray(_this3.targetedNode.children || []).filter(":not([slot])") && babelHelpers.toConsumableArray(_this3.targetedNode.children || []).filter(":not([slot])").length > 0 ? "".concat(babelHelpers.toConsumableArray(_this3.targetedNode.children || []).filter(":not([slot])").join("\n")) : undefined;
        });
        return val;
      }
    }, {
      key: "setToggled",
      value: function setToggled() {
        this.toggled = !!this.value;
      }
      /**
       * override this custom function to perform a
       * custom operation when an element that matches the tags list is clicked
       *
       * @param {event} e click event
       */

    }, {
      key: "tagClickCallback",
      value: function tagClickCallback() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (e.detail) this.open(e.detail);
        var tag = this.__highlight.innerHTML;
        this.__highlight.innerHTML = "";
        this.__highlight.innerHTML = tag;
      }
      /**
       * updates selection based on values passed from prompt
       * this overrides nthe default button behavior so that the gizmo's content doen't get doubled
       */

    }, {
      key: "updateSelection",
      value: function updateSelection() {
        var _this4 = this;

        var tag = document.createElement(this.tagsList),
            html = "";
        this.fields.forEach(function (field) {
          if (!!field.property && field.property !== "innerHTML") tag[field.property] = _this4.value[field.property];
          if (!!field.slot && !!_this4.value[field.slot]) html += "<".concat(_this4.getSlotWrapper(field)).concat(Object.keys(field.slotAttributes || {}).map(function (attr) {
            return " ".concat(attr, "=\"").concat(field.slotAttributes[attr], "\"");
          }), ">\n            ").concat(_this4.value[slot], "\n          </").concat(_this4.getSlotWrapper(field), ">");
        });
        html += this.value.innerHTML || "";
        this.__highlight.innerHTML = "";

        this.__highlight.parentNode.insertBefore(tag, this.__highlight);

        this.__highlight.unwrap();

        tag.innerHTML = html;
      }
      /**
       * gets a slot wrapper tag that meets field requirements
       * @param {object} field
       * @returns {string}
       */

    }, {
      key: "getSlotWrapper",
      value: function getSlotWrapper(field) {
        var fallback = field.slotWrapper,
            allowed = field.allowedSlotWrappers,
            excluded = field.excludedSlotWrappers || [],
            filter = ["span", "div", "p"].filter(function (wrapper) {
          return !excluded.includes(wrapper);
        });
        return fallback ? fallback : allowed && allowed[0] ? allowed[0] : filter;
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      function get() {
        return "hax-text-editor-button";
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorButton), "properties", this)), {}, {
          element: {
            type: Object
          }
        });
      }
    }]);
    return HaxTextEditorButton;
  }((0, _richTextEditorPromptButton.RichTextEditorPromptButtonBehaviors)(_index.LitElement));

  _exports.HaxTextEditorButton = HaxTextEditorButton;
  customElements.define(HaxTextEditorButton.tag, HaxTextEditorButton);
});