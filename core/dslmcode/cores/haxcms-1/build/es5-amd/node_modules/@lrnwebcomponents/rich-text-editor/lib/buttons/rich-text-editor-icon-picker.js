define(["exports", "../../../../lit/index.js", "./rich-text-editor-picker.js", "../../../simple-icon-picker/simple-icon-picker.js"], function (_exports, _index, _richTextEditorPicker, _simpleIconPicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorIconPicker = void 0;

  var _templateObject_e9984c908e0011ed99ce491205e67b1d, _templateObject2_e9984c908e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-icon-picker`
   * an icon picker for the rich-text-editor
   *
   * @customElement
   * @lit-html
   * @lit-element
   * @extends RichTextEditorPickerBehaviors
   * @extends LitElement
   * @element rich-text-editor-icon-picker
   * @demo ./demo/buttons.html
   */
  var RichTextEditorIconPicker = /*#__PURE__*/function (_RichTextEditorPicker) {
    babelHelpers.inherits(RichTextEditorIconPicker, _RichTextEditorPicker);

    var _super = _createSuper(RichTextEditorIconPicker);

    function RichTextEditorIconPicker() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorIconPicker);
      _this = _super.call(this);
      _this.icon = undefined;
      _this.icons = [];
      _this.excludes = [];
      _this.includeSets = [];
      _this.excludeSets = [];
      _this.label = "Insert icon";
      _this.command = "insertHTML";
      _this.tagsList = "simple-icon-lite";
      return _this;
    }
    /**
     * Picker change
     */


    babelHelpers.createClass(RichTextEditorIconPicker, [{
      key: "render",
      value: // render function for template
      // render function for template
      function render() {
        return (0, _index.html)(_templateObject_e9984c908e0011ed99ce491205e67b1d || (_templateObject_e9984c908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <simple-icon-picker\n        id=\"button\"\n        ?allow-null=\"", "\"\n        class=\"rtebutton ", "-label ", "\"\n        .controls=\"", "\"\n        ?disabled=\"", "\"\n        .icons=\"", "\"\n        .excludes=\"", "\"\n        .includeSets=\"", "\"\n        .excludeSets=\"", "\"\n        @keydown=\"", "\"\n        .label=\"", "\"\n        @mouseover=\"", "\"\n        tabindex=\"0\"\n        ?toggled=\"", "\"\n        @value-changed=\"", "\"\n      >\n      </simple-icon-picker>\n      ", "\n    "])), this.allowNull, this.labelVisibleClass, this.toggled ? "toggled" : "", babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorIconPicker.prototype), "controls", this), this.disabled, this.icons, this.excludes, this.includeSets, this.excludeSets, this._pickerFocus, this.currentLabel, this._pickerFocus, this.toggled, this._pickerChange, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorIconPicker.prototype), "tooltipTemplate", this));
      } // properties available to the custom element for data binding

    }, {
      key: "_pickerChange",
      value: function _pickerChange(e) {
        var val = this._getSelectionType() || "",
            parent = this.__highlight.parentNode;
        this.commandVal = e.detail.value ? "<simple-icon-lite icon=\"".concat(e.detail.value, "\"></simple-icon-lite>") : "";
        /* only update when there is an actual change */

        if (this.range && val !== this.commandVal) {
          this.sendCommand();
        }
      }
      /**
       * overrides RichTextEditorPickerBehaviors
       * since simple-symbol-picker already handles options
       *
       * @memberof RichTextEditorSymbolPicker
       */

    }, {
      key: "_setOptions",
      value: function _setOptions() {}
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       *
       */
      function get() {
        return "rich-text-editor-icon-picker";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorIconPicker), "styles", this)), [(0, _index.css)(_templateObject2_e9984c908e0011ed99ce491205e67b1d || (_templateObject2_e9984c908e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        #button.show-label::part(label) {\n          padding: 0;\n          margin-right: 0;\n          margin-left: 4px;\n        }\n        #button.show-label::part(sample) {\n          min-height: var(--simple-picker-option-size, 24px);\n          margin-left: calc(-0.125 * var(--simple-picker-icon-size, 16px));\n        }\n        #button.show-label::part(sample-option) {\n          display: none;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorIconPicker), "properties", this)), _simpleIconPicker.SimpleIconPicker.properties);
      }
    }]);
    return RichTextEditorIconPicker;
  }((0, _richTextEditorPicker.RichTextEditorPickerBehaviors)(_index.LitElement));

  _exports.RichTextEditorIconPicker = RichTextEditorIconPicker;
  customElements.define(RichTextEditorIconPicker.tag, RichTextEditorIconPicker);
});