define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/mixins/mutable-data.js", "../utils/utils.js", "../simple-toast/simple-toast.js", "../../@polymer/iron-ajax/iron-ajax.js", "../simple-colors/lib/simple-colors-polymer.js", "../../@vaadin/vaadin-split-layout/vaadin-split-layout.js", "../multiple-choice/multiple-choice.js", "./lib/game-show-quiz-modal.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js"], function (_exports, _require, _polymerElement, _mutableData, _utils, _simpleToast, _ironAjax, _simpleColorsPolymer, _vaadinSplitLayout, _multipleChoice, _gameShowQuizModal, _simpleIcon, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GameShowQuiz = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_610bb090809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `game-show-quiz`
   * `Simple game show with questions and answers`
   * @microcopy - the mental model for this element
   * - game show - a display board in the style of Jeopardy
   * @demo demo/index.html
   * @element game-show-quiz
   */
  var GameShowQuiz = /*#__PURE__*/function (_MutableData) {
    babelHelpers.inherits(GameShowQuiz, _MutableData);

    var _super = _createSuper(GameShowQuiz);

    function GameShowQuiz() {
      var _this;

      babelHelpers.classCallCheck(this, GameShowQuiz);
      _this = _super.call(this);
      window.SimpleToast.requestAvailability();
      new Promise(function (res, rej) {
        return _require.default(["../responsive-grid/lib/responsive-grid-row.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../responsive-grid/lib/responsive-grid-col.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/app-layout/app-drawer/app-drawer.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/app-layout/app-header/app-header.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/app-layout/app-toolbar/app-toolbar.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-flex-layout/iron-flex-layout.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../chartist-render/chartist-render.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(GameShowQuiz, [{
      key: "_gameDirectionsChanged",
      value:
      /**
       * Support loading directions from a URL / end point
       */
      function _gameDirectionsChanged(newValue) {
        if (newValue) {
          (0, _utils.wipeSlot)(this);
          var div = document.createElement("div");
          div.style = "padding: 16px;";
          div.innerHTML = newValue;
          this.appendChild(div.cloneNode(true));
        }
      }
    }, {
      key: "directionsToggle",
      value:
      /**
       * Toggle the directions to appear
       */
      function directionsToggle(e) {
        this.shadowRoot.querySelector("#directions").toggle();
      }
      /**
       * Toggle the directions to appear
       */

    }, {
      key: "scoreBoardToggle",
      value: function scoreBoardToggle(e) {
        this.shadowRoot.querySelector("#scoreboard").toggle();
      }
      /**
       * Continue button pressed.
       */

    }, {
      key: "continueGameTap",
      value: function continueGameTap(e) {
        // destroy this so it rebuilds every time for correct target element
        // while focusing on the next item just to place keyboard focus more
        // logically
        if (babelHelpers.typeof(this.__activeTap) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && this.__activeTap.parentNode.nextElementSibling.firstElementChild != null) {
          this.__activeTap.parentNode.nextElementSibling.firstElementChild.focus();

          delete this.__activeTap;
        }
      }
      /**
       * Register a tap on the board.
       */

    }, {
      key: "registerTap",
      value: function registerTap(e) {
        var found = true;

        for (var i in this.shadowRoot.querySelector("#question").answers) {
          if (this.shadowRoot.querySelector("#question").answers[i].userGuess) {
            found = false;
          }
        } // ensure they touch the board before ability to submit


        this.__submitDisabled = found;
      }
      /**
       * Submit answer to see what they got.
       */

    }, {
      key: "submitAnswer",
      value: function submitAnswer(e) {
        var _this2 = this;

        // reset attemptsData for chartist and rebuild fully throughout
        var attemptsData = this.attemptsData; // flip submitted status

        this.set("activeQuestion.submitted", true);
        this.notifyPath("activeQuestion.submitted");
        this.shadowRoot.querySelector("#continue").focus(); // maker this disabled on the board

        this.__activeTap.disabled = true; // start to build a status icon

        var icon = document.createElement("iron-icon");
        icon.classList.add("status-icon");
        var total = 0;

        if (this.__activeType != "bonus" && !this.__activeQuestionDetails.isBonus) {
          // update attempts for the category
          var num = parseInt(this.points[this.__activeType].attempted) + parseInt(this.__activeValue);
          this.set("points." + this.__activeType + ".attempted", num);
          this.notifyPath("points." + this.__activeType + ".attempted");
          total = parseInt(this.points.total.attempted) + parseInt(this.__activeValue); // update the global totals for attempt

          this.set("points.total.attempted", total);
          this.notifyPath("points.total.attempted"); // update remaining attempts

          this.remainingAttempts = this.remainingAttempts - parseInt(this.__activeValue);
        } // do a detection for per value type level being filled in to unlock the assoicated bonus question


        if (!this.__activeQuestionDetails.isBonus) {
          var unlockCheck = 0;
          var unlockThreashold = 100;
          var boardCol = 0;

          for (var t in this._gameBoardFlat) {
            // only count things that are disabled
            if (!this._gameBoardFlat[t].isBonus && this._gameBoardFlat[t].question.submitted && this._gameBoardFlat[t].points === this.__activeQuestionDetails.points) {
              unlockCheck += this.__activeQuestionDetails.points;
            }
          }

          switch (this.__activeQuestionDetails.points) {
            case 1:
              unlockThreashold = 16;
              boardCol = 1;
              break;

            case 2:
              unlockThreashold = 16;
              boardCol = 5;
              break;

            case 3:
              unlockThreashold = 12;
              boardCol = 7;
              break;
          } // unlock the bonus point question per level if the entire level is cleared


          if (unlockCheck === unlockThreashold) {
            this.shadowRoot.querySelectorAll('responsive-grid-col button[data-type="bonus"][data-display-points="' + this.__activeQuestionDetails.points + '"]').forEach(function (item) {
              item.removeAttribute("disabled");
              var uuid = item.getAttribute("data-question-uuid"); // bonus always last row, make data match the operation

              _this2.gameBoard[boardCol].cols.find(function (i) {
                return i.uuid == uuid;
              }).disabled = false; // keep flat in sync

              _this2._gameBoardFlat[uuid].disabled = false;
            });
          }
        } // test for completing an entire column so we need to activate a bonus chance


        if (this.points[this.__activeType].attempted == 11 && !this.__activeQuestionDetails.isBonus) {
          // get last row
          this.shadowRoot.querySelectorAll('responsive-grid-col button[data-is-bonus][data-type="' + this.__activeType + '"]').forEach(function (item) {
            item.removeAttribute("disabled");
            var uuid = item.getAttribute("data-question-uuid"); // bonus always last row, make data match the operation

            _this2.gameBoard[_this2.gameBoard.length - 1].cols.find(function (i) {
              return i.uuid == uuid;
            }).disabled = false; // keep flat in sync

            _this2._gameBoardFlat[uuid].disabled = false;
          });
        } // if current answer is correct


        if (this.shadowRoot.querySelector("#question").checkAnswers()) {
          // show correct
          var evt = new CustomEvent("simple-toast-show", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              text: "Correct!",
              duration: 4000
            }
          });
          this.dispatchEvent(evt); // @todo need an area for placing feedback
          // update the earned column

          var _num = parseInt(this.points[this.__activeType].earned) + parseInt(this.__activeValue);

          this.set("points." + this.__activeType + ".earned", _num);
          this.notifyPath("points." + this.__activeType + ".earned"); // set icon to correct

          icon.icon = "icons:check-circle";
          icon.classList.add("correct"); // update total column

          total = parseInt(this.points.total.earned) + parseInt(this.__activeValue);
          this.set("points.total.earned", total);
          this.notifyPath("points.total.earned");
        } else {
          this.set("activeQuestion.wrong", true); // show wrong

          var _evt = new CustomEvent("simple-toast-show", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              text: ":( You got it wrong",
              duration: 4000
            }
          });

          this.dispatchEvent(_evt); // @todo show feedback for wrong answer as to why
          // set icon to incorrect

          icon.icon = "icons:cancel";
          icon.classList.add("incorrect");
        } // update the percent for this column


        var percent = (parseInt(this.points[this.__activeType].earned) / parseInt(this.points[this.__activeType].attempted) * 100).toFixed(1);
        this.set("points." + this.__activeType + ".percent", percent);
        this.notifyPath("points." + this.__activeType + ".percent"); // update the percent

        total = (parseInt(this.points.total.earned) / parseInt(this.points.total.attempted) * 100).toFixed(1);
        this.set("points.total.percent", total);
        this.notifyPath("points.total.percent");
        attemptsData[this.__activeType].series = [this.points[this.__activeType].earned, this.points[this.__activeType].attempted - this.points[this.__activeType].earned]; // beyond edge case as bonus can make this negative

        if (this.points[this.__activeType].attempted < this.points[this.__activeType].earned) {
          attemptsData[this.__activeType].series = [this.points[this.__activeType].earned, 0];
        }

        attemptsData.total.series = [this.points.total.earned, this.points.total.attempted - this.points.total.earned]; // beyond edge case as bonus can make this negative

        if (this.points.total.attempted < this.points.total.earned) {
          attemptsData.total.series = [this.points.total.earned, 0];
        } // update the charts


        attemptsData.overall.series = [this.points.slideid.attempted, this.points.terminology.attempted, this.points.reading.attempted, this.points.lecture.attempted];
        this.set("attemptsData", {});
        this.set("attemptsData", attemptsData); // append child via polymer so we can style it correctly in shadow dom

        this.__activeTap.appendChild(icon); // check for 2 points remaining


        if (this.remainingAttempts === 2) {
          this.shadowRoot.querySelectorAll("responsive-grid-col button[data-value='3']:not([disabled]):not([data-is-bonus])").forEach(function (item) {
            item.setAttribute("disabled", "disabled");
          });
        }

        if (this.remainingAttempts === 1) {
          this.shadowRoot.querySelectorAll("responsive-grid-col button[data-value='2']:not([disabled]):not([data-is-bonus])").forEach(function (item) {
            item.setAttribute("disabled", "disabled");
          });
          this.shadowRoot.querySelectorAll('responsive-grid-col button[data-value="3"]:not([disabled]):not([data-is-bonus])').forEach(function (item) {
            item.setAttribute("disabled", "disabled");
          });
        } // check for if we have any attempts remaining


        if (this.remainingAttempts <= 0) {
          this.shadowRoot.querySelectorAll("responsive-grid-col button:not([disabled]):not([data-is-bonus])").forEach(function (item) {
            item.setAttribute("disabled", "disabled");
          });
          this.remainingAttempts = 0; // trap for bonus questions still being available

          if (this.shadowRoot.querySelectorAll("responsive-grid-col button[data-is-bonus]:not([disabled])").length === 0) {
            // open score report in a modal now
            this.shadowRoot.querySelector("#dialog").toggle();
            this.shadowRoot.querySelector("#scoreboard").title = "Your final score for the game";
            this.scoreBoardToggle({});

            var _evt2 = new CustomEvent("simple-toast-show", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: {
                text: "Game over!",
                duration: 5000
              }
            });

            this.dispatchEvent(_evt2); // fire in case anyone else cares

            this.dispatchEvent(new CustomEvent("game-show-quiz-game-over", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: {
                game: this.title,
                score: this.points.total.earned
              }
            })); // ship to backend if we have one

            if (this.gameScoreBoardBackend) {
              this.shadowRoot.querySelector("#gamebackend").url = "".concat(this.gameScoreBoardBackend, "/").concat(this.title, "/").concat(this.points.total.earned, "?token=").concat(this.token);
              this.shadowRoot.querySelector("#gamebackend").generateRequest();
            }
          }
        }
      }
      /**
       * Notice that something was tapped, resolve what it was.
       */

    }, {
      key: "_gameBoardTap",
      value: function _gameBoardTap(e) {
        var _this3 = this;

        var local = e.target;

        if (local.getAttribute("data-question-uuid") != null) {
          this.__submitDisabled = true;
          this.__activeTap = local;
          this.__activeType = local.getAttribute("data-type");
          this.__activeValue = local.getAttribute("data-value");
          var uuid = local.getAttribute("data-question-uuid");
          this.__activeQuestionDetails = this._gameBoardFlat[uuid]; // debug
          //console.log(this.__activeQuestionDetails.question.data.find((currentValue, index, arr)=>{if(currentValue.correct){return currentValue;}}));

          this.set("activeQuestion", {});
          this.set("activeQuestion", this.__activeQuestionDetails.question);
          this.notifyPath("activeQuestion.*");
          this.notifyPath("activeQuestion.data.*"); // reset the layout on open

          this.shadowRoot.querySelector("#col1").style.flex = "";
          this.shadowRoot.querySelector("#col2").style.flex = "";
          this.shadowRoot.querySelector("#question").resetAnswers();
          setTimeout(function () {
            _this3.shadowRoot.querySelector("#dialog").toggle();
          }, 100);
        }
      }
      /**
       * Notice the game board has changed from the backend loading it most likely.
       */

    }, {
      key: "_gameBoardDataChanged",
      value: function _gameBoardDataChanged(newValue, oldvalue) {
        var _this4 = this;

        if (newValue) {
          this._gameBoardFlat = {}; // @todo this needs to come in via settings some how

          var gameBoard = [{
            cols: [{
              title: "Slide id",
              points: "",
              notRaised: true,
              disabled: true
            }, {
              title: "Terms",
              points: "",
              notRaised: true,
              disabled: true
            }, {
              title: "Reading",
              points: "",
              notRaised: true,
              disabled: true
            }, {
              title: "Lecture",
              points: "",
              notRaised: true,
              disabled: true
            }, {
              title: "Bonus",
              points: "",
              notRaised: true,
              disabled: true
            }]
          }]; // row prototype

          var row = {};
          var gameData = Object.assign({}, newValue);
          var keys = Object.keys(gameData);
          var count = 0; // we want 4 1 pt questions, 2 2pts, and 1 3 pts

          var pointMap = {
            1: 4,
            2: 2,
            3: 1,
            bonus: 1
          }; // 4 iterations for 1 points

          for (var pointLevel in pointMap) {
            count = 0;

            while (count < pointMap[pointLevel]) {
              count++; // reset the row

              row = {
                cols: []
              }; // loop over the keys coming in so we can build each row across

              for (var type in keys) {
                var level = gameData[keys[type]][pointLevel];

                if (level && level.questions.length > 0) {
                  // get a random key based on what hasn't been used here previously
                  var qKey = Math.floor(Math.random() * level.questions.length);
                  var questionObject = {
                    uuid: this.generateUUID(),
                    type: level.type,
                    title: level.title,
                    points: level.points,
                    displayPoints: level.points,
                    isBonus: false,
                    question: Object.assign({}, level.questions[qKey])
                  }; // remove this record

                  gameData[keys[type]][pointLevel].questions.splice(qKey, 1);

                  if (keys[type] === "bonus") {
                    gameData[keys[type]][pointLevel].questions = [];
                    questionObject.disabled = true;
                    questionObject.isBonus = true;
                    questionObject.points = pointLevel;
                    questionObject.displayPoints = pointLevel;
                  } else if (pointLevel === "bonus") {
                    questionObject.disabled = true;
                    questionObject.isBonus = true;
                  }

                  row.cols.push(questionObject);
                  this._gameBoardFlat[questionObject.uuid] = questionObject;
                }
              }

              gameBoard.push(row);
            }
          } // this delay helps with updating the board after the fact


          this.set("gameBoard", []);
          setTimeout(function () {
            _this4.set("gameBoard", gameBoard);

            _this4.notifyPath("gameBoard.*");
          }, 100);
        }
      }
    }, {
      key: "generateUUID",
      value: function generateUUID() {
        return "item-sss-ss-ss".replace(/s/g, this._uuidPart);
      }
    }, {
      key: "_uuidPart",
      value: function _uuidPart() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      }
      /**
       * Reset focus on close back to the help button
       */

    }, {
      key: "resetFocus",
      value: function resetFocus(e) {
        this.shadowRoot.querySelector("#helpbutton").focus();
      }
      /**
       * HAX bindings
       */

    }, {
      key: "connectedCallback",
      value:
      /**
       * Attached to the DOM
       */
      function connectedCallback() {
        var _this5 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(GameShowQuiz.prototype), "connectedCallback", this).call(this);
        setTimeout(function () {
          // punch a basic hole for elms:ln to make life easier for IDs
          if (window.Drupal && window.Drupal.settings && window.Drupal.settings.elmslnCore && window.Drupal.settings.elmslnCore.uname) {
            _this5.gameScoreBoardBackend = window.Drupal.settings.basePath + "apps/game-show-scoreboard/save-score";
            _this5.token = btoa(window.Drupal.settings.elmslnCore.uname);
            _this5.gameDirectionsData = window.Drupal.settings.basePath + "apps/game-show-scoreboard/load-directions";
          }

          _this5.shadowRoot.querySelector("#dismiss").addEventListener("click", _this5.resetFocus.bind(_this5));

          _this5.shadowRoot.querySelector("#contentcontainer").addEventListener("click", _this5._gameBoardTap.bind(_this5));

          _this5.shadowRoot.querySelector("#submit").addEventListener("click", _this5.submitAnswer.bind(_this5));

          _this5.shadowRoot.querySelector("#continue").addEventListener("click", _this5.continueGameTap.bind(_this5));

          _this5.shadowRoot.querySelector("#question").addEventListener("click", _this5.registerTap.bind(_this5));
        }, 0);
      }
      /**
       * detached life cycke
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.shadowRoot.querySelector("#dismiss").removeEventListener("click", this.resetFocus.bind(this));
        this.shadowRoot.querySelector("#contentcontainer").removeEventListener("click", this._gameBoardTap.bind(this));
        this.shadowRoot.querySelector("#submit").removeEventListener("click", this.submitAnswer.bind(this));
        this.shadowRoot.querySelector("#continue").removeEventListener("click", this.continueGameTap.bind(this));
        this.shadowRoot.querySelector("#question").removeEventListener("click", this.registerTap.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(GameShowQuiz.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "game-show-quiz";
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_610bb090809211edaa2833647dc78c6c || (_templateObject_610bb090809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          --game-show-bg-color: var(--simple-colors-default-theme-blue-11);\n          --game-show-text-color: var(--simple-colors-default-theme-blue-1);\n        }\n        chartist-render#piechart {\n          width: 300px;\n          height: 300px;\n          display: inline-block;\n        }\n        chartist-render.mini-chart {\n          width: 132px;\n          height: 132px;\n          display: inline-block;\n          --chartist-color-1: green;\n          --chartist-color-2: red;\n        }\n        app-toolbar {\n          background-color: var(--game-show-bg-color);\n          color: var(--game-show-text-color);\n          font-size: 24px;\n          display: flex;\n        }\n        simple-icon {\n          display: inline-block;\n        }\n        table {\n          width: 90%;\n        }\n        tr {\n          outline: 1px solid black;\n        }\n        td {\n          border-left: 1px solid black;\n          padding: 16px;\n          text-align: center;\n        }\n        .chart-row td {\n          padding: 0;\n        }\n\n        button {\n          text-transform: none;\n          display: block;\n        }\n        #helpbutton {\n          text-align: center;\n          padding: 8px;\n          font-size: 12px;\n          vertical-align: middle;\n          display: inline-flex;\n        }\n        button + [main-title] {\n          margin-left: 24px;\n          display: inline-flex;\n        }\n        app-header {\n          color: var(--game-show-text-color);\n          --app-header-background-rear-layer: {\n            background-color: #ef6c00;\n          }\n        }\n        responsive-grid-row {\n          --responsive-grid-row-inner-margin-left: 0;\n          --responsive-grid-row-inner-margin-right: 0;\n        }\n        responsive-grid-col {\n          --responsive-grid-col-inner-padding-left: 0;\n          --responsive-grid-col-inner-padding-right: 0;\n        }\n        #contentcontainer {\n          margin: 0 auto;\n          font-size: 16px;\n        }\n        .grid-button {\n          width: 100%;\n          height: 80px;\n          font-size: 24px;\n          text-align: center;\n          min-width: unset;\n          padding: 0;\n          margin: 0;\n          align-items: center;\n          display: flex;\n        }\n        .status-icon {\n          border-radius: 50%;\n          width: 48px;\n          height: 48px;\n          opacity: 0.5;\n          right: 0;\n          bottom: 0;\n          position: absolute;\n        }\n        .correct {\n          color: var(--simple-colors-default-theme-green-6);\n          background-color: var(--simple-colors-default-theme-green-11);\n        }\n        .incorrect {\n          color: var(--simple-colors-default-theme-red-6);\n          background-color: var(--simple-colors-default-theme-red-11);\n        }\n        .row-0 button[disabled] {\n          font-weight: bold;\n          font-size: 16px;\n        }\n        .grid-button[data-type=\"bonus\"] {\n          display: inline-flex;\n          position: absolute;\n          outline: 1px solid #dddddd;\n        }\n        .grid-button[data-type=\"bonus\"][data-display-points=\"1\"] {\n          height: 320px;\n        }\n        .grid-button[data-type=\"bonus\"][data-display-points=\"2\"] {\n          height: 160px;\n        }\n        @media screen and (max-width: 600px) {\n          app-toolbar {\n            font-size: 14px;\n          }\n          button {\n            padding: 0;\n            margin: 0;\n            width: 16px;\n            height: 16px;\n            min-width: unset;\n          }\n          game-show-quiz-modal button {\n            height: 48px;\n            width: 100%;\n          }\n          .grid-button {\n            font-size: 14px;\n          }\n          .status-icon {\n            width: 24px;\n            height: 24px;\n            opacity: 1;\n            display: inline-block;\n          }\n          .row-0 button[disabled] {\n            font-weight: bold;\n            font-size: 10px;\n          }\n        }\n      </style>\n      <app-header>\n        <app-toolbar>\n          <button id=\"scorebutton\" on-click=\"scoreBoardToggle\">\n            <simple-icon icon=\"editor:pie-chart\"></simple-icon\n            ><label for=\"scorebutton\">Score board</label>\n          </button>\n          <div main-title>[[title]]</div>\n          <button id=\"helpbutton\" on-click=\"directionsToggle\">\n            <simple-icon icon=\"help\"></simple-icon\n            ><label for=\"helpbutton\">Directions</label>\n          </button>\n        </app-toolbar>\n      </app-header>\n      <div id=\"contentcontainer\">\n        <div style=\"font-size: 24px;\" hidden$=\"[[!remainingAttempts]]\">\n          Points Remaining to Attempt:\n          <strong>[[remainingAttempts]]</strong>\n        </div>\n        <template is=\"dom-repeat\" items=\"[[gameBoard]]\" as=\"row\" mutable-data>\n          <responsive-grid-row gutter=\"0\" class$=\"row row-[[index]]\">\n            <template\n              is=\"dom-repeat\"\n              items=\"[[row.cols]]\"\n              as=\"col\"\n              mutable-data\n            >\n              <responsive-grid-col xl=\"2\" lg=\"2\" md=\"2\" sm=\"2\" xs=\"2\">\n                <button\n                  class=\"grid-button\"\n                  raised=\"[[!col.notRaised]]\"\n                  data-question-uuid$=\"[[col.uuid]]\"\n                  data-value$=\"[[col.points]]\"\n                  data-display-points$=\"[[col.displayPoints]]\"\n                  data-is-bonus$=\"[[col.isBonus]]\"\n                  data-type$=\"[[col.type]]\"\n                  disabled$=\"[[col.disabled]]\"\n                >\n                  [[col.title]]<br />[[col.displayPoints]]\n                </button>\n              </responsive-grid-col>\n            </template>\n          </responsive-grid-row>\n        </template>\n      </div>\n      <game-show-quiz-modal id=\"scoreboard\" title=\"Score board\">\n        <div slot=\"content\">\n          <div style=\"padding: 32px;\">\n            <chartist-render\n              id=\"piechart\"\n              chart-title=\"Breakdown of attempts\"\n              data=\"[[attemptsData.overall]]\"\n              type=\"pie\"\n              scale=\"ct-square\"\n            >\n            </chartist-render>\n            <table style=\"margin: 16px auto;\">\n              <tbody>\n                <tr>\n                  <th></th>\n                  <th>Slide ID</th>\n                  <th>Terms</th>\n                  <th>Reading</th>\n                  <th>Lecture</th>\n                  <th>Total</th>\n                </tr>\n                <tr>\n                  <th>Points Earned</th>\n                  <td>[[points.slideid.earned]]</td>\n                  <td>[[points.terminology.earned]]</td>\n                  <td>[[points.reading.earned]]</td>\n                  <td>[[points.lecture.earned]]</td>\n                  <td>[[points.total.earned]]</td>\n                </tr>\n                <tr>\n                  <th>Points Attempted</th>\n                  <td>[[points.slideid.attempted]]</td>\n                  <td>[[points.terminology.attempted]]</td>\n                  <td>[[points.reading.attempted]]</td>\n                  <td>[[points.lecture.attempted]]</td>\n                  <td>[[points.total.attempted]]</td>\n                </tr>\n                <tr>\n                  <th>Category Percentage</th>\n                  <td>[[points.slideid.percent]]</td>\n                  <td>[[points.terminology.percent]]</td>\n                  <td>[[points.reading.percent]]</td>\n                  <td>[[points.lecture.percent]]</td>\n                  <td>[[points.total.percent]]</td>\n                </tr>\n                <tr class=\"chart-row\">\n                  <th>Pie chart</th>\n                  <td>\n                    <chartist-render\n                      class=\"mini-chart\"\n                      chart-title=\"Slide ID percentage\"\n                      data=\"[[attemptsData.slideid]]\"\n                      type=\"pie\"\n                      scale=\"ct-square\"\n                    ></chartist-render>\n                  </td>\n                  <td>\n                    <chartist-render\n                      class=\"mini-chart\"\n                      chart-title=\"Terminology percentage\"\n                      data=\"[[attemptsData.terminology]]\"\n                      type=\"pie\"\n                      scale=\"ct-square\"\n                    ></chartist-render>\n                  </td>\n                  <td>\n                    <chartist-render\n                      class=\"mini-chart\"\n                      chart-title=\"Reading percentage\"\n                      data=\"[[attemptsData.reading]]\"\n                      type=\"pie\"\n                      scale=\"ct-square\"\n                    ></chartist-render>\n                  </td>\n                  <td>\n                    <chartist-render\n                      class=\"mini-chart\"\n                      chart-title=\"Lecture percentage\"\n                      data=\"[[attemptsData.lecture]]\"\n                      type=\"pie\"\n                      scale=\"ct-square\"\n                    ></chartist-render>\n                  </td>\n                  <td>\n                    <chartist-render\n                      class=\"mini-chart\"\n                      chart-title=\"Total percentage\"\n                      data=\"[[attemptsData.total]]\"\n                      type=\"pie\"\n                      scale=\"ct-square\"\n                    ></chartist-render>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <div style=\"font-size: 24px;\" hidden$=\"[[!remainingAttempts]]\">\n              Points Remaining to Attempt:\n              <strong>[[remainingAttempts]]</strong>\n            </div>\n          </div>\n        </div>\n        <button\n          aria-label=\"Close score board and return to game\"\n          slot=\"buttons\"\n          id=\"dismiss\"\n          dialog-confirm\n          raised\n        >\n          Return to game board\n        </button>\n      </game-show-quiz-modal>\n      <game-show-quiz-modal id=\"directions\" title=\"[[directionsTitle]]\">\n        <div slot=\"content\"><slot></slot></div>\n        <button\n          aria-label=\"Close directions dialog and return to game\"\n          slot=\"buttons\"\n          id=\"dismiss\"\n          dialog-confirm\n          raised\n        >\n          Good luck!\n        </button>\n      </game-show-quiz-modal>\n      <game-show-quiz-modal\n        id=\"dialog\"\n        title=\"[[questionTitle]] [[__activeQuestionDetails.points]] point, [[__activeQuestionDetails.type]] question.\"\n      >\n        <vaadin-split-layout slot=\"content\" style=\"height:80vh;\">\n          <div id=\"col1\" style=\"width:70%;min-width: 30%;\">\n            <img\n              style=\"min-width:100px; width:100%; min-height:50vh; height:75vh;\"\n              loading=\"lazy\"\n              src$=\"[[activeQuestion.image]]\"\n            />\n          </div>\n          <div id=\"col2\" style=\"width:30%;min-width: 30%;\">\n            <multiple-choice\n              randomize\n              single-option\n              id=\"question\"\n              hide-buttons\n              title=\"[[activeQuestion.title]]\"\n              answers=\"[[activeQuestion.data]]\"\n            ></multiple-choice>\n            <div hidden$=\"[[!activeQuestion.wrong]]\" aria-hidden=\"true\">\n              <h3>Feedback</h3>\n              <p>[[activeQuestion.feedback]]</p>\n            </div>\n          </div>\n        </vaadin-split-layout>\n        <button\n          slot=\"buttons\"\n          hidden$=\"[[activeQuestion.submitted]]\"\n          id=\"submit\"\n          raised=\"\"\n          disabled$=\"[[__submitDisabled]]\"\n        >\n          Submit answer\n          <simple-icon\n            hidden$=\"[[__submitDisabled]]\"\n            icon=\"icons:touch-app\"\n          ></simple-icon>\n        </button>\n        <button\n          slot=\"buttons\"\n          id=\"continue\"\n          hidden$=\"[[!activeQuestion.submitted]]\"\n          dialog-confirm\n          raised\n          aria-disabled$=\"[[activeQuestion.submitted]]\"\n          aria-label=\"Return to game board\"\n        >\n          Continue <simple-icon icon=\"icons:arrow-forward\"></simple-icon>\n        </button>\n      </game-show-quiz-modal>\n      <iron-ajax\n        auto\n        id=\"gamedata\"\n        url=\"[[gameData]]\"\n        handle-as=\"json\"\n        last-response=\"{{gameBoardData}}\"\n      ></iron-ajax>\n      <iron-ajax\n        auto\n        id=\"gamedirections\"\n        url=\"[[gameDirectionsData]]\"\n        handle-as=\"text\"\n        last-response=\"{{gameDirections}}\"\n      ></iron-ajax>\n      <iron-ajax id=\"gamebackend\" hand-as=\"json\"></iron-ajax>\n    "])));
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title
           */
          title: {
            type: String
          },
          gameDirectionsData: {
            type: String
          },
          gameDirections: {
            type: String,
            observer: "_gameDirectionsChanged"
          },
          token: {
            type: String
          },
          attemptsData: {
            type: Object,
            value: {
              overall: {
                labels: ["Slide ID", "Terminology", "Reading", "Lecture"],
                series: [0, 0, 0, 0]
              },
              slideid: {
                labels: ["Correct", "Incorrect"],
                series: [0, 0]
              },
              terminology: {
                labels: ["Correct", "Incorrect"],
                series: [0, 0]
              },
              reading: {
                labels: ["Correct", "Incorrect"],
                series: [0, 0]
              },
              lecture: {
                labels: ["Correct", "Incorrect"],
                series: [0, 0]
              },
              bonus: {
                labels: ["Correct", "Incorrect"],
                series: [0, 0]
              },
              total: {
                labels: ["Correct", "Incorrect"],
                series: [0, 0]
              }
            }
          },

          /**
           * Points object
           */
          points: {
            type: Object,
            value: {
              slideid: {
                attempted: 0,
                earned: 0,
                percent: 0
              },
              terminology: {
                attempted: 0,
                earned: 0,
                percent: 0
              },
              reading: {
                attempted: 0,
                earned: 0,
                percent: 0
              },
              lecture: {
                attempted: 0,
                earned: 0,
                percent: 0
              },
              bonus: {
                attempted: 0,
                earned: 0,
                percent: 0
              },
              total: {
                attempted: 0,
                earned: 0,
                percent: 0
              }
            }
          },

          /**
           * Remaining attempts for the user
           */
          remainingAttempts: {
            type: Number,
            value: 30
          },

          /**
           * Title to use on the directions dialog.
           */
          directionsTitle: {
            type: String,
            value: "Directions"
          },

          /**
           * Title to use on the question dialog.
           */
          questionTitle: {
            type: String,
            value: "Answer the following"
          },

          /**
           * Rows on the gameshow board
           */
          gameBoard: {
            type: Array
          },
          gameBoardData: {
            type: Object,
            observer: "_gameBoardDataChanged"
          },

          /**
           * URL to load data for the game.
           */
          gameData: {
            type: String
          },
          gameScoreBoardBackend: {
            type: String
          },

          /**
           * Active item that is in the modal.
           */
          activeQuestion: {
            type: Object
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Game show",
            description: "Tweak the game show options",
            icon: "av:play-circle-filled",
            color: "grey",
            groups: ["Education", "Interactive"],
            handles: [],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            configure: [{
              property: "title",
              title: "Title",
              description: "The title of the game",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "gameData",
              title: "Source of the game data data",
              description: "The title of the game",
              inputMethod: "textfield",
              icon: "icons:link"
            }],
            advanced: []
          },
          saveOptions: {
            unsetAttributes: ["attempts-data", "points", "game-board", "question-title", "remaining-attempts"]
          }
        };
      }
    }]);
    return GameShowQuiz;
  }((0, _mutableData.MutableData)(_polymerElement.PolymerElement));

  _exports.GameShowQuiz = GameShowQuiz;
  window.customElements.define(GameShowQuiz.tag, GameShowQuiz);
});