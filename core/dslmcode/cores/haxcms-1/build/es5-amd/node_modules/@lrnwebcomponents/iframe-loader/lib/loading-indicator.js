define(["../../../lit/index.js"], function (_index) {
  "use strict";

  var _templateObject_a0dc8320809211edaa2833647dc78c6c, _templateObject2_a0dc8320809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LoadingIndicator = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(LoadingIndicator, _LitElement);

    var _super = _createSuper(LoadingIndicator);

    function LoadingIndicator() {
      var _this;

      babelHelpers.classCallCheck(this, LoadingIndicator);
      _this = _super.call(this);
      _this.full = false;
      _this.loading = false;
      return _this;
    }

    babelHelpers.createClass(LoadingIndicator, [{
      key: "render",
      value: function render() {
        return this.loading ? (0, _index.html)(_templateObject_a0dc8320809211edaa2833647dc78c6c || (_templateObject_a0dc8320809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["<div class=\"progress-line\"></div>"]))) : _index.nothing;
      }
    }], [{
      key: "styles",
      get: function get() {
        return (0, _index.css)(_templateObject2_a0dc8320809211edaa2833647dc78c6c || (_templateObject2_a0dc8320809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      :host {\n        display: block;\n      }\n      .progress-line,\n      .progress-line:before {\n        height: 5px;\n        width: 100%;\n        margin: auto;\n      }\n      :host([full]) .progress-line {\n        --loading-indicator-width: 100%;\n      }\n      .progress-line {\n        background-color: var(\n          --loading-indicator-background-color,\n          rgba(0, 0, 0, 0.05)\n        );\n        display: -webkit-flex;\n        display: flex;\n        width: var(--loading-indicator-width, 300px);\n      }\n      .progress-line:before {\n        background-color: var(--loading-indicator-color, black);\n        content: \"\";\n        animation: running-progress 2s cubic-bezier(0.4, 0, 0.2, 1) infinite;\n      }\n      @keyframes running-progress {\n        0% {\n          margin-left: 0px;\n          margin-right: 100%;\n        }\n        50% {\n          margin-left: 25%;\n          margin-right: 0%;\n        }\n        100% {\n          margin-left: 100%;\n          margin-right: 0;\n        }\n      }\n      @keyframes fade-out {\n        0% {\n          opacity: 1;\n        }\n        99% {\n          opacity: 0;\n        }\n        100% {\n          opacity: 0;\n        }\n      }\n    "])));
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          full: {
            type: Boolean,
            reflect: true
          },
          loading: {
            type: Boolean,
            reflect: true
          }
        };
      }
    }, {
      key: "tag",
      get: function get() {
        return "loading-indicator";
      }
    }]);
    return LoadingIndicator;
  }(_index.LitElement);

  customElements.define(LoadingIndicator.tag, LoadingIndicator);
});