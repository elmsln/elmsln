define(["exports", "../../lit/index.js", "../simple-colors/simple-colors.js", "./lib/simple-icon-lite.js"], function (_exports, _index, _simpleColors, _simpleIconLite) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleIcon = void 0;

  var _templateObject_accdb5208e0011ed99ce491205e67b1d, _templateObject2_accdb5208e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-icon`
   * `Render an SVG based icon`
   *
   * @microcopy - language worth noting:
   *  -
   * @customElement
   * @extends SimpleColors
   * @extends SimpleIconBehaviors
   * @demo demo/index.html
   * @demo demo/button.html Button
   * @demo demo/lite.html Lite
   * @demo demo/button-lite.html Button (Lite)
   * @demo demo/iconset.html Iconset Demo
   * @element simple-icon
   */
  var SimpleIcon = /*#__PURE__*/function (_SimpleIconBehaviors) {
    babelHelpers.inherits(SimpleIcon, _SimpleIconBehaviors);

    var _super = _createSuper(SimpleIcon);

    function SimpleIcon() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleIcon);
      _this = _super.call(this);
      _this.contrast = 0;
      return _this;
    }

    babelHelpers.createClass(SimpleIcon, [{
      key: "feFlood",
      get: function get() {
        return !this.noColorize ? (0, _index.svg)(_templateObject_accdb5208e0011ed99ce491205e67b1d || (_templateObject_accdb5208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<feFlood class=\"contrast-", "\" result=\"COLOR\" />"])), this.contrast) : "";
      }
    }, {
      key: "useSafariPolyfill",
      get: function get() {
        return false;
      } // properties available to the custom element for data binding

    }], [{
      key: "tag",
      get:
      /**
       * This is a convention, not the standard
       */
      function get() {
        return "simple-icon";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleIcon), "styles", this)), [(0, _index.css)(_templateObject2_accdb5208e0011ed99ce491205e67b1d || (_templateObject2_accdb5208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        feFlood {\n          flood-color: var(\n            --simple-icon-color,\n            var(--simple-colors-default-theme-accent-8, #000000)\n          );\n        }\n        feFlood.contrast-1 {\n          flood-color: var(\n            --simple-icon-color,\n            var(--simple-colors-default-theme-accent-9, #000000)\n          );\n        }\n        feFlood.contrast-2 {\n          flood-color: var(\n            --simple-icon-color,\n            var(--simple-colors-default-theme-accent-10, #000000)\n          );\n        }\n        feFlood.contrast-3 {\n          flood-color: var(\n            --simple-icon-color,\n            var(--simple-colors-default-theme-accent-11, #000000)\n          );\n        }\n        feFlood.contrast-4 {\n          flood-color: var(\n            --simple-icon-color,\n            var(--simple-colors-default-theme-accent-12, #000000)\n          );\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleIcon), "properties", this)), {}, {
          contrast: {
            type: Number,
            attribute: "contrast",
            reflect: true
          }
        });
      }
    }]);
    return SimpleIcon;
  }((0, _simpleIconLite.SimpleIconBehaviors)(_simpleColors.SimpleColors));

  _exports.SimpleIcon = SimpleIcon;
  customElements.define(SimpleIcon.tag, SimpleIcon);
});