define(["exports", "../../lit/index.js", "../json-editor/json-editor.js", "../code-editor/code-editor.js", "../../@vaadin/vaadin-split-layout/vaadin-split-layout.js", "./lib/hax-schema-form.js", "../hax-body-behaviors/hax-body-behaviors.js"], function (_exports, _index, _jsonEditor, _codeEditor, _vaadinSplitLayout, _haxSchemaForm, _haxBodyBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxschemaBuilder = void 0;

  var _templateObject_a54797308e0011ed99ce491205e67b1d, _templateObject2_a54797308e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `haxschema-builder`
   * `dynamically build and visualize HAXschema`
   * @demo demo/index.html
   * @element haxschema-builder
   */
  var HaxschemaBuilder = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HaxschemaBuilder, _LitElement);

    var _super = _createSuper(HaxschemaBuilder);

    function HaxschemaBuilder() {
      var _this;

      babelHelpers.classCallCheck(this, HaxschemaBuilder);
      _this = _super.call(this);
      _this.HAXWiring = new _haxBodyBehaviors.HAXWiring();
      _this.haxSchema = "{}";
      return _this;
    }

    babelHelpers.createClass(HaxschemaBuilder, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_a54797308e0011ed99ce491205e67b1d || (_templateObject_a54797308e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <vaadin-split-layout>\n      <div>\n        <button @click=\"", "\">Add to configure</button>\n        <button @click=\"", "\">Add to advanced</button>\n        <code-editor\n          id=\"code\"\n          @value-changed=\"", "\"\n          .value=\"{}\"\n          language=\"json\"\n        ></code-editor>\n        <json-editor\n          id=\"json\"\n          label=\"JSON\"\n          @value-changed=\"", "\"\n          value=\"", "\"\n        ></json-editor>\n      </div>\n      <div>\n        <hax-schema-form\n          id=\"form\"\n          value=\"", "\"\n          @value-changed=\"", "\"\n        ></hax-schema-form>\n      </div>\n    </vaadin-split-layout>"])), this.addConfigure, this.addAdvanced, this._editorDataChanged, this.__haxSchemaChanged, this.haxSchema, this.value, this.__valueChanged);
      } // haxProperty definition

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "haxSchema") {
            // notify
            _this2.dispatchEvent(new CustomEvent("hax-schema-changed", {
              value: _this2[propName]
            }));

            _this2._haxSchemaChanged(_this2[propName], oldValue);
          }
        });
      }
      /**
       * life cycle, element is afixed to the DOM
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        var _this3 = this;

        setTimeout(function () {
          if (!_this3.source) {
            _this3.haxSchema = JSON.stringify(_this3.HAXWiring.prototypeHaxProperties(), null, 2);
          }
        }, 0); // HACK to get initial paint to have the correct form

        this.shadowRoot.querySelector("#form").modeTab = "advanced";
        setTimeout(function () {
          _this3.shadowRoot.querySelector("#form").modeTab = "configure";
        }, 2000);
      }
      /**
       * Force an update on code editor when this value changes
       */

    }, {
      key: "_haxSchemaChanged",
      value: function _haxSchemaChanged(newValue) {
        if (newValue) {
          this.shadowRoot.querySelector("#code").editorValue = newValue;
        }
      }
      /**
       * Notice code editor changes and reflect them into this element
       */

    }, {
      key: "_editorDataChanged",
      value: function _editorDataChanged(e) {
        // value coming up off of this and get it propegated correctly
        this.haxSchema = e.detail.value;
        var hs = JSON.parse(this.haxSchema);

        for (var key in hs.settings) {
          var schema = this.HAXWiring.getHaxJSONSchema(key, hs);
          this.shadowRoot.querySelector("#form")[key + "Schema"] = Object.assign({}, schema);
        }
      }
    }, {
      key: "addAdvanced",
      value: function addAdvanced(e) {
        var hs = JSON.parse(this.haxSchema);
        hs.settings.advanced.push(this.__propPrototype());

        this.__refreshSchemas(hs);
      }
    }, {
      key: "addConfigure",
      value: function addConfigure(e) {
        var hs = JSON.parse(this.haxSchema);
        hs.settings.configure.push(this.__propPrototype());

        this.__refreshSchemas(hs);
      }
    }, {
      key: "__refreshSchemas",
      value: function __refreshSchemas(hs) {
        for (var key in hs.settings) {
          var schema = this.HAXWiring.getHaxJSONSchema(key, hs);
          this.shadowRoot.querySelector("#form")[key + "Schema"] = Object.assign({}, schema);
        }

        this.haxSchema = JSON.stringify(hs);
      }
    }, {
      key: "__propPrototype",
      value: function __propPrototype() {
        return {
          property: "title",
          title: "Title",
          description: "",
          inputMethod: "textfield",
          icon: "android",
          required: true,
          validationType: "text"
        };
      }
    }, {
      key: "__haxSchemaChanged",
      value: function __haxSchemaChanged(e) {
        this.haxSchema = e.detail.value;
      }
    }, {
      key: "__valueChanged",
      value: function __valueChanged(e) {
        this.value = e.detail.value;
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_a54797308e0011ed99ce491205e67b1d || (_templateObject2_a54797308e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        code-editor {\n          height: 500px;\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Haxschema builder",
            description: "dynamically build and visualize HAXschema",
            icon: "icons:android",
            color: "green",
            groups: ["Builder"],
            handles: [],
            meta: {
              author: "HAXTheWeb",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "source",
              description: "",
              inputMethod: "textfield",
              required: true,
              icon: "icons:link",
              validationType: "url"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxschemaBuilder), "properties", this)), {}, {
          /**
           * schema to extract for whatever you wanted it for
           */
          haxSchema: {
            type: String,
            attribute: "hax-schema"
          },

          /**
           * Optional remote source to pull in
           */
          source: {
            type: String
          },

          /**
           * String based value passed between the elements to stitch together
           */
          value: {
            type: String
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "haxschema-builder";
      }
    }]);
    return HaxschemaBuilder;
  }(_index.LitElement);

  _exports.HaxschemaBuilder = HaxschemaBuilder;
  customElements.define(HaxschemaBuilder.tag, HaxschemaBuilder);
});