define(["exports", "../../../lit/index.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js"], function (_exports, _index, _simpleIconLite, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ThreadedDiscussionForm = void 0;

  var _templateObject_a70ed0e0809211edaa2833647dc78c6c, _templateObject2_a70ed0e0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `threaded-discussion-form`
   * a threaded discussions component for elms-ln
   * 
  ### Styling
  
  `<threaded-discussion-form>` provides the following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--threaded-discussion-button-BorderRadius` | border-radius for all buttons | 3px
  `--threaded-discussion-button-FontWeight` | default button font-weight | 
  `--threaded-discussion-button-FontSize` | default button line-height | var(--threaded-discussion-FontSize, 14px));
  `--threaded-discussion-button-FontFamily` | default button font-family |
  `--threaded-discussion-reply-button-Color` | text color for reply button | #4b4b4b
  `--threaded-discussion-reply-button-BackgroundColor` | background color for reply button | #fff
  `--threaded-discussion-reply-button-BorderColor` | border color for reply button | #4b4b4b
  `--threaded-discussion-reply-button-focus-Color` | text color for reply button when focused | #222
  `--threaded-discussion-reply-button-focus-BackgroundColor` | background color for reply button when focused | #fff
  `--threaded-discussion-reply-button-focus-BorderColor` | border color for reply button when focused | #222
  `--threaded-discussion-comment-button-Color` | text color for reply button | #fff
  `--threaded-discussion-comment-button-BackgroundColor` | background color for reply button | #4b4b4b
  `--threaded-discussion-comment-button-BorderColor` | border color for reply button | #4b4b4b
  `--threaded-discussion-comment-button-focus-Color` | text color for reply button when focused | #fff
  `--threaded-discussion-comment-button-focus-BackgroundColor` | background color for reply button when focused | #222
  `--threaded-discussion-comment-button-focus-BorderColor` | border color for reply button when focused | #222
  `--threaded-discussion-comment-button-FontWeight` | overrides default button font-weight for comment button | 
  `--threaded-discussion-comment-button-FontSize` | overrides default default button line-height for comment button |
  `--threaded-discussion-comment-button-FontFamily` | overrides default default button font-family for comment button |
  `--threaded-discussion-textarea-Height` | height of textarea when form is NOT focused | 16px
  `--threaded-discussion-textarea-Opacity` | opacity of textarea when form is NT focused | 0
  `--threaded-discussion-textarea-focus-Height` | height of textarea when form is focused | 100px
  `--threaded-discussion-textarea-focus-Opacity` | opacity of textarea when form is focused | 1
  `--threaded-discussion-textarea-Color` | textarea text color | var(--threaded-discussion-Color, #4b4b4b));
  `--threaded-discussion-textarea-LineHeight` | textarea line-height | var(--threaded-discussion-LineHeight, 160%));
  `--threaded-discussion-textarea-FontWeight` | textarea font-weight | 
  `--threaded-discussion-textarea-FontSize` | textarea line-height | var(--threaded-discussion-FontSize, 14px));
  `--threaded-discussion-textarea-FontFamily` | textarea font-family | var(--threaded-discussion-FontFamily));
   *
   *
   * @element threaded-discussion-form
   */
  var ThreadedDiscussionForm = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(ThreadedDiscussionForm, _LitElement);

    var _super = _createSuper(ThreadedDiscussionForm);

    function ThreadedDiscussionForm() {
      var _this;

      babelHelpers.classCallCheck(this, ThreadedDiscussionForm);
      _this = _super.call(this);
      _this.disabled = false;
      _this.hidden = false;
      return _this;
    }

    babelHelpers.createClass(ThreadedDiscussionForm, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_a70ed0e0809211edaa2833647dc78c6c || (_templateObject_a70ed0e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <form \n        action=\"", "\"\n        ?hidden=", "\n        class=\"", "\"\n        @submit=\"", "\">\n        <label for=\"", "\">", "</label>\n        <textarea\n          id=\"", "\"\n          name=\"", "\"\n          aria-describedby=\"", "\"\n        ></textarea>\n        <button type=\"submit\">\n          ", "\n          <simple-icon-lite  \n            aria-hidden=\"true\" \n            ?hidden=\"", "\"\n            icon=\"", "\"></simple-icon-lite>\n        </button>\n      </div>\n    "])), this.submit, this.hidden || this.disabled, this.thread ? "reply-form" : "comment-form", this._handleSubmit, this.field, this.textareaLabel, this.field, this.field, this.thread, this.buttonLabel, !this.icon, this.icon);
      }
    }, {
      key: "_handleSubmit",
      value: function _handleSubmit(e) {
        e.preventDefault();

        if (this.demo) {
          this.dispatchEvent(new CustomEvent("comment-demo", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              textarea: this.shadowRoot.querySelector("textarea"),
              thread: this.thread
            }
          }));
          return false;
        } else {
          this.dispatchEvent(new CustomEvent("comment-submitted", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        }
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_a70ed0e0809211edaa2833647dc78c6c || (_templateObject2_a70ed0e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          width: 100%;\n          transition: all 0.5s ease-in-out;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        label {\n          flex: 0 0 0%;\n          margin: 0;\n          padding: 0;\n          position: absolute;\n          left: -99999px;\n          width: 0;\n          height: 0;\n          overflow: hidden;\n        }\n        textarea {\n          flex: 1 1 100%;\n          height: var(--threaded-discussion-textarea-Height, 16px);\n          opacity: var(--threaded-discussion-textarea-Opacity, 0);\n          width: calc(\n            100% - 2 * var(--threaded-discussion-comment-Padding, 10px)\n          );\n          padding: var(--threaded-discussion-comment-Padding, 10px);\n          margin: 1px;\n          border: none;\n          resize: none;\n          transition: all 0.5s ease-in-out;\n          color: var(\n            --threaded-discussion-textarea-Color,\n            var(--threaded-discussion-Color, #4b4b4b)\n          );\n          line-height: var(\n            --threaded-discussion-textarea-LineHeight,\n            var(--threaded-discussion-LineHeight, 160%)\n          );\n          font-weight: var(--threaded-discussion-textarea-FontWeight);\n          font-size: var(\n            --threaded-discussion-textarea-FontSize,\n            var(--threaded-discussion-FontSize, 14px)\n          );\n          font-family: var(\n            --threaded-discussion-textarea-FontFamily,\n            var(--threaded-discussion-FontFamily)\n          );\n        }\n        textarea:focus,\n        :host:focus-within textarea {\n          height: var(--threaded-discussion-textarea-focus-Height, 100px);\n          opacity: var(--threaded-discussion-textarea-focus-Opacity, 1);\n        }\n        form {\n          display: flex;\n          justify-content: space-between;\n          align-items: flex-end;\n        }\n        .reply-form {\n          margin: 1px;\n        }\n        button {\n          flex: 0 0 auto;\n          text-align: center;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          margin: 1px;\n          min-height: 24px;\n          color: var(--threaded-discussion-comment-button-Color, #fff);\n          font-weight: var(--threaded-discussion-button-FontWeight);\n          font-size: var(\n            --threaded-discussion-button-FontSize,\n            var(--threaded-discussion-FontSize, 14px)\n          );\n          font-family: var(--threaded-discussion-button-FontFamily);\n          border-radius: var(--threaded-discussion-button-BorderRadius, 3px);\n        }\n        .reply-form button {\n          color: var(--threaded-discussion-reply-button-Color, #4b4b4b);\n          background-color: var(\n            --threaded-discussion-reply-button-BackgroundColor,\n            #fff\n          );\n          border: 1px solid\n            var(--threaded-discussion-reply-button-BorderColor, #4b4b4b);\n        }\n        .reply-form button:focus,\n        .reply-form button:hover {\n          color: var(--threaded-discussion-reply-button-focus-Color, #222);\n          background-color: var(\n            --threaded-discussion-reply-button-focus-BackgroundColor,\n            #fff\n          );\n          border: 1px solid\n            var(--threaded-discussion-reply-button-focus-BorderColor, #222);\n        }\n        .comment-form button {\n          font-weight: var(--threaded-discussion-comment-button-FontWeight);\n          font-size: var(--threaded-discussion-comment-button-FontSize);\n          font-family: var(--threaded-discussion-button-FontFamily);\n          color: var(--threaded-discussion-comment-button-Color, #fff);\n          background-color: var(\n            --threaded-discussion-comment-button-BackgroundColor,\n            #4b4b4b\n          );\n          border: 1px solid\n            var(--threaded-discussion-comment-button-BorderColor, #4b4b4b);\n        }\n        .comment-form button:focus,\n        .comment-form button:hover {\n          color: var(--threaded-discussion-comment-button-focus-Color, #fff);\n          background-color: var(\n            --threaded-discussion-comment-button-focus-BackgroundColor,\n            #222\n          );\n          border: 1px solid\n            var(--threaded-discussion-comment-button-focus-BorderColor, #222);\n        }\n        button simple-icon-lite {\n          margin-left: 5px;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "threaded-discussion-form";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * reply button id
           */
          button: {
            type: String
          },

          /**
           * label for button
           */
          buttonLabel: {
            type: String,
            attribute: "button-label",
            reflect: true
          },

          /**
           * whetherin demo mode
           */
          demo: {
            type: Boolean
          },

          /**
           * whether form is disabled
           */
          disabled: {
            type: Boolean,
            attribute: "disabled",
            reflect: true
          },

          /**
           * field name for comment body
           */
          field: {
            type: String
          },

          /**
           * whether form is hidden
           */
          hidden: {
            type: Boolean,
            attribute: "hidden",
            reflect: true
          },

          /**
           * button icon
           */
          icon: {
            type: String,
            attribute: "icon",
            reflect: true
          },

          /**
           * form action on submit
           */
          submit: {
            type: String
          },

          /**
           * label for textarea
           */
          textareaLabel: {
            type: String,
            attribute: "textarea-label",
            reflect: true
          },

          /**
           * thread id if this form is replying to a thread
           */
          thread: {
            type: String
          }
        };
      }
    }]);
    return ThreadedDiscussionForm;
  }(_index.LitElement);

  _exports.ThreadedDiscussionForm = ThreadedDiscussionForm;
  customElements.define(ThreadedDiscussionForm.tag, ThreadedDiscussionForm);
});