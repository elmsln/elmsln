define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../secure-request/secure-request.js", "../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../../@polymer/paper-dialog/paper-dialog.js", "../../../../@polymer/paper-input/paper-input.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "./lrnapp-studio-submission-edit-add-asset.js", "./lrnapp-studio-submission-media-editoverlay.js", "../../../utils/utils.js"], function (_exports, _polymerElement, _secureRequest, _polymerDom, _domRepeat, _domIf, _paperDialog, _paperInput, _ironAjax, _lrnappStudioSubmissionEditAddAsset, _lrnappStudioSubmissionMediaEditoverlay, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioSubmissionEditVideo = void 0;

  var _templateObject_eb46bfe08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappStudioSubmissionEditVideo = /*#__PURE__*/function (_SecureRequestXhr) {
    babelHelpers.inherits(LrnappStudioSubmissionEditVideo, _SecureRequestXhr);

    var _super = _createSuper(LrnappStudioSubmissionEditVideo);

    function LrnappStudioSubmissionEditVideo() {
      babelHelpers.classCallCheck(this, LrnappStudioSubmissionEditVideo);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappStudioSubmissionEditVideo, [{
      key: "lastErrorChanged",
      value:
      /**
       * Handle the last error rolling in
       */
      function lastErrorChanged(e) {
        if (e.detail.value) {
          console.error(e);
          var target = (0, _utils.normalizeEventPath)(e)[0]; // check for JWT needing refreshed vs busted but must be 403

          switch (parseInt(e.detail.value.status)) {
            // cookie data not found, need to go get it
            // @notice this currently isn't possible but we could modify
            // the backend in the future to support throwing 401s dynamically
            // if we KNOW an event must expire the timing token
            case 401:
            case 401:
              // we know what the "target" is as an iron-ajax tag
              // so we know what call was just attempted. Let's await
              // a fetch against the top level site landing page with
              // no-cors will force a hit against the backend to refresh
              // the PHP session / bounce back from Azure as needed
              // so that when we reissue this call it'll go through (magically)
              fetch(window.Drupal.settings.basePath, {
                mode: "no-cors"
              }).then(function (e) {
                console.log(e); // delay just to be sure

                setTimeout(function () {
                  target.generateRequest();
                }, 250);
              });
              break;
          }
        }
      }
    }, {
      key: "_openDialog",
      value: function _openDialog(e) {
        this.$.dialog.open();
      }
    }, {
      key: "_addImage",
      value: function _addImage(e) {
        var video_url = this.newvideo;
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var tagname = normalizedEvent.localTarget.tagName; // find out if the component that called this function
        // if it's the iron-ajax then that means we have what we
        // need to add this new video to the array.

        if (tagname === "IRON-AJAX") {
          var video_src = e.detail.response.data; // make sure we upgrade from NULL to an array if needed

          if (Object.prototype.toString.call(this.videos) != "[object Array]") {
            this.videos = [];
          }

          this.push("videos", {
            video_url: this.newvideo,
            video_src: video_src
          });
          this.newvideo = "";
        } // if it wasn't iron ajax, then we need to go get the
        // newvideo's source url from the api
        else {
            this.shadowRoot.querySelector("#videoGenerateSourceUrl").generateRequest();
          }
      }
    }, {
      key: "_videoDelete",
      value: function _videoDelete(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var deleteIndex = normalizedEvent.localTarget.getAttribute("data-index");
        this.splice("videos", deleteIndex, 1);
      }
    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappStudioSubmissionEditVideo.prototype), "ready", this).call(this);
        var url = this.generateUrl("/api/video/generate-source-url");
        this.set("videoGenerateSourceUrl", url);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_eb46bfe08e0011ed99ce491205e67b1d || (_templateObject_eb46bfe08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: flex;\n          position: relative;\n          align-items: stretch;\n        }\n\n        lrnapp-studio-submission-media-editoverlay,\n        lrnapp-studio-submission-edit-add-asset {\n          background: lightgray;\n          display: flex;\n          align-items: center;\n          margin-right: 1em;\n        }\n\n        iframe {\n          display: block;\n        }\n\n        .videosfield__create {\n          display: block;\n          height: 250px;\n          width: 300px;\n        }\n\n        paper-dialog {\n          width: 50%;\n          width: 50vmax;\n          padding: 1em;\n        }\n      </style>\n\n      <dom-repeat items=\"[[videos]]\" as=\"video\">\n        <template>\n          <lrnapp-studio-submission-media-editoverlay\n            on-deleted=\"_videoDelete\"\n            data-index$=\"[[index]]\"\n          >\n            <iframe\n              class=\"videosfield__iframe\"\n              src$=\"[[video.video_src]]\"\n            ></iframe>\n          </lrnapp-studio-submission-media-editoverlay>\n        </template>\n      </dom-repeat>\n\n      <lrnapp-studio-submission-edit-add-asset\n        icon=\"av:video-library\"\n        on-click=\"_openDialog\"\n      ></lrnapp-studio-submission-edit-add-asset>\n\n      <paper-dialog id=\"dialog\">\n        <h2>Add Video</h2>\n        <div style=\"height:50vh;width:100%;overflow:scroll;\">\n          <paper-input label=\"Video URL\" value=\"{{newvideo}}\"></paper-input>\n        </div>\n        <div class=\"buttons\">\n          <button dialog-dismiss=\"\">Cancel</button>\n          <button dialog-confirm=\"\" on-click=\"_addImage\">Add Video</button>\n        </div>\n      </paper-dialog>\n\n      <template is=\"dom-if\" if=\"[[videoGenerateSourceUrl]]\">\n        <!-- Generate Video Source Url for preview -->\n        <iron-ajax\n          reject-with-request\n          on-last-error-changed=\"lastErrorChanged\"\n          id=\"videoGenerateSourceUrl\"\n          url=\"[[videoGenerateSourceUrl]]\"\n          method=\"POST\"\n          body=\"[[newvideo]]\"\n          content-type=\"application/json\"\n          handle-as=\"json\"\n          on-response=\"_addImage\"\n        ></iron-ajax>\n      </template>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-submission-edit-video";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          videos: {
            type: Array,
            notify: true
          },
          selectedPage: {
            type: String,
            value: "0"
          },
          newvideo: {
            type: String,
            value: ""
          },
          videoGenerateSourceUrl: {
            type: String,
            value: null
          }
        };
      }
    }]);
    return LrnappStudioSubmissionEditVideo;
  }((0, _secureRequest.SecureRequestXhr)(_polymerElement.PolymerElement));

  _exports.LrnappStudioSubmissionEditVideo = LrnappStudioSubmissionEditVideo;
  customElements.define(LrnappStudioSubmissionEditVideo.tag, LrnappStudioSubmissionEditVideo);
});