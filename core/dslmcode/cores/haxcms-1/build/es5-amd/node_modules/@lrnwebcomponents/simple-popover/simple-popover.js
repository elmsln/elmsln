define(["exports", "../../lit/index.js", "../absolute-position-behavior/absolute-position-behavior.js"], function (_exports, _index, _absolutePositionBehavior) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimplePopover = void 0;

  var _templateObject_ad0789d08e0011ed99ce491205e67b1d, _templateObject2_ad0789d08e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
    * `simple-popover`
    * a popover alertdialog that is positioned next to a target element
    *
   ### Styling
   
   `<simple-popover>` provides the following custom properties
   for styling:
   
   Custom property | Description | Default
   ----------------|-------------|----------
   `--simple-popover-border-radius` | popover border-radius | 3px
   `--simple-popover-color` | popover text color| #222
   `--simple-popover-padding` | popover padding | 10px
   `--simple-popover-background-color` | popover background-color | white
   `--simple-popover-border-color` | popover border-color | #bbb
   `--simple-popover-box-shadow` | popover box-shadow | rgba(60, 64, 67, 0.3) 0px 4px 8px 3px;
    *
    * @element simple-popover
    * @demo ./demo/index.html
    * @demo ./demo/tour.html Tour
    */
  var SimplePopover = /*#__PURE__*/function (_AbsolutePositionBeha) {
    babelHelpers.inherits(SimplePopover, _AbsolutePositionBeha);

    var _super = _createSuper(SimplePopover);

    function SimplePopover() {
      var _this;

      babelHelpers.classCallCheck(this, SimplePopover);
      _this = _super.call(this);
      _this.offset = -10;
      _this.fitToVisibleBounds = true;
      return _this;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */


    babelHelpers.createClass(SimplePopover, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_ad0789d08e0011ed99ce491205e67b1d || (_templateObject_ad0789d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div>\n      <div id=\"content\" role=\"alertdialog\" part=\"simple-popover-content\">\n        <slot></slot>\n      </div>\n      <div id=\"pointer-outer\">\n        <div id=\"pointer\" .style=", "></div>\n      </div>\n    </div>"])), this._getMargins(this.__positions));
      } // properties available to the custom element for data binding

    }, {
      key: "_getMargins",
      value:
      /**
       * sets pointer position based on popover and target middles
       *
       * @param {object} positions object that contains postions for popover and target
       * @returns {string} a string with margin styles to offset pointer
       */
      function _getMargins(positions) {
        if (positions && positions.target) {
          var self = this.getBoundingClientRect(),
              h = this.position === "bottom" || this.position === "top",
              max = h ? self.width : self.height,
              sStart = h ? self.left : self.top,
              tStart = h ? positions.target.left : positions.target.top,
              tHalf = h ? positions.target.width / 2 : positions.target.height / 2,
              center = tStart + tHalf - 10,
              margin = Math.min(max - 20, Math.max(0, center - sStart)),
              style = h ? "margin: 0 0 0 ".concat(margin, "px;") : "margin: ".concat(margin, "px 0 0 0;");
          return style;
        }

        return "";
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimplePopover), "styles", this)), [(0, _index.css)(_templateObject2_ad0789d08e0011ed99ce491205e67b1d || (_templateObject2_ad0789d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host([hidden]) {\n          display: none;\n        }\n\n        :host > div {\n          display: flex;\n          flex-direction: column-reverse;\n          justify-content: stretch;\n          z-index: 1;\n        }\n\n        :host([position=\"left\"]) > div {\n          justify-content: flex-start;\n          flex-direction: row;\n        }\n\n        :host([position=\"right\"]) > div {\n          justify-content: flex-end;\n          flex-direction: row-reverse;\n        }\n\n        :host([position=\"top\"]) > div {\n          flex-direction: column;\n        }\n\n        :host > div > * {\n          width: 100%;\n        }\n\n        :host([position=\"left\"]) > div > *,\n        :host([position=\"right\"]) > div > * {\n          width: unset;\n        }\n\n        :host {\n          pointer-events: none;\n        }\n\n        #content {\n          margin: 0;\n          pointer-events: all;\n          padding: var(--simple-popover-padding, 10px);\n          color: var(--simple-popover-color, #222);\n          background-color: var(--simple-popover-background-color, white);\n          border: var(\n            --simple-popover-border,\n            1px solid var(--simple-popover-border-color, #bbb)\n          );\n          border-radius: var(--simple-popover-border-radius, 3px);\n          box-shadow: var(\n            --simple-popover-box-shadow,\n            rgba(60, 64, 67, 0.3) 0px 4px 8px 3px\n          );\n          min-height: var(--simple-popover-min-height, 20px);\n          max-height: var(--simple-popover-max-height, 200px);\n          scroll-behavior: smooth;\n        }\n\n        #pointer-outer {\n          margin: -1px;\n        }\n\n        #pointer {\n          width: 20px;\n          height: 20px;\n          position: relative;\n          overflow: hidden;\n          flex: 0 0 20px;\n        }\n\n        #pointer:after {\n          content: \"\";\n          position: absolute;\n          width: 10px;\n          height: 10px;\n          background-color: var(--simple-popover-background-color, white);\n          border: 1px solid var(--simple-popover-border-color, #bbb);\n          transform: rotate(45deg);\n          top: 15px;\n          left: 5px;\n        }\n\n        :host([position=\"top\"]) #pointer:after {\n          top: -5px;\n          left: 5px;\n        }\n\n        :host([position=\"right\"]) #pointer:after {\n          top: 5px;\n          left: 15px;\n        }\n\n        :host([position=\"left\"]) #pointer:after {\n          top: 5px;\n          left: -5px;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimplePopover), "properties", this));
      }
    }, {
      key: "tag",
      get: function get() {
        return "simple-popover";
      }
    }]);
    return SimplePopover;
  }(_absolutePositionBehavior.AbsolutePositionBehavior);

  _exports.SimplePopover = SimplePopover;
  customElements.define(SimplePopover.tag, SimplePopover);
});