define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../@polymer/iron-list/iron-list.js", "../../../../@polymer/iron-pages/iron-pages.js", "../elmsln-base-deps.js", "../../../../@polymer/iron-selector/iron-selector.js", "../../../../@polymer/app-layout/app-toolbar/app-toolbar.js", "../../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../../@polymer/app-route/app-location.js", "../../../../@polymer/app-route/app-route.js", "../../../../@polymer/paper-dropdown-menu/paper-dropdown-menu.js", "../../../../@polymer/paper-listbox/paper-listbox.js", "../../../../@polymer/paper-item/paper-item.js", "../../../../@polymer/paper-toast/paper-toast.js", "../../../lrndesign-gallerycard/lrndesign-gallerycard.js", "../../../elmsln-loading/elmsln-loading.js", "./lrnapp-open-studio-table.js", "./lrnapp-open-studio-projects.js", "./lrnapp-open-studio-assignments.js", "../../../utils/utils.js"], function (_exports, _polymerElement, _ironAjax, _ironList, _ironPages, _elmslnBaseDeps, _ironSelector, _appToolbar, _domRepeat, _appLocation, _appRoute, _paperDropdownMenu, _paperListbox, _paperItem, _paperToast, _lrndesignGallerycard, _elmslnLoading, _lrnappOpenStudioTable, _lrnappOpenStudioProjects, _lrnappOpenStudioAssignments, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappOpenStudio = void 0;

  var _templateObject_eae6eca08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappOpenStudio = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappOpenStudio, _PolymerElement);

    var _super = _createSuper(LrnappOpenStudio);

    function LrnappOpenStudio() {
      babelHelpers.classCallCheck(this, LrnappOpenStudio);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappOpenStudio, [{
      key: "lastErrorChanged",
      value:
      /**
       * Handle the last error rolling in
       */
      function lastErrorChanged(e) {
        if (e.detail.value) {
          console.error(e);
          var target = (0, _utils.normalizeEventPath)(e)[0]; // check for JWT needing refreshed vs busted but must be 403

          switch (parseInt(e.detail.value.status)) {
            // cookie data not found, need to go get it
            // @notice this currently isn't possible but we could modify
            // the backend in the future to support throwing 401s dynamically
            // if we KNOW an event must expire the timing token
            case 401:
            case 401:
              // we know what the "target" is as an iron-ajax tag
              // so we know what call was just attempted. Let's await
              // a fetch against the top level site landing page with
              // no-cors will force a hit against the backend to refresh
              // the PHP session / bounce back from Azure as needed
              // so that when we reissue this call it'll go through (magically)
              fetch(window.Drupal.settings.basePath, {
                mode: "no-cors"
              }).then(function (e) {
                console.log(e); // delay just to be sure

                setTimeout(function () {
                  target.generateRequest();
                }, 250);
              });
              break;
          }
        }
      }
    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappOpenStudio.prototype), "ready", this).call(this);
        setTimeout(function () {
          window.dispatchEvent(new Event("resize"));
        }, 0);
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappOpenStudio.prototype), "connectedCallback", this).call(this);
        this.addEventListener("route-change", this._routeChange.bind(this));
        setTimeout(function () {
          window.dispatchEvent(new Event("resize"));
        }, 1000);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.removeEventListener("route-change", this._routeChange.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappOpenStudio.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "_routeChanged",
      value: // If the current route is outside the scope of our app
      // then allow the website to break out of the single page
      // application routing
      function _routeChanged(route, endPoint) {
        if (typeof route.path === "string") {
          if (typeof endPoint === "string") {
            if (route.path.startsWith(endPoint)) {
              return;
            }
          } // reload the page which since route changed will load that page


          window.location.reload();
        }
      }
      /**
       * Change route from deeper in the app.
       */

    }, {
      key: "_routeChange",
      value: function _routeChange(e) {
        var details = e.detail;

        if (babelHelpers.typeof(details.queryParams.assignment) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.set("queryParams.assignment", details.queryParams.assignment);
        }

        if (babelHelpers.typeof(details.queryParams.project) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.set("queryParams.project", details.queryParams.project);
        }

        if (babelHelpers.typeof(details.queryParams.author) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.set("queryParams.author", details.queryParams.author);
        }

        if (babelHelpers.typeof(details.data.page) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.set("data.page", details.data.page);
        }
      }
    }, {
      key: "_submissionsCompute",
      value: function _submissionsCompute(originalSubmissions, queryParams) {
        var _this = this;

        // if we don't have an original submissions object to work with then we need to bail
        if (typeof originalSubmissions === "undefined") {
          return [];
        } // define vars


        var root = this;
        var filteredSubmissions = []; // filter the submissions by the query params

        filteredSubmissions = originalSubmissions.filter(function (submission) {
          if (typeof root.queryParams.author !== "undefined") {
            if (submission.relationships.author.data.id !== root.queryParams.author) {
              return false;
            }
          }

          if (typeof root.queryParams.project !== "undefined") {
            if (submission.relationships.project.data.id !== root.queryParams.project) {
              return false;
            }
          }

          if (typeof root.queryParams.assignment !== "undefined") {
            if (submission.relationships.assignment.id !== root.queryParams.assignment) {
              return false;
            }
          }

          return true;
        }); // delay and repaint, can help with refresh issues

        setTimeout(function () {
          _this.$.ironlist.fire("iron-resize");

          window.dispatchEvent(new Event("resize"));
        }, 200);
        return filteredSubmissions;
      }
    }, {
      key: "_tableClicked",
      value: function _tableClicked(e) {
        this.set("route.path", this.endPoint + "/table");
        this.notifyPath("route.path");
      }
      /**
       * Support having a toast message because of delete or error elsewhere.
       */

    }, {
      key: "_deleteToast",
      value: function _deleteToast(deletetoast, old) {
        if (babelHelpers.typeof(deletetoast) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          if (deletetoast == "error") {
            this.$.toast.show("That submission on longer exists!");
          } else {
            this.$.toast.show("Submission deleted successfully!");
          }

          this.set("queryParams.deletetoast", undefined);
          this.notifyPath("queryParams.deletetoast");
        }
      }
    }, {
      key: "_assignmentFilterChanged",
      value: function _assignmentFilterChanged(assignment) {
        // if we have a assignment then we need to uncheck project
        if (babelHelpers.typeof(assignment) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !this._blockcycle) {
          this._blockcycle = true;
          this.set("queryParams.project", undefined);
          this.notifyPath("queryParams.project");
          this.set("queryParams.assignment", assignment);
          this.notifyPath("queryParams.assignment");
        } else {
          this._blockcycle = false;
        }
      }
    }, {
      key: "_projectFilterChanged",
      value: function _projectFilterChanged(project) {
        // if we have a project then we need to uncheck assignment
        if (babelHelpers.typeof(project) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !this._blockcycle) {
          this._blockcycle = true;
          this.set("queryParams.project", project);
          this.notifyPath("queryParams.project");
          this.set("queryParams.assignment", undefined);
          this.notifyPath("queryParams.assignment");
        } else {
          this._blockcycle = false;
        }
      }
      /**
       * Handle response for the whole projects object.
       */

    }, {
      key: "_handleResponse",
      value: function _handleResponse(event) {
        var root = this;
        var author = {};
        var project = {};
        var tmp = {
          authors: [],
          assignments: []
        };
        var assignment = {};
        var assignments = [];
        var authors = []; // get the submission response's data and convert to array ahead of time

        var submissions = [];

        if (root.studioResponse.data.submissions != null) {
          submissions = this._toArray(root.studioResponse.data.submissions);
        }

        var projects = [];

        if (root.studioResponse.data.projects != null) {
          projects = this._toArray(root.studioResponse.data.projects);
        }

        this.set("projects", projects); // original = active off the bat then we apply filters later to chang this

        this.set("originalSubmissions", submissions); // figure out authors and assignments

        for (var index = 0; index < submissions.length; index++) {
          author = submissions[index].relationships.author.data;
          tmp.authors[author.id] = author;
          project = submissions[index].relationships.project.data;
          assignment = submissions[index].relationships.assignment;
          tmp.assignments[assignment.id] = assignment;
          tmp.assignments[assignment.id].project = project.id;
        } // this is stupid but we have to normalize the IDs or else dom repeats will be screwed up


        tmp.authors.forEach(function (element) {
          authors.push(element);
        }); // this is stupid but we have to normalize the IDs or else dom repeats will be screwed up

        tmp.assignments.forEach(function (element) {
          assignments.push(element);
        });
        root.$.loading.hidden = true;
        this.set("assignments", assignments);
        this.set("authors", authors);
      }
    }, {
      key: "_submissionsClicked",
      value: function _submissionsClicked(e) {
        this.set("route.path", this.endPoint + "/submissions");
        this.notifyPath("route.path");
      }
    }, {
      key: "_projectsClicked",
      value: function _projectsClicked(e) {
        this.set("route.path", this.endPoint + "/projects");
        this.notifyPath("route.path");
      }
    }, {
      key: "_assignmentsClicked",
      value: function _assignmentsClicked(e) {
        this.set("route.path", this.endPoint + "/assignments");
        this.notifyPath("route.path");
      }
      /**
       * Simple way to convert from object to array.
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_eae6eca08e0011ed99ce491205e67b1d || (_templateObject_eae6eca08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        [hidden] {\n          display: none !important;\n        }\n        :host {\n          display: block;\n          align-content: center;\n          margin-top: 26px;\n        }\n        #loading {\n          width: 100%;\n          z-index: 1000;\n          opacity: 0.8;\n          text-align: center;\n          align-content: center;\n          justify-content: center;\n          height: 100vh;\n          position: absolute;\n          background-color: white;\n        }\n        iron-selector lrnsys-button {\n          display: inline-flex;\n        }\n        iron-selector a {\n          display: inline-block;\n        }\n        .gallerycard-wrapper {\n          margin: 0;\n          padding: 0;\n        }\n        .gallerycard-wrapper a {\n          text-decoration: none;\n        }\n        lrndesign-gallerycard {\n          padding: 0;\n          margin: 16px;\n          width: 268px;\n          height: 268px;\n        }\n        app-toolbar {\n          height: 64px;\n          position: sticky;\n          top: -1px;\n          z-index: 1000000;\n          background-color: white;\n        }\n        app-toolbar lrnsys-button::part(lrnsys-button-inner-div) {\n          padding: 0 4px;\n        }\n        app-toolbar lrnsys-button::part(lrnsys-button-label) {\n          font-size: 10px;\n        }\n        app-toolbar paper-dropdown-menu {\n          max-width: 12vw;\n        }\n        @media (max-width: 900px) {\n          app-toolbar lrnsys-button::part(lrnsys-button-label) {\n            display: none;\n          }\n          app-toolbar paper-dropdown-menu {\n            max-width: 15vw;\n          }\n        }\n        .gallery-grid {\n          margin: 0 auto;\n          width: 95%;\n        }\n        .iron-selected .display-mode {\n          background-color: var(--elmsln-system-color-dark);\n          color: white;\n          --lrnsys-button-link-color: white;\n        }\n        .iron-list-container {\n          display: flex;\n          flex-direction: column;\n        }\n        lrnsys-button {\n          --lrnsys-button-height: 48px;\n        }\n        iron-list {\n          flex: 1 1 auto;\n        }\n      </style>\n      <iron-ajax\n        auto\n        reject-with-request\n        on-last-error-changed=\"lastErrorChanged\"\n        url=\"[[sourcePath]]\"\n        params=\"\"\n        handle-as=\"json\"\n        last-response=\"{{studioResponse}}\"\n        on-response=\"_handleResponse\"\n      ></iron-ajax>\n\n      <app-location\n        route=\"{{route}}\"\n        query-params=\"{{queryParams}}\"\n      ></app-location>\n      <app-route\n        route=\"{{route}}\"\n        pattern=\"[[endPoint]]/:page\"\n        data=\"{{data}}\"\n        tail=\"{{tail}}\"\n        query-params=\"{{queryParams}}\"\n      >\n      </app-route>\n\n      <div id=\"loading\">\n        <h3>Loading..</h3>\n        <elmsln-loading color=\"grey-text\" size=\"large\"></elmsln-loading>\n      </div>\n      <app-toolbar>\n        <iron-selector\n          selected=\"{{data.page}}\"\n          attr-for-selected=\"name\"\n          role=\"navigation\"\n        >\n          <a tabindex=\"-1\" name=\"submissions\" on-click=\"_submissionsClicked\"\n            ><lrnsys-button\n              icon=\"apps\"\n              label=\"Submission display\"\n              hover-class=\"amber darken-4 white-text\"\n              class=\"display-mode\"\n              button-class=\"display-mode style-scope lrnapp-open-studio x-scope lrnsys-button-0\"\n            ></lrnsys-button\n          ></a>\n          <a tabindex=\"-1\" name=\"projects\" on-click=\"_projectsClicked\"\n            ><lrnsys-button\n              icon=\"folder\"\n              label=\"Project board\"\n              hover-class=\"amber darken-4 white-text\"\n              class=\"display-mode\"\n              button-class=\"display-mode style-scope lrnapp-open-studio x-scope lrnsys-button-0\"\n            ></lrnsys-button\n          ></a>\n          <a tabindex=\"-1\" name=\"assignments\" on-click=\"_assignmentsClicked\"\n            ><lrnsys-button\n              icon=\"list\"\n              label=\"Assignment centric\"\n              hover-class=\"amber darken-4 white-text\"\n              class=\"display-mode\"\n              button-class=\"display-mode style-scope lrnapp-open-studio x-scope lrnsys-button-0\"\n            ></lrnsys-button\n          ></a>\n          <a tabindex=\"-1\" name=\"table\" on-click=\"_tableClicked\"\n            ><lrnsys-button\n              icon=\"view-list\"\n              label=\"Table view\"\n              hover-class=\"amber darken-4 white-text\"\n              class=\"display-mode\"\n              button-class=\"display-mode style-scope lrnapp-open-studio x-scope lrnsys-button-0\"\n            ></lrnsys-button\n          ></a>\n        </iron-selector>\n        <span main-title></span>\n        <span\n          top-item\n          style=\"text-align:right;font-size:.5em;padding-right:1em;\"\n          >Displaying [[submissions.length]] of\n          [[originalSubmissions.length]]</span\n        >\n        <paper-dropdown-menu label=\"Author\" hidden$=\"[[!authors]]\">\n          <paper-listbox\n            slot=\"dropdown-content\"\n            class=\"dropdown-content\"\n            selected=\"{{queryParams.author}}\"\n            attr-for-selected=\"item-id\"\n          >\n            <paper-item></paper-item>\n            <template is=\"dom-repeat\" items=\"[[_toArray(authors)]]\" as=\"author\">\n              <paper-item item-id=\"[[author.id]]\"\n                >[[author.display_name]]</paper-item\n              >\n            </template>\n          </paper-listbox>\n        </paper-dropdown-menu>\n        <paper-dropdown-menu label=\"Project\" hidden$=\"[[!projects]]\">\n          <paper-listbox\n            slot=\"dropdown-content\"\n            class=\"dropdown-content\"\n            selected=\"{{queryParams.project}}\"\n            attr-for-selected=\"item-id\"\n          >\n            <paper-item></paper-item>\n            <template\n              is=\"dom-repeat\"\n              items=\"[[_toArray(projects)]]\"\n              as=\"project\"\n            >\n              <paper-item item-id=\"[[project.id]]\"\n                >[[project.attributes.title]]</paper-item\n              >\n            </template>\n          </paper-listbox>\n        </paper-dropdown-menu>\n        <paper-dropdown-menu label=\"Assignment\" hidden$=\"[[!assignments]]\">\n          <paper-listbox\n            slot=\"dropdown-content\"\n            class=\"dropdown-content\"\n            selected=\"{{queryParams.assignment}}\"\n            attr-for-selected=\"item-id\"\n          >\n            <paper-item></paper-item>\n            <template\n              is=\"dom-repeat\"\n              items=\"[[_toArray(assignments)]]\"\n              as=\"assignment\"\n            >\n              <paper-item item-id=\"[[assignment.id]]\"\n                >[[assignment.attributes.title]]</paper-item\n              >\n            </template>\n          </paper-listbox>\n        </paper-dropdown-menu>\n      </app-toolbar>\n      <div class=\"gallery-grid\">\n        <iron-pages\n          selected=\"{{data.page}}\"\n          attr-for-selected=\"name\"\n          fallback-selection=\"submissions\"\n          role=\"main\"\n        >\n          <div class=\"iron-list-container\" name=\"submissions\">\n            <iron-list\n              id=\"ironlist\"\n              items=\"[[submissions]]\"\n              as=\"item\"\n              grid\n              scroll-target=\"document\"\n            >\n              <template>\n                <div class=\"gallerycard-wrapper\">\n                  <a\n                    href$=\"[[basePath]]lrnapp-studio-submission/submissions/[[item.id]]\"\n                  >\n                    <lrndesign-gallerycard\n                      elevation=\"2\"\n                      data-submission-id$=\"[[item.id]]\"\n                      title=\"[[item.attributes.title]]\"\n                      author=\"[[item.relationships.author.data]]\"\n                      comments=\"[[item.meta.comment_count]]\"\n                      image=\"[[item.display.image]]\"\n                      icon=\"[[item.display.icon]]\"\n                      date=\"[[item.meta.humandate]]\"\n                      class=\"ferpa-protect\"\n                    ></lrndesign-gallerycard>\n                  </a>\n                </div>\n              </template>\n            </iron-list>\n          </div>\n          <lrnapp-open-studio-assignments\n            name=\"assignments\"\n            base-path=\"[[basePath]]\"\n            submissions=\"[[submissions]]\"\n            assignments=\"[[assignments]]\"\n            active-author-id=\"[[queryParams.author]]\"\n            active-assignment-id=\"[[queryParams.assignment]]\"\n          ></lrnapp-open-studio-assignments>\n          <lrnapp-open-studio-projects\n            name=\"projects\"\n            base-path=\"[[basePath]]\"\n            projects=\"[[projects]]\"\n            submissions=\"[[submissions]]\"\n            assignments=\"[[assignments]]\"\n            active-author-id=\"[[queryParams.author]]\"\n            active-project-id=\"[[queryParams.project]]\"\n          ></lrnapp-open-studio-projects>\n          <lrnapp-open-studio-table\n            name=\"table\"\n            base-path=\"[[basePath]]\"\n            submissions=\"[[submissions]]\"\n          ></lrnapp-open-studio-table>\n        </iron-pages>\n      </div>\n      <paper-toast id=\"toast\"></paper-toast>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-open-studio";
      }
    }, {
      key: "properties",
      get: function get() {
        var _ref;

        return _ref = {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },

          /**
           * The studioResponse from server
           */
          studioResponse: {
            type: Object,
            notify: true
          },

          /**
           * The submissions to render; potentially filtered
           */
          submissions: {
            type: Array,
            notify: true,
            computed: "_submissionsCompute(originalSubmissions, queryParams)"
          },

          /**
           * The original submissions array; used to filter against
           */
          originalSubmissions: {
            type: Array,
            notify: true
          },

          /**
           * The submissions to render
           */
          projects: {
            type: Array,
            notify: true,
            value: []
          },

          /**
           * The assignments to render
           */
          assignments: {
            type: Array,
            notify: true,
            value: []
          },

          /**
           * The authors to render
           */
          authors: {
            type: Array,
            notify: true,
            value: []
          },

          /**
           * sourcePath for submission data.
           */
          sourcePath: {
            type: String,
            notify: true
          }
        }, babelHelpers.defineProperty(_ref, "endPoint", {
          type: String,
          notify: true
        }), babelHelpers.defineProperty(_ref, "basePath", {
          type: String,
          notify: true
        }), babelHelpers.defineProperty(_ref, "activeSubmission", {
          type: String,
          value: null,
          notify: true
        }), babelHelpers.defineProperty(_ref, "queryParams", {
          type: Object,
          notify: true
        }), babelHelpers.defineProperty(_ref, "_blockcycle", {
          type: Boolean,
          value: false
        }), _ref;
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_routeChanged(route, endPoint)", "_deleteToast(queryParams.deletetoast)", "_assignmentFilterChanged(queryParams.assignment)", "_projectFilterChanged(queryParams.project)"];
      }
    }]);
    return LrnappOpenStudio;
  }(_polymerElement.PolymerElement);

  _exports.LrnappOpenStudio = LrnappOpenStudio;
  customElements.define(LrnappOpenStudio.tag, LrnappOpenStudio);
});