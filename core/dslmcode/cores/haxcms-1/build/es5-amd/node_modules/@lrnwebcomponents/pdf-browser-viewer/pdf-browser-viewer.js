define(["exports", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/elements/dom-if.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js"], function (_exports, _polymerElement, _domIf, _simpleIcon, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PdfBrowserViewer = void 0;

  var _templateObject_abf99c408e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  @license
  Copyright (c) 2016 The Ingresso RÃ¡pido Web Components Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://ingressorapidowebcomponents.github.io/LICENSE.txt
  The complete set of authors may be found at http://ingressorapidowebcomponents.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://ingressorapidowebcomponents.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  /**
  
  
  Example:
  ```html
      <pdf-browser-viewer id="pdfViewer" file="[[pdfUrl]]" width="100%"></pdf-browser-viewer>
  ```
  
  Data Bind with Blob example:
  ```js
      this.pdfUrl = URL.createObjectURL(blob);
  ```
  
  Clear PDF container example:
  ```js
      this.shadowRoot.querySelector('#pdfViewer').clear();
  ```
  
  Message example:
  ```html
      <pdf-browser-viewer
          file="[[pdfUrl]]"
          not-supported-message="Not supported by your browser"
          not-supported-link-message="see the file here!">
      </pdf-browser-viewer>
  ```
  
  Card example:
  ```html
      <pdf-browser-viewer
          file="[[pdfUrl]]"
          card elevation="3"
          download-label="Baixar">
      </pdf-browser-viewer>
  ```
  
  * @demo demo/index.html
  */
  var PdfBrowserViewer = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(PdfBrowserViewer, _PolymerElement);

    var _super = _createSuper(PdfBrowserViewer);

    function PdfBrowserViewer() {
      babelHelpers.classCallCheck(this, PdfBrowserViewer);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(PdfBrowserViewer, [{
      key: "clear",
      value:
      /**
       * Clear PDF container
       */
      function clear() {
        this.file = undefined;
      }
      /**
       * Downloads the pdf file
       */

    }, {
      key: "_download",
      value: function _download() {
        window.location = this.file;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_abf99c408e0011ed99ce491205e67b1d || (_templateObject_abf99c408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: none;\n        }\n        :host([file]) {\n          display: inherit;\n        }\n        div.card {\n          box-shadow: 0 5px 5px rgba(0, 0, 0, 0.7);\n        }\n      </style>\n\n      <template is=\"dom-if\" if=\"[[card]]\">\n        <div heading=\"[[heading]]\" elevation=\"[[elevation]]\">\n          <div class=\"card-content\">\n            <object\n              data=\"[[file]]\"\n              type=\"application/pdf\"\n              width=\"[[width]]\"\n              height=\"[[height]]\"\n            >\n              <p>\n                {{notSupportedMessage}}\n                <a href=\"[[file]]\">{{notSupportedLinkMessage}}</a>\n              </p>\n            </object>\n          </div>\n          <div class=\"card-actions\">\n            <button on-click=\"_download\">[[downloadLabel]]</button>\n          </div>\n        </div>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[!card]]\">\n        <object\n          data=\"[[file]]\"\n          type=\"application/pdf\"\n          width=\"[[width]]\"\n          height=\"[[height]]\"\n        >\n          <p>\n            {{notSupportedMessage}}\n            <a href=\"[[file]]\">{{notSupportedLinkMessage}}</a>\n          </p>\n        </object>\n      </template>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "pdf-browser-viewer";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The location of the PDF file.
           *
           * @type String
           */
          file: {
            type: String,
            value: undefined,
            reflectToAttribute: true
          },

          /**
           * The message when browser doesn't support pdf object
           *
           * @type String
           */
          notSupportedMessage: {
            type: String,
            value: "It appears your Web browser is not configured to display PDF files. No worries, just"
          },

          /**
           * The PDF link message when browser doesn't support pdf object
           *
           * @type String
           */
          notSupportedLinkMessage: {
            type: String,
            value: "click here to download the PDF file."
          },

          /**
           * The height of the PDF viewer.
           *
           * @type String
           */
          height: {
            type: String,
            value: "400px"
          },

          /**
           * The width of the PDF viewer.
           *
           * @type String
           */
          width: {
            type: String,
            value: "100%"
          },

          /**
           * PDF viewer as a card with download button.
           *
           * @type Boolean
           */
          card: {
            type: Boolean,
            value: false
          },

          /**
           * Download button label.
           *
           * @type String
           */
          downloadLabel: {
            type: String,
            value: "Download"
          },

          /**
           * The z-depth of the card, from 0-5.
           *
           * @type String
           */
          elevation: {
            type: String,
            value: "1"
          }
        };
      }
    }]);
    return PdfBrowserViewer;
  }(_polymerElement.PolymerElement);

  _exports.PdfBrowserViewer = PdfBrowserViewer;
  customElements.define(PdfBrowserViewer.tag, PdfBrowserViewer);
});