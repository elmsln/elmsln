define(["exports", "meta", "require", "../../lit/index.js", "../intersection-element/lib/IntersectionObserverMixin.js"], function (_exports, meta, _require, _index, _IntersectionObserverMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WikipediaQuery = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);

  var _templateObject_72c0ec60809211edaa2833647dc78c6c, _templateObject2_72c0ec60809211edaa2833647dc78c6c, _templateObject3_72c0ec60809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `wikipedia-query`
   * `Query and present information from wikipedia.`
   * @demo demo/index.html
   * @element wikipedia-query
   */
  var WikipediaQuery = /*#__PURE__*/function (_IntersectionObserver) {
    babelHelpers.inherits(WikipediaQuery, _IntersectionObserver);

    var _super = _createSuper(WikipediaQuery);

    function WikipediaQuery() {
      var _this;

      babelHelpers.classCallCheck(this, WikipediaQuery);
      _this = _super.call(this);
      _this.hideTitle = false;
      var FALLBACK_LANG = "en";
      var language = document.body.getAttribute("xml:lang") || document.body.getAttribute("lang") || document.documentElement.getAttribute("xml:lang") || document.documentElement.getAttribute("lang") || navigator.language || FALLBACK_LANG;
      _this.language = language.split("-")[0];
      _this.headers = {
        cache: "force-cache"
      };
      var date = new Date(Date.now());
      _this.__now = date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
      return _this;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */


    babelHelpers.createClass(WikipediaQuery, [{
      key: "render",
      value: // LitElement render function
      function render() {
        return (0, _index.html)(_templateObject_72c0ec60809211edaa2833647dc78c6c || (_templateObject_72c0ec60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" ", ""])), this.elementVisible ? (0, _index.html)(_templateObject2_72c0ec60809211edaa2833647dc78c6c || (_templateObject2_72c0ec60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <h3 .hidden=\"", "\" part=\"heading-3\">\n            ", "\n          </h3>\n          <div id=\"result\"></div>\n          <citation-element\n            creator=\"{Wikipedia contributors}\"\n            scope=\"sibling\"\n            license=\"by-sa\"\n            title=\"", " --- {Wikipedia}{,} The Free Encyclopedia\"\n            source=\"https://", ".wikipedia.org/w/index.php?title=", "\"\n            date=\"", "\"\n          ></citation-element>"])), this.hideTitle, this._title, this.search, this.language, this.search, this.__now) : "");
      }
    }, {
      key: "updateArticle",
      value: function updateArticle(search, headers, language) {
        var _this2 = this;

        fetch("https://".concat(language, ".wikipedia.org/w/api.php?origin=*&action=query&titles=").concat(search, "&prop=extracts&format=json"), headers).then(function (response) {
          if (response.ok) return response.json();
        }).then(function (json) {
          _this2.handleResponse(json);
        });
      }
      /**
       * LitElement properties updated
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          // element is visible, now we can search
          if (propName == "elementVisible" && _this3[propName]) {
            new Promise(function (res, rej) {
              return _require.default(["../citation-element/citation-element.js"], res, rej);
            });
          }

          if (["elementVisible", "search", "headers", "language"].includes(propName) && _this3.search && _this3.headers && _this3.elementVisible && _this3.language) {
            clearTimeout(_this3._debounce);
            _this3._debounce = setTimeout(function () {
              _this3.updateArticle(_this3.search, _this3.headers, _this3.language);
            }, 10);
          }

          if (propName == "search") {
            if (_this3.title) {
              _this3._title = _this3.title;
            } else {
              _this3._title = _this3[propName].replace("_", " ") + " Wikipedia article";
            }
          }

          if (propName == "title") {
            if (_this3.title) {
              _this3._title = _this3.title;
            }
          }
        });
      }
    }, {
      key: "handleResponse",
      value:
      /**
       * Process response from wikipedia.
       */
      function handleResponse(response) {
        // the key of pages is a number so need to look for it
        if (babelHelpers.typeof(response) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && response.query) {
          for (var key in response.query.pages) {
            // skip anything that's prototype object
            if (!response.query.pages.hasOwnProperty(key)) continue; // load object response, double check we have an extract

            if (response.query.pages[key].extract) {
              var _html = response.query.pages[key].extract;
              _html = _html.replace(/<script[\s\S]*?>/gi, "&lt;script&gt;");
              _html = _html.replace(/<\/script>/gi, "&lt;/script&gt;");
              _html = _html.replace(/<style[\s\S]*?>/gi, "&lt;style&gt;");
              _html = _html.replace(/<\/style>/gi, "&lt;/style&gt;"); // need to innerHTML this or it won't set

              this.shadowRoot.querySelector("#result").innerHTML = _html;
            }
          }
        }
      }
      /**
       * Implements haxHooks to tie into life-cycle if hax exists.
       */

    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          gizmoRegistration: "haxgizmoRegistration"
        };
      }
      /**
       * @see haxHooks: gizmoRegistration
       */

    }, {
      key: "haxgizmoRegistration",
      value: function haxgizmoRegistration(store) {
        var _this4 = this;

        window.dispatchEvent(new CustomEvent("i18n-manager-register-element", {
          detail: {
            namespace: "wikipedia-query.haxProperties",
            localesPath: new URL("./locales", meta.url).href,
            locales: ["es", "fr"]
          }
        })); // ensure that this is a valid type of gizmo for endpoints
        // this is nessecary because wikipedia-query wants to be the sole
        // provider of display for things coming off the API

        store.validGizmoTypes.push("wikipedia");

        if (store.appList.filter(function (el, i) {
          // ensure we don't double load the endpoint if already defined
          if (el.connection.url === _this4.language + ".wikipedia.org") {
            return true;
          }

          return false;
        }).length === 0) {
          window.dispatchEvent(new CustomEvent("hax-register-app", {
            bubbles: false,
            composed: false,
            cancelable: false,
            detail: this.haxAppDetails
          }));
        }
      } // return valid appStore spec for how to connect to the wikipedia API

    }, {
      key: "haxAppDetails",
      get: function get() {
        return {
          details: {
            title: "Wikipedia",
            icon: "account-balance",
            color: "grey",
            author: "Wikimedia",
            description: "Encyclopedia of the world.",
            status: "available",
            tags: ["content", "encyclopedia", "wiki"]
          },
          connection: {
            protocol: "https",
            url: this.language + ".wikipedia.org",
            data: {
              action: "query",
              list: "search",
              format: "json",
              origin: "*"
            },
            operations: {
              browse: {
                method: "GET",
                endPoint: "w/api.php",
                pagination: {
                  style: "offset",
                  props: {
                    offset: "sroffset"
                  }
                },
                search: {
                  srsearch: {
                    title: "Search",
                    type: "string"
                  }
                },
                data: {},
                resultMap: {
                  image: "https://" + this.language + ".wikipedia.org/static/images/project-logos/enwiki.png",
                  defaultGizmoType: "wikipedia",
                  items: "query.search",
                  preview: {
                    title: "title",
                    details: "snippet",
                    id: "title"
                  },
                  gizmo: {
                    _url_source: "https://" + this.language + ".wikipedia.org/wiki/<%= id %>",
                    id: "title",
                    title: "title",
                    caption: "snippet",
                    description: "snippet"
                  }
                }
              }
            }
          }
        };
      }
      /**
       * haxProperties integration via file reference
       */

    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject3_72c0ec60809211edaa2833647dc78c6c || (_templateObject3_72c0ec60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --wikipedia-query-body-height: 160px;\n          --wikipedia-query-background-color: #f8f8f8;\n        }\n        :host [hidden] {\n          display: none;\n        }\n        #result {\n          height: var(--wikipedia-query-body-height);\n          overflow: scroll;\n          border: 1px grey solid;\n          padding: 8px 16px;\n        }\n        citation-element {\n          background-color: var(--wikipedia-query-background-color);\n          padding: 16px 8px;\n          font-size: 12px;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "wikipedia-query";
      }
    }, {
      key: "properties",
      get: function get() {
        var props = {};

        if (babelHelpers.get(babelHelpers.getPrototypeOf(WikipediaQuery), "properties", this)) {
          props = babelHelpers.get(babelHelpers.getPrototypeOf(WikipediaQuery), "properties", this);
        }

        return _objectSpread(_objectSpread({}, props), {}, {
          title: {
            type: String
          },
          __now: {
            type: String
          },
          _title: {
            type: String
          },
          headers: {
            type: Object
          },

          /**
           * hideTitle
           */
          hideTitle: {
            type: Boolean,
            attribute: "hide-title"
          },

          /**
           * Search string.
           */
          search: {
            type: String
          },

          /**
           * Two letter language abbreviation used by
           * Wikipedia (ex: Spanish = "es").
           */
          language: {
            type: String
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }]);
    return WikipediaQuery;
  }((0, _IntersectionObserverMixin.IntersectionObserverMixin)(_index.LitElement));

  _exports.WikipediaQuery = WikipediaQuery;
  customElements.define(WikipediaQuery.tag, WikipediaQuery);
});