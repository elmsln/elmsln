define(["exports", "meta", "../../lit/index.js", "../micro-frontend-registry/micro-frontend-registry.js", "../haxcms-elements/lib/core/haxcms-site-store.js", "../../mobx/dist/mobx.esm.js", "../intersection-element/lib/IntersectionObserverMixin.js", "../i18n-manager/lib/I18NMixin.js", "../simple-icon/lib/simple-icons.js", "../hax-iconset/lib/simple-hax-iconset.js", "../micro-frontend-registry/lib/microServices.js"], function (_exports, meta, _index, _microFrontendRegistry, _haxcmsSiteStore, _mobxEsm, _IntersectionObserverMixin, _I18NMixin2, _simpleIcons, _simpleHaxIconset, _microServices) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LessonOverview = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_6b025950809211edaa2833647dc78c6c, _templateObject2_6b025950809211edaa2833647dc78c6c, _templateObject3_6b025950809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  (0, _microServices.enableServices)(["haxcms"]);
  /**
   * `lesson-overview`
   * `Clean presentation of what to expect in an upcoming lesson of instruction`
   * @demo demo/index.html
   * @element lesson-overview
   */

  var LessonOverview = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(LessonOverview, _I18NMixin);

    var _super = _createSuper(LessonOverview);

    function LessonOverview() {
      var _this;

      babelHelpers.classCallCheck(this, LessonOverview);
      _this = _super.call(this);
      _this.t = _this.t || {};
      _this.t = _objectSpread(_objectSpread({}, _this.t), {}, {
        hour: "hour",
        hours: "hours",
        minute: "minute",
        minutes: "minutes"
      });
      _this.ancestor = null;
      return _this;
    }

    babelHelpers.createClass(LessonOverview, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_6b025950809211edaa2833647dc78c6c || (_templateObject_6b025950809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["", ""])), this.elementVisible ? (0, _index.html)(_templateObject2_6b025950809211edaa2833647dc78c6c || (_templateObject2_6b025950809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <div class=\"wrapper\">\n          <slot name=\"prefix\"></slot>\n          <slot></slot>\n        </div>"]))) : "");
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(LessonOverview.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(LessonOverview.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "elementVisible" && _this2[propName]) {
            _this2.getSmartData();
          }
        });
      } // calculate smart details and update associated blocks

    }, {
      key: "getSmartData",
      value: function () {
        var _getSmartData = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var manualSite,
              params,
              site,
              base,
              response,
              _args = arguments;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  manualSite = _args.length > 0 && _args[0] !== undefined ? _args[0] : null;
                  params = {
                    type: "link",
                    __method: "GET"
                  };

                  if (this.ancestor) {
                    params.ancestor = this.ancestor;
                  }

                  if (manualSite) {
                    params.site = manualSite;
                  } else {
                    // assemble manifest
                    site = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.manifest);

                    if (site) {
                      base = "";

                      if (document.querySelector("base")) {
                        base = document.querySelector("base").href;
                      }

                      params.site = base;
                      params.ancestor = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.activeId); // set as the active item ID

                      params.cacheBuster = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.isLoggedIn); // if not logged in, false; if logged in, FORCES updated data instantly
                    }
                  } // only call if we have params


                  if (!params.site) {
                    _context.next = 10;
                    break;
                  }

                  this.querySelectorAll("lesson-highlight[smart]").forEach(function (item) {
                    item.hidden = false;
                    item.loading = true;
                  });
                  _context.next = 8;
                  return _microFrontendRegistry.MicroFrontendRegistry.call("@haxcms/courseStats", params);

                case 8:
                  response = _context.sent;

                  if (response.status === 200) {
                    this.updateSmartHighlightElements(response.data);
                  } else {
                    // failed, just hide them
                    this.querySelectorAll("lesson-highlight[smart]").forEach(function (item) {
                      item.hidden = true;
                      item.loading = false;
                    });
                  }

                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function getSmartData() {
          return _getSmartData.apply(this, arguments);
        }

        return getSmartData;
      }() // find highlight elements and set the data

    }, {
      key: "updateSmartHighlightElements",
      value: function updateSmartHighlightElements(data) {
        var _this3 = this;

        Object.keys(data).forEach(function (key) {
          // we got smart data, see if we have smart blocks that care about this
          var item = _this3.querySelector("lesson-highlight[smart=\"".concat(key, "\"]"));

          if (item) {
            item.loading = false;
            var value = data[key];

            if (value === 0) {
              item.hidden = true;
            } else {
              item.loaded = true;
            } // walk response details, setting things into associated smart blocks


            switch (key) {
              case "audio":
                item.title = "".concat(value, " Audio");
                item.icon = "av:music-video";
                break;

              case "images":
                item.title = "".concat(value, " Images");
                item.icon = "image:image";
                break;

              case "objectives":
                item.title = "".concat(value, " Objectives");
                item.subtitle = "Goals for you as you learn";
                item.icon = "editor:format-list-numbered";
                break;

              case "dataTables":
                item.title = "".concat(value, " Data tables");
                item.icon = "image:grid-on";
                break;

              case "pages":
                var items = [];
                item.title = "".concat(value, " Pages");

                if (data.objectives) {
                  items.push("".concat(data.objectives, " learning objectives"));
                }

                if (data.images) {
                  items.push("".concat(data.images, " images"));
                }

                if (data.dataTables) {
                  items.push("".concat(data.dataTables, " data tables"));
                }

                item.subtitle = items.join(", ");
                item.icon = "editor:insert-drive-file";
                break;

              case "readTime":
                var readVal = [];
                var hours = Math.floor(value / 60);
                var minutes = Math.floor(value - hours * 60); // handle hours of reading

                if (hours === 1) {
                  readVal.push("".concat(hours, " ").concat(_this3.t.hour));
                } else if (hours === 0) {// do nothing for 0
                } else {
                  readVal.push("".concat(hours, " ").concat(_this3.t.hours));
                } // minutes


                if (minutes === 1) {
                  readVal.push("".concat(minutes, " ").concat(_this3.t.minute));
                } else if (minutes === 0) {// do nothing for 0
                } else {
                  readVal.push("".concat(minutes, " ").concat(_this3.t.minutes));
                }

                item.title = "Approx. ".concat(readVal.join(", "), " of reading");
                item.subtitle = "This is just an estimate of words to read";
                item.icon = "communication:import-contacts";
                break;

              case "selfChecks":
                item.title = "".concat(value, " Interactive items");
                item.subtitle = "Self checks and interactive widgets to learn by applying knowledge";
                item.icon = "hardware:videogame-asset";
                break;

              case "video":
                item.title = "".concat(value, " Videos");

                if (data.videoLength) {
                  item.subtitle = "".concat(toHHMMSS(data.videoLength), " of video");
                }

                item.icon = "av:play-circle-outline";
                break;

              case "videoLength":
                item.title = "".concat(toHHMMSS(value), " of video");
                item.icon = "av:play-circle-outline";
                break;

              default:
                item.title = "".concat(value, " of ").concat(key);
                item.icon = "hardware:videogame-asset";
                break;
            }
          }
        });
      }
      /**
       * haxProperties integration via file reference
       */

    }], [{
      key: "tag",
      get:
      /**
       * Convention we use
       */
      function get() {
        return "lesson-overview";
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject3_6b025950809211edaa2833647dc78c6c || (_templateObject3_6b025950809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n        }\n        div ::slotted(lesson-highlight) {\n          margin: 8px;\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }]);
    return LessonOverview;
  }((0, _I18NMixin2.I18NMixin)((0, _IntersectionObserverMixin.IntersectionObserverMixin)(_index.LitElement)));

  _exports.LessonOverview = LessonOverview;
  customElements.define(LessonOverview.tag, LessonOverview);

  // convert seconds back into full time stamp
  function toHHMMSS(seconds) {
    var out = "";
    var snum = parseInt(seconds, 10);
    var hours = Math.floor(snum / 3600);
    var minutes = Math.floor((snum - hours * 3600) / 60);

    if (hours !== 0) {
      out += "".concat(hours, " hour");

      if (hours !== 1) {
        out += "s";
      }

      out += ", ";
    }

    if (minutes !== 0) {
      out += "".concat(minutes, " minute");

      if (hours !== 1) {
        out += "s";
      }
    }

    return out;
  }
});