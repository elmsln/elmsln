define(["exports", "meta", "../../../lit/index.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-lite.js"], function (_exports, meta, _index, _simpleIcons, _simpleIconLite) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.BlockQuote = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_d4a71fa08e0011ed99ce491205e67b1d, _templateObject2_d4a71fa08e0011ed99ce491205e67b1d, _templateObject3_d4a71fa08e0011ed99ce491205e67b1d, _templateObject4_d4a71fa08e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var BlockQuote = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(BlockQuote, _LitElement);

    var _super = _createSuper(BlockQuote);

    function BlockQuote() {
      var _this;

      babelHelpers.classCallCheck(this, BlockQuote);
      _this = _super.call(this);
      _this.citation = "";
      _this.image = "";
      _this.alt = "";
      return _this;
    }

    babelHelpers.createClass(BlockQuote, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_d4a71fa08e0011ed99ce491205e67b1d || (_templateObject_d4a71fa08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"wrap\">\n        ", "\n        <div id=\"quote_wrap\">\n          <div id=\"inner_wrap\">\n            <div id=\"quote\">\n              <simple-icon-lite\n                id=\"iconflip\"\n                icon=\"editor:format-quote\"\n              ></simple-icon-lite>\n              <div><slot></slot></div>\n              <div><slot name=\"quote\"></slot></div>\n              <simple-icon-lite icon=\"editor:format-quote\"></simple-icon-lite>\n            </div>\n            <div id=\"citation\">\n              ", "\n            </div>\n          </div>\n        </div>\n      </div>\n    "])), this.image ? (0, _index.html)(_templateObject2_d4a71fa08e0011ed99ce491205e67b1d || (_templateObject2_d4a71fa08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n              <div\n                id=\"image\"\n                style=\"background-image:url(", ");\"\n                alt=\"", "\"\n              ></div>\n            "])), this.image, this.alt) : "", this.citation ? (0, _index.html)(_templateObject3_d4a71fa08e0011ed99ce491205e67b1d || (_templateObject3_d4a71fa08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <p>-- ", "</p> "])), this.citation) : "");
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          citation: {
            type: String
          },
          image: {
            type: String
          },
          alt: {
            type: String
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./block-quote.haxProperties.json", meta.url).href;
      }
    }, {
      key: "tag",
      get: function get() {
        return "block-quote";
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject4_d4a71fa08e0011ed99ce491205e67b1d || (_templateObject4_d4a71fa08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        #wrap {\n          display: flex;\n          background-color: var(--block-quote-background-color, #f5f5f5);\n          border-left: solid;\n          border-left-width: 8px;\n          border-left-color: var(--block-quote-border-color, #747474);\n          padding: 25px;\n        }\n\n        @media screen and (max-width: 1200px) {\n          #wrap {\n            flex-direction: column;\n            border: none;\n          }\n        }\n\n        #inner_wrap {\n          display: flex;\n          flex-direction: column;\n          flex: 1 1 auto;\n          padding: 20px 20px 0;\n        }\n\n        #quote {\n          font-style: italic;\n          line-height: 1.4;\n        }\n\n        #iconflip {\n          -moz-transform: scaleX(-1);\n          -o-transform: scaleX(-1);\n          -webkit-transform: scaleX(-1);\n          transform: scaleX(-1);\n          filter: FlipH;\n          -ms-filter: \"FlipH\";\n        }\n\n        simple-icon-lite {\n          color: #747474;\n          height: 30px;\n          width: 30px;\n        }\n\n        #image {\n          background-repeat: no-repeat;\n          background-size: cover;\n          background-position: center;\n          width: 100%;\n          max-width: var(--block-quote-image-max-width, 200px);\n          height: auto;\n        }\n\n        @media screen and (max-width: 1200px) {\n          #image {\n            height: 200px;\n            margin: 0 auto 0;\n            border: solid;\n            border-width: 6px;\n            border-color: var(--block-quote-border-color, #747474);\n            border-radius: 50%;\n          }\n        }\n\n        #citation {\n          font-size: 16px;\n        }\n      "])))];
      }
    }]);
    return BlockQuote;
  }(_index.LitElement);

  _exports.BlockQuote = BlockQuote;
  customElements.define(BlockQuote.tag, BlockQuote);
});