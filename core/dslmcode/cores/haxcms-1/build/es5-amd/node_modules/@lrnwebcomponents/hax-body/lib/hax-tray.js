define(["exports", "../../../lit/index.js", "../../utils/utils.js", "../../hax-body-behaviors/lib/HAXFields.js", "../../simple-popover/lib/SimpleTourFinder.js", "./hax-store.js", "../../../mobx/dist/mobx.esm.js", "./hax-ui-styles.js", "../../simple-fields/simple-fields.js", "../../simple-fields/lib/simple-fields-tab.js", "../../simple-icon/lib/simple-icons.js", "../../hax-iconset/lib/simple-hax-iconset.js", "./hax-tray-upload.js", "./hax-app-browser.js", "./hax-gizmo-browser.js", "./hax-view-source.js", "./hax-stax-browser.js", "./hax-map.js", "./hax-preferences-dialog.js", "./hax-tray-button.js", "./hax-toolbar-menu.js", "../../i18n-manager/lib/I18NMixin.js", "../../undo-manager/undo-manager.js", "../../iframe-loader/lib/loading-indicator.js", "../../simple-toolbar/lib/simple-toolbar-menu-item.js"], function (_exports, _index, _utils, _HAXFields, _SimpleTourFinder, _haxStore, _mobxEsm, _haxUiStyles, _simpleFields, _simpleFieldsTab, _simpleIcons, _simpleHaxIconset, _haxTrayUpload, _haxAppBrowser, _haxGizmoBrowser, _haxViewSource, _haxStaxBrowser, _haxMap, _haxPreferencesDialog, _haxTrayButton, _haxToolbarMenu, _I18NMixin2, _undoManager, _loadingIndicator, _simpleToolbarMenuItem) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxTray = void 0;

  var _templateObject_d82f0de08e0011ed99ce491205e67b1d, _templateObject2_d82f0de08e0011ed99ce491205e67b1d, _templateObject3_d82f0de08e0011ed99ce491205e67b1d, _templateObject4_d82f0de08e0011ed99ce491205e67b1d, _templateObject5_d82f0de08e0011ed99ce491205e67b1d, _templateObject6_d82f0de08e0011ed99ce491205e67b1d, _templateObject7_d82f0de08e0011ed99ce491205e67b1d, _templateObject8_d82f0de08e0011ed99ce491205e67b1d, _templateObject9_d82f0de08e0011ed99ce491205e67b1d, _templateObject10_d82f0de08e0011ed99ce491205e67b1d, _templateObject11_d82f0de08e0011ed99ce491205e67b1d, _templateObject12_d82f0de08e0011ed99ce491205e67b1d, _templateObject13_d82f0de08e0011ed99ce491205e67b1d, _templateObject14_d82f0de08e0011ed99ce491205e67b1d, _templateObject15_d82f0de08e0011ed99ce491205e67b1d, _templateObject16_d82f0de08e0011ed99ce491205e67b1d, _templateObject17_d82f0de08e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-tray`
   * `The tray / dashboard area which allows for customization of all major settings`
   * @element hax-tray
   */
  var HaxTray = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(HaxTray, _I18NMixin);

    var _super = _createSuper(HaxTray);

    /**
     * HTMLElement
     */
    function HaxTray() {
      var _this;

      babelHelpers.classCallCheck(this, HaxTray);
      _this = _super.call(this);
      _this.tourName = "hax";
      _this.__winEvents = {
        "can-redo-changed": "_redoChanged",
        "can-undo-changed": "_undoChanged",
        "hax-drop-focus-event": "_expandSettingsPanel"
      };
      _this.t = {
        structure: "Outline",
        structureTip: "View Page Structure",
        editSelected: "Edit selected",
        edit: "Edit",
        save: "Save",
        move: "Move",
        close: "Close",
        moveMenu: "Toggles Menu Aligmnent",
        menuAlignment: "Menu Alignment",
        menuLeft: "Move",
        menuRight: "Move",
        menuPosition: "Menu position",
        changeSideVisually: "Change which side of the screen the menu is affixed to visually.",
        expand: "Expand",
        collapse: "Collapse",
        menuSize: "Menu size",
        menuSizeDescription: "Expand or collapse the menu visually.",
        takeATour: "Help",
        settings: "Settings",
        source: "Source",
        undo: "Undo",
        redo: "Redo",
        media: "Media",
        blocks: "Blocks",
        cancel: "Cancel",
        cancelWithoutSaving: "Cancel without saving",
        configure: "Configure",
        advanced: "Advanced",
        layout: "Layout",
        alignment: "Alignment",
        left: "Left",
        center: "Center",
        right: "Right",
        search: "Search",
        templates: "Templates",
        width: "Width"
      };

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        namespace: "hax",
        updateCallback: "_updateTrayDetail"
      });

      _this._initial = true;
      _this.activeValue = {
        settings: {
          layout: {
            __position: "hax-align-left",
            __scale: 100
          },
          configure: {},
          advanced: {}
        }
      };
      _this.collapsed = true;
      _this.activeTab = "item-0";
      _this.activeSchema = [];
      _this.canUndo = false;
      _this.canRedo = false;
      _this.trayDetail = "content-edit";
      _this.activeTagName = "";
      _this.traySizeIcon = "hax:arrow-expand-right";
      _this.__setup = false;
      setTimeout(function () {
        _this.addEventListener("hax-tray-button-click", _this._processTrayEvent.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      (0, _mobxEsm.autorun)(function () {
        _this.activeGizmo = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeGizmo);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.activeNode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.elementAlign = (0, _mobxEsm.toJS)(_haxStore.HAXStore.elementAlign);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.tourOpened = (0, _mobxEsm.toJS)(_haxStore.HAXStore.tourOpened);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.loading = !(0, _mobxEsm.toJS)(_haxStore.HAXStore.appStoreLoaded);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.globalPreferences = (0, _mobxEsm.toJS)(_haxStore.HAXStore.globalPreferences);
        _this.haxUiTheme = (_this.globalPreferences || {}).haxUiTheme || "hax";
        document.body.setAttribute("hax-ui-theme", _this.haxUiTheme);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.editMode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.editMode);
      });
      return _this;
    }

    babelHelpers.createClass(HaxTray, [{
      key: "_expandSettingsPanel",
      value: function _expandSettingsPanel(e) {
        this.shadowRoot.querySelector("#content-edit").click();
      }
    }, {
      key: "_redoChanged",
      value: function _redoChanged(e) {
        this.canRedo = e.detail.value;
      }
    }, {
      key: "_undoChanged",
      value: function _undoChanged(e) {
        this.canUndo = e.detail.value;
      }
      /**
       * LitElement render styles
       */

    }, {
      key: "trayStatus",
      get: function get() {
        var status = this.collapsed ? "collapsed" : this.trayDetail == "view-source" ? "full-panel" : "side-panel";
        _haxStore.HAXStore.trayStatus = status;
        _haxStore.HAXStore.trayDetail = this.trayDetail;
        return status;
      }
      /**
       * LitElement render
       */

    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_d82f0de08e0011ed99ce491205e67b1d || (_templateObject_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      ", "\n      <div class=\"wrapper ", "\">\n        ", "\n        <div class=\"detail\">\n          <loading-indicator\n            ?loading=\"", "\"\n          ></loading-indicator>\n          ", "\n        </div>\n      </div>\n    "])), this.panelOpsTemplate, this.trayStatus, this.menuToolbarTemplate, this.loading, this.trayDetailTemplate);
      }
    }, {
      key: "panelOpsTemplate",
      get: function get() {
        return this.hidePanelOps ? "" : (0, _index.html)(_templateObject2_d82f0de08e0011ed99ce491205e67b1d || (_templateObject2_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          <hax-tray-button\n            large\n            voice-command=\"edit page\"\n            .data-opened=\"", "\"\n            @click=\"", "\"\n            icon=\"create\"\n            id=\"button\"\n            feature\n            show-text-label\n            show-tooltip\n            label=\"", "\"\n          ></hax-tray-button>\n        "])), this.editMode, this._clickEditButton, this.editMode ? this.t.save : this.t.edit);
      }
    }, {
      key: "toolbarsTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject3_d82f0de08e0011ed99ce491205e67b1d || (_templateObject3_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["", "", ""])), this.opsToolbarTemplate, this.trayToolbarTemplate);
      }
    }, {
      key: "menuToolbarTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject4_d82f0de08e0011ed99ce491205e67b1d || (_templateObject4_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div id=\"menubar\" class=\"collapse-menu\">\n      ", " ", " ", "\n      <slot name=\"tray-buttons-pre\"></slot>\n      ", "", "\n    </div>"])), this.saveButtons, this.doButtons, this.contentButtons, this.moreButtons, this.menuButtons);
      }
    }, {
      key: "menuButtons",
      get: function get() {
        return (0, _index.html)(_templateObject5_d82f0de08e0011ed99ce491205e67b1d || (_templateObject5_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        <hax-tray-button\n          show-text-label\n          show-tooltip\n          align-horizontal=\"", "\"\n          id=\"haxMenuAlign\"\n          event-name=\"toggle-element-align\"\n          icon=\"arrow-", "\"\n          label=\"", "\"\n          index=\"", "\"\n          tooltip=\"", " ", "\"\n        >\n        </hax-tray-button>\n    </div>\n    "])), this.collapsed ? "left" : "center", this.elementAlign == "left" ? "forward" : "back", this.elementAlign == "left" ? this.t.menuRight : this.t.menuLeft, this.elementAlign == "left" ? "1" : "0", this.t.moveMenu, this.elementAlign == "left" ? this.t.right : this.t.left);
      }
    }, {
      key: "saveButtons",
      get: function get() {
        return this.hidePanelOps ? "" : (0, _index.html)(_templateObject6_d82f0de08e0011ed99ce491205e67b1d || (_templateObject6_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          <hax-tray-button\n            @click=\"", "\"\n            icon=\"save\"\n            icon-position=\"left\"\n            id=\"haxsavebutton\"\n            label=\"", "\"\n            event-name=\"save\"\n            voice-command=\"save page\"\n            show-text-label\n            show-tooltip\n            align-horizontal=\"", "\"\n          ></hax-tray-button>\n          <hax-tray-button\n            icon=\"cancel\"\n            id=\"haxcancelbutton\"\n            label=\"", "\"\n            icon-position=\"left\"\n            show-text-label\n            show-tooltip\n            align-horizontal=\"", "\"\n          ></hax-tray-button>\n        "])), this._clickSaveButton, this.editMode ? this.t.save : this.t.edit, this.collapsed ? "left" : "center", this.t.cancel, this.collapsed ? "left" : "center");
      }
    }, {
      key: "doButtons",
      get: function get() {
        return (0, _index.html)(_templateObject7_d82f0de08e0011ed99ce491205e67b1d || (_templateObject7_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <hax-tray-button\n        icon=\"icons:undo\"\n        ?disabled=\"", "\"\n        label=\"", "\"\n        event-name=\"undo\"\n        voice-command=\"undo\"\n        data-simple-tour-stop\n        data-stop-title=\"label\"\n        icon-position=\"left\"\n        show-text-label\n        show-tooltip\n        align-horizontal=\"", "\"\n      >\n        <div slot=\"tour\" data-stop-content>\n          Undo the previous operation in the content, whether typing or adding a\n          widget.\n        </div>\n      </hax-tray-button>\n      <hax-tray-button\n        icon=\"icons:redo\"\n        ?disabled=\"", "\"\n        label=\"", "\"\n        event-name=\"redo\"\n        voice-command=\"redo\"\n        data-simple-tour-stop\n        data-stop-title=\"label\"\n        icon-position=\"left\"\n        show-text-label\n        show-tooltip\n        align-horizontal=\"", "\"\n      >\n        <div slot=\"tour\" data-stop-content>\n          Redo the last action that you hit Undo on.\n        </div>\n      </hax-tray-button>"])), !this.canUndo, this.t.undo, this.collapsed ? "left" : "center", !this.canRedo, this.t.redo, this.collapsed ? "left" : "center");
      }
    }, {
      key: "contentButtons",
      get: function get() {
        return (0, _index.html)(_templateObject8_d82f0de08e0011ed99ce491205e67b1d || (_templateObject8_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <hax-tray-button\n        event-name=\"content-add\"\n        icon=\"add-box\"\n        id=\"content-add\"\n        label=\"", "\"\n        voice-command=\"select blocks (menu)\"\n        data-simple-tour-stop\n        data-stop-title=\"label\"\n        controls=\"tray-detail\"\n        toggles\n        ?toggled=\"", "\"\n        icon-position=\"left\"\n        show-text-label\n        show-tooltip\n        align-horizontal=\"", "\"\n      >\n        <div slot=\"tour\" data-stop-content>\n          When you want to add any content to the page from text, to images, to\n          anything more advanced; you can always find items to add under the Add\n          content menu. Click to expand, then either drag and drop items into\n          the page or click and have them placed near whatever you are actively\n          working on.\n        </div>\n      </hax-tray-button>\n      <hax-tray-button\n        event-name=\"media-add\"\n        icon=\"image:collections\"\n        id=\"media-add\"\n        label=\"", "\"\n        voice-command=\"select media (menu)\"\n        data-simple-tour-stop\n        data-stop-title=\"label\"\n        controls=\"tray-detail\"\n        toggles\n        ?toggled=\"", "\"\n        icon-position=\"left\"\n        show-text-label\n        show-tooltip\n        align-horizontal=\"", "\"\n      >\n        <div slot=\"tour\" data-stop-content>\n          Search for media and content anywhere that your copy of HAX has access\n          to. Pick what to search, perform the search and then click or drag the\n          item into the contnet.\n        </div>\n      </hax-tray-button>\n      <hax-tray-button\n        event-name=\"content-edit\"\n        icon=\"build\"\n        id=\"content-edit\"\n        label=\"", "\"\n        ?disabled=\"", "\"\n        voice-command=\"(modify)(configure)(edit) selected\"\n        data-simple-tour-stop\n        data-stop-title=\"label\"\n        controls=\"tray-detail\"\n        tooltip=\"", " ", "\"\n        toggles\n        ?toggled=\"", "\"\n        icon-position=\"left\"\n        show-text-label\n        show-tooltip\n        align-horizontal=\"", "\"\n      >\n        <div slot=\"tour\" data-stop-content>\n          When you want to add any content to the page from text, to images, to\n          anything more advanced; you can always find items to add under the Add\n          content menu. Click to expand, then either drag and drop items into\n          the page or click and have them placed near whatever you are actively\n          working on.\n        </div>\n      </hax-tray-button>\n      <hax-tray-button\n        event-name=\"content-map\"\n        icon=\"icons:toc\"\n        id=\"content-map\"\n        label=\"", "\"\n        voice-command=\"select structure (menu)\"\n        data-simple-tour-stop\n        data-stop-title=\"label\"\n        controls=\"tray-detail\"\n        toggles\n        ?toggled=\"", "\"\n        icon-position=\"left\"\n        show-text-label\n        show-tooltip\n        align-horizontal=\"", "\"\n      >\n        <div data-stop-content>\n          This is a simple list of all the block areas of the page that are\n          clickable to jump through items quickly as well as review some simple\n          overview stats.\n        </div>\n      </hax-tray-button>"])), this.t.blocks, !this.collapsed && this.trayDetail === "content-add", this.collapsed ? "left" : "center", this.t.media, !this.collapsed && this.trayDetail === "media-add", this.collapsed ? "left" : "center", this.t.edit, !this.activeTagName || this.activeTagName == "" || !this.activeNode || !this.activeNode.tagName, this.t.editSelected, this.activeTagName, !this.collapsed && this.trayDetail === "content-edit", this.collapsed ? "left" : "center", this.t.structure, !this.collapsed && this.trayDetail === "content-map", this.collapsed ? "left" : "center");
      }
    }, {
      key: "moreButtons",
      get: function get() {
        return (0, _index.html)(_templateObject9_d82f0de08e0011ed99ce491205e67b1d || (_templateObject9_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<hax-tray-button\n        id=\"exportbtn\"\n        icon=\"code\"\n        label=\"", "\"\n        event-name=\"view-source\"\n        voice-command=\"view (page) source\"\n        data-simple-tour-stop\n        data-stop-title=\"label\"\n        icon-position=\"left\"\n        show-text-label\n        show-tooltip\n        align-horizontal=\"", "\"\n      >\n        <div data-stop-content>\n          Every change you make in HAX is ultimately writing HTML. Know HTML?\n          Awesome, pop open the source view and make any changes you like. HTML\n          is always behind the scenes ensuring that content is portable, well\n          formatted and easy to read.\n        </div>\n      </hax-tray-button>\n      <hax-tray-button\n        ?hidden=\"", "\"\n        id=\"advanced-settings\"\n        event-name=\"advanced-settings\"\n        icon=\"settings\"\n        label=\"", "\"\n        voice-command=\"select settings (menu)\"\n        data-simple-tour-stop\n        data-stop-title=\"label\"\n        controls=\"tray-detail\"\n        toggles\n        ?toggled=\"", "\"\n        icon-position=\"left\"\n        show-text-label\n        show-tooltip\n        align-horizontal=\"", "\"\n      >\n        <div data-stop-content>User preferences for customizing HAX</div>\n      </hax-tray-button>\n      <hax-tray-button\n        event-name=\"", "\"\n        icon=\"help\"\n        label=\"", "\"\n        voice-command=\"start tour\"\n        toggles\n        ?toggled=\"", "\"\n        icon-position=\"left\"\n        show-text-label\n        show-tooltip\n        align-horizontal=\"", "\"\n      ></hax-tray-button> "])), this.t.source, this.collapsed ? "left" : "center", this.hidePreferencesButton, this.t.settings, !this.collapsed && this.trayDetail === "advanced-settings", this.collapsed ? "left" : "center", this.tourOpened ? "stop-tour" : "start-tour", this.t.takeATour, !this.collapsed && this.tourOpened, this.collapsed ? "left" : "center");
      }
    }, {
      key: "trayDetailTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject10_d82f0de08e0011ed99ce491205e67b1d || (_templateObject10_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <div\n      id=\"tray-detail\"\n      aria-live=\"polite\"\n      aria-disabled=\"", "\"\n      tabindex=\"", "\"\n      selected-detail=\"", "\"\n    >\n      <div class=\"tray-detail-titlebar\">\n        <h4>\n          ", "\n        </h4>\n        <hax-tray-button\n          voice-command=\"collapse menu\"\n          id=\"toggle-tray-size\"\n          event-name=\"toggle-tray-size\"\n          icon=\"close\"\n          label=\"", "\"\n        >\n        </hax-tray-button>\n      </div>\n      ", " ", "\n      ", " ", "\n      ", " ", "\n    </div>"])), this.collapsed ? "true" : "false", this.collapsed ? "-1" : "0", this.trayDetail, this.trayLabel || "".concat(this.t.editSelected, " ").concat(this.activeTagName), this.t.close, this.viewSourceTemplate, this.advancedSettingsTemplate, this.contentMapTemplate, this.contentEditTemplate, this.contentAddTemplate, this.mediaTemplate);
      }
    }, {
      key: "viewSourceTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject11_d82f0de08e0011ed99ce491205e67b1d || (_templateObject11_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <hax-view-source\n      id=\"view-source\"\n      ?hidden=\"", "\"\n    ></hax-view-source>"])), this.trayDetail !== "view-source");
      }
    }, {
      key: "advancedSettingsTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject12_d82f0de08e0011ed99ce491205e67b1d || (_templateObject12_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <hax-preferences-dialog\n      ?hidden=\"", "\"\n    ></hax-preferences-dialog>"])), this.trayDetail !== "advanced-settings");
      }
    }, {
      key: "contentEditTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject13_d82f0de08e0011ed99ce491205e67b1d || (_templateObject13_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <simple-fields\n      id=\"settingsform\"\n      disable-responsive\n      code-theme=\"", "\"\n      ?hidden=\"", "\"\n    ></simple-fields>"])), this.haxUiTheme == "system" ? "auto" : this.haxUiTheme == "haxdark" ? "vs-dark" : "vs", this.trayDetail !== "content-edit");
      }
    }, {
      key: "contentAddTemplate",
      get: function get() {
        var hidden = this.trayDetail !== "content-add";
        return (0, _index.html)(_templateObject14_d82f0de08e0011ed99ce491205e67b1d || (_templateObject14_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <hax-gizmo-browser\n        id=\"gizmobrowser\"\n        ?hidden=\"", "\"\n      ></hax-gizmo-browser>\n      <h5 ?hidden=\"", "\">", "</h5>\n      <hax-stax-browser\n        id=\"staxbrowser\"\n        ?hidden=\"", "\"\n      ></hax-stax-browser>"])), hidden, hidden, this.t.templates, hidden);
      }
    }, {
      key: "contentMapTemplate",
      get: function get() {
        return (0, _index.html)(_templateObject15_d82f0de08e0011ed99ce491205e67b1d || (_templateObject15_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<hax-map\n      controls=\"content-map\"\n      ?hidden=\"", "\"\n    ></hax-map>"])), this.trayDetail !== "content-map");
      }
    }, {
      key: "mediaTemplate",
      get: function get() {
        var hidden = this.trayDetail !== "media-add";
        return (0, _index.html)(_templateObject16_d82f0de08e0011ed99ce491205e67b1d || (_templateObject16_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <hax-tray-upload ?hidden=\"", "\"></hax-tray-upload>\n      <h5 ?hidden=\"", "\">", "</h5>\n      <hax-app-browser id=\"appbrowser\" ?hidden=\"", "\"></hax-app-browser>"])), hidden, hidden, this.t.search, hidden);
      }
    }, {
      key: "__simpleFieldsClick",
      value: function __simpleFieldsClick(e) {
        try {
          this.activeTab = this.shadowRoot.querySelector("#settingsform").shadowRoot.querySelector("simple-fields").activeTab;
        } catch (e) {
          // in case it missed somehow like w/ an incredibly slow repaints
          this.activeTab = "item-0";
        }
      }
    }, {
      key: "_refreshAddData",
      value: function _refreshAddData() {
        this.shadowRoot.querySelector("#gizmobrowser").resetList((0, _mobxEsm.toJS)(_haxStore.HAXStore.gizmoList));
        this.shadowRoot.querySelector("#staxbrowser").staxList = babelHelpers.toConsumableArray((0, _mobxEsm.toJS)(_haxStore.HAXStore.staxList));
      }
      /**
       * Process event for simple content inserts.
       */

    }, {
      key: "_processTrayEvent",
      value: function _processTrayEvent(e) {
        var target = (0, _utils.normalizeEventPath)(e)[0],
            evt = e.detail.eventName;

        if (!this.collapsed && this.trayDetail === evt) {
          evt = "toggle-tray-size";
        } // support a simple insert event to bubble up or everything else


        switch (evt) {
          case "insert-stax":
            this.dispatchEvent(new CustomEvent("hax-insert-content-array", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: target.stax
            }));
            break;

          case "insert-tag":
            var gizmo = {
              tag: e.detail.value
            };
            var haxElement; // get schema for that version of events

            var schema = _haxStore.HAXStore.haxSchemaFromTag(e.detail.value);

            if (target.getAttribute("data-demo-schema") && schema && schema.demoSchema && schema.demoSchema[0]) {
              haxElement = schema.demoSchema[0];
            } else {
              // support if anything else is manually defining what to inject
              // or a baseline if we didn't have a demonstration schema supplied
              var properties = JSON.parse(target.getAttribute("event-properties"));
              var innerContent = target.getAttribute("event-content");

              if (properties == null) {
                properties = {};
              }

              if (innerContent == null) {
                innerContent = "";
              } // most likely empty values but just to be safe


              haxElement = _haxStore.HAXStore.haxElementPrototype(gizmo, properties, innerContent);
            }

            this.dispatchEvent(new CustomEvent("hax-insert-content", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: haxElement
            }));
            break;

          case "advanced-settings":
            this.trayDetail = e.detail.eventName;
            this.collapsed = false;
            break;

          case "toggle-element-align":
            var directions = ["left", "right"],
                direction = !!directions[e.detail.index] ? directions[e.detail.index] : "right";
            if (e.detail.index > 1) this.collapsed = true;
            this.style.setProperty("--hax-tray-custom-y", null);
            this.style.setProperty("--hax-tray-custom-x", null);
            _haxStore.HAXStore.elementAlign = direction; //set local storage

            (0, _utils.localStorageSet)("hax-tray-elementAlign", direction);
            break;

          case "toggle-tray-size":
            this.collapsed = !this.collapsed;
            break;

          case "content-map":
            this.trayDetail = e.detail.eventName;
            this.collapsed = false;
            break;

          case "content-edit":
            this.trayDetail = e.detail.eventName;
            this.collapsed = false;
            break;

          case "content-add":
            this.trayDetail = e.detail.eventName;
            this.collapsed = false;
            break;

          case "media-add":
            this.trayDetail = e.detail.eventName;
            this.collapsed = false;
            break;

          case "start-tour":
            this.startTour();
            break;

          case "stop-tour":
            window.SimpleTourManager.requestAvailability().stopTour("hax");
            break;

          case "undo":
            _haxStore.HAXStore.activeHaxBody.undo();

            break;

          case "redo":
            _haxStore.HAXStore.activeHaxBody.redo();

            break;

          case "view-source":
            this.trayDetail = e.detail.eventName;
            this.shadowRoot.querySelector("#view-source").openSource();
            this.collapsed = false;
            break;
        }
      }
    }, {
      key: "startTour",
      value: function startTour() {
        this.__tour = this.__tour || window.SimpleTourManager.requestAvailability();
        window.addEventListener("tour-changed", this._handleTourChanged.bind(this));

        this.__tour.startTour("hax");
      }
    }, {
      key: "stopTour",
      value: function stopTour() {
        this.__tour = this.__tour || window.SimpleTourManager.requestAvailability();

        this.__tour.stopTour("hax");

        window.removeEventListener("tour-changed", this._handleTourChanged.bind(this));
      }
    }, {
      key: "_handleTourChanged",
      value: function _handleTourChanged(e) {
        this.tourOpened = e.detail.active == this.tourName;
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "firstUpdated",
      value:
      /**
       * LitElement ready life cycle
       */
      function firstUpdated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        if (!this.__setup) {
          this.shadowRoot.querySelector("#settingsform").schematizer = _HAXFields.HaxSchematizer;
          this.shadowRoot.querySelector("#settingsform").elementizer = _HAXFields.HaxElementizer;
          setTimeout(function () {
            _this2.shadowRoot.querySelector(".wrapper").style.margin = _this2.offsetMargin;
          }, 1000);
          this.__setup = true;
          this.shadowRoot.querySelector("#settingsform").addEventListener("click", this.__simpleFieldsClick.bind(this));
          this.shadowRoot.querySelector("#settingsform").addEventListener("value-changed", this.__valueChangedEvent.bind(this)); // fire an event that this is a core piece of the system

          this.dispatchEvent(new CustomEvent("hax-register-core-piece", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              piece: "haxTray",
              object: this
            }
          }));
          this.dispatchEvent(new CustomEvent("hax-add-voice-command", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
              command: ":name: (collapse)(open)(expand)(toggle) Blocks (menu)",
              context: this.shadowRoot.querySelector("#content-add"),
              callback: "click"
            }
          }));
          this.dispatchEvent(new CustomEvent("hax-add-voice-command", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
              command: ":name: (collapse)(open)(expand)(toggle) element settings (menu)",
              context: this.shadowRoot.querySelector("#advanced-settings"),
              callback: "click"
            }
          }));
          this.dispatchEvent(new CustomEvent("hax-add-voice-command", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
              command: ":name: (collapse)(open)(expand)(toggle) search (menu)",
              context: this.shadowRoot.querySelector("#media-add"),
              callback: "click"
            }
          }));
        }
      }
      /**
       * LitElement properties changed
       */

    }, {
      key: "updated",
      value: function () {
        var _updated = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(changedProperties) {
          var _this3 = this;

          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray.prototype), "updated", this)) {
                    babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray.prototype), "updated", this).call(this, changedProperties);
                  }

                  changedProperties.forEach( /*#__PURE__*/function () {
                    var _ref = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oldValue, propName) {
                      return _regeneratorRuntime().wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              if (!(propName == "editMode")) {
                                _context.next = 5;
                                break;
                              }

                              if (!_this3.editMode) {
                                _context.next = 4;
                                break;
                              }

                              _context.next = 4;
                              return _haxStore.HAXStore.refreshActiveNodeForm();

                            case 4:
                              _this3._editModeChanged(_this3.editMode);

                            case 5:
                              if (propName == "offsetMargin") {
                                setTimeout(function () {
                                  _this3.shadowRoot.querySelector(".wrapper").style.margin = _this3.offsetMargin;
                                }, 0);
                              } // change tray detail


                              if (propName == "trayDetail") {
                                _this3._updateTrayDetail(_this3[propName]);
                              } // collaped menu state change


                              if (propName == "collapsed" && _this3[propName]) {
                                _this3._editModeChanged(_this3.editMode);
                              } // active Gizmo changed


                              if (propName == "activeGizmo" && _this3.trayDetail !== "view-source") {
                                if (_this3.activeGizmo) {
                                  _this3.activeTagName = _this3.activeGizmo.title;

                                  if ((!oldValue || _this3.trayDetail !== "content-edit") && _this3.trayDetail !== "content-map") {
                                    _this3.trayDetail = "content-edit";
                                  }
                                } else {
                                  // force a gizmo change (which then implies adding to the page)
                                  // to select the edit tab if we just added something into the page
                                  // from our two content adding panes
                                  if (!["content-add", "content-map"].includes(_this3.trayDetail)) {
                                    _this3.trayDetail = "content-add";
                                  }
                                }
                              } // active node changed


                              if (!(propName == "activeNode")) {
                                _context.next = 14;
                                break;
                              }

                              if (!(_this3.activeNode && _this3.activeNode.tagName)) {
                                _context.next = 14;
                                break;
                              }

                              if (!_this3.editMode) {
                                _context.next = 14;
                                break;
                              }

                              _context.next = 14;
                              return _haxStore.HAXStore.refreshActiveNodeForm();

                            case 14:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                    return function (_x2, _x3) {
                      return _ref.apply(this, arguments);
                    };
                  }());

                case 2:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function updated(_x) {
          return _updated.apply(this, arguments);
        }

        return updated;
      }()
      /**
       * When the preview node is updated, pull schema associated with it
       */

    }, {
      key: "_setupForm",
      value: function () {
        var _setupForm2 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
          var _this4 = this;

          var activeNode, props, property, tmp, isGrid, setProps;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  this.loading = true;
                  activeNode = this.activeNode;
                  this._initial = true;
                  this.activeValue = {
                    settings: {
                      layout: {
                        __position: "hax-align-left",
                        __scale: 100
                      },
                      configure: {},
                      advanced: {}
                    }
                  };
                  this.shadowRoot.querySelector("#settingsform").fields = [];
                  this.shadowRoot.querySelector("#settingsform").value = {}; // see if we can get schema off of this.

                  if (!(activeNode && activeNode.tagName && _haxStore.HAXStore.elementList[activeNode.tagName.toLowerCase()])) {
                    _context3.next = 35;
                    break;
                  }

                  props = _objectSpread({}, _haxStore.HAXStore.elementList[activeNode.tagName.toLowerCase()]); // generate a human name for this

                  if (babelHelpers.typeof(props.gizmo.title) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                    this.humanName = activeNode.tagName.replace("-", " ").toLowerCase();
                  } else {
                    this.humanName = props.gizmo.title;
                  } // first, allow element properties to dictate defaults


                  for (property in this.activeHaxElement.properties) {
                    props.settings.configure.forEach(function (el) {
                      if (el.property === property) {
                        _this4.activeValue.settings.configure[property] = _this4.activeHaxElement.properties[property];
                      }

                      if (el.attribute === property) {
                        _this4.activeValue.settings.configure[property] = _this4.activeHaxElement.properties[property];
                      }

                      if (el.slot === property) {
                        _this4.activeValue.settings.configure[property] = _this4.activeHaxElement.properties[property];
                      }
                    });
                    props.settings.advanced.forEach(function (el) {
                      if (el.property === property) {
                        _this4.activeValue.settings.advanced[property] = _this4.activeHaxElement.properties[property];
                      }

                      if (el.attribute === property) {
                        _this4.activeValue.settings.advanced[property] = _this4.activeHaxElement.properties[property];
                      }

                      if (el.slot === property) {
                        _this4.activeValue.settings.advanced[property] = _this4.activeHaxElement.properties[property];
                      }
                    });
                  } // now we need to parse through for slotted items
                  // build a fake tree, then walk the configuration / Settings
                  // looking for slot types


                  tmp = document.createElement("div");
                  tmp.innerHTML = this.activeHaxElement.content; // step through each key

                  tmp.childNodes.forEach(function (el) {
                    // ensure we have a dom node and it isnt empty
                    if (el.nodeType === 1 && el.innerHTML !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                      // walk props looking for a match
                      props.settings.configure.forEach(function (prop) {
                        // if we have a slot to match in the property AND it matches the attr
                        if (prop.slot === el.getAttribute("slot")) {
                          _this4.activeValue.settings.configure[prop.slot] = el.innerHTML;
                        } // no slot and it didnt match so it has no slot
                        else if (prop.slot == "" && (el.getAttribute("slot") == null || el.getAttribute("slot") == "null")) {
                            _this4.activeValue.settings.configure[prop.slot] = el.innerHTML;
                          }
                      }); // now advanced

                      props.settings.advanced.forEach(function (prop) {
                        if (prop.slot === el.getAttribute("slot")) {
                          _this4.activeValue.settings.advanced[prop.slot] = el.innerHTML;
                        } // no slot and it didnt match so it has no slot
                        else if (prop.slot == "" && (el.getAttribute("slot") == null || el.getAttribute("slot") == "null")) {
                            _this4.activeValue.settings.advanced[prop.slot] = el.innerHTML;
                          }
                      });
                    }
                  }); // then we need to work on the layout piece

                  if (activeNode.style.width != "") {
                    this.activeValue.settings.layout.__scale = activeNode.style.width.replace("%", "");
                  } else {
                    this.activeValue.settings.layout.__scale = 100;
                  }

                  if (activeNode.style.display == "block" && activeNode.style.margin == "0px auto" && activeNode.style.float == "right") {
                    this.activeValue.settings.layout.__position = "hax-align-right";
                  } else if (activeNode.style.display == "block" && activeNode.style.margin == "0px auto") {
                    this.activeValue.settings.layout.__position = "hax-align-center";
                  } else {
                    this.activeValue.settings.layout.__position = "hax-align-left";
                  }

                  this.activeHaxElement.properties.__scale = this.activeValue.settings.layout.__scale;
                  this.activeHaxElement.properties.__position = this.activeValue.settings.layout.__position; // tabs / deep objects require us to preview the value w/ the path correctly

                  isGrid = !!props.type && props.type === "grid";
                  props.settings.configure.forEach(function (val, key) {
                    if (props.settings.configure[key].attribute) {
                      props.settings.configure[key].property = props.settings.configure[key].attribute;
                    }

                    if (props.settings.configure[key].slot) {
                      props.settings.configure[key].property = props.settings.configure[key].slot;
                    }
                  });
                  props.settings.advanced.forEach(function (val, key) {
                    if (props.settings.advanced[key].attribute) {
                      props.settings.advanced[key].property = props.settings.advanced[key].attribute;
                    }

                    if (props.settings.advanced[key].slot) {
                      props.settings.advanced[key].property = props.settings.advanced[key].slot;
                    }
                  });
                  props.settings.layout = []; // test if this element can be aligned

                  if (props.canPosition) {
                    props.settings.layout.push({
                      property: "__position",
                      title: this.t.alignment,
                      inputMethod: "select",
                      value: this.activeValue.settings.layout.__position,
                      options: {
                        "hax-align-left": this.t.left,
                        "hax-align-center": this.t.center,
                        "hax-align-right": this.t.right
                      }
                    });
                  } // test if this element can be scaled


                  if (props.canScale) {
                    props.settings.layout.push({
                      property: "__scale",
                      title: this.t.width,
                      inputMethod: "slider",
                      value: this.activeValue.settings.layout.__scale,
                      min: props.canScale.min ? props.canScale.min : 12.5,
                      max: props.canScale.max ? props.canScale.max : 100,
                      step: props.canScale.step ? props.canScale.step : 12.5
                    });
                  } // establish tabs container


                  this.activeSchema = [{
                    property: "settings",
                    inputMethod: "tabs",
                    properties: []
                  }]; // array of things to forcibly disable

                  setProps = function setProps(propName, propTitle) {
                    var settings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
                    var filteredProps = !isGrid ? settings : settings.filter(function (prop) {
                      return prop.slot !== "" && !prop.slot && (!prop.attribute || prop.attribute != "slot");
                    });

                    _this4.activeSchema[0].properties.push({
                      property: propName,
                      title: propTitle,
                      properties: filteredProps.length > 0 ? filteredProps : undefined,
                      disabled: filteredProps.length < 1
                    });
                  }; // @see haxHook: setupActiveElementForm - allow elements to modify the properties to be rendered


                  if (!_haxStore.HAXStore.testHook(activeNode, "setupActiveElementForm")) {
                    _context3.next = 28;
                    break;
                  }

                  _context3.next = 28;
                  return _haxStore.HAXStore.runHook(activeNode, "setupActiveElementForm", [props]);

                case 28:
                  // see if we have any configure settings or disable
                  setProps("configure", this.t.configure, props.settings.configure); // see if we have any layout settings or disable

                  setProps("layout", this.t.layout, props.settings.layout); // see if we have any configure settings or disable

                  setProps("advanced", this.t.advanced, props.settings.advanced);
                  this.__activePropSchema = props;
                  this.shadowRoot.querySelector("#settingsform").fields = this.activeSchema;
                  this.shadowRoot.querySelector("#settingsform").value = this.activeValue;
                  this.loading = false;

                case 35:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function _setupForm() {
          return _setupForm2.apply(this, arguments);
        }

        return _setupForm;
      }()
      /**
       * Convert an object to an array
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
      /**
       * update hax map
       */

    }, {
      key: "updateMap",
      value: function updateMap() {
        if (this.shadowRoot && this.shadowRoot.querySelector("hax-map") && this.trayDetail == "content-map") this.shadowRoot.querySelector("hax-map").updateHAXMap();
      }
    }, {
      key: "_updateTrayDetail",
      value: function _updateTrayDetail(newValue) {
        if (newValue == "content-add") {
          this.trayLabel = this.t.blocks;

          this._refreshAddData();
        } else if (newValue == "media-add") {
          this.trayLabel = this.t.media;
        } else if (newValue == "content-map") {
          this.trayLabel = this.t.structure;
          this.shadowRoot.querySelector("hax-map").updateHAXMap();
        } else if (newValue == "advanced-settings") {
          this.trayLabel = this.t.settings;
          this.shadowRoot.querySelector("hax-preferences-dialog").reloadPreferencesForm();
        } else if (newValue == "content-edit" && (!this.activeTagName || this.activeTagName == "" || !this.activeNode || !this.activeNode.tagName)) {
          this.trayDetail = "content-add";
        } else if (!newValue || newValue == "") {
          this.trayDetail = "content-edit";
        } else {
          this.trayLabel = undefined;
        }

        this.requestUpdate();
      }
      /**
       * Notice change in values from below
       */

    }, {
      key: "__valueChangedEvent",
      value: function __valueChangedEvent(e) {
        var _this5 = this;

        if (this.editMode && e.detail.value && e.detail.value.settings) {
          var settings = e.detail.value.settings;

          var props = _objectSpread({}, _haxStore.HAXStore.elementList[this.activeNode.tagName.toLowerCase()]);

          var _isGrid = props.type == "grid";

          var settingsKeys = {
            advanced: "advanced",
            configure: "configure",
            layout: "layout"
          };
          var setAhead;
          clearTimeout(this.__contextPropDebounce);
          this.__contextPropDebounce = setTimeout(function () {
            var _loop = function _loop(key) {
              var _loop2 = function _loop2(prop) {
                setAhead = false;

                if (settings[key][prop] != null && !settings[key][prop].readOnly) {
                  // prefix is a special attribute and must be handled this way
                  if (prop === "prefix" && settings[key][prop] != "") {
                    _this5.activeNode.setAttribute("prefix", settings[key][prop]);

                    setAhead = true;
                  } // prefix is a special attribute and must be handled this way
                  else if (prop === "data-hax-lock") {
                      // broadcast that we just LOCKED it
                      _this5.dispatchEvent(new CustomEvent("hax-toggle-active-node-lock", {
                        bubbles: true,
                        composed: true,
                        cancelable: true,
                        detail: {
                          lock: settings[key][prop],
                          node: _this5.activeNode
                        }
                      })); // also lock all fields except us


                      _this5.__lockAllSettings(settings[key][prop]);
                    } // innerText is another special case since it cheats on slot content
                    // that is only a text node (like a link)
                    else if (prop === "innerText") {
                        _this5.activeNode.innerText = settings[key][prop];
                        setAhead = true;
                      } // this is a special internal held "property" for layout stuff
                      else if (key === "layout" && prop === "__position") {
                          setAhead = true;

                          if (!_this5._initial) {
                            clearTimeout(_this5.__contextValueDebounce);
                            _this5.__contextValueDebounce = setTimeout(function () {
                              _this5.dispatchEvent(new CustomEvent("hax-context-item-selected", {
                                bubbles: true,
                                composed: true,
                                detail: {
                                  eventName: settings[key][prop],
                                  value: settings[key][prop]
                                }
                              }));
                            }, 50);
                          }
                        } // this is a special internal held "property" for layout stuff
                        else if (key === "layout" && prop === "__scale") {
                            setAhead = true;

                            if (!_this5._initial) {
                              clearTimeout(_this5.__contextSizeDebounce);
                              _this5.__contextSizeDebounce = setTimeout(function () {
                                _this5.dispatchEvent(new CustomEvent("hax-context-item-selected", {
                                  bubbles: true,
                                  composed: true,
                                  detail: {
                                    eventName: "hax-size-change",
                                    value: settings[key][prop]
                                  }
                                }));
                              }, 50);
                            }
                          } // try and set the pop directly if it is a prop already set
                          // check on prototype, then in properties object if it has one
                          // then by seeing if we have an array / object
                          else if (_this5.activeNode.hasOwnProperty(prop) || _this5.activeNode.properties && _this5.activeNode.properties.hasOwnProperty(prop) || settings[key][prop] != null && settings[key][prop].constructor === Array || settings[key][prop] != null && settings[key][prop].constructor === Object) {
                              // in case your typing quickly don't instantly hammer a prop
                              try {
                                if (settings[key][prop].constructor === Array) {
                                  _this5.activeNode[prop] = babelHelpers.toConsumableArray(settings[key][prop]);
                                } else if (settings[key][prop].constructor === Object) {
                                  _this5.activeNode[prop] = _objectSpread({}, settings[key][prop]);
                                } else {
                                  _this5.activeNode[prop] = settings[key][prop];
                                }

                                setAhead = true;
                              } catch (e) {
                                console.warn(e);
                                setAhead = false;
                              }
                            } else if (!_isGrid) {
                              // need to specifically walk through slots if there is anything
                              // that says it has to come from a slot
                              for (propTmp in _this5.__activePropSchema.settings[key]) {
                                if (_this5.__activePropSchema.settings[key][propTmp].slot == prop) {
                                  var slotTag = "span";

                                  if (_this5.__activePropSchema.settings[key][propTmp].slotWrapper) {
                                    slotTag = _this5.__activePropSchema.settings[key][propTmp].slotWrapper;
                                  } else if ( //selects first wrapper from allowed list
                                  _this5.__activePropSchema.settings[key][propTmp].allowedSlotWrappers && _this5.__activePropSchema.settings[key][propTmp].allowedSlotWrappers[0]) {
                                    slotTag = _this5.__activePropSchema.settings[key][propTmp].allowedSlotWrappers[0];
                                  } else if (_this5.activeNode.tagName.toLowerCase() === "code-editor") {
                                    slotTag = "template";
                                  } else {
                                    (function () {
                                      //selects wrapper that is not excluded
                                      var wrappers = ["span", "div", "p"],
                                          exclusions = _this5.__activePropSchema.settings[key][propTmp].excludedSlotWrappers || [];
                                      if (exclusions) wrappers = wrappers.filter(function (wrapper) {
                                        return !exclusions.includes(wrapper);
                                      });
                                    })();
                                  }

                                  tmpel = document.createElement(slotTag);

                                  if (_this5.__activePropSchema.settings[key][propTmp].slotAttributes) {
                                    for (attr in _this5.__activePropSchema.settings[key][propTmp].slotAttributes) {
                                      tmpel.setAttribute(attr, _this5.__activePropSchema.settings[key][propTmp].slotAttributes[attr]);
                                    }
                                  } // support unnamed slots


                                  if (_this5.__activePropSchema.settings[key][propTmp].slot !== "") {
                                    tmpel.slot = _this5.__activePropSchema.settings[key][propTmp].slot;
                                  }

                                  tmpel.innerHTML = settings[key][prop];
                                  var cloneIt = tmpel.cloneNode(true);
                                  setAhead = true; // inject the slotted content but use text nodes if this is a text element

                                  if (_haxStore.HAXStore.isTextElement(_this5.activeNode)) {
                                    _this5.activeNode.innerHTML = tmpel.innerHTML;
                                  } else {
                                    // wipe just the slot in question
                                    (0, _utils.wipeSlot)(_this5.activeNode, _this5.__activePropSchema.settings[key][propTmp].slot);

                                    _this5.activeNode.appendChild(cloneIt);
                                  }
                                }
                              }
                            } // this will get reached often but tough to know if we had a slot


                  if (!setAhead && (0, _utils.camelCaseToDash)(prop) != "") {
                    try {
                      // silly but this is the spec way to do a boolean
                      if (settings[key][prop] === true) {
                        _this5.activeNode.setAttribute((0, _utils.camelCaseToDash)(prop), (0, _utils.camelCaseToDash)(prop));
                      } else if (settings[key][prop] === false || settings[key][prop] === "") {
                        _this5.activeNode.removeAttribute((0, _utils.camelCaseToDash)(prop));
                      } else {
                        _this5.activeNode.setAttribute((0, _utils.camelCaseToDash)(prop), settings[key][prop]);
                      }
                    } catch (e) {
                      console.warn(e);
                      console.warn(prop, settings[key][prop]);
                    }
                  }
                } else {
                  if (prop === "data-hax-lock") {
                    // broadcast that we just UNLOCKED it
                    _this5.dispatchEvent(new CustomEvent("hax-toggle-active-node-lock", {
                      bubbles: true,
                      composed: true,
                      cancelable: true,
                      detail: {
                        lock: false,
                        node: _this5.activeNode
                      }
                    }));

                    _this5.__lockAllSettings(false);
                  }

                  _this5.activeNode.removeAttribute((0, _utils.camelCaseToDash)(prop));
                }
              };

              for (var prop in settings[key]) {
                _loop2(prop);
              }
            };

            for (var key in settingsKeys) {
              var propTmp;
              var tmpel;
              var attr;

              _loop(key);
            }
          }, 100);
        }

        setTimeout(function () {
          if (_this5._initial) {
            _this5._initial = false;
          }
        }, 51);
      }
      /**
       * Lock / unlock all settings on the tray for the active node form
       */

    }, {
      key: "__lockAllSettings",
      value: function __lockAllSettings(status) {
        this.shadowRoot.querySelectorAll("simple-fields-tab *[is-simple-field-type]:not([name='settings.advanced.data-hax-lock'])").forEach(function (node) {
          node.disabled = status;
        });
      }
      /**
       * _editModeChanged
       */

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue) {
        if (!this.hidePanelOps && this.shadowRoot && this.shadowRoot.querySelector("#button")) {
          if (newValue) {
            this.shadowRoot.querySelector("#button").icon = "save";
          } else {
            this.shadowRoot.querySelector("#button").icon = "create";
          }
        }
      }
      /**
       * Edit clicked, activate
       */

    }, {
      key: "_clickEditButton",
      value: function _clickEditButton(e) {
        _haxStore.HAXStore.editMode = true;
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * Toggle the drawer when the button is clicked.
       */

    }, {
      key: "_clickSaveButton",
      value: function _clickSaveButton(e) {
        _haxStore.HAXStore.editMode = false;
        this.dispatchEvent(new CustomEvent("hax-save", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: e.detail
        }));
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
    }], [{
      key: "tag",
      get:
      /**
       * Convention we use
       */
      function get() {
        return "hax-tray";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray), "styles", this) || []), babelHelpers.toConsumableArray(_haxUiStyles.HaxTrayDetail), babelHelpers.toConsumableArray(_haxUiStyles.HaxComponentStyles), [(0, _index.css)(_templateObject17_d82f0de08e0011ed99ce491205e67b1d || (_templateObject17_d82f0de08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          z-index: var(--hax-ui-focus-z-index - 1);\n          top: 0;\n          font-family: var(--hax-ui-font-family);\n          font-size: var(--hax-ui-font-size);\n          color: var(--hax-ui-color);\n          transition: 0s color linear 0s;\n        }\n        :host(:focus-within),\n        :host(:hover) {\n          z-index: var(--hax-ui-focus-z-index);\n        }\n        .wrapper {\n          position: fixed;\n          display: none;\n          align-items: stretch;\n          flex-direction: row-reverse;\n          opacity: 0;\n          visibility: visible;\n          pointer-events: none;\n          overflow: hidden;\n          top: 0;\n          bottom: 0;\n          width: var(--hax-tray-width);\n          height: calc(100vh - 48px);\n          max-height: calc(100vh - 48px);\n          transition: 0.2s opacity ease-in-out 0s;\n          z-index: var(--hax-ui-focus-z-index);\n        }\n        :host([element-align=\"left\"]) .wrapper {\n          left: -1000px;\n          flex-direction: row;\n        }\n        :host([edit-mode]) .wrapper {\n          opacity: 1;\n          visibility: visible;\n          pointer-events: all;\n          display: flex;\n        }\n        :host([edit-mode][element-align=\"left\"]) .wrapper {\n          left: 0px;\n        }\n        :host([edit-mode][element-align=\"right\"]) .wrapper {\n          right: 0px;\n        }\n        :host([edit-mode][collapsed]) .wrapper {\n          width: unset;\n        }\n        :host([edit-mode]) .wrapper.full-panel {\n          width: unset;\n          left: 0;\n          right: 0;\n        }\n        :host([edit-mode]) .wrapper.full-panel .detail {\n          max-width: unset;\n        }\n        #menubar {\n          display: inline-flex;\n          flex-direction: column;\n          align-items: stretch;\n          width: var(--hax-tray-menubar-min-width);\n          overflow: visible;\n          flex: 0 0 auto;\n          z-index: 6;\n          background-color: var(--hax-ui-background-color);\n        }\n        :host([collapsed]) #menubar {\n          width: unset;\n        }\n        #menubar > * {\n          background-color: var(--hax-ui-background-color);\n        }\n        #menubar > *::part(button) {\n          padding: var(--hax-ui-spacing-xs);\n        }\n        #menubar > *::part(label) {\n          opacity: 0;\n          margin: 0px;\n          width: 0%;\n          font-size: 10px;\n          padding: 0px;\n          visibility: hidden;\n          overflow: hidden;\n          display: inline-block;\n          text-align: left;\n          transition: 0.2s width ease-in-out 0s, 0.2s margin ease-in-out 0s,\n            0.2s padding ease-in-out 0s, 0s opacity linear 0.2s,\n            0s visibility linear 0.2s;\n        }\n        :host([collapsed]) #menubar > *::part(label) {\n          opacity: 1;\n          width: 100%;\n          visibility: visible;\n          padding: 0px var(--hax-ui-spacing-sm);\n          overflow: unset;\n          transition: 0.2s width ease-in-out 0s, 0.2s margin ease-in-out 0s,\n            0.2s padding ease-in-out 0s, 0s opacity linear 0s,\n            0s visibility linear 0s, 0s overflow linear 0.2s;\n        }\n        loading-indicator {\n          --loading-indicator-background-color: var(\n            --simple-colors-default-theme-accent-2,\n            grey\n          );\n          --loading-indicator-color: var(\n            --simple-colors-default-theme-accent-10,\n            black\n          );\n        }\n        .detail,\n        #tray-detail {\n          flex: 1 1 auto;\n          display: flex;\n          flex-direction: column;\n          align-items: stretch;\n        }\n        .detail {\n          opacity: 1;\n          visibility: visible;\n          pointer-events: all;\n          transition: 0.2s opacity ease-in-out 0s, 0.2s width ease-in-out 0s,\n            0.2s visibility ease-in-out 0s, 0s border linear;\n          border: 1px solid var(--hax-ui-border-color);\n          background-color: var(--hax-ui-background-color);\n          transition: 0.2s width ease-in-out 0s;\n          max-height: 100vh;\n          max-width: calc(\n            var(--hax-tray-width) - var(--hax-tray-menubar-min-width)\n          );\n          overflow-x: auto;\n        }\n        :host([collapsed]) .detail {\n          width: 0px;\n          overflow: hidden;\n          opacity: 0;\n          visibility: hidden;\n          pointer-events: none;\n          max-height: 100vh;\n          overflow-y: auto;\n        }\n        #tray-detail {\n          width: auto;\n          padding: 0 var(--hax-ui-spacing) var(--hax-ui-spacing);\n          overflow-y: auto;\n        }\n        #haxcancelbutton::part(dropdown-icon) {\n          display: none;\n        }\n        .tray-detail-titlebar {\n          background-color: var(--hax-ui-color-accent);\n          padding: var(--hax-ui-spacing-sm) var(--hax-ui-spacing);\n          margin: 0 calc(0px - var(--hax-ui-spacing)) var(--hax-ui-spacing);\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          height: var(--simple-modal-titlebar-height, unset);\n          line-height: var(--simple-modal-titlebar-line-height, unset);\n          position: sticky;\n          z-index: 2;\n          top: 0;\n        }\n        .tray-detail-titlebar h4 {\n          flex: 1 1 auto;\n          font-size: var(--hax-ui-font-size);\n          font-family: var(--hax-ui-font-family);\n        }\n        #toggle-tray-size {\n          flex: 0 0 auto;\n        }\n        hax-tray-button,\n        hax-app-browser,\n        hax-gizmo-browser {\n          transition: 0.2s all ease-in-out;\n          transition: 0s color linear !important;\n          transition: 0s background-color linear !important;\n          transition: 0s border-color linear !important;\n          visibility: visible;\n        }\n        hax-tray-button:not(:defined),\n        hax-app-browser:not(:defined),\n        hax-gizmo-browser:not(:defined) {\n          visibility: hidden;\n        }\n        hax-tray-upload {\n          flex: 0 0 auto;\n        }\n        *[hidden] {\n          display: none;\n        }\n        :host([element-align=\"right\"]) #button {\n          right: 0;\n        }\n        :host([element-align=\"left\"]) #button {\n          left: 0;\n        }\n\n        #button {\n          position: fixed;\n          top: 0;\n          visibility: visible;\n          margin: var(--hax-ui-spacing-xs);\n        }\n        :host([edit-mode]) #button {\n          visibility: hidden;\n          opacity: 0;\n        }\n        #button:hover {\n          opacity: 1;\n        }\n        /** This is mobile layout for controls */\n        @media screen and (max-width: 800px) {\n          :host {\n            width: 100%;\n            z-index: calc(var(--hax-ui-focus-z-index) + 3);\n          }\n          .wrapper {\n            width: unset;\n            top: -1000px;\n            left: 0px;\n            right: 0px;\n            flex-direction: column;\n          }\n          :host([edit-mode]) .wrapper {\n            top: 0;\n          }\n          :host([collapsed]) .wrapper {\n            height: var(--hax-tray-menubar-min-height);\n            overflow-y: visible;\n          }\n          :host([element-align=\"left\"]) .wrapper {\n            left: -1000px;\n            flex-direction: column;\n          }\n          #menubar {\n            position: sticky;\n            flex-direction: row;\n            left: 0;\n            top: 0;\n            height: auto;\n            flex: 0 0 auto;\n            width: 100%;\n          }\n          #menubar > * {\n            flex: 1 0 auto;\n            min-width: var(--hax-tray-menubar-min-width);\n          }\n          #menubar > *::part(button) {\n            min-width: var(--hax-tray-menubar-min-width);\n            justify-content: space-around;\n          }\n          #menubar > *::part(label) {\n            display: none;\n          }\n          #haxMenuAlign {\n            display: none;\n          }\n          .detail {\n            width: 100%;\n            position: relative;\n            flex: 1 1 100%;\n          }\n          :host([collapsed]) .detail {\n            flex: 0 0 0px;\n          }\n        }\n        @media screen and (max-width: 600px) {\n          :host([edit-mode]) .hide-small {\n            display: none;\n          }\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray), "properties", this)), {}, {
          offsetMargin: {
            type: String,
            attribute: "offset-margin"
          },
          collapsed: {
            type: Boolean,
            reflect: true
          },
          traySizeIcon: {
            type: String
          },
          loading: {
            type: Boolean,
            reflect: true
          },

          /**
           * Form values for active node
           */
          activeValue: {
            type: Object
          },

          /**
           * Form schema for active node
           */
          activeSchema: {
            type: Object
          },

          /**
           * Alignment of the initial edit button
           */
          elementAlign: {
            type: String,
            reflect: true,
            attribute: "element-align"
          },

          /**
           * Light variant for save button
           */
          light: {
            type: Boolean,
            reflect: true
          },

          /**
           * If we can currently undo based on stack position
           */
          canUndo: {
            type: Boolean,
            attribute: "can-undo"
          },

          /**
           * If we can currently redo based on stack position
           */
          canRedo: {
            type: Boolean,
            attribute: "can-redo"
          },
          haxUiTheme: {
            type: String
          },

          /**
           * Showing preferences area.
           */
          hidePreferencesButton: {
            type: Boolean,
            reflect: true,
            attribute: "hide-preferences-button"
          },

          /**
           * Showing button area at all a well as internal
           * state managing buttons like cancel and save
           */
          hidePanelOps: {
            type: Boolean,
            reflect: true,
            attribute: "hide-panel-ops"
          },

          /**
           * Global preferences for HAX overall
           */
          globalPreferences: {
            type: Object
          },

          /**
           * Global active node so we know if we need to disable contextual settings
           */
          activeNode: {
            type: Object
          },

          /**
           * Element name / what to display based on active element
           */
          activeTagName: {
            type: String
          },
          activeGizmo: {
            type: Object
          },

          /**
           * State of the panel
           */
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          },

          /**
           * id of toggled section in tray
           */
          trayDetail: {
            type: String,
            reflect: true,
            attribute: "tray-detail"
          },

          /**
           * heading of toggled section in tray
           */
          trayLabel: {
            type: String
          },
          tourOpened: {
            type: String
          },
          __tour: {
            type: Object
          }
        });
      }
    }]);
    return HaxTray;
  }((0, _I18NMixin2.I18NMixin)((0, _SimpleTourFinder.SimpleTourFinder)((0, _utils.winEventsElement)(_index.LitElement))));

  _exports.HaxTray = HaxTray;
  customElements.define(HaxTray.tag, HaxTray);
});