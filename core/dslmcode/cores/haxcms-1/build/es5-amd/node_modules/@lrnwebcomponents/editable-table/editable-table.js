define(["exports", "meta", "../../lit/index.js", "./lib/editable-table-behaviors.js", "./lib/editable-table-display.js", "./lib/editable-table-edit.js"], function (_exports, meta, _index, _editableTableBehaviors, _editableTableDisplay, _editableTableEdit) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTable = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_70d8c0e04fbd11edb93baf2315d3222f, _templateObject2_70d8c0e04fbd11edb93baf2315d3222f;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `editable-table`
   * An editor interface for tables that toggles between view mode.
   *
  ### Styling
  
  `<editable-table>` provides following custom properties and mixins
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--editable-table-font-size` | Main size for  table. | unset;
  `--editable-table-secondary-font-size` | Smaller font size for table for minor UI elements. | 12px;
  `--editable-table-caption-font-size` | Font size for table caption. | var(--editable-table-font-size);
  `--editable-table-font-family` | Main font-family for table. | inherit;
  `--editable-table-secondary-font-family` | Secondary font-familt for table's minor UI elements | "Roboto", "Noto", sans-serif;
  `--editable-table-light-weight` | lightest table font-weight, for minor UI elements. | 200;
  `--editable-table-medium-weight` | default table font-weight. | 300;
  `--editable-table-heavy-weight` | heaviest table font-weight, for emphasis and table  caption. | 600;
  `--editable-table-color` | table text color. | #222;
  `--editable-table-bg-color` | table background color. | #fff;
  `--editable-table-caption-color` | caption text color. | var(--editable-table-color);
  `--editable-table-caption-bg-color` | caption background color. | #fff;
  `--editable-table-heading-color` | row/column heading text color. | #000;
  `--editable-table-heading-bg-color` | row/column heading background color. | #e8e8e8;
  `--editable-table-stripe-bg-color` | background color for alternating row striping. | #f0f0f0;
  `--editable-table-border-width` | border width for table. | 1px;
  `--editable-table-border-style` | border style for table. | solid;
  `--editable-table-border-color` | border color for table. | #999;
  `--editable-table-border` | table border. | var(--editable-table-border-width) var(--editable-table-border-style) var(--editable-table-border-color);
  `--editable-table-button-color` | default text color of toggle buttons. | var(--editable-table-border-color);
  `--editable-table-button-bg-color` | default background color of toggle buttons. | var(--editable-table-bg-color);
  `--editable-table-button-toggled-color` | text color of toggle buttons when toggled. | var(--editable-table-color);
  `--editable-table-button-toggled-bg-color` | background color of toggle buttons when toggled. | var(--editable-table-bg-color);
  `--editable-table-button-hover-color` | text color of toggle buttons when hovered or focused. | var(--editable-table-button-color);
  `--editable-table-button-hover-bg-color` | background color of toggle buttons when hovered or focused. | var(--editable-table-heading-bg-color);
  `--editable-table-button-toggled-hover-color` | text color of toggle buttons when toggled and hovered/focused. | var(--editable-table-heading-color);
  `--editable-table-button-toggled-hover-bg-color` | background color of toggle buttons when toggled and hovered/focused. | var(--editable-table-heading-bg-color);
  `--editable-table-button-disabled-color` | text color of toggle buttons when disabled. | var(--editable-table-border-color);
  `--editable-table-button-disabled-bg-color` | background color of toggle buttons when disabled. | var(--editable-table-heading-bg-color);
  `--editable-table-row-horizontal-padding` | Default horizontal padding for cells. | 6px;
  `--editable-table-row-horizontal-padding-condensed` | Smaller horizontal padding for cells. | 4px;
  `--editable-table-row-vertical-padding` | Default vertical padding for cells (determines row hight and whitespace). | 10px;
  `--editable-table-row-vertical-padding-condensed` | Smaller vertical padding for cells (determines condensed row hight and whitespace). | 2px;
  `--editable-table-style-stripe` | Styles applied to striped rows. | { background-color: var(--editable-table-stripe-bg-color); }
  `--editable-table-style-column-header` | Styles applied to column headers. | { font-weight: var(--editable-table-heavy-weight); color: var(--editable-table-heading-color); background-color: var(--editable-table-heading-bg-color); }
  `--editable-table-style-row-header` | Styles applied to row headers. | { font-weight: var(--editable-table-heavy-weight); color: var(--editable-table-heading-color); }
  `--editable-table-style-footer` | Styles applied to table footer. | { font-weight: var(--editable-table-heavy-weight); color: var(--editable-table-heading-color); border-top: 3px solid var(--editable-table-color); }
   *
   * @demo ./demo/index.html
   * @demo ./demo/editmode.html Edit Mode
   * @demo ./demo/numeric.html Numeric Styles
   * @demo ./demo/display.html Display Only
   * @demo ./demo/importing.html Importing Data
   * @demo ./demo/local-import.html Local file import Data
   * @demo ./demo/exporting.html Exporting Data
   * @demo ./demo/advanced.html Advanced Features
   * 
   * @customElement
   * @element editable-table
   * @extends editBehaviors
   * @extends ResponsiveUtilityBehaviors
   * @extends editableTableStyles
   */
  var EditableTable = /*#__PURE__*/function (_editBehaviors) {
    babelHelpers.inherits(EditableTable, _editBehaviors);

    var _super = _createSuper(EditableTable);

    function EditableTable() {
      var _this;

      babelHelpers.classCallCheck(this, EditableTable);
      _this = _super.call(this);
      _this.editMode = false;
      return _this;
    }

    babelHelpers.createClass(EditableTable, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_70d8c0e04fbd11edb93baf2315d3222f || (_templateObject_70d8c0e04fbd11edb93baf2315d3222f = babelHelpers.taggedTemplateLiteral(["\n      <editable-table-display\n        ?bordered=\"", "\"\n        caption=\"", "\"\n        ?column-header=\"", "\"\n        ?column-striped=\"", "\"\n        ?condensed=\"", "\"\n        .data=\"", "\"\n        ?disabled=\"", "\"\n        ?hidden=\"", "\"\n        ?downloadable=\"", "\"\n        ?filter=\"", "\"\n        ?footer=\"", "\"\n        ?numeric-styles=\"", "\"\n        ?printable=\"", "\"\n        ?responsive=\"", "\"\n        ?row-header=\"", "\"\n        ?sort=\"", "\"\n        ?striped=\"", "\"\n      >\n        <slot></slot>\n      </editable-table-display>\n      <editable-table-edit\n        ?bordered=\"", "\"\n        caption=\"", "\"\n        @change=\"", "\"\n        .config=\"", "\"\n        ?column-header=\"", "\"\n        ?column-striped=\"", "\"\n        ?condensed=\"", "\"\n        .data=\"", "\"\n        ?disabled=\"", "\"\n        ?hidden=\"", "\"\n        ?downloadable=\"", "\"\n        ?filter=\"", "\"\n        ?footer=\"", "\"\n        ?hide-bordered=\"", "\"\n        ?hide-condensed=\"", "\"\n        ?hide-downloadable=\"", "\"\n        ?hide-filter=\"", "\"\n        ?hide-responsive=\"", "\"\n        ?hide-printable=\"", "\"\n        ?hide-sort=\"", "\"\n        ?hide-striped=\"", "\"\n        ?numeric-styles=\"", "\"\n        ?printable=\"", "\"\n        ?responsive=\"", "\"\n        ?row-header=\"", "\"\n        ?sort=\"", "\"\n        ?striped=\"", "\"\n      >\n      </editable-table-edit>\n    "])), this.bordered, this.caption, this.columnHeader, this.columnStriped, this.condensed, this.data, this.disabled, this.editMode, this.downloadable, this.filter, this.footer, this.numericStyles, this.printable, this.responsive, this.rowHeader, this.sort, this.striped, this.bordered, this.caption, this._handleSync, this.config, this.columnHeader, this.columnStriped, this.condensed, this.data, this.disabled, !this.editMode || this.hidden, this.downloadable, this.filter, this.footer, this.hideBordered, this.hideCondensed, this.hideDownloadable, this.hideFilter, this.hideResponsive, this.hidePrintable, this.hideSort, this.hideStriped, this.numericStyles, this.printable, this.responsive, this.rowHeader, this.sort, this.striped);
      }
    }, {
      key: "display",
      get: function get() {
        return this.shadowRoot && this.shadowRoot.querySelector("editable-table-display");
      }
    }, {
      key: "editor",
      get: function get() {
        return this.shadowRoot && this.shadowRoot.querySelector("editable-table-edit");
      }
    }, {
      key: "_handleSync",
      value: function _handleSync(e) {
        this.sync(e.detail);
      }
    }, {
      key: "sync",
      value: function sync(property) {
        if (this.editor && property) this[property] = this.editor[property];
      }
      /**
       * makes toggle focusable
       */

    }, {
      key: "focus",
      value: function focus() {
        var query = this.editMode ? "editable-table-edit" : "editable-table-display",
            target = this.shadowRoot && this.shadowRoot.querySelector(query) ? this.shadowRoot.querySelector(query) : undefined;
        if (target) setTimeout(function () {
          target.focus();
        }, 1);
      }
      /**
       * Toggles between edit-mode and display mode.
       * @event toggle-edit-mode
       * @param {boolean} edit Toggle edit mode on? Default is toggle from current mode.
       */

    }, {
      key: "toggleEditMode",
      value: function toggleEditMode(edit) {
        this.editMode = edit !== undefined ? edit : !this.editMode;
        this.focus();
        this.dispatchEvent(new CustomEvent("toggle-edit-mode", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_70d8c0e04fbd11edb93baf2315d3222f || (_templateObject2_70d8c0e04fbd11edb93baf2315d3222f = babelHelpers.taggedTemplateLiteral(["\n        :host([hidden]) {\n          display: none !important;\n          margin: 15px 0;\n        }\n\n        :host > * {\n          margin: 0px;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table";
      }
      /**
       * haxProperties integration via file reference
       */

    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(EditableTable), "properties", this)), {}, {
          /**
           * Is table in edit-mode? Default is false (display mode).
           */
          editMode: {
            type: Boolean,
            attribute: "edit-mode",
            reflect: true
          }
        });
      }
    }]);
    return EditableTable;
  }((0, _editableTableBehaviors.editBehaviors)(_index.LitElement));

  _exports.EditableTable = EditableTable;
  window.customElements.define(EditableTable.tag, EditableTable);
});