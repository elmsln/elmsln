define(["exports", "meta", "../../lit/index.js", "./lib/editable-table-behaviors.js", "./lib/editable-table-display.js", "./lib/editable-table-edit.js"], function (_exports, meta, _index, _editableTableBehaviors, _editableTableDisplay, _editableTableEdit) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTable = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_6636ee90809211edaa2833647dc78c6c, _templateObject2_6636ee90809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `editable-table`
   * An editor interface for tables that toggles between view mode.
   *
  ### Styling
  
  `<editable-table>` provides following custom properties and mixins
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--editable-table-font-size` | Main size for  table. | unset;
  `--editable-table-secondary-font-size` | Smaller font size for table for minor UI elements. | 12px;
  `--editable-table-caption-font-size` | Font size for table caption. | var(--editable-table-font-size);
  `--editable-table-font-family` | Main font-family for table. | inherit;
  `--editable-table-secondary-font-family` | Secondary font-familt for table's minor UI elements | "Roboto", "Noto", sans-serif;
  `--editable-table-light-weight` | lightest table font-weight, for minor UI elements. | 200;
  `--editable-table-medium-weight` | default table font-weight. | 300;
  `--editable-table-heavy-weight` | heaviest table font-weight, for emphasis and table  caption. | 600;
  `--editable-table-color` | table text color. | #222;
  `--editable-table-bg-color` | table background color. | #fff;
  `--editable-table-caption-color` | caption text color. | var(--editable-table-color);
  `--editable-table-caption-bg-color` | caption background color. | #fff;
  `--editable-table-heading-color` | row/column heading text color. | #000;
  `--editable-table-heading-bg-color` | row/column heading background color. | #e8e8e8;
  `--editable-table-stripe-bg-color` | background color for alternating row striping. | #f0f0f0;
  `--editable-table-border-width` | border width for table. | 1px;
  `--editable-table-border-style` | border style for table. | solid;
  `--editable-table-border-color` | border color for table. | #999;
  `--editable-table-border` | table border. | var(--editable-table-border-width) var(--editable-table-border-style) var(--editable-table-border-color);
  `--editable-table-button-color` | default text color of toggle buttons. | var(--editable-table-border-color);
  `--editable-table-button-bg-color` | default background color of toggle buttons. | var(--editable-table-bg-color);
  `--editable-table-button-toggled-color` | text color of toggle buttons when toggled. | var(--editable-table-color);
  `--editable-table-button-toggled-bg-color` | background color of toggle buttons when toggled. | var(--editable-table-bg-color);
  `--editable-table-button-hover-color` | text color of toggle buttons when hovered or focused. | var(--editable-table-button-color);
  `--editable-table-button-hover-bg-color` | background color of toggle buttons when hovered or focused. | var(--editable-table-heading-bg-color);
  `--editable-table-button-toggled-hover-color` | text color of toggle buttons when toggled and hovered/focused. | var(--editable-table-heading-color);
  `--editable-table-button-toggled-hover-bg-color` | background color of toggle buttons when toggled and hovered/focused. | var(--editable-table-heading-bg-color);
  `--editable-table-button-disabled-color` | text color of toggle buttons when disabled. | var(--editable-table-border-color);
  `--editable-table-button-disabled-bg-color` | background color of toggle buttons when disabled. | var(--editable-table-heading-bg-color);
  `--editable-table-row-horizontal-padding` | Default horizontal padding for cells. | 6px;
  `--editable-table-row-horizontal-padding-condensed` | Smaller horizontal padding for cells. | 4px;
  `--editable-table-row-vertical-padding` | Default vertical padding for cells (determines row hight and whitespace). | 10px;
  `--editable-table-row-vertical-padding-condensed` | Smaller vertical padding for cells (determines condensed row hight and whitespace). | 2px;
  `--editable-table-style-stripe` | Styles applied to striped rows. | { background-color: var(--editable-table-stripe-bg-color); }
  `--editable-table-style-column-header` | Styles applied to column headers. | { font-weight: var(--editable-table-heavy-weight); color: var(--editable-table-heading-color); background-color: var(--editable-table-heading-bg-color); }
  `--editable-table-style-row-header` | Styles applied to row headers. | { font-weight: var(--editable-table-heavy-weight); color: var(--editable-table-heading-color); }
  `--editable-table-style-footer` | Styles applied to table footer. | { font-weight: var(--editable-table-heavy-weight); color: var(--editable-table-heading-color); border-top: 3px solid var(--editable-table-color); }
   *
   * @demo ./demo/index.html
   * @demo ./demo/editmode.html Edit Mode
   * @demo ./demo/numeric.html Numeric Styles
   * @demo ./demo/display.html Display Only
   * @demo ./demo/importing.html Importing Data
   * @demo ./demo/local-import.html Local file import Data
   * @demo ./demo/exporting.html Exporting Data
   * @demo ./demo/advanced.html Advanced Features
   * 
   * @customElement
   * @element editable-table
   * @extends editBehaviors
   * @extends ResponsiveUtilityBehaviors
   * @extends editableTableStyles
   */
  var EditableTable = /*#__PURE__*/function (_editBehaviors) {
    babelHelpers.inherits(EditableTable, _editBehaviors);

    var _super = _createSuper(EditableTable);

    function EditableTable() {
      var _this;

      babelHelpers.classCallCheck(this, EditableTable);
      _this = _super.call(this);
      _this.haxUIElement = true;
      _this.editMode = false;
      return _this;
    }

    babelHelpers.createClass(EditableTable, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_6636ee90809211edaa2833647dc78c6c || (_templateObject_6636ee90809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <editable-table-display\n        ?bordered=\"", "\"\n        caption=\"", "\"\n        ?column-header=\"", "\"\n        ?column-striped=\"", "\"\n        ?condensed=\"", "\"\n        .data=\"", "\"\n        ?disabled=\"", "\"\n        ?hidden=\"", "\"\n        ?downloadable=\"", "\"\n        ?filter=\"", "\"\n        ?footer=\"", "\"\n        ?numeric-styles=\"", "\"\n        ?printable=\"", "\"\n        ?responsive=\"", "\"\n        ?row-header=\"", "\"\n        ?sort=\"", "\"\n        ?striped=\"", "\"\n      >\n        <slot></slot>\n      </editable-table-display>\n      <editable-table-edit\n        ?bordered=\"", "\"\n        caption=\"", "\"\n        @change=\"", "\"\n        .config=\"", "\"\n        ?column-header=\"", "\"\n        ?column-striped=\"", "\"\n        ?condensed=\"", "\"\n        .data=\"", "\"\n        ?disabled=\"", "\"\n        ?hidden=\"", "\"\n        ?downloadable=\"", "\"\n        ?filter=\"", "\"\n        ?footer=\"", "\"\n        ?hide-bordered=\"", "\"\n        ?hide-condensed=\"", "\"\n        ?hide-downloadable=\"", "\"\n        ?hide-filter=\"", "\"\n        ?hide-responsive=\"", "\"\n        ?hide-printable=\"", "\"\n        ?hide-sort=\"", "\"\n        ?hide-striped=\"", "\"\n        ?numeric-styles=\"", "\"\n        ?printable=\"", "\"\n        ?responsive=\"", "\"\n        ?row-header=\"", "\"\n        ?sort=\"", "\"\n        ?striped=\"", "\"\n      >\n      </editable-table-edit>\n    "])), this.bordered, this.caption, this.columnHeader, this.columnStriped, this.condensed, this.data, this.disabled, this.editMode, this.downloadable, this.filter, this.footer, this.numericStyles, this.printable, this.responsive, this.rowHeader, this.sort, this.striped, this.bordered, this.caption, this._handleSync, this.config, this.columnHeader, this.columnStriped, this.condensed, this.data, this.disabled, !this.editMode || this.hidden, this.downloadable, this.filter, this.footer, this.hideBordered, this.hideCondensed, this.hideDownloadable, this.hideFilter, this.hideResponsive, this.hidePrintable, this.hideSort, this.hideStriped, this.numericStyles, this.printable, this.responsive, this.rowHeader, this.sort, this.striped);
      }
    }, {
      key: "haxHooks",
      value: // Support being an editing interface element for HAX
      function haxHooks() {
        return {
          preProcessNodeToContent: "haxpreProcessNodeToContent",
          activeElementChanged: "haxactiveElementChanged"
        };
      } // about to convert to content, ensure we are no longer the editable-table

    }, {
      key: "haxpreProcessNodeToContent",
      value: function () {
        var _haxpreProcessNodeToContent = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(node) {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  node.editMode = false;
                  node.innerHTML = '';
                  _context.next = 4;
                  return node.appendChild(this.getTableHTML(true, true));

                case 4:
                  //node.data = null;/
                  node.config = null;
                  return _context.abrupt("return", node);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function haxpreProcessNodeToContent(_x) {
          return _haxpreProcessNodeToContent.apply(this, arguments);
        }

        return haxpreProcessNodeToContent;
      }() // allow HAX to toggle edit state when activated

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        el.editMode = val;

        if (val) {
          el.focus();
        }

        return el;
      }
      /**
       * haxProperties integration via file reference
       */

    }, {
      key: "display",
      get: function get() {
        return this.shadowRoot && this.shadowRoot.querySelector("editable-table-display");
      }
    }, {
      key: "editor",
      get: function get() {
        return this.shadowRoot && this.shadowRoot.querySelector("editable-table-edit");
      }
    }, {
      key: "_handleSync",
      value: function _handleSync(e) {
        this.sync(e.detail);
      }
    }, {
      key: "sync",
      value: function sync(property) {
        if (this.editor && property) this[property] = this.editor[property];
      }
      /**
       * makes toggle focusable
       */

    }, {
      key: "focus",
      value: function focus() {
        var query = this.editMode ? "editable-table-edit" : "editable-table-display",
            target = this.shadowRoot && this.shadowRoot.querySelector(query) ? this.shadowRoot.querySelector(query) : undefined;
        if (target) setTimeout(function () {
          target.focus();
        }, 1);
      }
      /**
       * Toggles between edit-mode and display mode.
       * @event toggle-edit-mode
       * @param {boolean} edit Toggle edit mode on? Default is toggle from current mode.
       */

    }, {
      key: "toggleEditMode",
      value: function toggleEditMode(edit) {
        this.editMode = edit !== undefined ? edit : !this.editMode;
        this.focus();
        this.dispatchEvent(new CustomEvent("toggle-edit-mode", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_6636ee90809211edaa2833647dc78c6c || (_templateObject2_6636ee90809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host([hidden]) {\n          display: none !important;\n          margin: 15px 0;\n        }\n\n        :host > * {\n          margin: 0px;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table";
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(EditableTable), "properties", this)), {}, {
          /**
           * Is table in edit-mode? Default is false (display mode).
           */
          editMode: {
            type: Boolean,
            attribute: "edit-mode",
            reflect: true
          }
        });
      }
    }]);
    return EditableTable;
  }((0, _editableTableBehaviors.editBehaviors)(_index.LitElement));

  _exports.EditableTable = EditableTable;
  customElements.define(EditableTable.tag, EditableTable);
});