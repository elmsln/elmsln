define(["exports", "../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FigureLabel = void 0;

  var _templateObject_66dcf290809211edaa2833647dc78c6c, _templateObject2_66dcf290809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
    * `figure-label`
    * @element figure-label
    * `Figure label element to mark media assets within content.`
    *
    * @microcopy - language worth noting:
    *  -
    *
   
    * @lit-element
    * @demo demo/index.html
    */
  var FigureLabel = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(FigureLabel, _LitElement);

    var _super = _createSuper(FigureLabel);

    function FigureLabel() {
      babelHelpers.classCallCheck(this, FigureLabel);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(FigureLabel, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_66dcf290809211edaa2833647dc78c6c || (_templateObject_66dcf290809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <div id=\"wrap\">\n      <div id=\"title\">", "</div>\n      <div id=\"description\">", "</div>\n    </div>"])), this.title, this.description);
      } // haxProperty definition

    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_66dcf290809211edaa2833647dc78c6c || (_templateObject2_66dcf290809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        #wrap {\n          display: flex;\n          margin-bottom: 1em;\n        }\n\n        #title {\n          background-color: var(--figure-label-title-background-color, #f2f2f2);\n          padding: 10.8px 13.5px 10.8px;\n          font-size: 13.5px;\n        }\n\n        #description {\n          border: solid 1px\n            var(--figure-label-description-background-color, #f2f2f2);\n          padding: 10.8px 13.5px 10.8px;\n          font-size: 13.5px;\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Figure label",
            description: "Figure label element to mark media assets within content.",
            icon: "icons:android",
            color: "green",
            groups: ["Label"],
            meta: {
              author: "HAXTheWeb core team",
              owner: "PSU"
            }
          },
          settings: {
            configure: [{
              property: "title",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "description",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(FigureLabel), "properties", this)), {}, {
          title: {
            name: "title",
            type: String,
            value: "",
            reflectToAttribute: false,
            observer: false
          },
          description: {
            name: "description",
            type: String,
            value: "",
            reflectToAttribute: false,
            observer: false
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "figure-label";
      }
    }]);
    return FigureLabel;
  }(_index.LitElement);

  _exports.FigureLabel = FigureLabel;
  customElements.define("figure-label", FigureLabel);
});