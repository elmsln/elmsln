define(["exports", "../../lit/index.js", "../a11y-tabs/a11y-tabs.js", "../a11y-tabs/lib/a11y-tab.js", "../../@polymer/marked-element/marked-element.js", "./lib/lrn-markdown-editor-editor.js"], function (_exports, _index, _a11yTabs, _a11yTab, _markedElement, _lrnMarkdownEditorEditor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnMarkdownEditor = void 0;

  var _templateObject_aafd89008e0011ed99ce491205e67b1d, _templateObject2_aafd89008e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrn-markdown-editor`
   * @element lrn-markdown-editor
   * `Side by side markdown to HTML editor + preview pane`
   *
   * @microcopy - language worth noting:
   *  - often used for quick field editing interfaces w/ minimal input allowed
   * @polymer
  
   * @demo demo/index.html
   */
  var LrnMarkdownEditor = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(LrnMarkdownEditor, _LitElement);

    var _super = _createSuper(LrnMarkdownEditor);

    function LrnMarkdownEditor() {
      var _this;

      babelHelpers.classCallCheck(this, LrnMarkdownEditor);
      _this = _super.call(this);
      _this.layout = "0";
      _this.content = "";
      _this.cookies = true;
      _this.elReady = false;
      return _this;
    }

    babelHelpers.createClass(LrnMarkdownEditor, [{
      key: "render",
      value:
      /**
       * LitElement render
       */
      function render() {
        return (0, _index.html)(_templateObject_aafd89008e0011ed99ce491205e67b1d || (_templateObject_aafd89008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"mtz-toolbar\">\n        <a11y-tabs>\n          <a11y-tab id=\"tab-0\" label=\"Write\">\n            <div class=\"pane\">\n              <lrn-markdown-editor-editor\n                content=\"", "\"\n                @content-changed=\"", "\"\n              ></lrn-markdown-editor-editor>\n            </div>\n          </a11y-tab>\n          <a11y-tab id=\"tab-1\" label=\"Preview\">\n            <div class=\"pane\">\n              <marked-element\n                markdown=\"", "\"\n                @markdown-changed=\"", "\"\n              ></marked-element>\n            </div>\n          </a11y-tab>\n          <a11y-tab id=\"tab-2\" label=\"Split View\">\n            <div class=\"split-pane\">\n              <div class=\"pane\">\n                <div class=\"container-flex\">\n                  <lrn-markdown-editor-editor\n                    content=\"", "\"\n                    @content-changed=\"", "\"\n                  ></lrn-markdown-editor-editor>\n                  <marked-element\n                    class=\"preview-pane\"\n                    markdown=\"", "\"\n                    @markdown-changed=\"", "\"\n                  ></marked-element>\n                </div>\n              </div>\n            </div>\n          </a11y-tab>\n        </a11y-tabs>\n      </div>\n    "])), this.content, this.__contentChanged, this.content, this.__contentChanged, this.content, this.__contentChanged, this.content, this.__contentChanged);
      }
    }, {
      key: "__contentChanged",
      value: function __contentChanged(e) {
        this.content = e.detail.value;
      }
    }, {
      key: "updated",
      value:
      /**
       * LitElement properties notice
       */
      function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "content") {
            // notify
            _this2.dispatchEvent(new CustomEvent("content-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
    }, {
      key: "_selectedChanged",
      value: function _selectedChanged(selected) {
        var cookieName = this._getCookieName(); // get current cookies
        // if the 'split-view' pane is selected


        if (selected === 2) {
          // add a cookie for lrn-markdown-editor-splitview
          this._createCookie(cookieName, "true", "30");
        } else if (selected !== 2 && this.elReady === true) {
          /**
           * @todo: this is erasing the cookie erroneously
           */
          this._eraseCookie(cookieName);
        }
      }
    }, {
      key: "_createCookie",
      value: function _createCookie(name, value, days) {
        var expires = "";

        if (days) {
          var date = new Date();
          date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
          expires = "; expires=" + date.toUTCString();
        }

        document.cookie = name + "=" + value + expires + "; path=/";
      }
    }, {
      key: "_readCookie",
      value: function _readCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(";");

        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];

          while (c.charAt(0) == " ") {
            c = c.substring(1, c.length);
          }

          if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }

        return null;
      }
    }, {
      key: "_eraseCookie",
      value: function _eraseCookie(name) {
        this._createCookie(name, "", -1);
      }
    }, {
      key: "_getCookieName",
      value: function _getCookieName() {
        return "lrnmarkdowneditorsplitview";
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        // tell others we are ready
        this.elReady = true; // get the cookie for splitview

        var cookieName = this._getCookieName();

        var cookie = this._readCookie(cookieName); // if there is a cookie set for splitview


        if (cookie && cookie === "true") {
          // show splitview pane
          this.selected = 2;
        }
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject2_aafd89008e0011ed99ce491205e67b1d || (_templateObject2_aafd89008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        #split-pane {\n          display: flex;\n          width: 100%;\n        }\n\n        .split-pane > * {\n          flex: 1 1 auto;\n          min-height: 160px;\n          width: calc(50% - 16px);\n        }\n\n        .preview-pane {\n          background: lightblue;\n        }\n\n        div.pane {\n          padding: 16px;\n          width: calc(100% - 32px);\n        }\n\n        a11y-tabs {\n          background: #f5f5f5;\n          border-style: solid;\n          border-color: #dcdcdc;\n          border-width: 1px;\n          min-width: 500px;\n        }\n\n        marked-element.lrn-markdown-editor {\n          width: 100%;\n          word-wrap: break-word;\n        }\n\n        .container-flex {\n          display: flex;\n          flex-wrap: nowrap;\n        }\n\n        .split-pane .container-flex > * {\n          width: 50%;\n        }\n\n        .split-pane marked-element {\n          width: calc(100% - 32px);\n          min-width: 150px;\n          margin: 0 16px;\n          padding: 0 16px;\n          background: #fff;\n          border-left: solid #dcdcdc 1px;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrn-markdown-editor";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          content: {
            type: String
          },
          layout: {
            type: String
          },
          cookies: {
            type: Boolean
          },
          elReady: {
            type: Boolean,
            attribute: "el-ready"
          }
        };
      }
    }]);
    return LrnMarkdownEditor;
  }(_index.LitElement);

  _exports.LrnMarkdownEditor = LrnMarkdownEditor;
  customElements.define(LrnMarkdownEditor.tag, LrnMarkdownEditor);
});