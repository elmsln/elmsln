define(["exports", "meta", "../../../lit/index.js", "./elmsln-studio-styles.js", "./elmsln-studio-utilities.js", "./elmsln-studio-submission-card.js", "../../simple-fields/lib/simple-fields-field.js", "../../accent-card/lib/accent-card-clickable.js"], function (_exports, meta, _index, _elmslnStudioStyles, _elmslnStudioUtilities, _elmslnStudioSubmissionCard, _simpleFieldsField, _accentCardClickable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ElmslnStudioSubmissions = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_d58104e08e0011ed99ce491205e67b1d, _templateObject2_d58104e08e0011ed99ce491205e67b1d, _templateObject3_d58104e08e0011ed99ce491205e67b1d, _templateObject4_d58104e08e0011ed99ce491205e67b1d, _templateObject5_d58104e08e0011ed99ce491205e67b1d, _templateObject6_d58104e08e0011ed99ce491205e67b1d, _templateObject7_d58104e08e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `elmsln-studio-submissions`
   * Studio App for ELMS:LN
   *
   * @customElement elmsln-studio-submissions
   * @lit-html
   * @lit-element
   * @demo demo/submission.html
   */
  var ElmslnStudioSubmissions = /*#__PURE__*/function (_ElmslnStudioUtilitie) {
    babelHelpers.inherits(ElmslnStudioSubmissions, _ElmslnStudioUtilitie);

    var _super = _createSuper(ElmslnStudioSubmissions);

    // life cycle
    function ElmslnStudioSubmissions() {
      var _this;

      babelHelpers.classCallCheck(this, ElmslnStudioSubmissions);
      _this = _super.call(this);
      _this.list = false;
      _this.commentLoad = 15;
      return _this;
    }

    babelHelpers.createClass(ElmslnStudioSubmissions, [{
      key: "render",
      value: // render function
      function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_d58104e08e0011ed99ce491205e67b1d || (_templateObject_d58104e08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <h1 class=\"sr-only\">Submissions</h1>\n      <div class=\"filters\">\n        <simple-fields-field\n          inline\n          label=\"Project:\"\n          .options=\"", "\"\n          value=\"", "\"\n          @value-changed=\"", "\"\n        >\n        </simple-fields-field>\n        <simple-fields-field\n          inline\n          label=\"Assignment:\"\n          .options=\"", "\"\n          value=\"", "\"\n          @value-changed=\"", "\"\n        >\n        </simple-fields-field>\n        <simple-fields-field\n          inline\n          label=\"Student:\"\n          .options=\"", "\"\n          value=\"", "\"\n          @value-changed=\"", "\"\n        >\n        </simple-fields-field>\n        <div id=\"layout\">\n          <button\n            aria-pressed=\"", "\"\n            @click=\"", "\"\n          >\n            <simple-icon-lite icon=\"icons:view-list\"></simple-icon-lite>\n            <span class=\"sr-only\">display as list</span>\n          </button>\n          <button\n            aria-pressed=\"", "\"\n            @click=\"", "\"\n          >\n            <simple-icon-lite icon=\"icons:view-module\"></simple-icon-lite>\n            <span class=\"sr-only\">display as grid</span>\n          </button>\n        </div>\n      </div>\n      <div id=\"primary\">\n        ", "\n      </div>\n      <div id=\"secondary\">\n        <nav-card flat no-border class=\"card\">\n          <span slot=\"heading\">\n            ", "\n          </span>\n          ", "\n        </nav-card>\n      </div>\n    "])), this.projectOptions, this.projectFilter || "", function (e) {
          return _this2.projectFilter = e.detail.value;
        }, this.assignmentOptions, this.assignmentFilter || "", function (e) {
          return _this2.assignmentFilter = e.detail.value;
        }, this.studentOptions, this.studentFilter || "", function (e) {
          return _this2.studentFilter = e.detail.value;
        }, this.list ? "true" : "false", function (e) {
          return _this2.list = true;
        }, this.list ? "false" : "true", function (e) {
          return _this2.list = false;
        }, !this.submissions ? this.loading("grey") : (0, _index.html)(_templateObject2_d58104e08e0011ed99ce491205e67b1d || (_templateObject2_d58104e08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n              <div id=\"cards\" class=\"", "\">\n                <div\n                  class=\"no-submissions\"\n                  ?hidden=\"", "\"\n                >\n                  No submissions for applied filters.\n                </div>\n                ", "\n              </div>\n            "])), this.list ? "list" : "grid", this.filteredSubmissions.length > 0, this.filteredSubmissions.map(function (s, i) {
          return (0, _index.html)(_templateObject3_d58104e08e0011ed99ce491205e67b1d || (_templateObject3_d58104e08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                    <accent-card-clickable\n                      id=\"accent-", "\"\n                      href=\"", "\"\n                      class=\"card submission-card\"\n                      image-src=\"", "\"\n                      .image-alt=\"", "\"\n                      ?horizontal=\"", "\"\n                      .image-align=\"", "\"\n                      .image-valign=\"", "\"\n                      .gravity=\"", "\"\n                      no-border\n                    >\n                      <elmsln-studio-link\n                        data-clickable\n                        href=\"", "\"\n                        id=\"assignment-", "\"\n                        slot=\"heading\"\n                      >\n                        ", "\n                      </elmsln-studio-link>\n                      <elmsln-studio-link\n                        id=\"student-", "\"\n                        href=\"submissions", "\"\n                        slot=\"subheading\"\n                      >\n                        ", "\n                      </elmsln-studio-link>\n                      <local-time\n                        slot=\"corner\"\n                        id=\"date-", "\"\n                        .datetime=\"", "\"\n                        month=\"long\"\n                        day=\"numeric\"\n                        year=\"", "\"\n                      >\n                        ", "\n                      </local-time>\n                      <div slot=\"content\" id=\"project-", "\">\n                        ", "\n                        ", "\n                      </div>\n                      <elmsln-studio-link\n                        slot=\"footer\"\n                        href=\"", "\"\n                      >\n                        Feedback\n                        <span class=\"sr-only\">(", ")</span>\n                        <simple-icon-lite\n                          icon=\"", "\"\n                        ></simple-icon-lite>\n                      </elmsln-studio-link>\n                    </accent-card-clickable>\n                  "])), i, _this2.getActivityLink(s, true), _this2.getCoverImage(s), s.imageAlt || undefined, s.feature || _this2.list ? true : false, _this2._getAlign(s.imageGravity || undefined), _this2._getValign(s.imageGravity || undefined), s.imageGravity || undefined, _this2.getActivityLink(s, true), s.id, s.assignment, s.id, !s.userId ? "" : "?student=".concat(s.userId), [s.firstName, s.lastName].join(" "), s.id, s.date, _this2.list ? "numeric" : undefined, _this2.dateFormat(s.date, "short"), s.id, s.project, !s.feature ? "" : (0, _index.html)(_templateObject4_d58104e08e0011ed99ce491205e67b1d || (_templateObject4_d58104e08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<div class=\"feature\">", "</div>"])), s.feature), _this2.getActivityLink(s), s.feedback.length, _this2.getFeedbackIcon(s.feedback.length));
        })), this.isFiltered ? "Related Comments" : "Recent Comments", !this.comments ? this.loading("grey", "body") : (0, _index.html)(_templateObject5_d58104e08e0011ed99ce491205e67b1d || (_templateObject5_d58104e08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                <div slot=\"body\" ?hidden=\"", "\">\n                  ", "\n                </div>\n                <div slot=\"linklist\">\n                  ", "\n                </div>\n                <button\n                  class=\"load-more\"\n                  slot=\"footer\"\n                  ?disabled=\"", "\"\n                  ?hidden=\"", "\"\n                  @click=\"", "\"\n                >\n                  Load More ", " /\n                  ", "\n                </button>\n              "])), this.filteredComments.length > 0, this.isFiltered ? "No comments for applied filters." : "No comments.", (this.filteredComments || []).slice(0, this.commentLoad).map(function (f) {
          return (0, _index.html)(_templateObject6_d58104e08e0011ed99ce491205e67b1d || (_templateObject6_d58104e08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                        <nav-card-item\n                          accent-color=\"", "\"\n                          .avatar=\"", "\"\n                          initials=\"", "\"\n                        >\n                          <elmsln-studio-link\n                            id=\"comment-", "\"\n                            aria-describedby=\"comment-", "-desc\"\n                            slot=\"label\"\n                            href=\"", "\"\n                          >\n                            ", "\n                          </elmsln-studio-link>\n\n                          <relative-time\n                            id=\"comment-", "\"\n                            slot=\"description\"\n                            .datetime=\"", "\"\n                          >\n                            ", "\n                          </relative-time>\n                        </nav-card-item>\n                      "])), _this2.accentColor(_this2.fullName(f)), f.avatar, _this2.fullName(f), f.id, f.id, _this2.getActivityLink(f), _this2.getActivityTitle(f), f.id, f.date, _this2.dateFormat(f.date, "long"));
        }), this.commentLoad >= this.filteredComments.length, this.commentLoad >= this.filteredComments.length, function (e) {
          return _this2.commentLoad += 10;
        }, this.commentLoad, this.filteredComments.length));
      } // properties available to the custom element for data binding

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudioSubmissions.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudioSubmissions.prototype), "firstUpdated", this).call(this, changedProperties);
        this.fetchData("submissions");
        this.fetchData("discussion");
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudioSubmissions.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudioSubmissions.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (["comments", "assignmentFilter", "studentFilter", "projectFilter"].includes(propName)) _this3.commentLoad = 15;
        });
      }
    }, {
      key: "filteredComments",
      get: function get() {
        var _this4 = this;

        return (this.comments || []).filter(function (i) {
          return _this4._isFilteredStudent(i.creatorId) && _this4._isFilteredAssignment(i.assignmentId) && _this4._isFilteredProject(i.projectId);
        });
      }
    }, {
      key: "getCoverImage",
      value: function getCoverImage(submission) {
        var icons = ["ai", "css", "csv", "doc", "eps", "html", "js", "pdf", "ppt", "rtf", "url", "xls"],
            images = ["png", "jpg", "jpeg", "gif", "svg"],
            assets = [].concat(babelHelpers.toConsumableArray(submission.sources || []), babelHelpers.toConsumableArray(submission.links || [])),
            img = assets.filter(function (asset) {
          return images.includes(asset.type || "file");
        }),
            files = assets.filter(function (asset) {
          return icons.includes(asset.type || "file");
        }),
            cover = new URL("svgs/file.svg", meta.url).pathname;

        if (img && img[0]) {
          cover = img[0].src;
        } else if (files && files[0]) {
          cover = new URL("svgs/".concat(files[0].type, ".svg"), meta.url).pathname;
        }

        return cover;
      }
    }, {
      key: "isFiltered",
      get: function get() {
        return this.assignmentFilter !== "" || this.studentFilter !== "" || this.projectFilter !== "";
      }
    }, {
      key: "studentOptions",
      get: function get() {
        var _this5 = this;

        var options = {
          "": "All"
        };
        (this.submissions || []).forEach(function (i) {
          return options[i.userId] = _this5.fullName(i);
        });
        return options;
      }
    }, {
      key: "assignmentOptions",
      get: function get() {
        var _this6 = this;

        var options = {
          "": "All"
        };
        (this.submissions || []).filter(function (i) {
          return _this6._isFilteredProject(i.projectId);
        }).forEach(function (i) {
          return options[i.assignmentId] = i.assignment;
        });
        return options;
      }
    }, {
      key: "projectOptions",
      get: function get() {
        var options = {
          "": "All"
        };
        (this.submissions || []).filter(function (i) {
          return i.project;
        }).forEach(function (i) {
          return options[i.projectId] = i.project;
        });
        return options;
      }
    }, {
      key: "filteredSubmissions",
      get: function get() {
        var _this7 = this;

        return (this.submissions || []).filter(function (i) {
          return _this7._isFilteredStudent(i.userId) && _this7._isFilteredAssignment(i.assignmentId) && _this7._isFilteredProject(i.projectId);
        });
      }
    }, {
      key: "modalTitle",
      get: function get() {
        var assign = [this.projectOptions[this.projectFilter], this.assignmentOptions[this.assignmentFilter]].filter(function (i) {
          return !!i && i !== "All";
        }).join(":"),
            title = [assign, this.studentOptions[this.studentFilter]].filter(function (i) {
          return !!i && i !== "All" && i !== "";
        }).join(" by ");
        return title && title != "" ? title : "All Submissions";
      }
    }, {
      key: "loadMoreComments",
      value: function loadMoreComments(e) {
        this.commentLoad += 10;
      }
    }, {
      key: "_isFilteredAssignment",
      value: function _isFilteredAssignment() {
        var assignment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        return this.assignmentFilter === "" || assignment === this.assignmentFilter;
      }
    }, {
      key: "_isFilteredProject",
      value: function _isFilteredProject() {
        var project = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        return this.projectFilter === "" || project === this.projectFilter;
      }
    }, {
      key: "_isFilteredStudent",
      value: function _isFilteredStudent() {
        var student = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        return this.studentFilter === "" || student === this.studentFilter;
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      function get() {
        return "elmsln-studio-submissions";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudioSubmissions), "styles", this)), [(0, _index.css)(_templateObject7_d58104e08e0011ed99ce491205e67b1d || (_templateObject7_d58104e08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          flex-wrap: wrap;\n        }\n        .filters {\n          flex: 1 0 100%;\n        }\n        #layout {\n          display: flex;\n          align-items: flex-end;\n          justify-content: space-between;\n        }\n        #layout > button {\n          background-color: transparent;\n          opacity: 0.25;\n          transform: opacity 0.5s ease-in-out;\n          height: calc(2 * var(--elmsln-studio-FontSize, 16px));\n          width: calc(2 * var(--elmsln-studio-FontSize, 16px));\n          flex: 1 0 auto;\n          border: 1px solid #ddd;\n          margin: 0;\n          padding: 0;\n        }\n        #layout button:focus,\n        #layout button:hover {\n          opacity: 0.75;\n        }\n        #layout button[aria-pressed=\"true\"] {\n          opacity: 1;\n        }\n        #cards {\n          margin: var(--elmsln-studio-margin, 20px)\n            calc(-0.5 * var(--elmsln-studio-margin, 20px));\n          display: flex;\n          align-items: stretch;\n          justify-content: flex-start;\n          flex-wrap: wrap;\n        }\n        .no-submissions {\n          font-weight: var(--elmsln-studio-FontWeightLight, 300);\n          font-size: 22px;\n          margin: calc(0.5 * var(--elmsln-studio-margin, 20px));\n          padding: var(--elmsln-studio-margin, 20px);\n          width: calc(100% - 2 * var(--elmsln-studio-margin, 20px));\n          background-color: #e8e8e8;\n          text-align: center;\n        }\n        accent-card-clickable {\n          line-height: 160%;\n          display: flex;\n          flex-direction: column;\n          align-items: stretch;\n          justify-content: stretch;\n          width: auto;\n          cursor: pointer;\n          margin: calc(0.5 * var(--elmsln-studio-margin, 20px))\n            calc(0.5 * var(--elmsln-studio-margin, 20px));\n          flex: 1 1 calc(100% - var(--elmsln-studio-margin, 20px));\n          --accent-card-box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.28),\n            0 1px 5px 0 rgba(0, 0, 0, 0.24), 0 3px 1px -2px rgba(0, 0, 0, 0.4);\n          --accent-card-padding: 0;\n          --accent-card-image-width: 33.33333%;\n          --accent-card-image-height: 200px;\n          --accent-card-heading-min-height: 30px;\n          --accent-card-heading-padding-top: calc(\n            0.5 * var(--elmsln-studio-margin, 20px)\n          );\n          --accent-card-heading-padding-left: calc(\n            0.5 * var(--elmsln-studio-margin, 20px)\n          );\n          --accent-card-heading-padding-right: calc(\n            0.5 * var(--elmsln-studio-margin, 20px)\n          );\n          --accent-card-subheading-padding-left: calc(\n            0.5 * var(--elmsln-studio-margin, 20px)\n          );\n          --accent-card-subheading-padding-right: calc(\n            0.5 * var(--elmsln-studio-margin, 20px)\n          );\n          --accent-card-content-padding-left: calc(\n            0.5 * var(--elmsln-studio-margin, 20px)\n          );\n          --accent-card-content-padding-right: calc(\n            0.5 * var(--elmsln-studio-margin, 20px)\n          );\n          --accent-card-content-padding-bottom: calc(\n            0.5 * var(--elmsln-studio-margin, 20px)\n          );\n          --accent-card-footer-padding-left: calc(\n            0.25 * var(--elmsln-studio-margin, 20px)\n          );\n          --accent-card-footer-padding-right: calc(\n            0.25 * var(--elmsln-studio-margin, 20px)\n          );\n          --accent-card-footer-padding-top: calc(\n            0.5 * var(--elmsln-studio-margin, 20px)\n          );\n          --accent-card-footer-padding-bottom: calc(\n            0.5 * var(--elmsln-studio-margin, 20px)\n          );\n          --accent-card-image-padding-bottom: 5px;\n          --accent-card-image-padding-right: calc(\n            0.5 * var(--elmsln-studio-margin, 20px)\n          );\n        }\n        accent-card-clickable:hover {\n          --accent-card-box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.14),\n            0 1px 3px 0 rgba(0, 0, 0, 0.12), 0 1.5px 1px -1px rgba(0, 0, 0, 0.2);\n        }\n        accent-card-clickable [slot=\"heading\"] {\n          font-weight: var(--elmsln-studio-FontWeightLight, 300);\n          font-size: 22px;\n        }\n        accent-card-clickable [slot=\"corner\"] {\n          font-weight: var(--elmsln-studio-FontWeightNormal, 400);\n          font-size: 12px;\n        }\n        accent-card-clickable [slot=\"subheading\"] {\n          font-weight: var(--elmsln-studio-FontWeightBold, 500);\n          font-size: 18px;\n          font-style: normal;\n          color: #5d5e5f;\n        }\n        accent-card-clickable [slot=\"content\"] {\n          font-weight: var(--elmsln-studio-FontWeightNormal, 400);\n          font-size: 14px;\n          color: #7e7e7e;\n        }\n        accent-card-clickable [slot=\"content\"] .feature {\n          margin-top: var(--elmsln-studio-margin, 20px);\n          height: calc(\n            var(--accent-card-image-height, 200px) -\n              var(--elmsln-studio-margin, 20px)\n          );\n          overflow: auto;\n        }\n        accent-card-clickable [slot=\"footer\"] {\n          font-weight: var(--elmsln-studio-FontWeightNormal, 400);\n          font-size: 12px;\n          text-transform: uppercase;\n          text-align: right;\n          color: #95989a;\n          --elmsln-studio-link-Color: currentColor;\n        }\n        accent-card-clickable [slot=\"footer\"] elmsln-studio-link {\n          margin: 0 calc(0.5 * var(--elmsln-studio-margin, 20px));\n          text-align: right;\n        }\n        accent-card-clickable elmsln-studio-link {\n          --elmsln-studio-link-TextDecoration: none !important;\n        }\n        accent-card-clickable elmsln-studio-link:focus,\n        accent-card-clickable elmsln-studio-link:hover,\n        accent-card-clickable elmsln-studio-link:focus-within {\n          --elmsln-studio-link-TextDecoration: underline !important;\n        }\n        .feature {\n          margin-top: var(--elmsln-studio-margin, 20px);\n          height: calc(\n            var(--accent-card-image-height, 200px) -\n              var(--elmsln-studio-margin, 20px)\n          );\n          overflow: auto;\n        }\n        #secondary {\n          margin-top: 0;\n          --nav-card-linklist-margin-top: 0;\n          --nav-card-linklist-left-size: 36px;\n          --paper-avatar-width: var(--nav-card-linklist-left-size, 36px);\n        }\n        #secondary .filters {\n          justify-content: flex-start;\n        }\n        .comments {\n          color: #95989a;\n        }\n        nav-card {\n          margin: calc(1.5 * var(--elmsln-studio-margin, 20px)) 0 0;\n          --accent-card-footer-padding-left: 0;\n          --accent-card-footer-padding-right: 0;\n        }\n\n        @media screen and (min-width: 500px) {\n          accent-card-clickable {\n            --accent-card-image-width: 50%;\n          }\n          .grid accent-card-clickable:not([horizontal]) {\n            flex: 0 0 calc(50% - var(--elmsln-studio-margin, 20px));\n          }\n        }\n        @media screen and (min-width: 900px) {\n          :host {\n            display: flex;\n            align-items: flex-start;\n            justify-content: space-between;\n          }\n          .grid accent-card-clickable:not([horizontal]) {\n            flex: 0 0 calc(50% - var(--elmsln-studio-margin, 20px));\n          }\n          .filters > *,\n          #layout > * {\n            flex: 0 1 auto;\n            margin: 0 calc(0.5 * var(--elmsln-studio-margin, 20px));\n          }\n          #layout > button {\n            padding: 1px 6px;\n            margin: 0 5px;\n            border: 0px solid rgba(0, 0, 0, 0);\n          }\n        }\n        @media screen and (min-width: 1200px) {\n          .grid accent-card-clickable[horizontal] {\n            flex: 0 0 calc(66.66666667% - var(--elmsln-studio-margin, 20px));\n          }\n          .grid accent-card-clickable:not([horizontal]) {\n            flex: 0 0 calc(33.3333333333% - var(--elmsln-studio-margin, 20px));\n          }\n        }\n        @media screen and (min-width: 1600px) {\n          accent-card-clickable[horizontal] {\n            --accent-card-image-width: 33.33333%;\n            flex: 0 0 calc(75% - var(--elmsln-studio-margin, 20px));\n          }\n          accent-card-clickable:not([horizontal]) {\n            flex: 0 0 calc(25% - var(--elmsln-studio-margin, 20px));\n          }\n          accent-card-clickable {\n            --accent-card-image-width: 50%;\n          }\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudioSubmissions), "properties", this)), {}, {
          /**
           * assignment id to filter by assignment
           */
          assignmentFilter: {
            type: String,
            attribute: "assignment-filter"
          },

          /**
           * select all comments
           */
          comments: {
            type: Array
          },

          /**
           * number of comments that will be rendered
           */
          commentLoad: {
            type: Number,
            attribute: "comment-load"
          },

          /**
           * display submissions as list instead of grid
           */
          list: {
            type: Boolean,
            attribute: "list"
          },

          /**
           * project id to filter by project
           */
          projectFilter: {
            type: String,
            attribute: "project-filter"
          },

          /**
           * student id to filter by student
           */
          studentFilter: {
            type: String,
            attribute: "student-filter"
          },

          /**
           * select all submissions
           */
          submissions: {
            type: Array
          }
        });
      }
    }]);
    return ElmslnStudioSubmissions;
  }((0, _elmslnStudioUtilities.ElmslnStudioUtilities)((0, _elmslnStudioStyles.ElmslnStudioStyles)(_index.LitElement)));

  _exports.ElmslnStudioSubmissions = ElmslnStudioSubmissions;
  customElements.define("elmsln-studio-submissions", ElmslnStudioSubmissions);
});