define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../../@polymer/paper-toast/paper-toast.js", "../../../lrnsys-button/lrnsys-button.js", "../../../utils/utils.js"], function (_exports, _polymerElement, _ironAjax, _domIf, _paperToast, _lrnsysButton, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioSubmissionButton = void 0;

  var _templateObject_b3fdab00809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrnapp-studio-submission-button`
   * `Allows users to either start a submission or link to a submission.`
  
  Usage:
  ```
  <lrnapp-studio-submission-button assignment-id="[[id]]" submission-id="{{submissionId}}" end-point="[[endPoint]]" csrf-token=[[csrfToken]]></lrnapp-studio-submission-button>
  */
  var LrnappStudioSubmissionButton = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappStudioSubmissionButton, _PolymerElement);

    var _super = _createSuper(LrnappStudioSubmissionButton);

    function LrnappStudioSubmissionButton() {
      babelHelpers.classCallCheck(this, LrnappStudioSubmissionButton);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappStudioSubmissionButton, [{
      key: "lastErrorChanged",
      value:
      /**
       * Handle the last error rolling in
       */
      function lastErrorChanged(e) {
        if (e.detail.value) {
          console.error(e);
          var target = (0, _utils.normalizeEventPath)(e)[0]; // check for JWT needing refreshed vs busted but must be 403

          switch (parseInt(e.detail.value.status)) {
            // cookie data not found, need to go get it
            // @notice this currently isn't possible but we could modify
            // the backend in the future to support throwing 401s dynamically
            // if we KNOW an event must expire the timing token
            case 401:
            case 401:
              // we know what the "target" is as an iron-ajax tag
              // so we know what call was just attempted. Let's await
              // a fetch against the top level site landing page with
              // no-cors will force a hit against the backend to refresh
              // the PHP session / bounce back from Azure as needed
              // so that when we reissue this call it'll go through (magically)
              fetch(window.Drupal.settings.basePath, {
                mode: "no-cors"
              }).then(function (e) {
                console.log(e); // delay just to be sure

                setTimeout(function () {
                  target.generateRequest();
                }, 250);
              });
              break;
          }
        }
      }
    }, {
      key: "_createSubmission",
      value: function _createSubmission() {
        this.shadowRoot.querySelector("#ajaxCreateStub").generateRequest();
      }
    }, {
      key: "_ajaxCreateStubHandler",
      value: function _ajaxCreateStubHandler(e) {
        var status = e.detail.response.status;
        var response = e.detail.response;

        if (status === 201) {
          var submissionId = e.detail.response.data.id;

          if (submissionId) {
            this.submissionId = submissionId; // auto implies we should just go there to the edit form after creation

            if (this.auto) {
              window.location.href = this._submissionUrl(submissionId) + "/edit";
            }
          }
        } // if we have errors to display


        if (typeof response.errors !== "undefined") {
          var ul = document.createElement("ul");
          var text = "";
          response.errors.forEach(function (error) {
            text = text + " " + error;
          });
          this.shadowRoot.querySelector("#toast").show(text);
        }
      }
    }, {
      key: "_submissionUrl",
      value: function _submissionUrl(id) {
        return this.endPoint + "/submissions/" + id;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_b3fdab00809211edaa2833647dc78c6c || (_templateObject_b3fdab00809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        lrnsys-button {\n          border: 2px solid black;\n          --lrnsys-button-height: auto;\n          background-color: lightgray;\n        }\n      </style>\n      <template is=\"dom-if\" if=\"[[!submissionId]]\">\n        <lrnsys-button\n          on-click=\"_createSubmission\"\n          label=\"Create submission\"\n        ></lrnsys-button>\n        <iron-ajax\n          reject-with-request\n          on-last-error-changed=\"lastErrorChanged\"\n          id=\"ajaxCreateStub\"\n          url=\"[[endPoint]]/api/submissions/create-stub?token=[[csrfToken]]\"\n          method=\"POST\"\n          body=\"[[assignmentId]]\"\n          handle-as=\"json\"\n          on-response=\"_ajaxCreateStubHandler\"\n        ></iron-ajax>\n      </template>\n      <template is=\"dom-if\" if=\"[[submissionId]]\">\n        <lrnsys-button\n          label=\"View submission\"\n          show-href=\"[[_submissionUrl(submissionId)]]\"\n          href=\"[[_submissionUrl(submissionId)]]\"\n        ></lrnsys-button>\n      </template>\n      <template is=\"dom-if\" if=\"[[displayErrors]]\">\n        <paper-toast id=\"toast\"></paper-toast>\n      </template>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-submission-button";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          auto: {
            type: Boolean,
            reflectToAttribute: true,
            value: false,
            notify: true
          },
          assignmentId: {
            type: String,
            reflectToAttribute: true
          },
          submissionId: {
            type: String,
            value: false,
            reflectToAttribute: true
          },
          displayErrors: {
            type: Boolean,
            value: true
          },
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String,
            notify: true,
            reflectToAttribute: true
          },
          csrfToken: {
            type: String,
            notify: true,
            reflectToAttribute: true
          },
          endPoint: {
            type: String,
            notify: true,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return LrnappStudioSubmissionButton;
  }(_polymerElement.PolymerElement);

  _exports.LrnappStudioSubmissionButton = LrnappStudioSubmissionButton;
  customElements.define(LrnappStudioSubmissionButton.tag, LrnappStudioSubmissionButton);
});