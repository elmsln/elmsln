define(["exports", "../../lit/index.js", "../simple-colors/simple-colors.js", "../../@polymer/polymer/lib/elements/custom-style.js", "../../@polymer/app-layout/app-drawer/app-drawer.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js"], function (_exports, _index, _simpleColors, _customStyle, _appDrawer, _simpleIcon, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleDrawer = void 0;

  var _templateObject_71bce9e0809211edaa2833647dc78c6c, _templateObject2_71bce9e0809211edaa2833647dc78c6c, _templateObject3_71bce9e0809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // register globally so we can make sure there is only one
  window.SimpleDrawer = window.SimpleDrawer || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same drawer

  window.SimpleDrawer.requestAvailability = function () {
    if (!window.SimpleDrawer.instance) {
      window.SimpleDrawer.instance = document.createElement("simple-drawer");
      document.body.appendChild(window.SimpleDrawer.instance);
    }

    return window.SimpleDrawer.instance;
  };
  /**
   * `simple-drawer`
   * `a singleton drawer element`
   * @demo demo/index.html
   * @element simple-drawer
   */


  var SimpleDrawer = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(SimpleDrawer, _SimpleColors);

    var _super = _createSuper(SimpleDrawer);

    /**
     * HTMLElement
     */
    function SimpleDrawer() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleDrawer);
      _this = _super.call(this);
      _this.title = "";
      _this.align = "left";
      _this.opened = false;
      _this.closeLabel = "Close";
      _this.closeIcon = "icons:cancel";
      return _this;
    }
    /**
     * LitElement life cycle - ready
     */


    babelHelpers.createClass(SimpleDrawer, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_71bce9e0809211edaa2833647dc78c6c || (_templateObject_71bce9e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <custom-style>\n        <style>\n          app-drawer {\n            --app-drawer-content-container: {\n              padding: 0;\n              overflow-y: scroll;\n              position: fixed;\n              color: var(--simple-drawer-color, #222222);\n              background-color: var(--simple-drawer-background-color, #ffffff);\n            }\n          }\n          :host ::slotted(*) {\n            @apply --simple-drawer-content;\n          }\n\n          .content {\n            @apply --simple-drawer-content-container;\n          }\n          .top {\n            @apply --simple-drawer-header;\n          }\n\n          .top h2 {\n            @apply --simple-drawer-heading;\n          }\n        </style>\n      </custom-style>\n      <app-drawer\n        tabindex=\"0\"\n        id=\"drawer\"\n        ?opened=\"", "\"\n        @opened-changed=\"", "\"\n        .align=\"", "\"\n        role=\"dialog\"\n      >\n        <div class=\"wrapper\">\n          <div class=\"top\">\n            ", "\n            <slot name=\"header\"></slot>\n          </div>\n          <div class=\"content\">\n            <slot name=\"content\"></slot>\n          </div>\n          <button id=\"close\" @click=\"", "\">\n            <simple-icon\n              icon=\"", "\"\n              dark\n              contrast=\"4\"\n            ></simple-icon>\n            ", "\n          </button>\n        </div>\n      </app-drawer>"])), this.opened, this.__openedChanged, this.align, this.title ? (0, _index.html)(_templateObject2_71bce9e0809211edaa2833647dc78c6c || (_templateObject2_71bce9e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["<h2>", "</h2>"])), this.title) : "", this.close, this.closeIcon, this.closeLabel);
      } // properties available to the custom element for data binding

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        window.addEventListener("simple-drawer-hide", this.close.bind(this));
        window.addEventListener("simple-drawer-show", this.showEvent.bind(this));
      }
      /**
       * LitElement life cycle - properties changed callback
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "opened") {
            _this2._openedChanged(_this2[propName], oldValue);
          }
        });
      }
      /**
       * show event call to open the drawer and display it's content
       */

    }, {
      key: "showEvent",
      value: function showEvent(e) {
        var _this3 = this;

        // if we're already opened and we get told to open again....
        // swap out the contents
        if (this.opened) {
          // wipe the slot of our drawer
          while (this.firstChild !== null) {
            this.removeChild(this.firstChild);
          }

          setTimeout(function () {
            _this3.show(e.detail.title, e.detail.elements, e.detail.invokedBy, e.detail.align, e.detail.clone);
          }, 100);
        } else {
          this.show(e.detail.title, e.detail.elements, e.detail.invokedBy, e.detail.align, e.detail.size, e.detail.clone);
        }
      }
      /**
       * Show the drawer and display the material
       */

    }, {
      key: "show",
      value: function show(title, elements, invokedBy) {
        var _this4 = this;

        var align = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "left";
        var size = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "256px";
        var clone = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
        this.invokedBy = invokedBy;
        this.title = title;
        this.align = align; // @todo this is a bit of a hack specific to polymer elements in app- world

        this.shadowRoot.querySelector("#drawer").updateStyles({
          "--app-drawer-width": size
        });
        var element; // append element areas into the appropriate slots
        // ensuring they are set if it wasn't previously

        var slots = ["header", "content"];

        for (var i in slots) {
          if (elements[slots[i]]) {
            if (clone) {
              element = elements[slots[i]].cloneNode(true);
            } else {
              element = elements[slots[i]];
            }

            element.setAttribute("slot", slots[i]);
            this.appendChild(element);
          }
        } // minor delay to help the above happen prior to opening


        setTimeout(function () {
          _this4.opened = true; // fake a resize event to make contents happy

          window.dispatchEvent(new Event("resize"));
        }, 100);
      }
      /**
       * check state and if we should clean up on close.
       * This keeps the DOM tiddy and allows animation to happen gracefully.
       */

    }, {
      key: "animationEnded",
      value: function animationEnded(e) {
        var _this5 = this;

        // wipe the slot of our drawer
        this.title = "";

        while (this.firstChild !== null) {
          this.removeChild(this.firstChild);
        }

        if (this.invokedBy) {
          setTimeout(function () {
            _this5.invokedBy.focus();
          }, 500);
        }
      }
      /**
       * Close the drawer and do some clean up
       */

    }, {
      key: "close",
      value: function close() {
        this.opened = false;
      } // event bubbling up from drawer

    }, {
      key: "__openedChanged",
      value: function __openedChanged(e) {
        this.opened = e.detail.value;
      } // Observer opened for changes

    }, {
      key: "_openedChanged",
      value: function _openedChanged(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !newValue) {
          this.animationEnded();
          var evt = new CustomEvent("simple-drawer-closed", {
            bubbles: true,
            cancelable: true,
            detail: {
              opened: false,
              invokedBy: this.invokedBy
            }
          });
          this.dispatchEvent(evt);
        } else if (newValue) {
          var _evt = new CustomEvent("simple-drawer-opened", {
            bubbles: true,
            cancelable: true,
            detail: {
              opened: true,
              invokedBy: this.invokedBy
            }
          });

          this.dispatchEvent(_evt);
        }
      }
      /**
       * life cycle, element is removed from the DOM
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("simple-drawer-hide", this.close.bind(this));
        window.removeEventListener("simple-drawer-show", this.showEvent.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleDrawer.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleDrawer), "styles", this)), [(0, _index.css)(_templateObject3_71bce9e0809211edaa2833647dc78c6c || (_templateObject3_71bce9e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          z-index: 1000;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        :host div::slotted(*) {\n          font-size: 14px;\n        }\n\n        .content {\n          text-align: left;\n          padding: 8px 24px;\n        }\n\n        .top ::slotted(*) {\n          font-size: 24px;\n          margin: 0;\n          padding: 0 15px;\n          height: 40px;\n          line-height: 48px;\n        }\n\n        #close {\n          position: absolute;\n          right: 8px;\n          top: 8px;\n          padding: 4px 6px 4px 4px;\n          margin: 11px 5px 0px 0px;\n          text-transform: none;\n          float: right;\n          font-size: var(--simple-drawer-close-font-size, 12px);\n          color: var(--simple-drawer-header-color, #ffffff);\n          background-color: var(--simple-drawer-close-background, transparent);\n          border: var(--simple-drawer-close-border);\n          cursor: pointer;\n          min-width: unset;\n        }\n\n        #close simple-icon {\n          display: inline-block;\n          --simple-icon-width: 16px;\n          --simple-icon-height: 16px;\n          margin-top: -2px;\n          margin-right: 2px;\n        }\n\n        .top {\n          font-size: 24px;\n          margin: 0 0 8px 0;\n          padding: 0 16px;\n          height: 64px;\n          line-height: 64px;\n          display: flex;\n          text-align: left;\n          justify-content: space-between;\n          background-color: var(--simple-drawer-header-background, #20427b);\n          color: var(--simple-drawer-header-color, #ffffff);\n        }\n\n        .top h2 {\n          flex: auto;\n          color: var(--simple-drawer-header-color, #ffffff);\n          font-size: 24px;\n          padding: 0;\n          line-height: 45px;\n          margin: 8px;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleDrawer), "properties", this)), {}, {
          /**
           * heading / label of the modal
           */
          title: {
            name: "title",
            type: String
          },

          /**
           * alignment of the drawer
           */
          align: {
            name: "align",
            type: String
          },

          /**
           * open state
           */
          opened: {
            name: "opened",
            type: Boolean,
            reflect: true
          },

          /**
           * Close label
           */
          closeLabel: {
            name: "closeLabel",
            type: String
          },

          /**
           * Close icon
           */
          closeIcon: {
            name: "closeIcon",
            type: String
          },

          /**
           * The element that invoked this. This way we can track our way back accessibly
           */
          invokedBy: {
            name: "invokedBy",
            type: Object
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-drawer";
      }
    }]);
    return SimpleDrawer;
  }(_simpleColors.SimpleColors);

  _exports.SimpleDrawer = SimpleDrawer;
  customElements.define(SimpleDrawer.tag, SimpleDrawer);
});