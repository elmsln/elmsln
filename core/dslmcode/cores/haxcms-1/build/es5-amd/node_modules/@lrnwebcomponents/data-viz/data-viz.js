define(["exports", "../../lit/index.js", "../chartist-render/chartist-render.js"], function (_exports, _index, _chartistRender) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DataViz = void 0;

  var _templateObject_a0a252108e0011ed99ce491205e67b1d, _templateObject2_a0a252108e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // register globally so we can make sure there is only one
  window.DataViz = window.DataViz || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same data-viz element, making it a singleton.

  window.DataViz.requestAvailability = function () {
    // if there is no single instance, generate one and append it to end of the document
    if (!window.DataViz.instance) {
      window.DataViz.instance = document.createElement("data-viz");
      document.body.appendChild(window.DataViz.instance);
    }

    return window.DataViz.instance;
  };
  /**
   * `data-viz`
   * `display pouch-db data using graphs`
   * @demo demo/index.html
   * @element data-viz
   */


  var DataViz = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(DataViz, _LitElement);

    var _super = _createSuper(DataViz);

    function DataViz() {
      babelHelpers.classCallCheck(this, DataViz);
      return _super.call(this);
    }
    /**
     * life cycle, element is afixed to the DOM
     */


    babelHelpers.createClass(DataViz, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_a0a252108e0011ed99ce491205e67b1d || (_templateObject_a0a252108e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <chartist-render\n      id=\"barchart\"\n      type=\"bar\"\n      scale=\"ct-major-twelfth\"\n      chart-title=\"Quiz Distribution\"\n      chart-desc=\"A bar graph of quizzes completed by student\"\n    >\n    </chartist-render>"])));
      } // properties available to the custom element for data binding

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(DataViz.prototype), "connectedCallback", this).call(this);
        window.addEventListener("pouch-db-show-data", this.showDataFunction.bind(this));
      }
      /**
       * Show the data based on user selecting the view and
       * that they want to see how they did.
       */

    }, {
      key: "showDataFunction",
      value: function showDataFunction(e) {
        var queryData = e.detail;
        var bardata = {
          labels: queryData.labels,
          series: queryData.series
        };
        this.shadowRoot.querySelector("#barchart").data = bardata;
      }
      /**
       * life cycle, element is removed from the DOM
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("pouch-db-show-data", this.showDataFunction.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(DataViz.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Hide callback
       */

    }, {
      key: "hideDataViz",
      value: function hideDataViz(e) {} // add your code to run when the singleton hides

      /**
       * Show / available callback
       */

    }, {
      key: "showDataViz",
      value: function showDataViz(e) {// add your code to run when the singleton is called for
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_a0a252108e0011ed99ce491205e67b1d || (_templateObject2_a0a252108e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(DataViz), "properties", this));
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "data-viz";
      }
    }]);
    return DataViz;
  }(_index.LitElement);

  _exports.DataViz = DataViz;
  customElements.define(DataViz.tag, DataViz);
});