define(["exports", "../../../../lit/index.js", "./haxcms-site-store.js", "../../../utils/utils.js", "../../../../mobx/dist/mobx.esm.js", "../../../simple-tooltip/simple-tooltip.js", "../../../simple-fields/lib/simple-fields-form.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-button.js", "../../../hax-body-behaviors/lib/HAXFields.js"], function (_exports, _index, _haxcmsSiteStore, _utils, _mobxEsm, _simpleTooltip, _simpleFieldsForm, _simpleIcon, _simpleIcons, _simpleIconButton, _HAXFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSSiteDashboard = void 0;

  var _templateObject_e74ada208e0011ed99ce491205e67b1d, _templateObject2_e74ada208e0011ed99ce491205e67b1d, _templateObject3_e74ada208e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `haxcms-site-dashboard`
   * `Off screen dashboard for modifying internal settings to the site`
   *
   * @demo demo/index.html
   */
  var HAXCMSSiteDashboard = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HAXCMSSiteDashboard, _LitElement);

    var _super = _createSuper(HAXCMSSiteDashboard);

    function HAXCMSSiteDashboard() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSSiteDashboard);
      _this = _super.call(this);
      _this.manifest = {};
      _this.__disposer = []; // see up a tag to place RIGHT next to the site-builder itself

      (0, _mobxEsm.autorun)(function (reaction) {
        _this.jwt = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.jwt);

        _this.__disposer.push(reaction);
      });
      (0, _mobxEsm.autorun)(function (reaction) {
        _this.dashboardOpened = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.dashboardOpened);

        _this.__disposer.push(reaction);
      });
      (0, _mobxEsm.autorun)(function (reaction) {
        _this.manifest = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.manifest);

        _this.__disposer.push(reaction);
      });
      return _this;
    }

    babelHelpers.createClass(HAXCMSSiteDashboard, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_e74ada208e0011ed99ce491205e67b1d || (_templateObject_e74ada208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"title-wrapper\">\n        <h2 class=\"title\">", " settings</h2>\n        ", "\n      </div>\n      <div class=\"fields-wrapper\">\n        <simple-fields-form\n          id=\"siteform\"\n          autoload\n          .headers=\"", "\"\n          .body=\"", "\"\n          .schematizer=\"", "\"\n          .elementizer=\"", "\"\n          load-endpoint=\"", "\"\n          method=\"", "\"\n        ></simple-fields-form>\n      </div>\n      <div class=\"buttons\">\n        <button class=\"hax-modal-btn\" @click=\"", "\">\n          Save\n        </button>\n        <button class=\"hax-modal-btn cancel\" @click=\"", "\">\n          cancel\n        </button>\n      </div>\n    "])), this.manifest.title, (0, _utils.varExists)(this.manifest, "metadata.site.static.publishedLocation") ? (0, _index.html)(_templateObject2_e74ada208e0011ed99ce491205e67b1d || (_templateObject2_e74ada208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n              <span class=\"toptext\">\n                <a\n                  class=\"publishlink\"\n                  href=\"", "\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                  >Published version\n                </a>\n              </span>\n            "])), (0, _utils.varGet)(this.manifest, "metadata.site.static.publishedLocation", "#")) : "", this.headers, this.body, _HAXFields.HaxSchematizer, _HAXFields.HaxElementizer, this.loadEndpoint, this.method, this._saveSiteFieldsTap, this._cancel);
      }
    }, {
      key: "disconnectedCallback",
      value:
      /**
       * Detatched life cycle
       */
      function disconnectedCallback() {
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteDashboard.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteDashboard.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteDashboard.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "dashboardOpened" && _this2.dashboardOpened) {
            // API function so we refresh new data every time
            _this2.removeAttribute("aria-hidden");

            _this2.removeAttribute("tabindex");
          }

          if (propName === "dashboardOpened" && !_this2.dashboardOpened) {
            _this2.setAttribute("aria-hidden", "aria-hidden");

            _this2.setAttribute("tabindex", "-1");
          }
        });
      }
      /**
       * Save the fields as we get tapped
       */

    }, {
      key: "_saveSiteFieldsTap",
      value: function _saveSiteFieldsTap(e) {
        _haxcmsSiteStore.store.playSound("click"); // fire event with details for saving


        window.dispatchEvent(new CustomEvent("haxcms-save-site-data", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: this.shadowRoot.querySelector("#siteform").submit()
        }));
      }
      /**
       * Close the dashboard and reset state
       */

    }, {
      key: "_cancel",
      value: function _cancel(e) {
        _haxcmsSiteStore.store.playSound("error");

        window.dispatchEvent(new CustomEvent("haxcms-load-site-dashboard", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: e.target
        }));
      }
    }], [{
      key: "tag",
      get: function get() {
        return "haxcms-site-dashboard";
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject3_e74ada208e0011ed99ce491205e67b1d || (_templateObject3_e74ada208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          z-index: 1;\n          display: inline-block;\n          vertical-align: top;\n          position: fixed;\n          height: calc(100vh - 48px);\n          width: 50vw;\n          margin-left: -50vw;\n          border-right: 2px solid #17271f;\n          overflow: scroll;\n          color: black;\n          background-color: var(--haxcms-dashboard-bg, orange);\n        }\n        :host([dashboard-opened]) {\n          margin-left: 0;\n        }\n        .buttons {\n          position: absolute;\n          bottom: 0;\n          left: 0;\n          right: 0;\n          display: flex;\n        }\n        button.hax-modal-btn {\n          font-size: 30px;\n          padding: 8px;\n          margin: 4px;\n          color: white;\n          background-color: green;\n          border: 4px solid black;\n          border-radius: 8px;\n          font-family: \"Press Start 2P\", sans-serif;\n        }\n        button.hax-modal-btn.cancel {\n          background-color: red;\n        }\n        button.hax-modal-btn:hover,\n        button.hax-modal-btn:focus {\n          outline: 2px solid black;\n          cursor: pointer;\n          background-color: darkgreen;\n        }\n        button.hax-modal-btn.cancel:hover,\n        button.hax-modal-btn.cancel:focus {\n          background-color: darkred;\n        }\n        .title {\n          color: black;\n          font-size: 24px;\n          margin: 0 0 0 16px;\n          padding: 0;\n          display: inline-flex;\n        }\n        @media screen and (max-width: 600px) {\n          :host {\n            width: 90vw;\n            margin-left: -90vw;\n          }\n          .title {\n            font-size: 14px;\n            margin: 0;\n          }\n          .toptext {\n            font-size: 11px;\n          }\n        }\n        button {\n          background-color: white;\n          color: black;\n        }\n        .publishlink {\n          color: black;\n          float: right;\n        }\n        .title-wrapper {\n          padding: 0 16px;\n        }\n        .toptext {\n          padding: 0;\n          margin: 0;\n          font-size: 12px;\n          font-style: italic;\n          display: inline-flex;\n        }\n        .fields-wrapper {\n          height: auto;\n          background-color: white;\n        }\n        #siteform {\n          --a11y-tabs-height: 80vh;\n          --a11y-tabs-tab-height: 75vh;\n          --a11y-tabs-tab-overflow: scroll;\n          --primary-color: var(--haxcms-color, #000000);\n          --paper-input-container-focus-color: var(--haxcms-color, #000000);\n          --lumo-primary-text-color: var(--haxcms-color, #000000);\n          --a11y-tabs-color: var(--haxcms-color, #000000);\n          --a11y-tabs-focus-color: var(--haxcms-color, #000000);\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          dashboardOpened: {
            type: Boolean,
            reflect: true,
            attribute: "dashboard-opened"
          },

          /**
           * Allow method to be overridden, useful in local testing
           */
          method: {
            type: String
          },

          /**
           * JSON Web token, it'll come from a global call if it's available
           */
          jwt: {
            type: String
          },

          /**
           * Publishing end point, this has CDN implications so show message
           */
          publishing: {
            type: Boolean
          },

          /**
           * Outline of items in json outline schema format
           */

          /**
           * Outline of items in json outline schema format
           */
          manifest: {
            type: Object
          }
        };
      }
    }]);
    return HAXCMSSiteDashboard;
  }(_index.LitElement);

  _exports.HAXCMSSiteDashboard = HAXCMSSiteDashboard;
  customElements.define(HAXCMSSiteDashboard.tag, HAXCMSSiteDashboard);
});