define(["exports", "../../../@polymer/polymer/polymer-element.js", "../filtered-image.js"], function (_exports, _polymerElement, _filteredImage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FilteredImageFilters = void 0;

  var _templateObject_9e5dc780809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `filtered-image-filters`
   * @element filtered-image-filters
   * `An image using an SVG filter. Can be used to make background images have more contrast with text.`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   * @demo demo/index.html
   */
  var FilteredImageFilters = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(FilteredImageFilters, _PolymerElement);

    var _super = _createSuper(FilteredImageFilters);

    function FilteredImageFilters() {
      babelHelpers.classCallCheck(this, FilteredImageFilters);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(FilteredImageFilters, [{
      key: "connectedCallback",
      value:
      /**
       * life cycle, element is afixed to the DOM
       */
      function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(FilteredImageFilters.prototype), "connectedCallback", this).call(this);
      }
    }, {
      key: "_setFilter",
      value: function _setFilter(e) {
        this.filter1 = this.shadowRoot.querySelector("#filter1").value;
        this.filter2 = this.shadowRoot.querySelector("#filter2").value;
      }
    }, {
      key: "_getSelectedFilters",
      value: function _getSelectedFilters(filter1, filter2) {
        var f1 = {},
            f2 = {},
            f = this.filters;

        if (filter1 !== "") {
          f1 = this.filters[parseInt(filter1)];
          f = [{
            name: f1.name,
            columns: f1.columns,
            rows: f1.rows
          }];

          if (filter2) {
            f[0].name += " and " + this.filters[parseInt(filter2)].name;
            f[0].rows = this.filters[parseInt(filter2)].columns;
          }
        }

        return f;
      }
    }, {
      key: "_getMatrix",
      value: function _getMatrix(filter, col, row) {
        var matrix = [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]];
        filter.columns.coords.forEach(function (coords) {
          matrix[coords[0]][coords[1]] = filter.columns.levels[col];
        });
        filter.rows.coords.forEach(function (coords) {
          matrix[coords[0]][coords[1]] = filter.rows.levels[row];
        });
        return JSON.stringify(matrix).replace(/[\[\]]/g, "").replace(/,/g, " ");
      }
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}

    }], [{
      key: "template",
      get: // render function
      function get() {
        return (0, _polymerElement.html)(_templateObject_9e5dc780809211edaa2833647dc78c6c || (_templateObject_9e5dc780809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n        table {\n          border: 1px solid black;\n          border-collapse: collapse;\n          margin-bottom: 15px;\n        }\n        table td {\n          padding: 0;\n          border: 1px solid black;\n        }\n        table caption,\n        table th {\n          text-align: left;\n          padding: 0.25em 0.5em;\n          vertical-align: top;\n          border: 1px solid black;\n          font-weight: bold;\n        }\n      </style>\n      <label for=\"filter1\">Filter 1:</label>\n      <select id=\"filter1\" on-change=\"_setFilter\">\n        <option value=\"\">show all filters</option>\n        <template is=\"dom-repeat\" items=\"[[filters]]\" as=\"filter\" index-as=\"i\">\n          <option value=\"[[i]]\">[[filter.name]]</option>\n        </template>\n      </select>\n      <label for=\"filter2\">Filter 2:</label>\n      <select id=\"filter2\" on-change=\"_setFilter\">\n        <option value=\"\">none</option>\n        <template is=\"dom-repeat\" items=\"[[filters]]\" as=\"filter\" index-as=\"i\">\n          <option value=\"[[i]]\">[[filter.name]]</option>\n        </template>\n      </select>\n      <template is=\"dom-repeat\" items=\"[[__selectedFilters]]\" as=\"filter\">\n        <table>\n          <caption>\n            [[filter.name]]\n          </caption>\n          <tr>\n            <th>Levels</th>\n            <template is=\"dom-repeat\" items=\"[[filter.columns.levels]]\" as=\"th\">\n              <th>[[th]]</th>\n            </template>\n          </tr>\n          <template\n            is=\"dom-repeat\"\n            items=\"[[filter.rows.levels]]\"\n            as=\"tr\"\n            index-as=\"row\"\n          >\n            <tr>\n              <th>[[tr]]</th>\n              <template\n                is=\"dom-repeat\"\n                items=\"[[filter.columns.levels]]\"\n                as=\"level\"\n                index-as=\"col\"\n              >\n                <td>\n                  <filtered-image\n                    alt$=\"[[src]]\"\n                    src$=\"[[src]]\"\n                    height=\"100\"\n                    width=\"100\"\n                    matrix$=\"[[_getMatrix(filter,col,row)]]\"\n                  >\n                  </filtered-image>\n                </td>\n              </template>\n            </tr>\n          </template>\n        </table>\n      </template>\n    "])));
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          src: {
            name: "src",
            type: String,
            value: ""
          },
          alt: {
            name: "alt",
            type: String,
            value: ""
          },
          height: {
            name: "width",
            type: String,
            value: ""
          },
          width: {
            name: "unset",
            type: String,
            value: ""
          },
          filter1: {
            name: "filter1",
            type: String,
            value: ""
          },
          filter2: {
            name: "filter2",
            type: String,
            value: ""
          },
          filters: {
            name: "filters",
            type: Array,
            value: [{
              name: "Split Saturation",
              columns: {
                levels: [0, 0.1, 0.2, 0.3, 0.4, 0.5],
                coords: [[0, 1], [0, 1]]
              },
              rows: {
                levels: ["Example"],
                coords: []
              }
            }, {
              name: "Split Desaturation",
              columns: {
                levels: [0, 0.1, 0.2, 0.3, 0.4, 0.5],
                coords: [[1, 0], [2, 0]]
              },
              rows: {
                levels: ["Example"],
                coords: []
              }
            }, {
              name: "Filter",
              columns: {
                levels: [0, 0.2, 0.4, 0.6, 0.8, 1.0],
                coords: [[0, 3]]
              },
              rows: {
                levels: ["Example"],
                coords: []
              }
            }, {
              name: "Inverse Filter",
              columns: {
                levels: [0, -0.2, -0.4, -0.6, -0.8, -1.0],
                coords: [[1, 3], [2, 3]]
              },
              rows: {
                levels: ["Example"],
                coords: []
              }
            }, {
              name: "Wash",
              columns: {
                levels: [0, -0.2, -0.4, -0.6, -0.8, -1.0],
                coords: [[3, 0]]
              },
              rows: {
                levels: ["Example"],
                coords: []
              }
            }, {
              name: "Inverse Wash",
              columns: {
                levels: [0, -0.2, -0.4, -0.6, -0.8, -1.0],
                coords: [[3, 1], [3, 2]]
              },
              rows: {
                levels: ["Example"],
                coords: []
              }
            }, {
              name: "RGB",
              columns: {
                levels: [0, 0.2, 0.4, 0.6, 0.8, 1.0],
                coords: [[0, 0], [1, 1], [2, 2]]
              },
              rows: {
                levels: ["Example"],
                coords: []
              }
            }, {
              name: "Opacity",
              columns: {
                levels: [0, 0.2, 0.4, 0.6, 0.8, 1.0],
                coords: [[3, 3]]
              },
              rows: {
                levels: ["Example"],
                coords: []
              }
            }, {
              name: "M",
              columns: {
                levels: [0, 0.2, 0.4, 0.6, 0.8, 1.0],
                coords: [[3, 4]]
              },
              rows: {
                levels: ["Example"],
                coords: []
              }
            }]
          },
          __selectedFilters: {
            name: "__selectedFilters",
            type: Array,
            computed: "_getSelectedFilters(filter1,filter2)"
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "filtered-image-filters";
      }
    }]);
    return FilteredImageFilters;
  }(_polymerElement.PolymerElement);

  _exports.FilteredImageFilters = FilteredImageFilters;
  customElements.define(FilteredImageFilters.tag, FilteredImageFilters);
});