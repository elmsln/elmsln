define(["exports", "../../lit/index.js", "./lib/absolute-position-state-manager.js"], function (_exports, _index, _absolutePositionStateManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AbsolutePositionBehaviorClass = _exports.AbsolutePositionBehavior = void 0;

  var _templateObject_62e37dd0809211edaa2833647dc78c6c, _templateObject2_62e37dd0809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * @customElement
   * @class
   */
  var AbsolutePositionBehaviorClass = function AbsolutePositionBehaviorClass(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.auto = false;
        _this.fitToVisibleBounds = false;
        _this.for = null;
        _this.offset = 0;
        _this.position = "bottom";
        _this.target = null;
        _this.sticky = false;
        _this.hidden = false;
        _this.__positions = {};
        _this.__observe = false;
        return _this;
      }

      babelHelpers.createClass(_class, [{
        key: "render",
        value: // render function
        function render() {
          return (0, _index.html)(_templateObject_62e37dd0809211edaa2833647dc78c6c || (_templateObject_62e37dd0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <slot></slot>"])));
        } // properties available to the custom element for data binding

      }, {
        key: "updated",
        value: function updated(changedProperties) {
          var _this2 = this;

          var updatePosition = false;

          if (this.shadowRoot && !this.hidden) {
            changedProperties.forEach(function (oldValue, propName) {
              if (propName === "auto" && _this2.auto) _this2.setPosition();
              if (propName === "auto" && !_this2.auto) _this2.unsetPosition();
              if (["allowOverlap", "fitToVisibleBounds", "for", "offset", "position", "justify", "positionAlign", "target", "hidden", "sticky"].includes(propName) && _this2[propName] !== oldValue) updatePosition = true;
            });
            if (updatePosition) this.updatePosition();
          }
        }
        /**
         * Registers element with AbsolutePositionStateManager
         * @returns {void}
         */

      }, {
        key: "setPosition",
        value: function setPosition() {
          this.__observe = true;
          window.AbsolutePositionStateManager.requestAvailability().loadElement(this);
        }
        /**
         * Unregisters element with AbsolutePositionStateManager
         * @returns {void}
         */

      }, {
        key: "unsetPosition",
        value: function unsetPosition() {
          this.__observe = false;
          window.AbsolutePositionStateManager.requestAvailability().unloadElement(this);
        }
        /**
         * Updates  element's position
         * @returns {void}
         */

      }, {
        key: "updatePosition",
        value: function updatePosition() {
          if (!this.hidden && this.auto && this.__observe == false) {
            window.AbsolutePositionStateManager.requestAvailability().loadElement(this);
          }

          if (!this.auto || this.__observe === true) {
            window.AbsolutePositionStateManager.requestAvailability().positionElement(this);
          }
        }
        /**
         * life cycle, element is removed from DOM
         * @returns {void}
         */

      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          this.unsetPosition();
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
        }
      }], [{
        key: "styles",
        get: //styles function
        function get() {
          return [(0, _index.css)(_templateObject2_62e37dd0809211edaa2833647dc78c6c || (_templateObject2_62e37dd0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n          :host {\n            display: inline-block;\n            z-index: 99999999999;\n            position: absolute;\n          }\n\n          :host([hidden]) {\n            display: none;\n          }\n        "])))];
        }
      }, {
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)), {}, {
            /**
             * Element has absolututely positioned children, such as menus
             * and tooltips that are allowed to overlap the target
             */
            allowOverlap: {
              type: Boolean,
              attribute: "allow-overlap"
            },

            /**
             * Element is positioned from connected to disconnected?
             * Otherwise setPosition and unsetPosition must be called manually.
             */
            auto: {
              type: Boolean,
              attribute: "auto"
            },

            /**
             * If true, no parts of the tooltip will ever be shown offscreen.
             */
            fitToVisibleBounds: {
              type: Boolean,
              attribute: "fit-to-visible-bounds"
            },

            /**
             * If true, no parts of the tooltip will ever be shown offscreen.
             */
            hidden: {
              type: Boolean,
              reflect: true,
              attribute: "hidden"
            },

            /**
             * The id of the element that the tooltip is anchored to. This element
             * must be a sibling of the tooltip. If this property is not set,
             * then the tooltip will be centered to the parent node containing it.
             */
            for: {
              type: String,
              attribute: "for",
              reflect: true
            },

            /**
             * The spacing between the top of the tooltip and the element it is
             * anchored to.
             */
            offset: {
              type: Number,
              attribute: "offset"
            },

            /**
             * Stays on screen while target is on screen
             */
            sticky: {
              type: Boolean,
              attribute: "sticky",
              reflect: true
            },

            /**
             * Positions the tooltip to the top, right, bottom, left of its content.
             */
            position: {
              type: String,
              attribute: "position",
              reflect: true
            },

            /**
             * Aligns at the start, or end fo target. Default is centered.
             */
            positionAlign: {
              type: String,
              attribute: "position-align",
              reflect: true
            },
            justify: {
              type: Boolean,
              reflect: true,
              attribute: "justify"
            },

            /**
             * The actual target element
             */
            target: {
              type: Object
            },

            /**
             * The element's style
             */
            __positions: {
              type: Object
            }
          });
        }
        /**
         * Store tag name to make it easier to obtain directly.
         * @notice function name must be here for tooling to operate correctly
         */

      }, {
        key: "tag",
        get: function get() {
          return "absolute-position-behavior";
        }
      }]);
      return _class;
    }(SuperClass);
  };
  /**
   * `absolute-position-behavior`
   * abstracts absolute positioning behavior to be resusable in other elements
   * @demo ./demo/index.html
   * @element absolute-position-behavior
   */


  _exports.AbsolutePositionBehaviorClass = AbsolutePositionBehaviorClass;

  var AbsolutePositionBehavior = /*#__PURE__*/function (_AbsolutePositionBeha) {
    babelHelpers.inherits(AbsolutePositionBehavior, _AbsolutePositionBeha);

    var _super2 = _createSuper(AbsolutePositionBehavior);

    function AbsolutePositionBehavior() {
      babelHelpers.classCallCheck(this, AbsolutePositionBehavior);
      return _super2.apply(this, arguments);
    }

    return babelHelpers.createClass(AbsolutePositionBehavior);
  }(AbsolutePositionBehaviorClass(_index.LitElement));

  _exports.AbsolutePositionBehavior = AbsolutePositionBehavior;
  customElements.define(AbsolutePositionBehavior.tag, AbsolutePositionBehavior);
});