define(["exports", "../../../lit/index.js", "../../simple-popover/lib/SimpleTourFinder.js", "../../../mobx/dist/mobx.esm.js", "./hax-store.js"], function (_exports, _index, _SimpleTourFinder2, _mobxEsm, _haxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxContextBehaviors = void 0;

  var _templateObject_d73ce5b08e0011ed99ce491205e67b1d, _templateObject2_d73ce5b08e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   *
   * @customElement
   * @extends LitElement
   * @lit-html
   * @lit-element
   * @demo demo/index.html
   */
  var HaxContextBehaviors = function HaxContextBehaviors(SuperClass) {
    return /*#__PURE__*/function (_SimpleTourFinder) {
      babelHelpers.inherits(_class, _SimpleTourFinder);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.viewSource = false;
        (0, _mobxEsm.autorun)(function () {
          _this.hasSelectedText = (0, _mobxEsm.toJS)(_haxStore.HAXStore.haxSelectedText).length > 0;
        });
        (0, _mobxEsm.autorun)(function () {
          // this just forces this block to run when editMode is modified
          var editMode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.editMode);
          var activeNode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);
          _this.sourceView = false;

          if (activeNode && activeNode.tagName) {
            var schema = _haxStore.HAXStore.haxSchemaFromTag(activeNode.tagName);

            _this.parentSchema = activeNode && activeNode.parentNode ? _haxStore.HAXStore.haxSchemaFromTag(activeNode.parentNode.tagName) : undefined;
            _this.sourceView = schema.canEditSource;
          }
        });
        return _this;
      }

      babelHelpers.createClass(_class, [{
        key: "render",
        value: function render() {
          return (0, _index.html)(_templateObject_d73ce5b08e0011ed99ce491205e67b1d || (_templateObject_d73ce5b08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<slot></slot> "])));
        }
      }, {
        key: "slotSchema",
        get: function get() {
          var schema = {};

          if (this.activeNode && this.parentSchema) {
            var slot = this.activeNode.slot || "";
            if (!this.activeNode || !this.activeNode.parentNode) schema = _haxStore.HAXStore.schemaBySlotId(this.activeNode.parentNode, slot);
          }

          return schema;
        }
        /**
         * closest layout element, self or parent
         *
         * @readonly
         * @memberof HaxPlateContext
         */

      }, {
        key: "layoutElement",
        get: function get() {
          return this.activeNode && _haxStore.HAXStore.isLayoutElement(this.activeNode) ? this.activeNode : this.activeNode && this.activeNode.parentNode && _haxStore.HAXStore.isLayoutElement(this.activeNode.parentNode) ? this.activeNode.parentNode : undefined;
        }
        /**
         * if layout element is itself a slot, get its layout element
         *
         * @readonly
         * @memberof HaxPlateContext
         */

      }, {
        key: "layoutParent",
        get: function get() {
          return this.layoutElement && this.layoutElement.parentNode && _haxStore.HAXStore.isLayoutElement(this.layoutElement.parentNode) && this.layoutElement.parentNode.tagName && this.layoutElement.parentNode.tagName !== "HAX-BODY" ? this.layoutElement.parentNode : undefined;
        }
        /**
         * gets slotted items of closest layout element
         *
         * @readonly
         * @memberof HaxPlateContext
         */

      }, {
        key: "slottedItems",
        get: function get() {
          if (!this.activeNode) return [];
          var slots = _haxStore.HAXStore.slottedContentByNode(this.layoutElement) || {},
              items = Object.keys(slots).map(function (key) {
            return slots[key];
          });
          return items;
        }
        /**
         * given an element get its icon from HAX properties gizmo
         *
         * @param {object} node
         * @returns {string}
         * @memberof HaxPlateContext
         */

      }, {
        key: "elementIcon",
        value: function elementIcon(node) {
          var gizmo = node && this.elementGizmo(node) ? this.elementGizmo(node) : undefined;
          return gizmo ? gizmo.icon : undefined;
        }
        /**
         * given an element get its label from HAX properties gizmo
         *
         * @param {object} node
         * @returns {string}
         * @memberof HaxPlateContext
         */

      }, {
        key: "elementLabel",
        value: function elementLabel(node) {
          var gizmo = node && this.elementGizmo(node) ? this.elementGizmo(node) : undefined;
          return gizmo ? gizmo.title || gizmo.tag : node && node.tagName ? node.tagName.toLowerCase() : "";
        }
        /**
         * given an element get its gizmo data from HAX properties
         *
         * @param {object} node
         * @returns {object}
         * @memberof HaxPlateContext
         */

      }, {
        key: "elementGizmo",
        value: function elementGizmo(node) {
          var schema = node && node.tagName ? _haxStore.HAXStore.haxSchemaFromTag(node.tagName) : undefined;
          return schema && schema.gizmo ? schema.gizmo : undefined;
        }
      }, {
        key: "getFilteredBlocks",
        value: function getFilteredBlocks() {
          var _this2 = this;

          var blocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          return blocks.filter(function (block) {
            if (!block.tag) return;
            var tag = block.tag || "",
                wrapper = !!_this2.slotSchema && !!_this2.slotSchema.slotWrapper && !!_this2.slotSchema.slotWrapper ? _this2.slotSchema.slotWrapper : undefined,
                allowed = !!_this2.slotSchema && !!_this2.slotSchema.slotWrapper && !!_this2.slotSchema.allowedSlotWrappers ? _this2.slotSchema.allowedSlotWrappers : undefined,
                excluded = !!_this2.slotSchema && !!_this2.slotSchema.slotWrapper && !!_this2.slotSchema.excludedSlotWrappers ? _this2.slotSchema.excludedSlotWrappers : undefined,
                //allow any tag since there is no allowed list specified
            allowAny = !_this2.slotSchema || !allowed,
                //only allow that are the default wrapper or part of the allowed list
            allowOnly = !!wrapper && wrapper === tag || !!allowed && allowed.includes(tag),
                //don't allow tags on the excluded list
            allowExcept = !!excluded && excluded.includes(tag),
                //show only if tag is not excluded and is either part of allow any or allow only
            show = !allowExcept && (allowAny || allowOnly);
            return show;
          });
        }
      }, {
        key: "updated",
        value: function updated(changedProperties) {
          var _this3 = this;

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this).call(this, changedProperties);
          changedProperties.forEach(function (oldValue, propName) {
            if (propName === "activeNode" && _this3.activeNode !== oldValue) _this3.setTarget(_this3.activeNode);
          });
        }
      }, {
        key: "setTarget",
        value: function setTarget() {
          var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.activeNode;
          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "setTarget", this)) babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "setTarget", this).call(this, node);
          this.parentSchema = node && node.parentNode ? _haxStore.HAXStore.haxSchemaFromTag(node.parentNode.tagName) : undefined;
        }
      }], [{
        key: "styles",
        get:
        /**
         * LitElement constructable styles enhancement
         */
        function get() {
          return [(0, _index.css)(_templateObject2_d73ce5b08e0011ed99ce491205e67b1d || (_templateObject2_d73ce5b08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          :host {\n            display: block;\n            --hax-ui-spacing-sm: 1px;\n            max-width: 100%;\n          }\n          :host [hidden] {\n            display: none;\n          }\n          .selected-buttons {\n            transition: 0.1s all ease-in-out;\n            width: 0;\n          }\n          :host([has-selected-text]) .selected-buttons {\n            width: 100%;\n          }\n          :host(.hax-context-pin-top) #toolbar {\n            position: fixed;\n            top: 0px;\n          }\n          :host(:hover),\n          :host(:focus-within) {\n            z-index: var(--hax-ui-focus-z-index) !important;\n          }\n          .group {\n            padding: 0;\n            background-color: var(--hax-ui-background-color);\n          }\n          hax-toolbar {\n            flex: 0 1 auto;\n          }\n          hax-toolbar::part(morebutton) {\n            border: 1px solid\n              var(\n                --simple-toolbar-group-border-width,\n                var(--simple-toolbar-border-width, 1px)\n              ) !important;\n          }\n          hax-toolbar[collapse-disabled]::part(morebutton) {\n            display: none !important;\n          }\n          hax-toolbar *[hidden] {\n            display: none !important;\n          }\n          hax-toolbar[collapse-disabled]::part(morebutton) {\n            display: none !important;\n          }\n        "])))];
        }
      }, {
        key: "tag",
        get: function get() {
          return "hax-context-behaviors";
        }
      }, {
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)), {}, {
            activeNode: {
              type: Object
            },
            parentSchema: {
              type: Object
            },
            realSelectedValue: {
              type: String
            },
            sourceView: {
              type: Boolean
            },
            viewSource: {
              type: Boolean
            }
          });
        }
      }]);
      return _class;
    }((0, _SimpleTourFinder2.SimpleTourFinder)(SuperClass));
  };

  _exports.HaxContextBehaviors = HaxContextBehaviors;
});