define(["exports", "../../../lit/index.js", "../../../lit/directives/unsafe-html.js", "./simple-popover-manager.js"], function (_exports, _index, _unsafeHtml, _simplePopoverManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimplePopoverSelection = void 0;

  var _templateObject_a6e772c0809211edaa2833647dc78c6c, _templateObject2_a6e772c0809211edaa2833647dc78c6c, _templateObject3_a6e772c0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var SimplePopoverSelection = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(SimplePopoverSelection, _LitElement);

    var _super = _createSuper(SimplePopoverSelection);

    function SimplePopoverSelection() {
      var _this;

      babelHelpers.classCallCheck(this, SimplePopoverSelection);
      _this = _super.call(this);
      _this.disabled = false;
      _this.event = "click";
      return _this;
    }

    babelHelpers.createClass(SimplePopoverSelection, [{
      key: "openedToggle",
      value: function openedToggle(e) {
        if (!this.disabled) {
          this.opened = !this.opened;
        }
      }
    }, {
      key: "openedChanged",
      value: function openedChanged(state) {
        var _this2 = this;

        if (state) {
          var popover = window.SimplePopoverManager.requestAvailability();
          (0, _index.render)(document.createElement("div"), popover);
          var div = document.createElement("div");
          var slot = this.querySelectorAll('[slot="options"]'); // account for nesting in a single option area

          if (slot.length === 1 && slot[0].children && slot[0].children.length === 1 && slot[0].children[0].tagName === "SLOT") {
            slot = slot[0].children[0].assignedNodes({
              flatten: true
            });
          }

          for (var i in slot) {
            if (slot[i].cloneNode && slot[i].tagName) {
              var clone = slot[i].cloneNode(true);
              clone.removeAttribute("slot");
              div.appendChild(clone);
            }
          }

          var content; // support for slot injected styles
          // this allows you to inject a style local to the manager's pop up
          // which means you can style things that otherwise would be impossible
          // due to how shadowDOM + things at the app level / singleton would allow

          if (this.querySelector('[slot="style"]')) {
            var styleData = this.querySelector('[slot="style"]').cloneNode(true);
            var style = document.createElement("style");
            style.innerHTML = styleData.innerHTML;
            content = (0, _index.html)(_templateObject_a6e772c0809211edaa2833647dc78c6c || (_templateObject_a6e772c0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["", "", ""])), (0, _unsafeHtml.unsafeHTML)(div.innerHTML), (0, _unsafeHtml.unsafeHTML)(style.outerHTML));
          } else {
            content = (0, _index.html)(_templateObject2_a6e772c0809211edaa2833647dc78c6c || (_templateObject2_a6e772c0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["", ""])), (0, _unsafeHtml.unsafeHTML)(div.innerHTML));
          }

          var wrap = document.createElement("div");
          wrap.setAttribute("slot", "body");
          popover.appendChild(wrap);
          (0, _index.render)(content, wrap); // delay for render

          setTimeout(function () {
            // walk kids in the element and apply event listeners back to here
            var children = window.SimplePopoverManager.requestAvailability().querySelectorAll("*");

            for (var i in children) {
              if (children[i].addEventListener) {
                children[i].addEventListener("click", _this2.itemSelect.bind(_this2));
              }
            } // select the item we were told to activate OR just the 1st element


            if (window.SimplePopoverManager.requestAvailability().querySelector("[data-simple-popover-selection-active]")) {
              window.SimplePopoverManager.requestAvailability().querySelector("[data-simple-popover-selection-active]").focus();
            } else if (window.SimplePopoverManager.requestAvailability() && window.SimplePopoverManager.requestAvailability().querySelector(":first-child")) {
              window.SimplePopoverManager.requestAvailability().querySelector(":first-child").focus();
            }
          }, 0);
        }

        window.SimplePopoverManager.requestAvailability().setPopover(this, this.querySelector('[slot="button"]'), state);
      }
      /**
       * The manager called and its time to pack it up. We got a better offer from someone else
       * to maintain the state of the singleton and thus, you no longer matter. Please pack up
       * your bags and don't let the door hit ya.
       */

    }, {
      key: "managerReset",
      value: function managerReset() {
        this.opened = false;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "opened" && _this3.shadowRoot) {
            _this3.openedChanged(_this3[propName]);
          }
        });
      }
    }, {
      key: "itemSelect",
      value: function itemSelect(e) {
        var _this4 = this;

        // allow someone else deal with the item changing
        this.dispatchEvent(new CustomEvent("simple-popover-selection-changed", {
          bubbles: true,
          detail: e.target
        })); // close after an item is selected

        this.opened = false;
        setTimeout(function () {
          window.SimplePopoverManager.requestAvailability().setPopover(_this4, _this4.querySelector('[slot="button"]'), false);

          _this4.querySelector('[slot="button"]').focus();
        }, 0);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        if (this.event === "click") {
          this.addEventListener("click", this.openedToggle.bind(this));
        } else if (this.event === "hover") {
          this.addEventListener("mouseenter", this.openPopover.bind(this));
          this.addEventListener("focusin", this.openPopover.bind(this));
          this.addEventListener("focusout", this.closePopover.bind(this));
          this.addEventListener("mouseleave", this.closePopover.bind(this));
          this.addEventListener("mouseout", this.closePopover.bind(this));
        }
      }
    }, {
      key: "openPopover",
      value: function openPopover() {
        var _this5 = this;

        if (!this.disabled) {
          setTimeout(function () {
            _this5.opened = true;
          }, 0);
        }
      }
    }, {
      key: "closePopover",
      value: function closePopover() {
        var _this6 = this;

        setTimeout(function () {
          _this6.opened = false;
        }, 0);
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject3_a6e772c0809211edaa2833647dc78c6c || (_templateObject3_a6e772c0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["<slot name=\"button\"></slot>"])));
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          opened: {
            type: Boolean,
            reflect: true
          },

          /**
           * disabled state
           */
          disabled: {
            type: Boolean,
            reflect: true
          },

          /**
           * event activation type
           */
          event: {
            type: String
          }
        };
      }
    }]);
    return SimplePopoverSelection;
  }(_index.LitElement);

  _exports.SimplePopoverSelection = SimplePopoverSelection;
  customElements.define("simple-popover-selection", SimplePopoverSelection);
});