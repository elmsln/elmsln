define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/app-localize-behavior/app-localize-behavior.js", "../../../@polymer/polymer/lib/legacy/class.js", "../../../@polymer/iron-flex-layout/iron-flex-layout-classes.js"], function (_exports, _polymerElement, _appLocalizeBehavior, _class, _ironFlexLayoutClasses) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EcoJsonSchemaFieldset = void 0;

  var _templateObject_9d2c4c60809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  `eco-json-schema-fieldset` takes in a JSON schema of type fieldset and builds a form,
  exposing a `value` property that represents an array described by the schema.
  
  Please see the `eco-json-schema-object` documentation for further information.
  
  @group eco Elements
  @element eco-json-schema-fieldset
  * @demo demo/index.html
  */
  var EcoJsonSchemaFieldset = /*#__PURE__*/function (_mixinBehaviors) {
    babelHelpers.inherits(EcoJsonSchemaFieldset, _mixinBehaviors);

    var _super = _createSuper(EcoJsonSchemaFieldset);

    function EcoJsonSchemaFieldset() {
      babelHelpers.classCallCheck(this, EcoJsonSchemaFieldset);
      return _super.call(this);
    }

    babelHelpers.createClass(EcoJsonSchemaFieldset, [{
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(EcoJsonSchemaFieldset.prototype), "ready", this).call(this);

        this._schemaChanged();
      }
      /**
       * updates the array fields if the schema (which includes values) changes
       */

    }, {
      key: "_schemaChanged",
      value: function _schemaChanged() {
        var _this = this;

        //make sure the content is there first
        this.shadowRoot.querySelectorAll(".item-fields").forEach(function (item, index) {
          var prefix = "".concat(_this.propertyName);

          _this.dispatchEvent(new CustomEvent("build-fieldset", {
            bubbles: false,
            cancelable: true,
            composed: true,
            detail: {
              container: item,
              path: prefix,
              prefix: prefix,
              properties: _this.schema.properties,
              type: EcoJsonSchemaFieldset.tag,
              value: _this.schema.properties[index].value || {}
            }
          }));
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return "eco-json-schema-fieldset";
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_9d2c4c60809211edaa2833647dc78c6c || (_templateObject_9d2c4c60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"iron-flex iron-flex-alignment\">\n        :host {\n          color: var(--eco-json-form-color);\n          background-color: var(--eco-json-form-bg);\n          font-family: var(--eco-json-form-font-family);\n          margin-bottom: 15px;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host fieldset {\n          border-radius: var(--eco-json-form-border-radius);\n          border-style: solid;\n          border-width: 1px;\n          border-color: var(--eco-json-form-faded-color);\n          transition: all 0.5s;\n        }\n        :host legend {\n          transition: all 0.5s;\n          color: var(--eco-json-form-faded-color);\n        }\n        :host fieldset:focus #legend,\n        :host fieldset:focus-within #legend {\n          color: var(--eco-json-form-active-color);\n        }\n        :host eco-json-schema-object {\n          flex: 1 0 auto;\n        }\n      </style>\n      <fieldset>\n        <legend id=\"legend\" class=\"flex\" hidden$=\"[[!schema.title]]\">\n          [[schema.title]]\n        </legend>\n        <div hidden$=\"[[!schema.description]]\">[[item.description]]</div>\n        <div class=\"item-fields\"></div>\n      </fieldset>\n    "])));
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          propertyName: {
            type: String,
            value: null
          },
          schema: {
            type: Object,
            value: {}
          }
        };
      }
    }]);
    return EcoJsonSchemaFieldset;
  }((0, _class.mixinBehaviors)([_appLocalizeBehavior.AppLocalizeBehavior], _polymerElement.PolymerElement));

  _exports.EcoJsonSchemaFieldset = EcoJsonSchemaFieldset;
  customElements.define(EcoJsonSchemaFieldset.tag, EcoJsonSchemaFieldset);
});