define(["exports", "../../../../lit/index.js", "./rich-text-editor-button.js"], function (_exports, _index, _richTextEditorButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorSourceCode = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-source-code`
   * a button to toggle source code on rich text editor
   *
   * @customElement
   * @lit-html
   * @lit-element
   * @element rich-text-editor-source-code
   * @demo ./demo/buttons.html
   */
  var RichTextEditorSourceCode = /*#__PURE__*/function (_RichTextEditorButton) {
    babelHelpers.inherits(RichTextEditorSourceCode, _RichTextEditorButton);

    var _super = _createSuper(RichTextEditorSourceCode);

    function RichTextEditorSourceCode() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorSourceCode);
      _this = _super.call(this);
      _this.icon = "code";
      _this.toggled = false;
      _this.label = "Source Code";
      _this.labelToggled = "Rich Text";
      _this.command = "viewSource";
      _this.toggledCommand = "viewSource";
      _this.commandVal = true;
      _this.toggledCommandVal = false;
      _this.shortcutKeys = "cmd+<";

      _this.initViewSource();

      return _this;
    } // properties available to the custom element for data binding


    babelHelpers.createClass(RichTextEditorSourceCode, [{
      key: "render",
      value: // render function for template
      function render() {
        return babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorSourceCode.prototype), "render", this).call(this);
      }
    }, {
      key: "isToggled",
      get:
      /**
       * whether not button is toggled based on toggled property
       * overriden from RichTextEditorButtonBehaviors
       * @readonly
       * @memberof RichTextEditorSourceCode
       */
      function get() {
        return this.toggled;
      }
      /**
       *
       * callback frunction after button is clicked
       * toggles editor view source mode
       * (overriden from RichTextEditorButtonBehaviors)
       * @param {object} editor
       * @memberof RichTextEditorSourceCode
       */

    }, {
      key: "commandCallback",
      value: function commandCallback(editor, toolbar, selection) {
        if (!this.toggled) this.__highlight.unwrap(this.range);
        this.toggled = this.__toolbar && this.__source && this.__source.__toolbar == this.__toolbar;
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "rich-text-editor-source-code";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorSourceCode), "properties", this)), {}, {
          /**
           * Is this button toggle?
           */
          toggled: {
            attribute: "toggled",
            type: Boolean,
            reflect: true
          }
        });
      }
    }]);
    return RichTextEditorSourceCode;
  }((0, _richTextEditorButton.RichTextEditorButtonBehaviors)(_index.LitElement));

  _exports.RichTextEditorSourceCode = RichTextEditorSourceCode;
  customElements.define(RichTextEditorSourceCode.tag, RichTextEditorSourceCode);
});