define(["exports", "../../../lit/index.js", "../../simple-icon/lib/simple-icon-lite.js", "./hax-toolbar-item.js", "../../hax-iconset/lib/simple-hax-iconset.js", "../../simple-icon/lib/simple-icon-button.js", "./hax-store.js", "../../utils/utils.js", "./hax-ui-styles.js", "../../i18n-manager/lib/I18NMixin.js", "../../../mobx/dist/mobx.esm.js"], function (_exports, _index, _simpleIconLite, _haxToolbarItem, _simpleHaxIconset, _simpleIconButton, _haxStore, _utils, _haxUiStyles, _I18NMixin2, _mobxEsm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxMap = void 0;

  var _templateObject_9fe6ff90809211edaa2833647dc78c6c, _templateObject2_9fe6ff90809211edaa2833647dc78c6c, _templateObject3_9fe6ff90809211edaa2833647dc78c6c, _templateObject4_9fe6ff90809211edaa2833647dc78c6c, _templateObject5_9fe6ff90809211edaa2833647dc78c6c, _templateObject6_9fe6ff90809211edaa2833647dc78c6c;

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-map`
   * @element hax-map
   * `Export dialog with all export options and settings provided.`
   */
  var HaxMap = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(HaxMap, _I18NMixin);

    var _super = _createSuper(HaxMap);

    function HaxMap() {
      var _this;

      babelHelpers.classCallCheck(this, HaxMap);
      _this = _super.call(this);
      _this.elementList = [];
      _this.t = {
        contentStatistics: "Content Statistics",
        words: "Words",
        headings: "Headings",
        paragraphs: "Paragraphs",
        widgets: "Widgets",
        characters: "Characters",
        listView: "List view"
      };

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        namespace: "hax"
      });

      (0, _mobxEsm.autorun)(function () {
        _this.activeNode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);
        setTimeout(function () {
          _this.requestUpdate();
        }, 0);
      });
      return _this;
    }

    babelHelpers.createClass(HaxMap, [{
      key: "updateHAXMap",
      value: function () {
        var _updateHAXMap = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {
          var list, i, node, tmpNode, j, tmpNodeChild, elements, def;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  list = [];
                  i = 0;

                case 2:
                  if (!(i < _haxStore.HAXStore.activeHaxBody.childNodes.length)) {
                    _context.next = 25;
                    break;
                  }

                  node = _haxStore.HAXStore.activeHaxBody.childNodes[i];
                  _context.next = 6;
                  return (0, _utils.nodeToHaxElement)(node, null);

                case 6:
                  tmpNode = _context.sent;
                  tmpNode.parent = null;
                  tmpNode.node = node;
                  list.push(tmpNode);

                  if (!(node.children && node.children.length > 0)) {
                    _context.next = 22;
                    break;
                  }

                  j = 0;

                case 12:
                  if (!(j < node.children.length)) {
                    _context.next = 22;
                    break;
                  }

                  _context.next = 15;
                  return (0, _utils.nodeToHaxElement)(node.children[j], null);

                case 15:
                  tmpNodeChild = _context.sent;
                  tmpNodeChild.parent = tmpNode.tag;
                  tmpNodeChild.node = node.children[j]; // ignore certain tags we don't need a deep selection of

                  if (!["span", "strong", "b", "sup", "sub", "i", "em", "div", "strike"].includes(tmpNodeChild.tag)) {
                    list.push(tmpNodeChild);
                  }

                case 19:
                  j++;
                  _context.next = 12;
                  break;

                case 22:
                  i++;
                  _context.next = 2;
                  break;

                case 25:
                  this.calcStats(list);
                  elements = [];

                  for (i = 0; i < list.length; i++) {
                    def = _haxStore.HAXStore.haxSchemaFromTag(list[i].tag);

                    if (def.gizmo) {
                      elements.push({
                        node: list[i].node,
                        tag: list[i].tag,
                        parent: list[i].parent,
                        icon: def.gizmo.icon,
                        name: def.gizmo.title
                      });
                    } else {
                      if (list[i].tag && list[i].tag.includes("-")) {
                        elements.push({
                          tag: list[i].tag,
                          parent: list[i].parent,
                          icon: "hax:templates",
                          name: "Widget"
                        });
                      } else {
                        elements.push({
                          tag: list[i].tag,
                          parent: list[i].parent,
                          icon: "hax:paragraph",
                          name: "HTML block"
                        });
                      }
                    }
                  }

                  this.elementList = [].concat(elements);

                case 29:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function updateHAXMap(_x) {
          return _updateHAXMap.apply(this, arguments);
        }

        return updateHAXMap;
      }()
      /**
       * Calculate statistics from the array of hax elements
       */

    }, {
      key: "calcStats",
      value: function calcStats(elements) {
        if (elements && _haxStore.HAXStore.activeHaxBody.innerText) {
          var counts = {
            c: _haxStore.HAXStore.activeHaxBody.innerText.length,
            w: parseInt(_haxStore.HAXStore.activeHaxBody.innerText.split(/\s+/g).length - 1),
            h: 0,
            b: 0,
            p: 0,
            e: 0
          };
          elements.forEach(function (el) {
            switch (el.tag) {
              case "blockquote":
              case "div":
              case "span":
              case "p":
              case "ul":
              case "ol":
              case "strong":
              case "em":
                counts.p++;
                break;

              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                counts.h++;
                break;

              default:
                counts.e++;
                break;
            }
          });

          for (var i in counts) {
            this["".concat(i, "Count")] = counts[i];
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_9fe6ff90809211edaa2833647dc78c6c || (_templateObject_9fe6ff90809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <h5>", "</h5>\n      <div class=\"stats\">\n        <div class=\"stat\">\n          <span>", "</span>\n          <span>", "</span>\n        </div>\n        <div class=\"stat\">\n          <span>", "</span>\n          <span>", "</span>\n        </div>\n        <div class=\"stat\">\n          <span>", "</span>\n          <span>", "</span>\n        </div>\n        <div class=\"stat\">\n          <span>", "</span>\n          <span>", "</span>\n        </div>\n        <div class=\"stat\">\n          <span>", "</span>\n          <span>", "</span>\n        </div>\n      </div>\n      <h5>", "</h5>\n      <ul>\n        ", "\n      </ul>\n    "])), this.t.contentStatistics, this.wCount, this.t.words, this.pCount, this.t.paragraphs, this.cCount, this.t.characters, this.hCount, this.t.headings, this.eCount, this.t.widgets, this.t.listView, this.indentedElements(this.elementList).map(function (element, index) {
          return (0, _index.html)(_templateObject2_9fe6ff90809211edaa2833647dc78c6c || (_templateObject2_9fe6ff90809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n            <li\n              class=\"", " ", "\"\n            >\n              <hax-toolbar-item\n                align-horizontal=\"left\"\n                @click=\"", "\"\n                @dblclick=\"", "\"\n                data-index=\"", "\"\n                ?data-active-item=\"", "\"\n                icon=\"", "\"\n                label=\"", "\"\n                show-text-label\n              >\n              </hax-toolbar-item>\n              ", "\n            </li>\n          "])), element.parent ? "parent-".concat(element.parent) : "no-parent", ["h1", "h2", "h3", "h4", "h5", "h6", element.tag].includes(element.parent) ? "" : "is-child", function (e) {
            return _this2.goToItem(index);
          }, function (e) {
            return _this2.editItem(index);
          }, index, element.node === _this2.activeNode, element.icon, element.name, element.tag != "page-break" ? (0, _index.html)(_templateObject3_9fe6ff90809211edaa2833647dc78c6c || (_templateObject3_9fe6ff90809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n                    <simple-icon-button\n                      class=\"del\"\n                      icon=\"delete\"\n                      @click=\"", "\"\n                      title=\"Delete\"\n                      ?disabled=\"", "\"\n                    ></simple-icon-button>\n                    <simple-icon-button\n                      icon=\"hax:keyboard-arrow-up\"\n                      @click=\"", "\"\n                      title=\"Move up\"\n                      ?disabled=\"", "\"\n                    ></simple-icon-button>\n                    <simple-icon-button\n                      icon=\"hax:keyboard-arrow-down\"\n                      @click=\"", "\"\n                      title=\"Move down\"\n                      ?disabled=\"", "\"\n                    ></simple-icon-button>\n                    ", "\n                    <simple-icon-button\n                      icon=\"", "\"\n                      @click=\"", "\"\n                      title=\"Lock / Unlock\"\n                    ></simple-icon-button>\n                  "])), function (e) {
            return _this2.itemOp(index, "delete");
          }, _this2.isLocked(index), function (e) {
            return _this2.itemOp(index, "up");
          }, _this2.isLocked(index), function (e) {
            return _this2.itemOp(index, "down");
          }, _this2.isLocked(index), _haxStore.HAXStore.isTextElement(element.node) || element.tag == "grid-plate" ? (0, _index.html)(_templateObject4_9fe6ff90809211edaa2833647dc78c6c || (_templateObject4_9fe6ff90809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([""]))) : (0, _index.html)(_templateObject5_9fe6ff90809211edaa2833647dc78c6c || (_templateObject5_9fe6ff90809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n                          <simple-icon-button\n                            icon=\"image:transform\"\n                            @click=\"", "\"\n                            title=\"Change to..\"\n                          ></simple-icon-button>\n                        "])), function (e) {
            return _this2.itemOp(index, "transform");
          }), _this2.isLocked(index) ? "icons:lock" : "icons:lock-open", function (e) {
            return _this2.itemOp(index, "lock");
          }) : "");
        }));
      }
    }, {
      key: "editItem",
      value: function editItem(index) {
        if (index !== false && this.elementList[index].node) {
          this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              target: this.elementList[index].node,
              eventName: "content-edit",
              value: true
            }
          }));
        }
      }
    }, {
      key: "isLocked",
      value: function isLocked(index) {
        if (index !== false && this.elementList[index].node) {
          var node = this.elementList[index].node;

          if (node.getAttribute("data-hax-lock") != null || node.parentNode && node.parentNode.getAttribute("data-hax-lock") != null) {
            return true;
          } else {
            return false;
          }
        }
      }
    }, {
      key: "itemOp",
      value: function itemOp(index, action) {
        var _this3 = this;

        if (index !== false && this.elementList[index].node && action) {
          var node = this.elementList[index].node; // verify this is not locked

          if (node.getAttribute("data-hax-lock") == null && node.parentNode && node.parentNode.getAttribute("data-hax-lock") == null) {
            switch (action) {
              case "transform":
                this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
                  bubbles: true,
                  cancelable: true,
                  composed: true,
                  detail: {
                    target: node,
                    eventName: "hax-transform-node",
                    value: true
                  }
                }));
                break;

              case "lock":
                node.setAttribute("data-hax-lock", "data-hax-lock");
                break;

              case "delete":
                _haxStore.HAXStore.activeHaxBody.haxDeleteNode(node);

                break;

              case "down":
                if (node.nextElementSibling) {
                  _haxStore.HAXStore.activeHaxBody.haxMoveGridPlate(node);
                }

                break;

              case "up":
                if (node.previousElementSibling && node.previousElementSibling.tagName !== "PAGE-BREAK") {
                  _haxStore.HAXStore.activeHaxBody.haxMoveGridPlate(node, -1);
                }

                break;
            }
          } else if (action === "lock") {
            node.removeAttribute("data-hax-lock");
          }

          setTimeout(function () {
            _this3.requestUpdate();
          }, 0);
        }
      }
    }, {
      key: "indentedElements",
      value: function indentedElements(elementList) {
        var prev = "h1";
        return elementList.map(function (element) {
          var el = element;

          if (el.parent === null) {
            el.parent = prev;
          }

          if (["h1", "h2", "h3", "h4", "h5", "h6"].includes(el.tag)) {
            el.parent = el.tag;
            prev = el.tag;
          }

          return el;
        });
      }
    }, {
      key: "goToItem",
      value: function goToItem(index) {
        if (index !== false && this.elementList[index].node) {
          // find based on index position
          var activeChild = this.elementList[index].node;
          _haxStore.HAXStore.activeNode = activeChild;
          activeChild.classList.add("blinkfocus");

          if (typeof activeChild.scrollIntoViewIfNeeded === "function") {
            activeChild.scrollIntoViewIfNeeded(true);
          } else {
            activeChild.scrollIntoView({
              behavior: "smooth",
              inline: "center"
            });
          }

          setTimeout(function () {
            activeChild.classList.remove("blinkfocus");
          }, 500);
        }
      }
    }, {
      key: "scrollInMap",
      value: function scrollInMap() {
        var target = (0, _utils.normalizeEventPath)(e)[0];
        this.goToItem(target.getAttribute("data-index"));
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [].concat(babelHelpers.toConsumableArray(_haxUiStyles.HaxTrayDetailHeadings), [(0, _index.css)(_templateObject6_9fe6ff90809211edaa2833647dc78c6c || (_templateObject6_9fe6ff90809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        .container {\n          text-align: left;\n        }\n        .stats {\n          display: flex;\n          align-items: stretch;\n          flex-wrap: wrap;\n        }\n        .stat {\n          flex: 1 1 auto;\n          text-align: center;\n          border: 1px solid var(--hax-ui-border-color);\n          font-weight: normal;\n          font-size: var(--hax-ui-font-size-xs);\n          line-height: 140%;\n          padding: var(--hax-ui-spacing-sm);\n        }\n        .stat > * {\n          display: block;\n        }\n        .stat *:first-child {\n          font-weight: bold;\n          font-size: 150%;\n        }\n        ul {\n          list-style: none;\n          padding: 0;\n          margin: 0;\n        }\n        ul li {\n          margin: 0;\n          padding: 0;\n        }\n        li hax-toolbar-item {\n          display: inline-flex;\n          width: 50%;\n          max-width: 60%;\n        }\n        li simple-icon-button {\n          display: inline-flex;\n          opacity: 0;\n          visibility: hidden;\n          --simple-icon-width: 14px;\n          --simple-icon-height: 14px;\n          height: 38px;\n          float: right;\n        }\n        li simple-icon-button:hover {\n          background-color: #f5f5f5;\n        }\n        li simple-icon-button.del {\n          margin-left: 8px;\n        }\n        li:hover simple-icon-button {\n          visibility: visible;\n          opacity: 1;\n        }\n        hax-toolbar-item[data-active-item]::part(button) {\n          color: var(--hax-ui-color);\n          background-color: var(--hax-ui-background-color-accent);\n          border-color: var(--hax-ui-color-accent);\n        }\n        li.is-child {\n          margin-left: 8px;\n        }\n\n        li hax-toolbar-item::part(button),\n        li.parent-h2 hax-toolbar-item[icon=\"hax:h2\"]::part(button) {\n          margin-left: 0px;\n          cursor: pointer;\n        }\n        li.parent-h2 hax-toolbar-item::part(button),\n        li.parent-h2 + li.is-child hax-toolbar-item::part(button),\n        li.parent-h2 + li.is-child ~ li.is-child hax-toolbar-item::part(button),\n        li.parent-h3 hax-toolbar-item[icon=\"hax:h3\"]::part(button) {\n          margin-left: 8px;\n        }\n        li.parent-h3 hax-toolbar-item::part(button),\n        li.parent-h3 + li.is-child hax-toolbar-item::part(button),\n        li.parent-h3 + li.is-child ~ li.is-child hax-toolbar-item::part(button),\n        li.parent-h4 hax-toolbar-item[icon=\"hax:h4\"]::part(button) {\n          margin-left: 8px;\n        }\n        li.parent-h4 hax-toolbar-item::part(button),\n        li.parent-h4 + li.is-child hax-toolbar-item::part(button),\n        li.parent-h4 + li.is-child ~ li.is-child hax-toolbar-item::part(button),\n        li.parent-h5 hax-toolbar-item[icon=\"hax:h5\"]::part(button) {\n          margin-left: 12px;\n        }\n        li.parent-h5 hax-toolbar-item::part(button),\n        li.parent-h5 + li.is-child hax-toolbar-item::part(button),\n        li.parent-h5 + li.is-child ~ li.is-child hax-toolbar-item::part(button),\n        li.parent-h6 hax-toolbar-item[icon=\"hax:h6\"]::part(button),\n        li.parent-h6 hax-toolbar-item::part(button),\n        li.parent-h6 + li.is-child hax-toolbar-item::part(button),\n        li.parent-h6\n          + li.is-child\n          ~ li.is-child\n          hax-toolbar-item::part(button) {\n          margin-left: 12px;\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-map";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title when open.
           */
          opened: {
            type: Boolean
          },
          elementList: {
            type: Array
          },
          cCount: {
            type: String
          },
          wCount: {
            type: String
          },
          bCount: {
            type: String
          },
          hCount: {
            type: String
          },
          pCount: {
            type: String
          },
          eCount: {
            type: String
          },
          activeNode: {
            type: Object
          }
        };
      }
    }]);
    return HaxMap;
  }((0, _I18NMixin2.I18NMixin)(_index.LitElement));

  _exports.HaxMap = HaxMap;
  customElements.define(HaxMap.tag, HaxMap);
});