define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/iron-flex-layout/iron-flex-layout-classes.js", "../../../@polymer/paper-dropdown-menu/paper-dropdown-menu.js", "../../../@polymer/paper-item/paper-item.js", "../../../@polymer/paper-listbox/paper-listbox.js", "../../../@polymer/iron-validatable-behavior/iron-validatable-behavior.js", "../../../@polymer/polymer/lib/legacy/class.js", "../../../@polymer/polymer/lib/elements/dom-repeat.js"], function (_exports, _polymerElement, _ironFlexLayoutClasses, _paperDropdownMenu, _paperItem, _paperListbox, _ironValidatableBehavior, _class, _domRepeat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EcoJsonSchemaEnum = void 0;

  var _templateObject_d4ccf7208e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var EcoJsonSchemaEnum = /*#__PURE__*/function (_mixinBehaviors) {
    babelHelpers.inherits(EcoJsonSchemaEnum, _mixinBehaviors);

    var _super = _createSuper(EcoJsonSchemaEnum);

    function EcoJsonSchemaEnum() {
      babelHelpers.classCallCheck(this, EcoJsonSchemaEnum);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(EcoJsonSchemaEnum, [{
      key: "_schemaChanged",
      value: function _schemaChanged() {
        var schema = this.schema;
        var inputEl = this.shadowRoot.querySelector("#dropdown");

        if (schema.component && schema.component.properties) {
          Object.keys(schema.component.properties).forEach(function (prop) {
            inputEl[prop] = schema.component.properties[prop];
          });
        }

        this._items = schema.enum.filter(function (item) {
          return item !== null;
        });

        if (schema.title) {
          inputEl.label = schema.title;
        }
      }
    }, {
      key: "_errorChanged",
      value: function _errorChanged() {
        if (this.error) {
          this.shadowRoot.querySelector("#dropdown").invalid = true;
        } else {
          this.shadowRoot.querySelector("#dropdown").invalid = false;
        }
      }
    }, {
      key: "_isSchemaValue",
      value: function _isSchemaValue(type) {
        return this._isSchemaBoolean(type) || this._isSchemaNumber(type) || this._isSchemaString(type);
      }
    }, {
      key: "_isSchemaBoolean",
      value: function _isSchemaBoolean(type) {
        if (Array.isArray(type)) {
          return type.indexOf("boolean") !== -1;
        } else {
          return type === "boolean";
        }
      }
    }, {
      key: "_isSchemaNumber",
      value: function _isSchemaNumber(type) {
        if (Array.isArray(type)) {
          return type.indexOf("number") !== -1 || type.indexOf("integer") !== -1;
        } else {
          return type === "number" || type === "integer";
        }
      }
    }, {
      key: "_isSchemaString",
      value: function _isSchemaString(type) {
        if (Array.isArray(type)) {
          return type.indexOf("string") !== -1;
        } else {
          return type === "string";
        }
      }
    }, {
      key: "_isSchemaObject",
      value: function _isSchemaObject(type) {
        return type === "object";
      }
    }, {
      key: "_isSchemaArray",
      value: function _isSchemaArray(type) {
        return type === "array";
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_d4ccf7208e0011ed99ce491205e67b1d || (_templateObject_d4ccf7208e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style is=\"custom-style\" include=\"iron-flex iron-flex-alignment\">\n        :host ([hidden]) {\n          display: none;\n        }\n        paper-input {\n          --paper-input-container-label: {\n            white-space: normal;\n            position: static;\n            font-size: 22px;\n            color: #212121;\n          }\n        }\n\n        paper-dropdown-menu {\n          --paper-input-container-label: {\n            white-space: normal;\n            position: static;\n            font-size: 22px;\n            color: #212121;\n          }\n          --paper-dropdown-menu-button: {\n            padding: 2px;\n          }\n        }\n      </style>\n\n      <paper-dropdown-menu\n        id=\"dropdown\"\n        class=\"layout horizontal vertical\"\n        value=\"{{value}}\"\n        required=\"\"\n      >\n        <paper-dropdown-menu class=\"dropdown-content\">\n          <paper-listbox slot=\"dropdown-content\" selected=\"0\">\n            <template is=\"dom-repeat\" items=\"[[_items]]\">\n              <paper-item class=\"flex\" label=\"[[item]]\">[[item]]</paper-item>\n            </template>\n          </paper-listbox>\n        </paper-dropdown-menu>\n      </paper-dropdown-menu>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "eco-json-schema-enum";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          schema: {
            type: Object,
            observer: "_schemaChanged"
          },
          value: {
            type: String,
            notify: true,
            value: null
          },
          error: {
            type: String,
            observer: "_errorChanged",
            value: null
          },
          _items: {
            type: Object,
            value: function value() {
              return {};
            }
          }
        };
      }
    }]);
    return EcoJsonSchemaEnum;
  }((0, _class.mixinBehaviors)([_ironValidatableBehavior.IronValidatableBehavior], _polymerElement.PolymerElement));

  _exports.EcoJsonSchemaEnum = EcoJsonSchemaEnum;
  customElements.define(EcoJsonSchemaEnum.tag, EcoJsonSchemaEnum);
});