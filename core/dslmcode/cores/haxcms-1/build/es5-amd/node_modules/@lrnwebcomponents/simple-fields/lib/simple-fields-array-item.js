define(["exports", "../../../lit/index.js", "./simple-fields-fieldset.js", "./simple-fields-ui.js", "../../simple-icon/simple-icon.js", "../../simple-icon/lib/simple-icons.js", "../../simple-toolbar/lib/simple-toolbar-button.js", "../../simple-toolbar/lib/simple-toolbar-menu.js", "../../simple-toolbar/lib/simple-toolbar-menu-item.js", "../../responsive-utility/responsive-utility.js"], function (_exports, _index, _simpleFieldsFieldset, _simpleFieldsUi, _simpleIcon, _simpleIcons, _simpleToolbarButton, _simpleToolbarMenu, _simpleToolbarMenuItem, _responsiveUtility) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsArrayItem = void 0;

  var _templateObject_a5c64b50809211edaa2833647dc78c6c, _templateObject2_a5c64b50809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-fields-array-item`
   * an accessible expand collapse
   * 
  ### Styling
  
  `<simple-fields-array-item>` provides the following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--simple-fields-array-item-margin` | margin around simple-fields-array-item | 15px 0
  `--simple-fields-array-item-border` | border around simple-fields-array-item | 1px solid
  `--simple-fields-array-item-horizontal-padding` | horizontal padding inside simple-fields-array-item | 16px
  `--simple-fields-array-item-horizontal-padding-left` | left padding inside simple-fields-array-item | `--simple-fields-array-item-horizontal-padding`
  `--simple-fields-array-item-horizontal-padding-right` | right padding inside simple-fields-array-item | `--simple-fields-array-item-horizontal-padding`
  `--simple-fields-array-item-vertical-padding` | vertical padding inside simple-fields-array-item | 16px
  `--simple-fields-array-item-horizontal-padding-top` | top padding inside simple-fields-array-item | `--simple-fields-array-item-vertical-padding`
  `--simple-fields-array-item-horizontal-padding-bottom` | bottom padding inside simple-fields-array-item | --simple-fields-array-item-vertical-padding
  `--simple-fields-array-item-border-between` | border between simple-fields-array-item heading and content | --simple-fields-array-item-border
  `--simple-fields-array-item-heading-font-weight` | font-weight for simple-fields-array-item heading | bold
  `--simple-fields-array-item-heading-color` | text color for simple-fields-array-item heading | unset
  `--simple-fields-array-item-heading-background-color` | background-color for simple-fields-array-item heading | unset
   *
   * @customElement
   * @group simple-fields
   * @element simple-fields-array-item
   * @demo ./demo/schema.html Schema
   * @demo ./demo/form.html Form
   * @class SimpleFieldsArrayItem
   * @extends {SimpleFieldsFieldsetBehaviors(LitElement)}
   */
  var SimpleFieldsArrayItem = /*#__PURE__*/function (_SimpleFieldsFieldset) {
    babelHelpers.inherits(SimpleFieldsArrayItem, _SimpleFieldsFieldset);

    var _super = _createSuper(SimpleFieldsArrayItem);

    function SimpleFieldsArrayItem() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFieldsArrayItem);
      _this = _super.call(this);
      _this.disabled = false;
      _this.draggable = "truest";
      _this.previewBy = [];
      _this.expanded = true;
      _this.responsiveSize = "sm";

      _this.addEventListener("dragenter", _this._dragEnter);

      _this.addEventListener("dragleave", _this._dragLeave);

      _this.addEventListener("dragover", _this._dragMoving);

      _this.addEventListener("dragstart", _this._dragStart);

      _this.addEventListener("dragend", _this._dragEnd);

      _this.addEventListener("drop", _this._dragDrop);

      return _this;
    }
    /**
     * ensure we can indentify this and an element extending it as an array item
     *
     * @readonly
     * @memberof SimpleFieldsArrayItem
     */


    babelHelpers.createClass(SimpleFieldsArrayItem, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_a5c64b50809211edaa2833647dc78c6c || (_templateObject_a5c64b50809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"dropzone\"></div>\n      <simple-toolbar-menu\n        id=\"drag-handle\"\n        controls=\"", "\"\n        icon=\"icons:reorder\"\n        label=\"Reorder this item\"\n        ?disabled=\"", "\"\n        ?hidden=\"", "\"\n        part=\"drag\"\n        tooltip-direction=\"right\"\n        @mousedown=\"", "\"\n        @mouseup=\"", "\"\n      >\n        <simple-toolbar-menu-item id=\"move-up-outer\">\n          <simple-toolbar-button\n            id=\"move-up\"\n            align-horizontal=\"left\"\n            role=\"menuitem\"\n            icon=\"arrow-upward\"\n            show-text-label\n            label=\"Up\"\n            @click=\"", "\"\n          >\n          </simple-toolbar-button>\n        </simple-toolbar-menu-item>\n        <simple-toolbar-menu-item id=\"move-down-outer\">\n          <simple-toolbar-button\n            align-horizontal=\"left\"\n            id=\"move-up\"\n            role=\"menuitem\"\n            icon=\"arrow-downward\"\n            show-text-label\n            label=\"Down\"\n            @click=\"", "\"\n          >\n          </simple-toolbar-button>\n        </simple-toolbar-menu-item>\n      </simple-toolbar-menu>\n      <div id=\"heading\" part=\"heading\" .item=\"", "\">\n        <div id=\"preview\" part=\"preview\"><slot name=\"preview\"></slot></div>\n        <simple-toolbar-button\n          id=\"expand\"\n          controls=\"", "\"\n          ?hidden=\"", "\"\n          icon=\"more-vert\"\n          label=\"Toggle expand\"\n          ?disabled=\"", "\"\n          @click=\"", "\"\n          toggles\n          ?toggled=\"", "\"\n          part=\"expand\"\n          tooltip-direction=\"left\"\n        >\n        </simple-toolbar-button>\n      </div>\n      <div id=\"content\" part=\"content\">\n        <div id=\"content-inner\" part=\"content-inner\">\n          <div><slot></slot></div>\n          <div id=\"copy-delete\">\n            <simple-toolbar-button\n              id=\"copy\"\n              controls=\"", "\"\n              icon=\"content-copy\"\n              label=\"Copy this item\"\n              ?disabled=\"", "\"\n              @click=\"", "\"\n              part=\"copy\"\n              tooltip-direction=\"left\"\n            >\n            </simple-toolbar-button>\n            <simple-toolbar-menu\n              id=\"remove\"\n              icon=\"delete\"\n              label=\"Remove this item\"\n              ?disabled=\"", "\"\n              fit-to-visible-bounds\n              part=\"remove\"\n              position-align=\"end\"\n              tooltip-direction=\"left\"\n            >\n              <simple-toolbar-menu-item>\n                <simple-toolbar-button\n                  id=\"confirm-remove\"\n                  class=\"danger\"\n                  align-horizontal=\"left\"\n                  role=\"menuitem\"\n                  show-text-label\n                  controls=\"", "\"\n                  icon=\"delete\"\n                  label=\"Remove\"\n                  ?disabled=\"", "\"\n                  @click=\"", "\"\n                  part=\"confirm-remove\"\n                >\n                </simple-toolbar-button>\n              </simple-toolbar-menu-item>\n            </simple-toolbar-menu>\n          </div>\n        </div>\n      </div>\n    "])), this.id, this.disabled, this.__dropAccepts || this.__dragging, function (e) {
          return _this2.draggable = "true";
        }, function (e) {
          return _this2.draggable = "false";
        }, this._moveUp, this._moveDown, this, this.id, this.responsiveSize !== "xs", this.disabled, this.toggle, this.expanded, (this.parentNode || {}).id, this.disabled, this._handleCopy, this.disabled, this.id, this.disabled, this._handleRemove);
      }
    }, {
      key: "isArrayItem",
      get: function get() {
        return true;
      }
    }, {
      key: "_dragMoving",
      value: function _dragMoving(e) {
        this.__dragMoving = true;
        e.preventDefault();
      }
      /**
       * When we end dragging ensure we remove the mover class.
       */

    }, {
      key: "_dragEnd",
      value: function _dragEnd(e) {
        babelHelpers.toConsumableArray(this.parentNode.childNodes).forEach(function (item) {
          if (item.isArrayItem) item._setDropzone(false);
        });

        this._setDragging(false);
      }
      /**
       * Drag start so we know what target to set
       */

    }, {
      key: "_dragStart",
      value: function _dragStart(e) {
        var heading = this.shadowRoot.querySelector("#heading");
        e.dataTransfer.setDragImage(heading, 0, 0);

        this._setDragging();

        e.stopPropagation();
        e.stopImmediatePropagation();
      }
      /**
       * Enter an element, meaning we've over it while dragging
       */

    }, {
      key: "_dragEnter",
      value: function _dragEnter(e) {
        this._setDropzone();
      }
      /**
       * Leaving an element while dragging.
       */

    }, {
      key: "_dragLeave",
      value: function _dragLeave(e) {
        this._setDropzone(false);
      }
      /**
       * Drop an item onto another
       */

    }, {
      key: "_dragDrop",
      value: function _dragDrop(e) {
        this._moveBefore(e, this.__dropAccepts, this);
      }
    }, {
      key: "_moveUp",
      value: function _moveUp(e) {
        var prev = this.previousElementSibling;
        if (!prev) return;

        this._moveBefore(e, this, prev);
      }
    }, {
      key: "_moveDown",
      value: function _moveDown(e) {
        var next = this.nextElementSibling;
        if (!next) return;

        this._moveBefore(e, this, next.nextElementSibling);
      }
    }, {
      key: "_moveBefore",
      value: function _moveBefore(e, target, ref) {
        if (!this.parentNode.disabled && target) {
          if (ref) {
            this.parentNode.insertBefore(target, ref);
          } else {
            this.parentNode.append(target);
          }

          babelHelpers.toConsumableArray(this.parentNode.childNodes).forEach(function (item) {
            if (item.isArrayItem) item._setDragging(false);
          });
          this.dispatchEvent(new CustomEvent("reorder", {
            bubbles: true,
            cancelable: true,
            composed: false,
            detail: this.parentNode
          }));
        }
      }
    }, {
      key: "_setDragging",
      value: function _setDragging() {
        var _this3 = this;

        var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        if (!this.parentNode.disabled) this.__dragging = show;

        if (show) {
          babelHelpers.toConsumableArray(this.parentNode.childNodes).forEach(function (item) {
            if (item !== _this3 && item.isArrayItem) {
              item.__dropAccepts = _this3;
              item.classList.add("droppable");
            }
          });
          this.classList.add("dragging");
        } else {
          babelHelpers.toConsumableArray(this.parentNode.childNodes).forEach(function (item) {
            if (item !== _this3 && item.isArrayItem) {
              item.__dropAccepts = undefined;
              item.classList.remove("droppable");
            }
          });
          this.classList.remove("dragging");
        }
      }
    }, {
      key: "_setDropzone",
      value: function _setDropzone() {
        var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (show && !this.__dragging && this.__dropAccepts) {
          this.classList.add("dropzone");
        } else {
          this.classList.remove("dropzone");
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this4 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsArrayItem.prototype), "connectedCallback", this).call(this);
        setTimeout(function () {
          /**
           * Fires when constructed, so that parent radio group can listen for it.
           *
           * @event add-item
           */
          _this4.dispatchEvent(new CustomEvent("added", {
            bubbles: true,
            cancelable: true,
            composed: false,
            detail: _this4
          }));
        }, 0);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsArrayItem.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsArrayItem.prototype), "firstUpdated", this).call(this, changedProperties);
        window.ResponsiveUtility.requestAvailability();
        /**
         * needs the size of parent container to add responsive styling
         * @event responsive-element
         */

        window.dispatchEvent(new CustomEvent("responsive-element", {
          detail: {
            element: this,
            attribute: "responsive-size",
            relativeToParent: true,
            sm: 250,
            md: 500,
            lg: 1000,
            xl: 2000
          }
        }));
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this5 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsArrayItem.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsArrayItem.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "error" || propName === "expanded") {
            _this5.setAttribute("aria-expanded", _this5.error || _this5.expanded);
          }
        });
      }
    }, {
      key: "slots",
      get: function get() {
        var slots = {};
        this.previewBy.forEach(function (field) {
          return slots[field] = "preview";
        });
        return slots;
      }
      /**
       * handles individual toggling
       */

    }, {
      key: "toggle",
      value: function toggle() {
        this.expanded = !this.expanded;
      }
      /**
       * Fires add event
       * @event add
       */

    }, {
      key: "_handleCopy",
      value: function _handleCopy() {
        this.dispatchEvent(new CustomEvent("copy", {
          bubbles: true,
          cancelable: true,
          composed: false,
          detail: this
        }));
      }
      /**
       * Fires add event
       * @event add
       */

    }, {
      key: "_handleRemove",
      value: function _handleRemove() {
        this.dispatchEvent(new CustomEvent("remove", {
          bubbles: true,
          cancelable: true,
          composed: false,
          detail: this
        }));
      }
      /**
       * Let the group know that this is gone.
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        /**
         * Fires when detatched, so that parent radio group will no longer listen for it.
         *
         * @event remoive-item
         */
        this.dispatchEvent(new CustomEvent("removed", {
          bubbles: true,
          cancelable: true,
          composed: false,
          detail: this
        }));
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsArrayItem.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsArrayItem), "styles", this)), babelHelpers.toConsumableArray(_simpleFieldsUi.SimpleFieldsButtonStyles), [(0, _index.css)(_templateObject2_a5c64b50809211edaa2833647dc78c6c || (_templateObject2_a5c64b50809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          padding: 0;\n          border-radius: var(--simple-fields-border-radius, 2px);\n          display: block;\n          border: none;\n          transform: rotate(0deg);\n          transition: all 0.5s ease;\n          z-index: 1;\n          position: relative;\n        }\n        :host([disabled]) {\n          opacity: 0.5;\n        }\n        :host([aria-expanded=\"true\"]) {\n          padding: var(--simple-fields-margin, 16px)\n            var(--simple-fields-margin-small, 8px);\n          outline: 1px solid var(--simple-fields-border-color-light, #ccc);\n          transition: all 0.5s ease;\n        }\n        :host([error]) {\n          outline: 1px solid var(--simple-fields-error-color, #b40000);\n          transition: border 0.5s ease;\n        }\n        *[aria-controls=\"content\"][disabled] {\n          cursor: not-allowed;\n        }\n        #drag-handle {\n          flex: 0 1 auto;\n          position: relative;\n          overflow: visible;\n        }\n        #preview {\n          flex: 1 0 auto;\n          margin: 0;\n          margin-right: calc(0 - var(--simple-fields-margin-small, 8px) / 2);\n          margin-left: calc(50px + var(--simple-fields-margin-small, 8px) / 2);\n          max-width: calc(\n            100% - 72px - 2 * var(--simple-fields-margin-small, 8px) / 2\n          );\n        }\n        #heading,\n        .heading-inner {\n          display: flex;\n          justify-content: space-between;\n          align-items: flex-start;\n        }\n        #content {\n          overflow: hidden;\n          max-height: 0;\n        }\n        :host #content-inner {\n          display: flex;\n          align-items: flex-end;\n          justify-content: space-between;\n          flex-wrap: wrap;\n          overflow: hidden;\n          max-height: 0;\n          transition: max-height 0.75s ease 0.1s;\n        }\n        :host([aria-expanded=\"true\"]) #content {\n          max-height: 20000vh;\n          transition: max-height 0.75s ease 0.1s;\n        }\n        :host([aria-expanded=\"true\"]) #content-inner {\n          max-height: 20000vh;\n        }\n        #content-inner > * {\n          flex: 1 1 auto;\n        }\n        #copy-delete {\n          display: flex;\n          flex: 0 0 auto;\n        }\n        #copy,\n        #remove {\n          flex: 0 0 auto;\n        }\n        #expand {\n          margin-left: calc(var(--simple-fields-margin-small, 8px) / 2);\n        }\n        #drag-handle {\n          position: absolute;\n          left: 2px;\n          top: 2px;\n          --simple-toolbar-button-white-space: normal !important;\n        }\n        :host([aria-expanded=\"true\"]) #drag-handle {\n          top: var(--simple-fields-margin, 16px);\n          left: var(--simple-fields-margin-small, 8px);\n        }\n        #dropzone {\n          height: 0px;\n        }\n        :host(.dragging) #heading {\n          opacity: 0.5;\n        }\n        :host(.dragging) #content,\n        :host(.dragging) #expand {\n          display: none;\n        }\n        #content:hover,\n        #content:focus-within,\n        #content:hover #content-inner,\n        #content:focus-within #content-inner {\n          overflow: visible;\n        }\n        :host(.dragging) #preview,\n        :host(.droppable) #preview {\n          margin-left: calc(var(--simple-fields-margin-small, 8px) / 2);\n        }\n        :host(.dropzone) #dropzone {\n          background-color: var(\n            --simple-fields-button-focus-background-color,\n            var(--simple-fields-accent-color-light, #d9eaff)\n          );\n          height: 80px;\n        }\n\n        :host([aria-expanded=\"true\"]) #expand::part(icon) {\n          transform: rotate(90deg);\n          transition: all 0.5s ease;\n        }\n        ::slotted([slot=\"preview\"]),\n        ::slotted(*:first-child) {\n          margin-top: 0;\n        }\n        ::slotted([slot=\"preview\"]),\n        ::slotted(*:last-child) {\n          margin-bottom: 0;\n        }\n        :host(:hover),\n        :host(:focus),\n        :host(:focus-within) {\n          z-index: 100000;\n        }\n        :host(.dropzone) {\n          z-index: 1;\n        }\n        [hidden],\n        :host(:first-child) #move-up-outer,\n        :host(:last-child) #move-down-outer,\n        :host(:first-child):last-child #drag-handle {\n          display: none;\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "simple-fields-array-item";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * is disabled?
           */
          expanded: {
            type: Boolean,
            reflect: true
          },

          /**
           * is disabled?
           */
          disabled: {
            type: Boolean,
            reflect: true,
            attribute: "disabled"
          },

          /**
           * is disabled?
           */
          draggable: {
            type: String,
            reflect: true
          },

          /**
           * is disabled?
           */
          preview: {
            type: Boolean
          },

          /**
           * fields to preview by
           */
          previewBy: {
            type: Array,
            reflect: true,
            attribute: "preview-by"
          },
          responsiveSize: {
            type: String,
            attribute: "responsive-size",
            reflect: true
          },
          __dragging: {
            type: Boolean
          },
          __dropAccepts: {
            type: Object
          },
          __prev: {
            type: Object
          },
          __next: {
            type: Object
          }
        };
      }
    }]);
    return SimpleFieldsArrayItem;
  }((0, _simpleFieldsFieldset.SimpleFieldsFieldsetBehaviors)(_index.LitElement));

  _exports.SimpleFieldsArrayItem = SimpleFieldsArrayItem;
  customElements.define(SimpleFieldsArrayItem.tag, SimpleFieldsArrayItem);
});