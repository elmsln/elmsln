define(["exports", "require", "../../lit/index.js", "../utils/utils.js"], function (_exports, _require, _index, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PageContentsMenu = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_6f520460809211edaa2833647dc78c6c, _templateObject2_6f520460809211edaa2833647dc78c6c, _templateObject3_6f520460809211edaa2833647dc78c6c, _templateObject4_6f520460809211edaa2833647dc78c6c, _templateObject5_6f520460809211edaa2833647dc78c6c, _templateObject6_6f520460809211edaa2833647dc78c6c, _templateObject7_6f520460809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `page-contents-menu`
   * `Links that jump you to the right place in the page&#39;s content`
   * @demo demo/index.html
   * @element page-contents-menu
   */
  var PageContentsMenu = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(PageContentsMenu, _LitElement);

    var _super = _createSuper(PageContentsMenu);

    /**
     * HTMLElement
     */
    function PageContentsMenu() {
      var _this;

      babelHelpers.classCallCheck(this, PageContentsMenu);
      _this = _super.call(this); // default is to use the parent container unless a content container
      // is defined otherwise. This would imply usage of placing this at the TOP of
      // content area though next, pervious and none are valid

      _this.relationship = null;
      _this.fallbackText = {};
      _this.items = [];
      _this.isEmpty = true;
      _this.hideIfEmpty = false;
      _this.position = "left";
      _this.contentContainer = null;
      _this.mobile = false; // how long to wait between updating. 100ms default

      _this.scrollPolling = 200; // only useful with mobile

      _this.hideSettings = true;
      _this.label = "Contents"; // so we can close the menu

      window.addEventListener("click", _this.checkMenuOpen.bind(babelHelpers.assertThisInitialized(_this))); // default to all hierarchy tags to obtain mini-menu
      // opens the door for us adding OTHER tags in the future

      _this.hierarchyTags = ["h1", "h2", "h3", "h4", "h5", "h6"];
      return _this;
    }

    babelHelpers.createClass(PageContentsMenu, [{
      key: "render",
      value: // render function
      function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_6f520460809211edaa2833647dc78c6c || (_templateObject_6f520460809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <section class=\"wrapper\" role=\"navigation\">\n        <div class=\"header\">\n          <a\n            class=\"svg\"\n            @click=\"", "\"\n            @keypress=\"", "\"\n            id=\"popovertarget\"\n            aria-label=\"", "\"\n          >\n            <svg\n              preserveAspectRatio=\"xMidYMid meet\"\n              height=\"1em\"\n              width=\"1em\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke=\"currentColor\"\n              class=\"icon-7f6730be--text-3f89f380\"\n            >\n              <g>\n                <line x1=\"21\" y1=\"10\" x2=\"7\" y2=\"10\"></line>\n                <line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line>\n                <line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line>\n                <line x1=\"21\" y1=\"18\" x2=\"7\" y2=\"18\"></line>\n              </g>\n            </svg>\n          </a>\n          <simple-tooltip\n            for=\"popovertarget\"\n            offset=\"32\"\n            ?hidden=\"", "\"\n          >\n            ", "\n          </simple-tooltip>\n          ", "\n        </div>\n        ", "\n      </section>\n    "])), this.toggleSettings, this.keyToggle, this.label, !this.mobile || !this.hideSettings, this.label, !this.mobile ? (0, _index.html)(_templateObject2_6f520460809211edaa2833647dc78c6c || (_templateObject2_6f520460809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <h2 class=\"label\">", "</h2> "])), this.label) : "", this.mobile ? (0, _index.html)(_templateObject3_6f520460809211edaa2833647dc78c6c || (_templateObject3_6f520460809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n              <simple-popover\n                class=\"dropdown pull-left font-settings js-toolbar-action settings-container\"\n                ?hidden=\"", "\"\n                position=\"", "\"\n                auto\n              >\n                <ol class=\"contents\">\n                  ", "\n                </ol>\n              </simple-popover>\n            "])), this.hideSettings, this.position, this.items.map(function (item, index) {
          return _this2.renderItem(item, index);
        })) : (0, _index.html)(_templateObject4_6f520460809211edaa2833647dc78c6c || (_templateObject4_6f520460809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n              <ol class=\"contents\">\n                ", "\n              </ol>\n            "])), this.items.map(function (item, index) {
          return _this2.renderItem(item, index);
        })));
      }
    }, {
      key: "keyToggle",
      value: function keyToggle(e) {
        if (["Enter", "Space"].includes(e.key)) {
          this.toggleSettings(e);
        }
      }
    }, {
      key: "keyScroll",
      value: function keyScroll(e) {
        if (e.key == "Enter") {
          this.scrollToObject(e);
        }
      }
    }, {
      key: "toggleSettings",
      value: function toggleSettings(e) {
        if (this.mobile) {
          this.hideSettings = !this.hideSettings;
        }
      }
    }, {
      key: "scrollToObject",
      value: function scrollToObject(e) {
        var target = (0, _utils.normalizeEventPath)(e)[0];

        if (this.items && this.contentContainer && target.getAttribute("data-index") && this.items[parseInt(target.getAttribute("data-index"))]) {
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
          var objItem;

          if (this.items[parseInt(target.getAttribute("data-index"))].item) {
            objItem = this.items[parseInt(target.getAttribute("data-index"))].item;
          } else {
            objItem = this.contentContainer.querySelector("#" + this.items[parseInt(target.getAttribute("data-index"))].id);
          }

          var isSafari = window.safari !== undefined;

          if (isSafari) {
            objItem.scrollIntoView();
          } else {
            objItem.scrollIntoView({
              behavior: "smooth",
              block: "start",
              inline: "nearest"
            });
          } // keep state in history


          window.history.pushState({}, null, target.getAttribute("href")); // close menu

          this.hideSettings = true;
        }
      }
    }, {
      key: "renderItem",
      value: function renderItem(item, index) {
        if (item.link == null && item.id) {
          // tab index ensures browser treats it like a normal link
          return (0, _index.html)(_templateObject5_6f520460809211edaa2833647dc78c6c || (_templateObject5_6f520460809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        <li class=\"item\">\n          <a\n            class=\"link indent-", " ", "\"\n            tabindex=\"0\"\n            @click=\"", "\"\n            @keypress=\"", "\"\n            data-index=\"", "\"\n            >", "</a\n          >\n        </li>\n      "])), item.indent, item.active, this.scrollToObject, this.keyScroll, index, item.title);
        }

        return (0, _index.html)(_templateObject6_6f520460809211edaa2833647dc78c6c || (_templateObject6_6f520460809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <li class=\"item\">\n        <a\n          class=\"link indent-", " ", "\"\n          href=\"", "\"\n          @click=\"", "\"\n          @keypress=\"", "\"\n          data-index=\"", "\"\n          >", "</a\n        >\n      </li>\n    "])), item.indent, item.active, item.link, this.scrollToObject, this.keyScroll, index, item.title);
      } // properties available to the custom element for data binding

    }, {
      key: "checkMenuOpen",
      value: function checkMenuOpen(e) {
        var target = (0, _utils.normalizeEventPath)(e)[0];

        if (this.mobile && !this.hideSettings && target.includes && !target.includes(this.__toggleTarget) && !target.includes(this.shadowRoot.querySelector("simple-popover"))) {
          this.hideSettings = true;
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(PageContentsMenu.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(PageContentsMenu.prototype), "firstUpdated", this).call(this, changedProperties);
        } // if we are told to use the parent and we're connected...


        if (this.relationship == "parent") {
          // which will kick that off
          this.contentContainer = this.parentElement;
        } else if (this.relationship == "next") {
          // which will kick that off
          this.contentContainer = this.nextElementSibling;
        } else if (this.relationship == "previous") {
          // which will kick that off
          this.contentContainer = this.previousElementSibling;
        } // anything else we ignore sot hat contentContainer can be set manually
        else {}

        setTimeout(function () {
          _this3.updateMenu();
        }, 1000);
      }
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(PageContentsMenu.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(PageContentsMenu.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          // fire a "scroll" processing event if the list of items updated
          // this ensures if something else changes the available items that we are
          // still trying to mark something as active
          if (propName == "items" && _this4[propName] && _this4[propName].length > 0) {
            setTimeout(function () {
              _this4.scrollFinished();
            }, 0);
          }

          if (propName == "contentContainer") {
            _this4._contentContainerChanged(_this4[propName]);
          } // dynamic import pop over if we go mobile mode


          if (propName == "mobile") {
            if (_this4[propName]) {
              new Promise(function (res, rej) {
                return _require.default(["../simple-popover/simple-popover.js"], res, rej);
              }).then(function (module) {
                setTimeout(function () {
                  // hook up the pop over menu
                  _this4.__toggleTarget = _this4.shadowRoot.querySelector("#popovertarget");

                  _this4.__toggleTarget.setAttribute("tabindex", "0");

                  _this4.shadowRoot.querySelector("simple-popover").target = _this4.__toggleTarget;
                }, 0);
              });
              new Promise(function (res, rej) {
                return _require.default(["../simple-tooltip/simple-tooltip.js"], res, rej);
              });
            } else if (oldValue && !_this4[propName]) {
              _this4.__toggleTarget.removeAttribute("tabindex");
            }
          }
        });
      }
      /**
       * Update the menu. This can be run manually to easily wire into mutationobservers
       * or other events that modify what's in the content container node without
       * constantly monitoring it for changes.
       */

    }, {
      key: "updateMenu",
      value: function updateMenu() {
        var validTags = this.hierarchyTags;
        var items = []; // loop over the new nodes

        for (var i = 0; i < this.contentContainer.childNodes.length; i++) {
          // verify this tag is a valid one
          var item = this.contentContainer.childNodes[i];

          if (babelHelpers.typeof(item.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && validTags.includes(item.tagName.toLowerCase())) {
            var title = item.innerText;

            if (item.innerText == "" && this.fallbackText[item.tagName.toLowerCase()]) {
              title = this.fallbackText[item.tagName.toLowerCase()];
            }

            var reference = {
              title: title,
              link: item.id ? document.location.pathname + "#" + item.id : null,
              id: item.id,
              indent: parseInt(item.tagName.toLowerCase().replace("h", "")),
              active: "",
              item: item
            };
            items.push(reference);
          }
        }

        if (items.length === 0) {
          this.isEmpty = true;
        } else {
          this.isEmpty = false;
        }

        this.items = [].concat(items);
      }
      /**
       * Event listener for scrolling
       */

    }, {
      key: "_applyScrollDetect",
      value: function _applyScrollDetect() {
        var _this5 = this;

        clearTimeout(this.__debounce);
        this.__debounce = setTimeout(function () {
          _this5.scrollFinished();
        }, this.scrollPolling);
      }
      /**
       * Scrolling has paused, re-evaluate what's visible
       */

    }, {
      key: "scrollFinished",
      value: function scrollFinished() {
        var _this6 = this;

        if (this.items) {
          // ensure only 1 thing is active and it'll always be the 1st item found from top to bottom
          var activeFound = false; // viewport height

          var browserViewport = window.innerHeight || document.documentElement.clientHeight;
          this.items.forEach(function (value, i) {
            if (_this6.contentContainer && _this6.items && _this6.items[i] && _this6.items[i].id) {
              try {
                var objItem = _this6.contentContainer.querySelector("#" + _this6.items[i].id);

                if (objItem) {
                  var itemTop = objItem.getBoundingClientRect().top - 100;
                  var itemBottom = 0; // ensure bottom is ACTUALLY set to the top of the NEXT item

                  if (i !== _this6.items.length - 1 && _this6.items[i + 1] && _this6.items[i + 1].id) {
                    itemBottom = _this6.contentContainer.querySelector("#" + _this6.items[i + 1].id).getBoundingClientRect().top - 100;
                  } else {
                    itemBottom = browserViewport;
                  } // we are in viewport or at least 100 px within it and NOT past it


                  if (itemTop <= browserViewport && itemBottom > 0 && !activeFound) {
                    activeFound = true;
                    _this6.items[i].active = "active";
                  } else {
                    _this6.items[i].active = "";
                  }
                }
              } catch (e) {
                console.log(e);
              }
            }
          }); // account for potentially not finding ANYTHING yet having a "bottom" or top element

          if (!activeFound && this.items && this.items.length > 0 && this.contentContainer && this.items[0] && this.items[0].id) {
            try {
              var objItem = this.contentContainer.querySelector("#" + this.items[0].id); // if we are ABOVE the 1st item, assume top; otherwise it's end

              if (objItem.getBoundingClientRect().top >= browserViewport) {
                this.items[0].active = "active";
              } else {
                this.items[this.items.length - 1].active = "active";
              }
            } catch (e) {
              console.log(e);
            }
          }

          this.requestUpdate();
        }
      }
      /**
       * When our content container changes, process the hierarchy in question
       */

    }, {
      key: "_contentContainerChanged",
      value: function _contentContainerChanged(newValue) {
        // simple test that this has content in it to parse
        if (newValue && newValue.childNodes && newValue.childNodes.length > 0) {
          this.updateMenu();
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(PageContentsMenu.prototype), "connectedCallback", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(PageContentsMenu.prototype), "connectedCallback", this).call(this);
        }

        window.addEventListener("scroll", this._applyScrollDetect.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("scroll", this._applyScrollDetect.bind(this));

        if (babelHelpers.get(babelHelpers.getPrototypeOf(PageContentsMenu.prototype), "disconnectedCallback", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(PageContentsMenu.prototype), "disconnectedCallback", this).call(this);
        }
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject7_6f520460809211edaa2833647dc78c6c || (_templateObject7_6f520460809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host([is-empty][hide-if-empty]) {\n          display: none;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        [hidden] {\n          display: none;\n        }\n        :host([mobile]) .wrapper,\n        :host([mobile]) .header,\n        :host([mobile]) .header .svg {\n          padding: 0;\n          margin: 0;\n        }\n        .wrapper {\n          display: inline-block;\n          padding: 8px;\n        }\n        .header {\n          display: flex;\n          color: var(--page-contents-menu-heading-color, #9daab6);\n          padding: 0 24px 0 0;\n          margin: 0 0 8px 0;\n        }\n        .header .svg {\n          padding-right: 6px;\n          display: inline-flex;\n          color: var(--page-contents-menu-link, #74818d);\n        }\n        svg {\n          width: 1em;\n          height: 1em;\n          vertical-align: middle;\n        }\n        .header .label {\n          align-items: center;\n          display: inline-flex;\n          font-size: var(--page-contents-menu-heading-font-size, 10px);\n          font-weight: var(--page-contents-menu-heading-font-weight, 700);\n          padding: 0;\n          margin: 0;\n          font-family: Content-font, Roboto, sans-serif;\n          line-height: 1;\n          letter-spacing: 1.2px;\n          text-transform: uppercase;\n        }\n\n        .contents {\n          margin: 0;\n          padding: 0;\n          list-style-type: none;\n          overflow-y: auto;\n          max-height: 50vh;\n        }\n        .item {\n          margin: 0;\n          display: block;\n          padding: 0;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n        }\n        .link {\n          font-family: Content-font, Roboto, sans-serif;\n          line-height: 1.5;\n          display: flex;\n          padding: 4px 16px 4px 24px;\n          font-size: var(--page-contents-menu-link-font-size, 12px);\n          text-decoration: none;\n          font-weight: var(--page-contents-menu-link-font-weight, 500);\n          color: var(--page-contents-menu-link, #74818d);\n          cursor: pointer;\n          margin: 0;\n          align-items: center;\n          vertical-align: middle;\n          -webkit-box-align: center;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n        }\n        .link:hover,\n        .link:focus,\n        .link:active {\n          text-decoration: underline;\n          color: var(--page-contents-menu-link-hover, rgb(56, 132, 255));\n        }\n        .link:focus {\n          outline: 1px solid var(--page-contents-menu-link, black);\n          outline-offset: 4px;\n        }\n        .indent-1 {\n          padding-left: 0px;\n        }\n        .indent-2 {\n          padding-left: 16px;\n        }\n        .indent-3,\n        .indent-4,\n        .indent-5,\n        .indent-6 {\n          padding-left: 32px;\n        }\n        .active {\n          font-weight: bold;\n          border-left: black 2px solid;\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          contentContainer: {
            type: Object
          },
          relationship: {
            type: String
          },
          items: {
            type: Array
          },
          position: {
            type: String
          },
          mobile: {
            type: Boolean,
            reflect: true
          },
          label: {
            type: String
          },
          hideSettings: {
            type: Boolean
          },
          hideIfEmpty: {
            type: Boolean,
            attribute: "hide-if-empty",
            reflect: true
          },
          isEmpty: {
            type: Boolean,
            attribute: "is-empty",
            reflect: true
          }
        };
      }
      /**
       * Convention we use
       */

    }, {
      key: "tag",
      get: function get() {
        return "page-contents-menu";
      }
    }]);
    return PageContentsMenu;
  }(_index.LitElement);

  _exports.PageContentsMenu = PageContentsMenu;
  customElements.define(PageContentsMenu.tag, PageContentsMenu);
});