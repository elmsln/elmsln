define(["exports", "require", "../../lit/index.js", "../simple-icon/lib/simple-icon-lite.js", "../simple-icon/lib/simple-icons.js", "../intersection-element/lib/IntersectionObserverMixin.js"], function (_exports, _require, _index, _simpleIconLite, _simpleIcons, _IntersectionObserverMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GithubPreview = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_67e84810809211edaa2833647dc78c6c, _templateObject2_67e84810809211edaa2833647dc78c6c, _templateObject3_67e84810809211edaa2833647dc78c6c, _templateObject4_67e84810809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `github-preview`
   * `A simple element that displays information about a github repository.`
   * @demo demo/index.html
   * @element github-preview
   */
  var GithubPreview = /*#__PURE__*/function (_IntersectionObserver) {
    babelHelpers.inherits(GithubPreview, _IntersectionObserver);

    var _super = _createSuper(GithubPreview);

    /**
     * HTMLElement
     */
    function GithubPreview() {
      var _this;

      babelHelpers.classCallCheck(this, GithubPreview);
      _this = _super.call(this);
      _this.url = "https://github.com";
      _this.apiUrl = "https://api.github.com";
      _this.rawUrl = "https://raw.githubusercontent.com";
      _this.extended = false;
      _this.readMe = "README.md";
      _this.branch = "master";
      _this.viewMoreText = "View More";
      _this.notFoundText = "Asset not found";
      _this.headers = {
        cache: "force-cache"
      };
      return _this;
    }
    /*
     * If element is in extended form, fetch repo readme text and repo information
     * If element is not in extended form just fetch the repo information for the smaller card
     */


    babelHelpers.createClass(GithubPreview, [{
      key: "haxAppDetails",
      get: function get() {
        return {
          details: {
            title: "Github",
            icon: "mdi-social:github-circle",
            color: "grey",
            description: "Preview a github repository.",
            status: "available",
            tags: ["developer", "code", "collaboration"]
          },
          connection: {
            protocol: "https",
            url: "api.github.com",
            data: {
              format: "json",
              origin: "*"
            },
            operations: {
              browse: {
                method: "GET",
                endPoint: "search/repositories",
                pagination: {
                  style: "offset"
                },
                search: {
                  q: {
                    title: "Search",
                    type: "string"
                  }
                },
                data: {},
                resultMap: {
                  image: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  defaultGizmoType: "github",
                  items: "items",
                  preview: {
                    title: "name",
                    details: "description",
                    id: "id"
                  },
                  gizmo: {
                    id: "id",
                    repo: "name",
                    org: "owner.login"
                  }
                }
              }
            }
          }
        };
      }
      /**
       * Convention we use
       */

    }, {
      key: "render",
      value: function render() {
        return this.__assetAvailable && this.elementVisible ? this.extended ? (0, _index.html)(_templateObject_67e84810809211edaa2833647dc78c6c || (_templateObject_67e84810809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n            <div class=\"container\">\n              <div class=\"header-container\">\n                <simple-icon-lite icon=\"book\"></simple-icon-lite>\n                <div>\n                  <a\n                    href=\"", "/", "\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    @click=\"", "\"\n                  >\n                    ", "\n                  </a>\n                  /\n                  <a\n                    href=\"", "/", "/", "\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    @click=\"", "\"\n                  >\n                    ", "\n                  </a>\n                </div>\n              </div>\n              <hr />\n              <div>", "</div>\n              <hr />\n              <div class=\"readme-container\">\n                <wc-markdown>\n                  <script type=\"wc-content\">\n                    ", "\n                  </script>\n                </wc-markdown>\n              </div>\n              <div class=\"readme-btn-container\">\n                <button @click=", " class=\"readme-btn\">\n                  ", "\n                </button>\n              </div>\n              <div class=\"stats-container\">\n                <span\n                  class=\"lang-circle\"\n                  part=\"github-preview-lang-circle\"\n                ></span>\n                <div class=\"stats-text\">", "</div>\n                <simple-icon-lite icon=\"star\"></simple-icon-lite>\n                <div class=\"stats-text\">", "</div>\n                <simple-icon-lite icon=\"social:share\"></simple-icon-lite>\n                <div class=\"stats-text\">", "</div>\n              </div>\n            </div>\n          "])), this.url, this.org, this._clickLink, this.org, this.url, this.org, this.repo, this._clickLink, this.repo, this.__description, this.__readmeText, this.readmeViewMoreHandler, this.viewMoreText, this.repoLang, this.__stars, this.__forks) : (0, _index.html)(_templateObject2_67e84810809211edaa2833647dc78c6c || (_templateObject2_67e84810809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n            <a\n              href=\"", "/", "/", "\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              @click=\"", "\"\n            >\n              <div class=\"container\">\n                <div class=\"header-container\">\n                  <simple-icon-lite icon=\"book\"></simple-icon-lite>\n                  <div>", "</div>\n                </div>\n\n                <div class=\"description\">", "</div>\n\n                <div class=\"stats-container\">\n                  <span class=\"lang-circle\"></span>\n                  <div class=\"stats-text\">", "</div>\n                  <simple-icon-lite icon=\"star\"></simple-icon-lite>\n                  <div class=\"stats-text\">", "</div>\n                  <simple-icon-lite icon=\"social:share\"></simple-icon-lite>\n                  <div class=\"stats-text\">", "</div>\n                </div>\n              </div>\n            </a>\n          "])), this.url, this.org, this.repo, this._clickLink, this.repo, this.__description, this.repoLang, this.__stars, this.__forks) : (0, _index.html)(_templateObject3_67e84810809211edaa2833647dc78c6c || (_templateObject3_67e84810809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n          <div class=\"container\">\n            <h1>", "</h1>\n          </div>\n        "])), this.notFoundText);
      }
    }, {
      key: "fetchGithubData",
      value: function fetchGithubData(repo, org, headers, branch, rawUrl, apiUrl, readMe, extended) {
        var _this2 = this;

        if (extended) {
          fetch("".concat(rawUrl, "/").concat(org, "/").concat(repo, "/").concat(branch, "/").concat(readMe), headers).then(function (response) {
            if (response.ok) {
              return response.text();
            }
          }).then(function (responseText) {
            // don't re-render markdown if it's the same text
            if (_this2.__readmeText !== responseText) {
              _this2.__readmeText = responseText; // if we don't have wc-markdown instance yet don't re-render wc-markdown

              if (_this2.wcmarkdown) {
                _this2.wcmarkdown.value = _this2.__readmeText;
              }
            }
          }).catch(function (error) {
            console.error(error);
          });
        }

        fetch("".concat(apiUrl, "/repos/").concat(org, "/").concat(repo)).then(function (response) {
          if (response.ok) {
            return response.json();
          }
        }).then(function (json) {
          _this2.handleResponse(json);
        }).catch(function (error) {
          _this2.__assetAvailable = false;
        });
      }
      /*
       * enables overflow-y property by setting readmeExtended to true
       * removes 'show more' button from the dom
       */

    }, {
      key: "readmeViewMoreHandler",
      value: function readmeViewMoreHandler(event) {
        this.readmeExtended = true;
        this.shadowRoot.querySelector(".readme-btn").remove();
      }
      /*
       * Takes fetched repo information and element properties
       */

    }, {
      key: "handleResponse",
      value: function handleResponse(response) {
        if (response) {
          this.__assetAvailable = true;
          this.__description = response.description;
          this.repoLang = response.language;
          this.__stars = response.stargazers_count;
          this.__forks = response.forks;
        }
      }
    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          editModeChanged: "haxeditModeChanged",
          activeElementChanged: "haxactiveElementChanged",
          gizmoRegistration: "haxgizmoRegistration"
        };
      }
    }, {
      key: "haxgizmoRegistration",
      value: function haxgizmoRegistration(store) {
        store.validGizmoTypes.push("github");

        if (store.appList.filter(function (el, i) {
          // ensure we don't double load the endpoint if already defined
          if (el.connection.url === "api.github.com") {
            return true;
          }

          return false;
        }).length === 0) {
          window.dispatchEvent(new CustomEvent("hax-register-app", {
            bubbles: false,
            composed: false,
            cancelable: false,
            detail: this.haxAppDetails
          }));
        }
      }
    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(element, value) {
        if (value) {
          this._haxstate = value;
        }
      }
    }, {
      key: "haxeditModeChanged",
      value: function haxeditModeChanged(value) {
        this._haxstate = value;
      }
    }, {
      key: "_clickLink",
      value: function _clickLink(event) {
        if (this._haxstate) {
          event.preventDefault();
          event.stopPropagation();
          event.stopImmediatePropagation();
        }
      }
      /**
       * LitElement ready
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(GithubPreview.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(GithubPreview.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        if (!this.repo || !this.org || !this.url) {
          this.__assetAvailable = false;
        }
      }
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          // only make the fetch after we get everything setup
          if (["repo", "org", "headers", "branch", "rawUrl", "apiUrl", "readMe", "extended"].includes(propName) && _this3[propName]) {
            clearTimeout(_this3.__debounce);
            _this3.__debounce = setTimeout(function () {
              _this3.fetchGithubData(_this3.repo, _this3.org, _this3.headers, _this3.branch, _this3.rawUrl, _this3.apiUrl, _this3.readMe, _this3.extended);
            }, 0);
          } // if extended is set them import wc-markdown


          if (_this3.extended && propName === "extended") {
            new Promise(function (res, rej) {
              return _require.default(["./lib/wc-markdown.js"], res, rej);
            });
          } // if visible and extended get wc-markdown element for re-rendering


          if (_this3.elementVisible && _this3.extended && propName === "elementVisible") {
            _this3.wcmarkdown = _this3.shadowRoot.querySelector("div > div.readme-container > wc-markdown");
          }
        });
      }
    }], [{
      key: "properties",
      get: function get() {
        var props = {};

        if (babelHelpers.get(babelHelpers.getPrototypeOf(GithubPreview), "properties", this)) {
          props = babelHelpers.get(babelHelpers.getPrototypeOf(GithubPreview), "properties", this);
        }

        return _objectSpread(_objectSpread({}, props), {}, {
          // The target repository
          repo: {
            type: String
          },
          // The target github organization or user
          org: {
            type: String
          },
          // data from the github api, short summary of the repository
          __description: {
            type: String
          },
          // The most used language in the repository, this gets fetched from the github api
          repoLang: {
            type: String,
            attribute: "repo-lang",
            reflect: true
          },
          // amount of stars a repository has, this is fetched from the github api
          __stars: {
            type: Number
          },
          // amount of forks a repository has, this is fetched from the github api
          __forks: {
            type: Number
          },
          // used for error handling in api calls
          __assetAvailable: {
            type: Boolean
          },
          // allows for an extended card that previews the repository readme
          extended: {
            type: Boolean,
            reflect: true
          },
          // used for enabling a scrollable readme
          readmeExtended: {
            type: Boolean,
            attribute: "readme-extended",
            reflect: true
          },
          // headers for advanced cache handling to reduce calls to the API
          headers: {
            type: Object
          },
          viewMoreText: {
            type: String,
            attribute: "view-more-text"
          },
          notFoundText: {
            type: String,
            attribute: "not-found-text"
          },
          // raw readme text from github api
          __readmeText: {
            type: String
          },
          branch: {
            type: String
          },
          url: {
            type: String
          },
          apiUrl: {
            type: String,
            attribute: "api-url"
          },
          rawUrl: {
            type: String,
            attribute: "raw-url"
          },
          readMe: {
            type: String,
            attribute: "read-me"
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject4_67e84810809211edaa2833647dc78c6c || (_templateObject4_67e84810809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        :host([repo-lang=\"JavaScript\"]) .lang-circle {\n          background-color: #f1e05a;\n        }\n\n        :host([repo-lang=\"C\"]) .lang-circle {\n          background-color: #555555;\n        }\n\n        :host([repo-lang=\"C#\"]) .lang-circle {\n          background-color: #178600;\n        }\n\n        :host([repo-lang=\"C++\"]) .lang-circle {\n          background-color: #f34b7d;\n        }\n\n        :host([repo-lang=\"CSS\"]) .lang-circle {\n          background-color: #563d7c;\n        }\n\n        :host([repo-lang=\"Dart\"]) .lang-circle {\n          background-color: #00b4ab;\n        }\n\n        :host([repo-lang=\"Go\"]) .lang-circle {\n          background-color: #00add8;\n        }\n\n        :host([repo-lang=\"Java\"]) .lang-circle {\n          background-color: #b07219;\n        }\n\n        :host([repo-lang=\"Kotlin\"]) .lang-circle {\n          background-color: #f18e33;\n        }\n\n        :host([repo-lang=\"Markdown\"]) .lang-circle {\n          background-color: #083fa1;\n        }\n\n        :host([repo-lang=\"Python\"]) .lang-circle {\n          background-color: #3572a5;\n        }\n\n        :host([repo-lang=\"Sass\"]) .lang-circle {\n          background-color: #a53b70;\n        }\n\n        :host([repo-lang=\"Scala\"]) .lang-circle {\n          background-color: #c22d40;\n        }\n\n        :host([repo-lang=\"SCSS\"]) .lang-circle {\n          background-color: #c6538c;\n        }\n\n        :host([repo-lang=\"Rust\"]) .lang-circle {\n          background-color: #dea584;\n        }\n\n        :host([repo-lang=\"Swift\"]) .lang-circle {\n          background-color: #ffac45;\n        }\n\n        :host([repo-lang=\"TypeScript\"]) .lang-circle {\n          background-color: #2b7489;\n        }\n\n        :host([repo-lang=\"Vue\"]) .lang-circle {\n          background-color: #2c3e50;\n        }\n\n        :host([repo-lang=\"PHP\"]) .lang-circle {\n          background-color: #4f5d95;\n        }\n\n        :host([repo-lang=\"HTML\"]) .lang-circle {\n          background-color: #e34c26;\n        }\n\n        :host([repo-lang=\"Lua\"]) .lang-circle {\n          background-color: #000080;\n        }\n\n        a {\n          display: inline-flex;\n          text-decoration: none;\n          color: var(--github-preview-link-text-color, white);\n        }\n\n        :host([extended]) .container {\n          width: var(--github-preview-container-width, 800px);\n          padding: var(--github-preview-container-padding, 10px);\n        }\n\n        .container {\n          background-color: var(--github-preview-bg-color, black);\n          border-radius: var(--github-preview-container-border-radius, 10px);\n          width: var(--github-preview-container-width, 400px);\n          padding: var(--github-preview-container-padding, 5px);\n        }\n\n        @media screen and (max-width: 400px) {\n          .container {\n            width: var(--github-preview-container-width, 350px);\n          }\n        }\n\n        .header-container {\n          display: flex;\n          align-items: center;\n        }\n\n        .header-container div {\n          margin-left: 10px;\n          font-size: var(--github-preview-header-font-size, 22px);\n          font-weight: bold;\n        }\n\n        .header-container div a:hover {\n          font-size: var(--github-preview-header-hover-font-size, 24px);\n        }\n\n        .stats-container {\n          display: flex;\n          align-items: center;\n        }\n\n        .lang-circle {\n          height: 15px;\n          width: 15px;\n          background-color: grey;\n          border-radius: 50%;\n          margin: 0px 5px 0px 5px;\n        }\n\n        div {\n          color: var(--github-preview-div-text-color, white);\n        }\n\n        .description {\n          padding: 8px 0px 8px 0px;\n        }\n\n        .stats-text {\n          margin: 0px 5px 0px 5px;\n        }\n\n        :host([readme-extended]) .readme-container {\n          overflow-y: scroll;\n        }\n\n        .readme-container {\n          overflow-y: hidden;\n          overflow-x: hidden;\n          max-height: var(--github-preview-readme-container-max-height, 300px);\n        }\n\n        .readme-btn {\n          display: inline-block;\n          padding: 0.3em 2em;\n          border-radius: 2em;\n          box-sizing: border-box;\n          text-align: center;\n        }\n\n        .readme-btn-container {\n          display: flex;\n          justify-content: center;\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: true,
          gizmo: {
            title: "Github Preview",
            description: "Accessible figure with long description",
            icon: "mdi-social:github-circle",
            color: "grey",
            groups: ["developer", "code"],
            handles: [{
              type: "github",
              type_exclusive: true,
              repo: "repo",
              org: "org"
            }],
            meta: {
              author: "collinkleest",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "org",
              title: "Organization",
              description: "Github organization machine name",
              inputMethod: "textfield"
            }, {
              property: "repo",
              title: "Repository",
              description: "Repo machine name",
              inputMethod: "textfield"
            }, {
              property: "extended",
              title: "Extended View",
              description: "Includes readme in element",
              inputMethod: "boolean"
            }],
            advanced: []
          },
          demoSchema: [{
            tag: "github-preview",
            properties: {
              org: "elmsln",
              repo: "lrnwebcomponents"
            },
            content: ""
          }]
        };
      }
    }, {
      key: "tag",
      get: function get() {
        return "github-preview";
      }
    }]);
    return GithubPreview;
  }((0, _IntersectionObserverMixin.IntersectionObserverMixin)(_index.LitElement));

  _exports.GithubPreview = GithubPreview;
  customElements.define(GithubPreview.tag, GithubPreview);
});