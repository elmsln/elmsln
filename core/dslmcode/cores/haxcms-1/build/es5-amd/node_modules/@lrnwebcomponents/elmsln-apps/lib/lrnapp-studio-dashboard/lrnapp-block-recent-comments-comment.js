define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/legacy/class.js", "../../../../@polymer/iron-resizable-behavior/iron-resizable-behavior.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../lrndesign-avatar/lrndesign-avatar.js"], function (_exports, _polymerElement, _class, _ironResizableBehavior, _domIf, _lrndesignAvatar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappBlockRecentCommentsComment = void 0;

  var _templateObject_eaed55408e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappBlockRecentCommentsComment = /*#__PURE__*/function (_mixinBehaviors) {
    babelHelpers.inherits(LrnappBlockRecentCommentsComment, _mixinBehaviors);

    var _super = _createSuper(LrnappBlockRecentCommentsComment);

    function LrnappBlockRecentCommentsComment() {
      babelHelpers.classCallCheck(this, LrnappBlockRecentCommentsComment);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappBlockRecentCommentsComment, [{
      key: "onHeightChange",
      value: function onHeightChange() {
        var height = this.$.comment.offsetHeight;

        if (height > 80) {
          this.$.btn.classList.toggle("hidden", this.hidden);
        }
      }
    }, {
      key: "connectedCallback",
      value:
      /**
       * attached life cycle
       */
      function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappBlockRecentCommentsComment.prototype), "connectedCallback", this).call(this);
        this.$.wrapper.addEventListener("click", function (e) {
          this.$.comment.classList.toggle("inactive", this.inactive);
        });
        this.addEventListener("iron-resize", this.onHeightChange.bind(this));
      }
      /**
       * detached life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.$.wrapper.removeEventListener("click", function (e) {
          this.$.comment.classList.toggle("inactive", this.inactive);
        });
        this.removeEventListener("iron-resize", this.onHeightChange.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappBlockRecentCommentsComment.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_eaed55408e0011ed99ce491205e67b1d || (_templateObject_eaed55408e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        button {\n          background-color: #eeeeee;\n          margin: 1em;\n        }\n\n        .card-content {\n          padding-left: 2em;\n          padding-right: 2em;\n          width: 100%;\n        }\n\n        .card-actions {\n          width: 100%;\n        }\n\n        .card-actions button {\n          display: block;\n        }\n\n        lrndesign-avatar {\n          float: left;\n          margin-right: 1em;\n        }\n\n        .flex-wrap {\n          @apply --layout-horizontal;\n          @apply --layout-wrap;\n        }\n\n        .inactive {\n          max-height: 4.6em;\n          overflow: hidden;\n        }\n\n        button {\n          width: 100%;\n          display: flex;\n        }\n\n        .hidden {\n          display: none;\n        }\n        .linkbtn,\n        .linkbtn button {\n          text-decoration: none;\n          font-size: 16px;\n          font-weight: bold;\n          text-align: center;\n          cursor: pointer;\n        }\n        .linkbtn {\n          display: flex;\n          width: 100%;\n        }\n        .linkbtn button:hover,\n        .linkbtn button:active,\n        .linkbtn button:focus,\n        .linkbtn:hover,\n        .linkbtn:active,\n        .linkbtn:focus {\n          background-color: #eeeeee;\n        }\n      </style>\n      <div class=\"card flex-wrap\">\n        <a href$=\"[[actionView]]\" tabindex=\"-1\" class=\"linkbtn\">\n          <button id=\"view\">\n            <div class=\"card-content\">\n              <lrndesign-avatar\n                label=\"[[commentUser.name]]\"\n                src=\"[[commentUser.avatar]]\"\n              ></lrndesign-avatar>\n              <h3>[[commentUser.display_name]]</h3>\n              <div id=\"wrapper\" class=\"button-wrapper\">\n                <div id=\"comment\" class=\"inactive\"><slot></slot></div>\n              </div>\n            </div>\n          </button>\n        </a>\n      </div>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-block-recent-comments-comment";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },
          commentTitle: {
            type: String,
            value: "Comment title",
            reflectToAttribute: true,
            notify: true
          },
          actionView: {
            type: String,
            reflectToAttribute: true,
            notify: true
          },
          dateUpdated: {
            type: String,
            reflectToAttribute: true,
            notify: true
          },
          commentUser: {
            type: Object,
            value: {},
            reflectToAttribute: true,
            notify: true
          }
        };
      }
    }]);
    return LrnappBlockRecentCommentsComment;
  }((0, _class.mixinBehaviors)([_ironResizableBehavior.IronResizableBehavior], _polymerElement.PolymerElement));

  _exports.LrnappBlockRecentCommentsComment = LrnappBlockRecentCommentsComment;
  customElements.define(LrnappBlockRecentCommentsComment.tag, LrnappBlockRecentCommentsComment);
});