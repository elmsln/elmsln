define(["exports", "../../../lit/index.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../lrndesign-avatar/lrndesign-avatar.js"], function (_exports, _index, _simpleIconLite, _simpleIcons, _lrndesignAvatar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.NavCardItem = void 0;

  var _templateObject_a3ede1d0809211edaa2833647dc78c6c, _templateObject2_a3ede1d0809211edaa2833647dc78c6c, _templateObject3_a3ede1d0809211edaa2833647dc78c6c, _templateObject4_a3ede1d0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `nav-card-item`
   * links fr the nav card
  ### Styling
  
  `<nav-card-item>` provides the following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--nav-card-item-background-color` | item's default background-color | unset
  `--nav-card-item-color` | item's default teext color | unset
  `--nav-card-item-label-font-weight` | item's default font-weight | bold
  `--nav-card-linklist-border-bottom` | item's border-bottom | 1px solid var(--simple-colors-default-theme-grey-4)
  `--nav-card-item-label-font-size` | item's default font-size | inherit
  `--nav-card-item-label-font-weight` | item's default font-weight | bold
  `--nav-card-item-label-font-size` | item description's default font-weight | 11px
  `--nav-card-item-label-font-weight` | item description's default font-wight | normal
  `--nav-card-item-avatar-size` | default size for item's avatar | 36px
  `--nav-card-item-avatar-width` | default width for item's avatar | --nav-card-item-avatar-size
  `--nav-card-item-avatar-height` | default height for item's avatar | --nav-card-item-avatar-size
  `--nav-card-item-icon-size` | default size for item's icon | 24px
  `--nav-card-item-icon-width` | default width for item's icon | --nav-card-item-icon-size
  `--nav-card-item-icon-height` | default height for item's icon | --nav-card-item-icon-size
   *
   * @customElement nav-card-item
   * @lit-html
   * @lit-element
   * @demo demo/index.html
   */
  var NavCardItem = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(NavCardItem, _LitElement);

    var _super = _createSuper(NavCardItem);

    // life cycle
    function NavCardItem() {
      var _this;

      babelHelpers.classCallCheck(this, NavCardItem);
      _this = _super.call(this);
      _this.tag = NavCardItem.tag;
      _this.accentColor = "grey";
      _this.allowGrey = false;
      _this.dark = false;
      _this.invert = false;
      return _this;
    }
    /**
     * gets the avatar icon
     *
     * @readonly
     * @memberof NavCardItem
     */


    babelHelpers.createClass(NavCardItem, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_a3ede1d0809211edaa2833647dc78c6c || (_templateObject_a3ede1d0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      ", "\n      <div>\n        <slot name=\"label\"></slot>\n        <slot name=\"description\"></slot>\n      </div>\n      ", "\n    "])), !this.avatar && !this.initials ? "" : (0, _index.html)(_templateObject2_a3ede1d0809211edaa2833647dc78c6c || (_templateObject2_a3ede1d0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n            <lrndesign-avatar\n              .accentColor=\"", "\"\n              ?allow-grey=\"", "\"\n              ?dark=\"", "\"\n              .icon=\"", "\"\n              ?invert=\"", "\"\n              .src=\"", "\"\n              .label=\"", "\"\n              ?two-chars=\"", "\"\n            >\n            </lrndesign-avatar>\n          "])), this.accentColor || "", this.allowGrey, this.dark, this.ico, this.invert, this.src, this.label, this.twoChars), !this.icon ? "" : (0, _index.html)(_templateObject3_a3ede1d0809211edaa2833647dc78c6c || (_templateObject3_a3ede1d0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <simple-icon-lite icon=\"", "\"></simple-icon-lite> "])), this.icon));
      }
    }, {
      key: "twoChars",
      get: function get() {
        return this.label && this.label.split(/\s*/).length > 1;
      }
      /**
       * gets the avatar icon
       *
       * @readonly
       * @memberof NavCardItem
       */

    }, {
      key: "label",
      get: function get() {
        var parts = this.initials && this.initials.split(" ");
        return parts && parts[0] ? "".concat(parts[0][0], " ").concat(parts[1] ? parts[1][0] : parts[0][1] || "", "}") : this.initials;
      }
      /**
       * gets the avatar icon
       *
       * @readonly
       * @memberof NavCardItem
       */

    }, {
      key: "ico",
      get: function get() {
        return this.avatar && !this._validURL(this.avatar) ? this.avatar : "";
      }
      /**
       * gets the avatar src
       *
       * @readonly
       * @memberof NavCardItem
       */

    }, {
      key: "src",
      get: function get() {
        return this.avatar && this._validURL(this.avatar) ? this.avatar : "";
      }
      /**
       * determines if avatar is an image or an icon
       * See https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url
       *
       * @param {string} str
       * @returns {boolean}
       * @memberof NavCardItem
       */

    }, {
      key: "_validURL",
      value: function _validURL(str) {
        console.log();
        var pattern = new RegExp("^((https?:)?\\/\\/)?" + // protocol
        "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // domain name
        "((\\d{1,3}\\.){3}\\d{1,3}))" + // OR ip (v4) address
        "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // port and path
        "(\\?[;&a-z\\d%_.~+=-]*)?" + // query string
        "(data:image)?" + // base64 image
        "(\\#[-a-z\\d_]*)?$", "i"); // fragment locator

        return !!pattern.test(str);
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      function get() {
        return "nav-card-item";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * optional accent-color for avatar
           */
          accentColor: {
            type: String,
            attribute: "accent-color"
          },

          /**
           * allow grey instead of accent color, default selects a color
           */
          allowGrey: {
            type: Boolean,
            attribute: "allow-grey"
          },

          /**
           * optional simple-icon or image URI as avatar on left of link
           */
          avatar: {
            type: String,
            attribute: "avatar"
          },

          /**
           * optional dark text for avatar icon
           */
          dark: {
            type: Boolean,
            attribute: "dark"
          },

          /**
           * simple-icon on right of link
           */
          icon: {
            type: String,
            attribute: "icon"
          },

          /**
           * optional use up to two initials if no avatar
           */
          initials: {
            type: String,
            attribute: "initials"
          },

          /**
           * invert icon coloring
           */
          invert: {
            type: Boolean,
            attribute: "invert"
          }
        };
      } // haxProperty definition

    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Nav card",
            description: "an accent card of link lists",
            icon: "av:playlist-play",
            color: "pink",
            groups: ["Card", "Nav", "List"],
            handles: [],
            meta: {
              author: "HAXTheWeb core team",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "accentColor",
              title: "Accent Color",
              description: "Select an accent color.",
              inputMethod: "colorpicker",
              required: false
            }, {
              property: "dark",
              title: "Dark",
              description: "Display the card as dark theme?",
              inputMethod: "boolean",
              required: false
            }, {
              property: "icon",
              title: "Icon",
              description: "Select an icon.",
              inputMethod: "iconpicker",
              required: false
            }, {
              property: "initials",
              title: "Initials",
              description: "Initials to display if there is no icon.",
              inputMethod: "textfield",
              required: false
            }, {
              property: "avatar",
              title: "Avatar Image",
              description: "Select an image",
              inputMethod: "haxupload",
              required: false
            }, {
              slot: "label",
              title: "Button or Link",
              inputMethod: "code-editor",
              required: false
            }, {
              slot: "description",
              title: "Additional description",
              inputMethod: "code-editor",
              required: false
            }],
            advanced: [{
              property: "allowGrey",
              title: "Allow Grey",
              description: "Allows grey if set. Otherwise a color will be assigned.",
              inputMethod: "boolean"
            }, {
              property: "avatar",
              title: "Avatar Icon",
              description: "Select an icon.",
              inputMethod: "iconpicker",
              required: false
            }, {
              property: "invert",
              title: "Invert",
              description: "Inverts icon coloring.",
              inputMethod: "boolean"
            }]
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject4_a3ede1d0809211edaa2833647dc78c6c || (_templateObject4_a3ede1d0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          position: relative;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          text-decoration: none;\n          padding: 5px 0;\n          margin-bottom: 1px;\n          color: var(--nav-card-item-color, unset);\n          background-color: var(--nav-card-item-background-color, unset);\n          border-bottom: var(\n            --nav-card-linklist-border-bottom,\n            1px solid var(--simple-colors-default-theme-grey-4, #666)\n          );\n        }\n        :host(:last-of-type) {\n          border-bottom: none;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host div {\n          flex: 1 1 auto;\n        }\n        ::slotted([slot=\"label\"]:hover),\n        ::slotted([slot=\"label\"]:focus),\n        :host(:hover) ::slotted([slot=\"label\"]),\n        :host(:focus-within) ::slotted([slot=\"label\"]) {\n          text-decoration: underline;\n        }\n        ::slotted(*) {\n          display: block;\n        }\n        ::slotted([slot=\"label\"]),\n        ::slotted([slot=\"description\"]) {\n          color: inherit;\n          font-family: inherit;\n        }\n        ::slotted([slot=\"label\"]) {\n          text-decoration: inherit;\n          outline: none;\n          border: none;\n          padding: 0;\n          text-align: left;\n          color: var(--nav-card-item-color, unset);\n          background-color: var(--nav-card-item-background-color, unset);\n          font-size: var(--nav-card-item-label-font-size, inherit);\n          font-weight: var(--nav-card-item-label-font-weight, bold);\n        }\n        ::slotted([slot=\"description\"]) {\n          font-size: var(--nav-card-item-label-font-size, 11px);\n          font-weight: var(--nav-card-item-label-font-weight, normal);\n        }\n        ::slotted([slot=\"label\"]):after {\n          content: \"\";\n          position: absolute;\n          left: 0;\n          top: 0;\n          right: 0;\n          bottom: 0;\n        }\n        ::slotted([slot=\"label\"]:focus):after {\n          outline: 1px solid blue;\n        }\n        lrndesign-avatar {\n          margin-right: 10px;\n          --lrndesign-avatar-width: var(\n            --nav-card-item-avatar-width,\n            var(--nav-card-item-avatar-size, 36px)\n          );\n          --lrndesign-avatar-height: var(\n            --nav-card-item-avatar-height,\n            var(--nav-card-item-avatar-size, 36px)\n          );\n          --lrndesign-avatar-border-radius: var(\n            --nav-card-item-avatar-border-radius,\n            50%\n          );\n        }\n        simple-icon-lite {\n          margin-left: 10px;\n          --simple-icon-width: var(\n            --nav-card-item-icon-width,\n            var(--nav-card-item-icon-size, 24px)\n          );\n          --simple-icon-height: var(\n            --nav-card-item-icon-height,\n            var(--nav-card-item-icon-size, 24px)\n          );\n        }\n      "])))];
      }
    }]);
    return NavCardItem;
  }(_index.LitElement);

  _exports.NavCardItem = NavCardItem;
  customElements.define("nav-card-item", NavCardItem);
});