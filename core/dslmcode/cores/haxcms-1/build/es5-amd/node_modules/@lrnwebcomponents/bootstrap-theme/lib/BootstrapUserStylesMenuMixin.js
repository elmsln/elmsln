define(["exports", "meta", "require", "../../../lit/index.js", "../../utils/utils.js"], function (_exports, meta, _require, _index, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.BootstrapUserStylesMenuMixin = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);

  var _templateObject_d480abe08e0011ed99ce491205e67b1d, _templateObject2_d480abe08e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var BootstrapUserStylesMenuMixin = function BootstrapUserStylesMenuMixin(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.hideUserStylesMenu = true;
        _this.fontSize = 1;
        _this.fontFamily = 0;
        _this.colorTheme = "0";

        var basePath = _this.getBasePath(decodeURIComponent(meta.url));

        _this._bootstrapPath = basePath + "bootstrap/dist/css/bootstrap.min.css";

        _this.addEventListener("click", _this.checkUserStylesMenuOpen.bind(babelHelpers.assertThisInitialized(_this)));

        return _this;
      }

      babelHelpers.createClass(_class, [{
        key: "BootstrapUserStylesMenu",
        value: function BootstrapUserStylesMenu() {
          new Promise(function (res, rej) {
            return _require.default(["../../simple-icon/simple-icon.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../simple-icon/lib/simple-icons.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../simple-icon/lib/simple-icon-button-lite.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../simple-popover/simple-popover.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../simple-tooltip/simple-tooltip.js"], res, rej);
          });
          return (0, _index.html)(_templateObject_d480abe08e0011ed99ce491205e67b1d || (_templateObject_d480abe08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        <link rel=\"stylesheet\" href=\"", "\" />\n        <simple-icon-button-lite\n          .part=\"", "\"\n          class=\"btn\"\n          aria-label=\"Text settings\"\n          icon=\"editor:format-size\"\n          @click=\"", "\"\n          id=\"haxcmsuserstylesmenupopover\"\n        ></simple-icon-button-lite>\n        <simple-tooltip for=\"haxcmsuserstylesmenupopover\">\n          Text settings\n        </simple-tooltip>\n        <simple-popover\n          class=\"hcusm pull-left font-settings js-toolbar-action hcusm-settings-container\"\n          ?hidden=\"", "\"\n          id=\"haxcmsuserstylesmenu\"\n          auto\n        >\n          <div class=\"open\">\n            <div class=\"hcusm-caret\">\n              <span class=\"hcusm-caret-outer\"></span>\n              <span class=\"hcusm-caret-inner\"></span>\n            </div>\n            <div class=\"btn-group-title\">Font Size</div>\n            <div class=\"btn-group\" role=\"group\">\n              <button class=\"btn btn-size\" @click=\"", "\">\n                A\n              </button>\n              <button\n                class=\"btn btn-size size-2\"\n                @click=\"", "\"\n              >\n                A\n              </button>\n            </div>\n            <div class=\"btn-group-title\">Font Family</div>\n            <div class=\"btn-group\" role=\"group\">\n              <button\n                class=\"btn btn-font\"\n                data-font=\"0\"\n                @click=\"", "\"\n              >\n                Sans\n              </button>\n              <button\n                class=\"btn btn-font\"\n                data-font=\"1\"\n                @click=\"", "\"\n              >\n                Monospace\n              </button>\n            </div>\n            <div class=\"btn-group-title\">Theme Color</div>\n            <div class=\"btn-group\">\n              <button\n                class=\"btn btn-light\"\n                data-theme=\"0\"\n                @click=\"", "\"\n              >\n                Light\n              </button>\n              <button\n                class=\"btn btn-palenight\"\n                data-theme=\"2\"\n                @click=\"", "\"\n              >\n                Palenight\n              </button>\n              <button\n                class=\"btn btn-dark\"\n                data-theme=\"1\"\n                @click=\"", "\"\n              >\n                Dark\n              </button>\n            </div>\n          </div>\n        </simple-popover>\n      "])), this._bootstrapPath, this.editMode ? "edit-mode-active" : "", this.toggleUserStylesMenu, this.hideUserStylesMenu, this.UserStylesSizeDown, this.UserStylesSizeUp, this.UserStylesFontFamilyChange, this.UserStylesFontFamilyChange, this.UserStylesColorThemeChange, this.UserStylesColorThemeChange, this.UserStylesColorThemeChange);
        }
      }, {
        key: "checkUserStylesMenuOpen",
        value: function checkUserStylesMenuOpen(e) {
          var target = (0, _utils.normalizeEventPath)(e);

          if (!this.hideUserStylesMenu && !target.includes(this.toggleUserStylesMenuTarget) && !target.includes(this.shadowRoot.querySelector("#haxcmsuserstylesmenu")) && target.tagName !== "BUTTON") {
            this.hideUserStylesMenu = true;
          }
        }
      }, {
        key: "updated",
        value: function updated(changedProperties) {
          var _this2 = this;

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this).call(this, changedProperties);
          }

          changedProperties.forEach(function (oldValue, propName) {
            if (propName == "editMode" && _this2[propName]) {
              // edit mode has been activated
              _this2.hideUserStylesMenu = true;
            }
          });
        }
        /**
         * life cycle, element is afixed to the DOM
         */

      }, {
        key: "firstUpdated",
        value: function firstUpdated(changedProperties) {
          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this).call(this, changedProperties);
          }

          this.toggleUserStylesMenuTarget = this.shadowRoot.querySelector("#haxcmsuserstylesmenupopover"); // hook up the pop over menu

          this.shadowRoot.querySelector("#haxcmsuserstylesmenu").target = this.toggleUserStylesMenuTarget;
        }
      }, {
        key: "toggleUserStylesMenu",
        value: function toggleUserStylesMenu(e) {
          this.hideUserStylesMenu = !this.hideUserStylesMenu;
        }
      }, {
        key: "UserStylesSizeDown",
        value: function UserStylesSizeDown(e) {
          if (this.fontSize > 0) {
            this.fontSize = this.fontSize - 1;
          }
        }
      }, {
        key: "UserStylesSizeUp",
        value: function UserStylesSizeUp(e) {
          if (this.fontSize < 4) {
            this.fontSize = this.fontSize + 1;
          }
        }
      }, {
        key: "UserStylesFontFamilyChange",
        value: function UserStylesFontFamilyChange(e) {
          var target = (0, _utils.normalizeEventPath)(e)[0];
          this.fontFamily = parseInt(target.getAttribute("data-font"));
        }
      }, {
        key: "UserStylesColorThemeChange",
        value: function UserStylesColorThemeChange(e) {
          var target = (0, _utils.normalizeEventPath)(e)[0];
          this.colorTheme = parseInt(target.getAttribute("data-theme"));
        }
      }], [{
        key: "styles",
        get: function get() {
          var styles = [];

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class), "styles", this)) {
            styles = babelHelpers.get(babelHelpers.getPrototypeOf(_class), "styles", this);
          }

          return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject2_d480abe08e0011ed99ce491205e67b1d || (_templateObject2_d480abe08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          /* bootstrap defaults */\n          :host([font-family=\"0\"]) {\n            font-family: var(--font-family-sans-serif);\n          }\n          :host([font-family=\"1\"]) {\n            font-family: var(--font-family-monospace);\n          }\n          :host([font-size=\"0\"]) {\n            --haxcms-base-styles-body-font-size: 1.2rem;\n            --hax-base-styles-p-font-size: 1.2rem;\n            --hax-base-styles-list-font-size: 1.2rem;\n            --hax-base-styles-a-font-size: 1.2rem;\n            --hax-base-styles-h1-font-size: 2.2rem;\n            --hax-base-styles-h2-font-size: 2rem;\n            --hax-base-styles-h3-font-size: 1.8rem;\n            --hax-base-styles-h4-font-size: 1.6rem;\n            --hax-base-styles-h5-font-size: 1.4rem;\n            --hax-base-styles-h6-font-size: 1.2rem;\n          }\n          :host([font-size=\"1\"]) {\n            --haxcms-base-styles-body-font-size: 1.4rem;\n            --hax-base-styles-p-font-size: 1.4rem;\n            --hax-base-styles-list-font-size: 1.4rem;\n            --hax-base-styles-a-font-size: 1.4rem;\n            --hax-base-styles-h1-font-size: 2.4rem;\n            --hax-base-styles-h2-font-size: 2.2rem;\n            --hax-base-styles-h3-font-size: 2rem;\n            --hax-base-styles-h4-font-size: 1.8rem;\n            --hax-base-styles-h5-font-size: 1.6rem;\n            --hax-base-styles-h6-font-size: 1.4rem;\n          }\n          :host([font-size=\"2\"]) {\n            --haxcms-base-styles-body-font-size: 1.6rem;\n            --hax-base-styles-p-font-size: 1.6rem;\n            --hax-base-styles-list-font-size: 1.6rem;\n            --hax-base-styles-a-font-size: 1.6rem;\n            --hax-base-styles-h1-font-size: 2.6rem;\n            --hax-base-styles-h2-font-size: 2.4rem;\n            --hax-base-styles-h3-font-size: 2.2rem;\n            --hax-base-styles-h4-font-size: 2rem;\n            --hax-base-styles-h5-font-size: 1.8rem;\n            --hax-base-styles-h6-font-size: 1.6rem;\n          }\n          :host([font-size=\"3\"]) {\n            --haxcms-base-styles-body-font-size: 1.8rem;\n            --hax-base-styles-p-font-size: 1.8rem;\n            --hax-base-styles-list-font-size: 1.8rem;\n            --hax-base-styles-a-font-size: 1.8rem;\n            --hax-base-styles-h1-font-size: 2.8rem;\n            --hax-base-styles-h2-font-size: 2.6rem;\n            --hax-base-styles-h3-font-size: 2.4rem;\n            --hax-base-styles-h4-font-size: 2.2rem;\n            --hax-base-styles-h5-font-size: 2rem;\n            --hax-base-styles-h6-font-size: 1.8rem;\n          }\n          :host([font-size=\"4\"]) {\n            --haxcms-base-styles-body-font-size: 2rem;\n            --hax-base-styles-p-font-size: 2rem;\n            --hax-base-styles-list-font-size: 2rem;\n            --hax-base-styles-a-font-size: 2rem;\n            --hax-base-styles-h1-font-size: 3rem;\n            --hax-base-styles-h2-font-size: 2.8rem;\n            --hax-base-styles-h3-font-size: 2.6rem;\n            --hax-base-styles-h4-font-size: 2.4rem;\n            --hax-base-styles-h5-font-size: 2.2rem;\n            --hax-base-styles-h6-font-size: 2rem;\n          }\n          :host([color-theme=\"0\"]) {\n            --haxcms-user-styles-color-theme-color-color: #000000;\n            --haxcms-user-styles-color-theme-color-background: #ffffff;\n            --haxcms-user-styles-color-theme-color-1: #252737;\n            --haxcms-user-styles-color-theme-color-2: #f5f5f5;\n            --haxcms-user-styles-color-theme-color-3: #f5f5f5;\n            --haxcms-user-styles-color-theme-color-4: var(\n              --simple-colors-default-theme-blue-8,\n              #4183c4\n            );\n            --hax-base-styles-a-color-visited: var(\n              --simple-colors-default-theme-blue-7,\n              #4183c4\n            );\n            --hax-base-styles-a-color: var(\n              --simple-colors-default-theme-blue-7,\n              #4183c4\n            );\n            --hax-base-styles-a-color-active: #000000;\n          }\n\n          :host([color-theme=\"0\"]) .hcusm {\n            border-color: #222222;\n          }\n          :host([color-theme=\"0\"]) .hcusm simple-popover {\n            --simple-popover-color: #222222;\n            --simple-popover-background-color: #fafafa;\n          }\n          #slot ::slotted(*) {\n            font-size: var(--haxcms-base-styles-body-font-size, 1em);\n            color: var(--haxcms-user-styles-color-theme-color-color);\n          }\n          simple-icon-button-lite:not(:defined),\n          simple-popover:not(:defined) {\n            display: none;\n          }\n          simple-popover {\n            padding: 2px;\n          }\n\n          .hcusm.open {\n            display: block;\n          }\n          .hcusm {\n            min-width: 160px;\n            padding: 0;\n            margin: 2px 0 0;\n            list-style: none;\n            font-size: 14px;\n            background-color: transparent;\n          }\n\n          .hcusm button,\n          .hcusm select {\n            text-transform: none;\n          }\n          .hcusm button,\n          .hcusm input {\n            line-height: normal;\n          }\n          .hcusm button,\n          .hcusm input,\n          .hcusm select,\n          .hcusm textarea {\n            font-family: inherit;\n            font-size: 100%;\n            margin: 0;\n          }\n\n          .hcusm-settings-container[hidden] {\n            display: none;\n          }\n\n          /*\n          * Light Theme\n          */\n          .btn-size,\n          .btn-font {\n            background-color: var(\n              --bootstrap-theme-light-secondary-background-color\n            );\n            color: var(--bootstrap-theme-light-color);\n          }\n\n          .btn-size.size-2 {\n            font-size: 16px;\n          }\n\n          /*\n          * Dark Theme\n          */\n\n          :host([color-theme=\"1\"]) {\n            --haxcms-user-styles-color-theme-color-color: #ffffff;\n            --haxcms-user-styles-color-theme-color-background: #343a40;\n            --haxcms-user-styles-color-theme-color-1: #ffffff;\n            --haxcms-user-styles-color-theme-color-2: #343a40;\n            --haxcms-user-styles-color-theme-color-3: #1c1c1c;\n            --haxcms-user-styles-color-theme-color-4: #eee8e0;\n            --hax-base-styles-a-color-visited: #551a8b;\n            --hax-base-styles-a-color: #704214;\n            --hax-base-styles-a-color-active: #000000;\n          }\n\n          :host([color-theme=\"1\"]) .hcusm {\n            border-color: #222222;\n          }\n\n          :host([color-theme=\"1\"])\n            .btn-group\n            .btn[type=\"size\"]\n            .btn[type=\"font\"] {\n            background-color: var(\n              --bootstrap-theme-light-secondary-background-color\n            );\n            color: var(--bootstrap-theme-dark-color) !important;\n          }\n\n          :host([color-theme=\"1\"]) simple-popover {\n            --simple-popover-color: white;\n            --simple-popover-background-color: var(\n              --bootstrap-theme-dark-secondary-background-color\n            );\n          }\n          :host([color-theme=\"1\"]) .hcusm .dropdown-caret .caret-inner {\n            border-bottom: 9px solid\n              var(--bootstrap-dark-theme-secondary-background-color);\n          }\n          :host([color-theme=\"1\"]) .hcusm .hcusm-buttons {\n            border-color: #7e888b;\n          }\n          :host([color-theme=\"1\"]) .hcusm .hcusm-button {\n            color: white;\n          }\n          :host([color-theme=\"1\"]) .hcusm .hcusm-button:hover,\n          :host([color-theme=\"1\"]) .hcusm .hcusm-button:focus,\n          :host([color-theme=\"1\"]) .hcusm .hcusm-button:active {\n            color: #eee8e0;\n          }\n\n          /* palenight theme */\n          :host([color-theme=\"2\"]) {\n            --haxcms-user-styles-color-theme-color-color: var(\n              --simple-colors-default-theme-light-blue-1,\n              #cfd4e3\n            );\n            --haxcms-user-styles-color-theme-color-background: #1c1f2b;\n            --haxcms-user-styles-color-theme-color-1: #a6a6a6;\n            --haxcms-user-styles-color-theme-color-2: #252737;\n            --haxcms-user-styles-color-theme-color-3: #252737;\n            --haxcms-user-styles-color-theme-color-4: #f4f4f5;\n            --hax-base-styles-a-color-visited: var(\n              --simple-colors-default-theme-light-blue-2,\n              #3eb1d0\n            );\n            --hax-base-styles-a-color: var(\n              --simple-colors-default-theme-light-blue-2,\n              #3eb1d0\n            );\n            --hax-base-styles-a-color-active: #ffffff;\n          }\n\n          :host([color-theme=\"2\"]) .hcusm {\n            border-color: var(--bootstrap-theme-palenight-background-color);\n          }\n\n          :host([color-theme=\"2\"]) .btn[type=\"size\"] .btn[type=\"font\"] {\n            background-color: var(\n              --bootstrap-theme-light-secondary-background-color\n            );\n            color: var(--bootstrap-theme-palenight-background-color);\n          }\n\n          :host([color-theme=\"2\"]) simple-popover {\n            --simple-popover-color: white;\n            --simple-popover-background-color: var(\n              --bootstrap-theme-palenight-secondary-background-color\n            );\n          }\n\n          :host([color-theme=\"2\"]) .hcusm .dropdown-caret .caret-inner {\n            border-bottom: 9px solid\n              var(--bootstrap-theme-palenight-secondary-background-color);\n          }\n\n          simple-icon-button-lite {\n            color: inherit;\n          }\n\n          .open {\n            text-align: center;\n          }\n\n          .btn-group-title {\n            font-weight: bold;\n          }\n\n          .btn-palenight {\n            background-color: var(\n              --bootstrap-theme-palenight-secondary-background-color\n            );\n            color: var(--bootstrap-theme-palenight-color);\n          }\n\n          /* override bootstrap default */\n          .btn-palenight:hover {\n            color: var(--bootstrap-theme-palenight-color);\n          }\n\n          .btn-dark {\n            background-color: var(\n              --bootstrap-theme-dark-secondary-background-color\n            );\n          }\n\n          .btn-light {\n            background-color: var(\n              --bootstrap-theme-light-secondary-background-color\n            );\n          }\n        "])))]);
        }
      }, {
        key: "properties",
        get: function get() {
          var props = babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this) || {};
          return _objectSpread(_objectSpread({}, props), {}, {
            hideUserStylesMenu: {
              type: Boolean
            },
            fontSize: {
              type: Number,
              reflect: true,
              attribute: "font-size"
            },
            fontFamily: {
              type: Number,
              reflect: true,
              attribute: "font-family"
            },
            colorTheme: {
              type: Number,
              reflect: true,
              attribute: "color-theme"
            }
          });
        }
      }]);
      return _class;
    }(SuperClass);
  };

  _exports.BootstrapUserStylesMenuMixin = BootstrapUserStylesMenuMixin;
});