define(["exports", "../../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ResponsiveGridClear = void 0;

  var _templateObject_a5932d60809211edaa2833647dc78c6c, _templateObject2_a5932d60809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**  
  `responsive-grid-clear`
  A clearumn for the responsive grid
  @microcopy - the mental model for this element
    Example: 
    <responsive-grid-clear 
      xs    //clears the floated columns on an extra small-width screen
      sm    //clears the floated columns on a small-width screen
      md    //clears the floated columns on a medium-width screen
      lg/>  //clears the floated columns on a large-width screen
  */
  var ResponsiveGridClear = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(ResponsiveGridClear, _LitElement);

    var _super = _createSuper(ResponsiveGridClear);

    function ResponsiveGridClear() {
      var _this;

      babelHelpers.classCallCheck(this, ResponsiveGridClear);
      _this = _super.call(this);
      _this.xl = false;
      _this.lg = false;
      _this.md = false;
      _this.sm = false;
      _this.xs = false;
      return _this;
    }

    babelHelpers.createClass(ResponsiveGridClear, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_a5932d60809211edaa2833647dc78c6c || (_templateObject_a5932d60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([""])));
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject2_a5932d60809211edaa2833647dc78c6c || (_templateObject2_a5932d60809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: none;\n          clear: both;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "responsive-grid-clear";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * clear the float and force a new worw on an extra-large screen?
           */
          xl: {
            type: Boolean
          },

          /**
           * clear the float and force a new worw on a large screen?
           */
          lg: {
            type: Boolean
          },

          /**
           * clear the float and force a new worw on a medium screen?
           */
          md: {
            type: Boolean
          },

          /**
           * clear the float and force a new worw on a small screen?
           */
          sm: {
            type: Boolean
          },

          /**
           * clear the float and force a new worw on an extra-small screen?
           */
          xs: {
            type: Boolean
          }
        };
      }
    }]);
    return ResponsiveGridClear;
  }(_index.LitElement);

  _exports.ResponsiveGridClear = ResponsiveGridClear;
  customElements.define(ResponsiveGridClear.tag, ResponsiveGridClear);
});