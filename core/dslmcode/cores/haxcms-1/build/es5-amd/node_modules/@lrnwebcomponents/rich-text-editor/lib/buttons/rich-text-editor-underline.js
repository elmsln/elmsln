define(["exports", "../../../../lit/index.js", "./rich-text-editor-prompt-button.js"], function (_exports, _index, _richTextEditorPromptButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorUnderline = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-underline`
   * a button for rich text editor (custom buttons can extend this)
   *
   * @customElement
   * @lit-html
   * @lit-element
   * @extends RichTextEditorPromptButtonBehaviors
   * @extends LitElement
   * @element rich-text-editor-underline
   * @demo ./demo/buttons.html
   */
  var RichTextEditorUnderline = /*#__PURE__*/function (_RichTextEditorPrompt) {
    babelHelpers.inherits(RichTextEditorUnderline, _RichTextEditorPrompt);

    var _super = _createSuper(RichTextEditorUnderline);

    function RichTextEditorUnderline() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorUnderline);
      _this = _super.call(this);
      _this.fields = [{
        property: "confirm",
        title: "Underline (not recommended)",
        description: "Underlines can be confused with links. Use italics instead.",
        inputMethod: "boolean"
      }];
      _this.tagsList = "u";
      _this.icon = "editor:format-underlined";
      _this.label = "Underline (not recommended)";
      _this.toggles = true;
      _this.command = "underline";
      _this.shortcutKeys = "ctrl+u";
      _this.value = {
        confirm: false
      };
      return _this;
    }
    /**
     * overriden from RichTextEditorPromptButtonBehaviors:
     * keeps prompt command value undefined
     * @memberof RichTextEditorUnderline
     */


    babelHelpers.createClass(RichTextEditorUnderline, [{
      key: "render",
      value: // render function for template
      function render() {
        return babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorUnderline.prototype), "render", this).call(this);
      } // properties available to the custom element for data binding

    }, {
      key: "promptCommandVal",
      get: function get() {
        this.commandVal = undefined;
      }
      /**
       * overriden from RichTextEditorPromptButtonBehaviors:
       * creates a confirm checkbox to force user
       * to acknowledge usability issues with underline
       * @memberof RichTextEditorUnderline
       */

    }, {
      key: "getValue",
      value: function getValue() {
        return {
          confirm: !!this.toggled
        };
      }
      /**
       * overriden from RichTextEditorPromptButtonBehaviors:
       * sets toggled to whether users has confirmed
       * @memberof RichTextEditorUnderline
       */

    }, {
      key: "setToggled",
      value: function setToggled() {
        this.toggled = !!this.getPropValue("confirm");
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "rich-text-editor-underline";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorUnderline), "properties", this));
      }
    }]);
    return RichTextEditorUnderline;
  }((0, _richTextEditorPromptButton.RichTextEditorPromptButtonBehaviors)(_index.LitElement));

  _exports.RichTextEditorUnderline = RichTextEditorUnderline;
  customElements.define(RichTextEditorUnderline.tag, RichTextEditorUnderline);
});