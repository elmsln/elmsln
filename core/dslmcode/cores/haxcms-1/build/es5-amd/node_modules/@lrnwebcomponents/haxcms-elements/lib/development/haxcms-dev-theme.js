define(["exports", "require", "../../../../@polymer/polymer/polymer-element.js", "../core/HAXCMSPolymerElementTheme.js", "../../../simple-colors/lib/simple-colors-polymer.js", "../../../../@polymer/iron-list/iron-list.js"], function (_exports, _require, _polymerElement, _HAXCMSPolymerElementTheme, _simpleColorsPolymer, _ironList) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSDevTheme = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_e7c2a2308e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `haxcms-dev-theme`
   * `A theme intended as the starting point to fork from and build new themes for HAXCMS
   *  which allows you to build things that just work using JSON Outline Schema as it's "backend"
   * and then IF hax is around it'll show up :)`
   *
  
   * @demo demo/index.html
   */
  var HAXCMSDevTheme = /*#__PURE__*/function (_HAXCMSPolymerElement) {
    babelHelpers.inherits(HAXCMSDevTheme, _HAXCMSPolymerElement);

    var _super = _createSuper(HAXCMSDevTheme);

    function HAXCMSDevTheme() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSDevTheme);
      _this = _super.call(this);
      new Promise(function (res, rej) {
        return _require.default(["../../../simple-icon/simple-icon.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../simple-icon/lib/simple-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../simple-tooltip/simple-tooltip.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../ui-components/active-item/site-active-title.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../ui-components/blocks/site-children-block.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../ui-components/navigation/site-breadcrumb.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../ui-components/navigation/site-menu.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../ui-components/navigation/site-menu-button.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../ui-components/navigation/site-top-menu.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../ui-components/query/site-query.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../ui-components/query/site-render-query.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../ui-components/query/site-query-menu-slice.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../ui-components/site/site-rss-button.js"], res, rej);
      }); // prettier-ignore

      new Promise(function (res, rej) {
        return _require.default(["../ui-components/site/site-title.js"], res, rej);
      });
      return _this;
    } // render function


    babelHelpers.createClass(HAXCMSDevTheme, [{
      key: "_itemTapped",
      value:
      /**
       * Item tapped, let's set it as active by searching the manifest array
       * Your theme is in charge of ensuring that when activeItem needs changed
       * that it ensures that happens
       */
      function _itemTapped(e) {
        var local = e.target;
        var activeId = local.getAttribute("data-id");

        if (local.tagName === "BUTTON" && babelHelpers.typeof(activeId) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // console log these so you can debug easily as you build out
          console.warn(this.manifest);
        }
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "haxcms-dev-theme";
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_e7c2a2308e0011ed99ce491205e67b1d || (_templateObject_e7c2a2308e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors-shared-styles-polymer\">\n        :host {\n          display: block;\n          /* theme color which is dictated by the manifest */\n          background-color: var(--haxcms-color, black);\n        }\n        div.card {\n          width: 200px;\n          color: black;\n          background-color: blue;\n          padding: 8px;\n          font-size: 10px;\n        }\n        /**\n         * Hide the slotted content during edit mode. This must be here to work.\n         */\n        :host([edit-mode]) #slot {\n          display: none;\n        }\n        .manifest,\n        .activeitem {\n          width: 49%;\n          min-height: 300px;\n          height: 300px;\n          overflow: scroll;\n          border: 4px solid black;\n          margin: 0;\n          padding: 0;\n          display: inline-block;\n          vertical-align: text-top;\n        }\n        .buttons {\n          display: flex;\n        }\n        site-top-menu {\n          --site-top-menu-bg: var(\n            --simple-colors-default-theme-blue-grey-7,\n            #37474f\n          );\n          --site-top-menu-link-color: #ffffff;\n          --site-top-menu-indicator-color: var(--haxcms-color, #ffffff);\n          --site-top-menu-link-active-color: yellow;\n          --site-top-menu-indicator-arrow: 8px;\n        }\n        .spacing button {\n          min-width: unset;\n          text-transform: unset;\n          background-color: var(--haxcms-color, #000000);\n          color: #ffffff;\n          margin: 0;\n          border-radius: 0;\n        }\n        site-children-block {\n          --site-children-block-button-active: {\n            background-color: var(\n              --simple-colors-default-theme-blue-grey-7,\n              #37474f\n            );\n            color: #ffffff;\n          }\n        }\n      </style>\n      <site-top-menu noink indicator=\"arrow\" arrow-size=\"8\">\n        <div slot=\"suffix\" class=\"spacing\">\n          <a\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            tabindex=\"-1\"\n            href=\"https://github.com/elmsln/HAXcms\"\n            data-title=\"Get it. Got it? Good.\"\n          >\n            <button noink>Get HAXcms</button>\n          </a>\n          <site-print-button></site-print-button>\n          <site-print-button type=\"parent\"></site-print-button>\n          <site-print-button type=\"ancestor\"></site-print-button>\n          <site-print-button type=\"site\"></site-print-button>\n        </div>\n      </site-top-menu>\n      <site-children-block\n        fixed-id\n        parent=\"item-14e9e811-8d92-41ee-b2f1-8248eacc3138\"\n      >\n      </site-children-block>\n      <h1 style=\"margin:0;\">HAXCMS DEVELOPMENT THEME</h1>\n      <site-title></site-title>\n      <div class=\"buttons\">\n        <site-menu-button type=\"prev\"></site-menu-button>\n        <site-menu-button type=\"next\"></site-menu-button>\n        <button id=\"unset\" on-click=\"resetActive\">Unset activeItem</button>\n        <site-rss-button type=\"atom\"></site-rss-button>\n        <site-rss-button type=\"rss\"></site-rss-button>\n      </div>\n      <div class=\"manifest\">\n        <h2>title: [[manifest.title]]</h2>\n        <div>description: [[manifest.description]]</div>\n        <div>\n          icon:\n          <simple-icon\n            icon=\"[[manifest.metadata.theme.variables.icon]]\"\n          ></simple-icon>\n        </div>\n        <div>\n          image:\n          <img\n            src$=\"[[manifest.metadata.theme.variables.image]]\"\n            height=\"200px\"\n            width=\"200px\"\n          />\n        </div>\n      </div>\n      <div class=\"activeitem\">\n        <site-breadcrumb></site-breadcrumb>\n        <h2>ACTIVE ITEM</h2>\n        <site-active-title></site-active-title>\n        <div id=\"contentcontainer\">\n          <div id=\"slot\"><slot></slot></div>\n        </div>\n      </div>\n      <site-render-query class=\"cardlist\" grid on-click=\"_itemTapped\">\n        <template>\n          <div style=\"padding:8px;\">\n            <div class=\"card\">\n              <div class=\"card-content\">\n                <div>title: [[item.title]]</div>\n                <div>image: [[item.metadata.fields.image]]</div>\n                <div>description: [[item.description]]</div>\n                <div>slug: [[item.slug]]</div>\n                <div>location: [[item.location]]</div>\n                <div>changed: [[item.metadata.updated]]</div>\n              </div>\n              <div class=\"card-actions\">\n                <a tabindex=\"-1\" href$=\"[[item.slug]]\"\n                  ><button data-id$=\"[[item.id]]\">Set as active</button></a\n                >\n              </div>\n            </div>\n          </div>\n        </template>\n      </site-render-query>\n      <site-menu></site-menu>\n    "])));
      }
    }]);
    return HAXCMSDevTheme;
  }(_HAXCMSPolymerElementTheme.HAXCMSPolymerElementTheme);

  _exports.HAXCMSDevTheme = HAXCMSDevTheme;
  customElements.define(HAXCMSDevTheme.tag, HAXCMSDevTheme);
});