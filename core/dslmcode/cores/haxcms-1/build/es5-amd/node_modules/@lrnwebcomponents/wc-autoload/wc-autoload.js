define(["exports", "../dynamic-import-registry/dynamic-import-registry.js"], function (_exports, _dynamicImportRegistry) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WcAutoload = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  // register globally so we can make sure there is only one
  window.WCAutoload = window.WCAutoload || {};
  window.WCAutoloadRegistry = window.WCAutoloadRegistry || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same modal

  window.WCAutoload.requestAvailability = function () {
    if (!window.WCAutoload.instance) {
      window.WCAutoload.instance = document.createElement("wc-autoload");
      document.body.appendChild(window.WCAutoload.instance);
    }

    return window.WCAutoload.instance;
  };
  /**
   * wrapper on fetch that allows for retrying
   */


  var fetch_retry = /*#__PURE__*/function () {
    var _ref = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, options, n) {
      var i, isLastAttempt;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              i = 0;

            case 1:
              if (!(i < n)) {
                _context.next = 16;
                break;
              }

              _context.prev = 2;
              _context.next = 5;
              return fetch(url, options);

            case 5:
              return _context.abrupt("return", _context.sent);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](2);
              isLastAttempt = i + 1 === n;

              if (!isLastAttempt) {
                _context.next = 13;
                break;
              }

              throw _context.t0;

            case 13:
              i++;
              _context.next = 1;
              break;

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2, 8]]);
    }));

    return function fetch_retry(_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * process the loading event in case we need to ensure timing is
   * better handled downstream.
   */


  window.WCAutoload.process = function (e) {
    return new Promise(function (resolve, reject) {
      // find the loader
      var loader = window.WCAutoload.requestAvailability();
      loader.loaded = true;
      var list = {}; // microtask timing to ensure window settings are accepted

      if (window.WCAutoloadRegistryFileProcessed) {
        // mutation observer will pick up changes after initial load
        // but this gets us at load time with fallback support for legacy
        var target = document;

        if (loader.target) {
          target = loader.target;
          loader.processNewElement(target);
        } // hack to convert children into array


        target.querySelectorAll("*").forEach(function (el) {
          if (el.tagName && !list[el.tagName]) {
            loader.processNewElement(el);
            list[el.tagName] = el.tagName;
          }
        });
        resolve("autoloader already processed");
      } else {
        setTimeout( /*#__PURE__*/babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var i, target;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  // set the basePath if it exists
                  if (window.WCAutoloadBasePath) {
                    loader.registry.basePath = window.WCAutoloadBasePath;
                  } else if (window.WCGlobalBasePath) {
                    loader.registry.basePath = window.WCGlobalBasePath;
                  }

                  if (!(window.WCAutoloadRegistryFile && !window.WCAutoloadRegistryFileProcessed)) {
                    _context2.next = 10;
                    break;
                  }

                  // support single string or multiple registries
                  if (typeof window.WCAutoloadRegistryFile === "string") {
                    window.WCAutoloadRegistryFile = [window.WCAutoloadRegistryFile];
                  }

                  i = 0;

                case 4:
                  if (!(i < window.WCAutoloadRegistryFile.length)) {
                    _context2.next = 10;
                    break;
                  }

                  _context2.next = 7;
                  return fetch_retry(window.WCAutoloadRegistryFile[i], {}, 3).then(function (response) {
                    return response.json();
                  }).then(function (data) {
                    window.WCAutoloadRegistryFileProcessed = true;
                    window.WCAutoloadRegistry = _objectSpread(_objectSpread({}, window.WCAutoloadRegistry), data);
                  });

                case 7:
                  i++;
                  _context2.next = 4;
                  break;

                case 10:
                  // build out the registry via events translated from object
                  if (window.WCAutoloadRegistry) {
                    for (i in window.WCAutoloadRegistry) {
                      loader.registry.register({
                        tag: i,
                        path: window.WCAutoloadRegistry[i]
                      });
                    }
                  }

                  target = document;

                  if (loader.target) {
                    target = loader.target;
                    loader.processNewElement(target);
                  } // mutation observer will pick up changes after initial load
                  // but this gets us at load time with fallback support for legacy


                  target.querySelectorAll("*").forEach(function (el) {
                    if (el.tagName && !list[el.tagName]) {
                      loader.processNewElement(el);
                      list[el.tagName] = el.tagName;
                    }
                  });
                  resolve("autoloader processed on the fly");

                case 15:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        })), 0);
      }
    });
  }; // forces self appending which kicks all this off but AFTER dom is loaded
  // function based allows for fallbacks due to timing on legacy browsers


  window.addEventListener("load", window.WCAutoload.process); // edge case; definition to load comes in AFTER we have loaded the page
  // and MutationObserver doesn't pick up the tag being there
  // this could be the result of a slow page load for example
  // in these cases; see the event of the item being in the registry

  window.WCAutoload.postLoaded = function (e) {
    setTimeout(function () {
      var loader = window.WCAutoload.requestAvailability();

      if (loader.loaded && document.querySelectorAll(e.detail.tag).length > 0) {
        loader.registry.loadDefinition(e.detail.tag);
      }
    }, 0);
  }; // listen for new tags being registered


  window.addEventListener("dynamic-import-registry--new-registration", window.WCAutoload.postLoaded);
  /**
   * `wc-registry`
   * `optionally build the registry from the innerHTML of an element`
   *
   * @demo demo/index.html Baseline example
   * @demo demo/elmsln.html ELMS:LN integration
   * @demo demo/cantvas.html Cantvas integration example (token)
   * @demo demo/multiple-registries.html Multiple registries
   * @element wc-registry
   */

  var WcRegistry = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(WcRegistry, _HTMLElement);

    var _super = _createSuper(WcRegistry);

    function WcRegistry() {
      var _this;

      babelHelpers.classCallCheck(this, WcRegistry);
      _this = _super.call(this);
      _this.loader = window.WCAutoload.requestAvailability();
      return _this;
    }

    babelHelpers.createClass(WcRegistry, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        setTimeout(function () {
          if (_this2.children.length > 0 && _this2.children[0].tagName == "TEMPLATE") {
            // we don't trust no JS blobs :p
            try {
              var jsonList = JSON.parse(_this2.children[0].content.textContent); // register these items on the fly

              for (var i in jsonList) {
                _this2.loader.registry.register({
                  tag: i,
                  path: jsonList[i]
                });
              }
            } catch (e) {
              console.warn(e);
            }
          }
        }, 0);
      }
    }], [{
      key: "tag",
      get:
      /**
       * This is a convention, not the standard
       */
      function get() {
        return "wc-registry";
      }
    }]);
    return WcRegistry;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  customElements.define(WcRegistry.tag, WcRegistry);
  /**
   * `wc-autoload`
   * `automatically load new tags in the dom`
   * @demo demo/index.html
   * @element wc-autoload
   */

  var WcAutoload = /*#__PURE__*/function (_HTMLElement2) {
    babelHelpers.inherits(WcAutoload, _HTMLElement2);

    var _super2 = _createSuper(WcAutoload);

    function WcAutoload() {
      var _this3;

      babelHelpers.classCallCheck(this, WcAutoload);
      _this3 = _super2.call(this);
      _this3.loaded = false;
      _this3.registry = window.DynamicImportRegistry.requestAvailability();
      _this3.options = {
        childList: true,
        subtree: true
      };
      return _this3;
    }

    babelHelpers.createClass(WcAutoload, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this4 = this;

        // listen for changes and then process any new node that has a tag name
        this._mutationObserver = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            mutation.addedNodes.forEach(function (node) {
              _this4.processNewElement(node);
            });
          });
        }); // support window target

        if (window.WCAutoloadOptions) {
          this.options = window.WCAutoloadOptions;
        }

        setTimeout(function () {
          // support window target
          if (window.WCAutoloadTarget) {
            _this4.target = window.WCAutoloadTarget;
          } else {
            _this4.target = document.body;
          } // listen on the body and deep children as well


          _this4._mutationObserver.observe(_this4.target, _this4.options);
        }, 0);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this._mutationObserver.disconnect();
      }
      /**
       * Process new elements
       */

    }, {
      key: "processNewElement",
      value: function processNewElement(node) {
        // skip checks for self
        if (node.tagName && node.tagName.includes("-") && node.tagName != "DYNAMIC-IMPORT-REGISTRY" && node.tagName != "WC-REGISTRY" && node.tagName != "WC-AUTOLOAD") {
          this.registry.loadDefinition(node.tagName);
        }
      }
    }], [{
      key: "tag",
      get:
      /**
       * This is a convention, not the standard
       */
      function get() {
        return "wc-autoload";
      }
    }]);
    return WcAutoload;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.WcAutoload = WcAutoload;
  customElements.define(WcAutoload.tag, WcAutoload);
});