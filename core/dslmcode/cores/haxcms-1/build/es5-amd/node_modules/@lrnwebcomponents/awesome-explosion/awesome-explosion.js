define(["exports", "meta", "../../lit/index.js"], function (_exports, meta, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AwesomeExplosion = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_6311e0d0809211edaa2833647dc78c6c, _templateObject2_6311e0d0809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `awesome-explosion`
   * `An awesome, explosion.`
   *
   * @silly
   * @demo demo/index.html
   * @element awesome-explosion
   */
  var AwesomeExplosion = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(AwesomeExplosion, _LitElement);

    var _super = _createSuper(AwesomeExplosion);

    function AwesomeExplosion() {
      var _this;

      babelHelpers.classCallCheck(this, AwesomeExplosion);
      _this = _super.call(this);
      _this.state = "stop";
      _this.image = new URL("./assets/explode.gif", meta.url).href;
      _this.sound = new URL("./assets/273320__clagnut__fireworks.mp3", meta.url).href;
      _this.size = "medium";
      _this.color = "";
      _this.resetSound = false;
      setTimeout(function () {
        _this.addEventListener("click", _this._setPlaySound.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("mouseover", _this._setPlaySound.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("mouseout", _this._setStopSound.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }

    babelHelpers.createClass(AwesomeExplosion, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_6311e0d0809211edaa2833647dc78c6c || (_templateObject_6311e0d0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <img\n        loading=\"lazy\"\n        src=\"", "\"\n        id=\"image\"\n        class=\"image-tag\"\n        alt=\"\"\n      />\n    "])), this.image);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "state") {
            _this2.stopped = _this2._calculateStopped(_this2.state);
            _this2.playing = _this2._calculatePlaying(_this2.state);
            _this2.paused = _this2._calculatePaused(_this2.state);
          }
        });
      }
    }, {
      key: "_calculateStopped",
      value:
      /**
       * calculate if it is stopped
       */
      function _calculateStopped(newValue, oldValue) {
        if (newValue == "stop") {
          this.stopped = true;

          if (babelHelpers.typeof(window.audio) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            window.audio.currentTime = 0;
          }

          this._stopSound();

          this.dispatchEvent(new CustomEvent("awesome-event", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              message: "Sound stopped"
            }
          }));
        } else {
          this.stopped = false;
        }
      }
      /**
       * calculate if it is stopped
       */

    }, {
      key: "_calculatePlaying",
      value: function _calculatePlaying(newValue, oldValue) {
        if (newValue == "play") {
          this.playing = true;

          this._playSound();

          this.dispatchEvent(new CustomEvent("awesome-event", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              message: "Sound played"
            }
          }));
        } else {
          this.playing = false;
        }
      }
      /**
       * calculate if it is stopped
       */

    }, {
      key: "_calculatePaused",
      value: function _calculatePaused(newValue, oldValue) {
        if (newValue == "pause") {
          this.paused = true;

          this._stopSound();

          this.dispatchEvent(new CustomEvent("awesome-event", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              message: "Sound paused"
            }
          }));
        } else {
          this.paused = false;
        }
      }
      /**
       * Stop the sound effect.
       */

    }, {
      key: "_stopSound",
      value: function _stopSound() {
        if (babelHelpers.typeof(window.audio) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          window.audio.pause();

          if (this.resetSound) {
            window.audio.currentTime = 0;
          }
        }
      }
      /**
       * Set the state to play from an event.
       */

    }, {
      key: "_setPlaySound",
      value: function _setPlaySound(e) {
        this.state = "play";
      }
      /**
       * Set the state to play from an event.
       */

    }, {
      key: "_setStopSound",
      value: function _setStopSound(e) {
        this.state = "pause";
      }
      /**
       * Play the sound effect.
       */

    }, {
      key: "_playSound",
      value: function _playSound() {
        if (babelHelpers.typeof(window.audio) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          window.audio = new Audio(this.sound);
        }

        window.audio.play();
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject2_6311e0d0809211edaa2833647dc78c6c || (_templateObject2_6311e0d0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n        :host([size=\"tiny\"]) #image {\n          width: 80px;\n          height: 80px;\n        }\n        :host([size=\"small\"]) #image {\n          width: 160px;\n          height: 160px;\n        }\n        :host([size=\"medium\"]) #image {\n          width: 240px;\n          height: 240px;\n        }\n        :host([size=\"large\"]) #image {\n          width: 320px;\n          height: 320px;\n        }\n        :host([size=\"epic\"]) #image {\n          width: 720px;\n          height: 720px;\n        }\n\n        :host([color=\"red\"]) #image {\n          filter: sepia() saturate(10000%) hue-rotate(30deg);\n        }\n        :host([color=\"purple\"]) #image {\n          filter: sepia() saturate(10000%) hue-rotate(290deg);\n        }\n        :host([color=\"blue\"]) #image {\n          filter: sepia() saturate(10000%) hue-rotate(210deg);\n        }\n        :host([color=\"orange\"]) #image {\n          filter: sepia() saturate(10000%) hue-rotate(320deg);\n        }\n        :host([color=\"yellow\"]) #image {\n          filter: sepia() saturate(10000%) hue-rotate(70deg);\n        }\n        #image {\n          width: 240px;\n          height: 240px;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "awesome-explosion";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * State is for setting:
           * Possible values: play, pause, stop
           */
          state: {
            type: String,
            reflect: true
          },

          /**
           * Allow for stopping the sound effect.
           */
          stopped: {
            type: Boolean
          },

          /**
           * Allow for playing the sound effect.
           */
          playing: {
            type: Boolean
          },

          /**
           * Allow for pausing the sound effect.
           */
          paused: {
            type: Boolean
          },

          /**
           * This allows you to swap out the image
           */
          image: {
            type: String
          },

          /**
           * This allows you to swap out the sound.
           */
          sound: {
            type: String
          },

          /**
           * This is the size of the element. Possible values are:
           * tiny, small, medium, large, epic
           */
          size: {
            type: String,
            reflect: true
          },

          /**
           * This is to change the color of the element. Possible values are:
           * red, blue, orange, yellow
           */
          color: {
            type: String,
            reflect: true
          },

          /**
           * Allow for resetting the sound effect.
           */
          resetSound: {
            type: Boolean,
            reflect: true,
            attribute: "reset-sound"
          }
        };
      }
    }]);
    return AwesomeExplosion;
  }(_index.LitElement);

  _exports.AwesomeExplosion = AwesomeExplosion;
  customElements.define(AwesomeExplosion.tag, AwesomeExplosion);
});