define(["exports", "../../lit/index.js", "../schema-behaviors/schema-behaviors.js"], function (_exports, _index, _schemaBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.licenseList = _exports.LicenseElement = void 0;

  var _templateObject_6b06ed30809211edaa2833647dc78c6c, _templateObject2_6b06ed30809211edaa2833647dc78c6c, _templateObject3_6b06ed30809211edaa2833647dc78c6c, _templateObject4_6b06ed30809211edaa2833647dc78c6c, _templateObject5_6b06ed30809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * A list of licenses that we support the references for.
   */
  var licenseList = /*#__PURE__*/babelHelpers.createClass(function licenseList() {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "full";
    babelHelpers.classCallCheck(this, licenseList);
    // initial list, PR to add more
    var list = {
      by: {
        name: "Attribution",
        link: "https://creativecommons.org/licenses/by/4.0/",
        image: "https://i.creativecommons.org/l/by/4.0/88x31.png"
      },
      "by-sa": {
        name: "Attribution Share a like",
        link: "https://creativecommons.org/licenses/by-sa/4.0/",
        image: "https://i.creativecommons.org/l/by-sa/4.0/88x31.png"
      },
      "by-nd": {
        name: "Attribution No derivatives",
        link: "https://creativecommons.org/licenses/by-nd/4.0/",
        image: "https://i.creativecommons.org/l/by-nd/4.0/88x31.png"
      },
      "by-nc": {
        name: "Attribution non-commercial",
        link: "https://creativecommons.org/licenses/by-nc/4.0/",
        image: "https://i.creativecommons.org/l/by-nc/4.0/88x31.png"
      },
      "by-nc-sa": {
        name: "Attribution non-commercial share a like",
        link: "https://creativecommons.org/licenses/by-nc-sa/4.0/",
        image: "https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"
      },
      "by-nc-nd": {
        name: "Attribution Non-commercial No derivatives",
        link: "https://creativecommons.org/licenses/by-nc-nd/4.0/",
        image: "https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png"
      }
    }; // support mutating the array into a select list

    if (mode == "select") {
      var select = {};

      for (var i in list) {
        select[i] = list[i].name;
      }

      return select;
    }

    return list;
  });
  _exports.licenseList = licenseList;

  /**
   * `license-element`
   * `A simple way of applying a semantically accurate license to work.`
   * @demo demo/index.html
   * @element license-element
   */
  var LicenseElement = /*#__PURE__*/function (_SchemaBehaviors) {
    babelHelpers.inherits(LicenseElement, _SchemaBehaviors);

    var _super = _createSuper(LicenseElement);

    function LicenseElement() {
      var _this;

      babelHelpers.classCallCheck(this, LicenseElement);
      _this = _super.call(this);
      _this.licenseList = new licenseList();
      _this.creator = "(author)";
      _this.source = null;
      _this.moreLabel = "on the licensing details page";
      return _this;
    }

    babelHelpers.createClass(LicenseElement, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_6b06ed30809211edaa2833647dc78c6c || (_templateObject_6b06ed30809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <meta\n        rel=\"cc:license\"\n        href=\"", "\"\n        content=\"License: ", "\"\n      />\n      <div\n        class=\"license-body\"\n        xmlns:cc=\"", "\"\n        xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n      >\n        ", "\n        <span\n          class=\"work-title\"\n          rel=\"dc:type\"\n          href=\"http://purl.org/dc/dcmitype/Text\"\n          property=\"dc:title\"\n          >", "</span\n        >\n        by\n        <a\n          rel=\"cc:attributionURL\"\n          property=\"cc:attributionName\"\n          href=\"", "\"\n          >", "</a\n        >\n        ", " <span rel=\"dc:source\" href=\"", "\"></span>\n        ", "\n      </div>\n    "])), this.licenseLink, this.licenseName, this.licenseLink, this.licenseImage ? (0, _index.html)(_templateObject2_6b06ed30809211edaa2833647dc78c6c || (_templateObject2_6b06ed30809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n              <a\n                class=\"big-license-link\"\n                target=\"_blank\"\n                href=\"", "\"\n                rel=\"noopener noreferrer\"\n                ><img\n                  loading=\"lazy\"\n                  alt=\"", " graphic\"\n                  src=\"", "\"\n              /></a>\n            "])), this.licenseLink, this.licenseName, this.licenseImage) : "", this.title, this.source, this.creator, this.license ? (0, _index.html)(_templateObject3_6b06ed30809211edaa2833647dc78c6c || (_templateObject3_6b06ed30809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["is licensed under a\n              <a class=\"license-link\" target=\"_blank\" href=\"", "\"\n                >", "</a\n              >."])), this.licenseLink, this.licenseName) : "", this.source, this.hasMore ? (0, _index.html)(_templateObject4_6b06ed30809211edaa2833647dc78c6c || (_templateObject4_6b06ed30809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n              <span\n                >Permissions beyond the scope of this license are available\n                <a\n                  rel=\"cc:morePermissions\"\n                  target=\"_blank\"\n                  href=\"", "\"\n                  rel=\"noopener noreferrer\"\n                  >", "</a\n                >.</span\n              >\n            "])), this.moreLink, this.moreLabel) : "");
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "license") {
            _this2._licenseUpdated(_this2[propName]);
          }

          if (propName == "moreLink") {
            _this2.hasMode = _this2._computeHasMore(_this2.moreLink);
          }
        });
      }
    }, {
      key: "_computeHasMore",
      value:
      /**
       * Calculate if we should show the advanced details area
       */
      function _computeHasMore(link) {
        // only show if there's a link supplied for additional details
        if (babelHelpers.typeof(link) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && link !== "") {
          return true;
        }

        return false;
      }
      /**
       * License was updated, time to update license name and link.
       */

    }, {
      key: "_licenseUpdated",
      value: function _licenseUpdated(newValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(this.licenseList[newValue]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.licenseName = this.licenseList[newValue].name;
          this.licenseLink = this.licenseList[newValue].link;
          this.licenseImage = this.licenseList[newValue].image;
        }
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject5_6b06ed30809211edaa2833647dc78c6c || (_templateObject5_6b06ed30809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-size: 16px;\n          line-height: 32px;\n          --license-text-color: #222222;\n          --license-background-color: #f2f2f2;\n          background-color: var(--license-background-color);\n        }\n        :host:after {\n          content: \"License\";\n          position: relative;\n          float: right;\n          bottom: 36px;\n          right: 8px;\n          font-size: 28px;\n          color: #dddddd;\n          font-style: italic;\n        }\n        .license-body {\n          padding: 32px;\n          font-style: italic;\n          background-color: var(--license-background-color);\n          color: var(--license-text-color);\n        }\n\n        :host([display-method=\"footnote\"]) {\n          visibility: hidden;\n          opacity: 0;\n        }\n        :host([display-method=\"popup\"]) {\n          display: block;\n        }\n        .license-link {\n          font-style: italic;\n        }\n        .big-license-link img {\n          margin-right: 8px;\n          margin-bottom: 8px;\n          width: 88px;\n          height: 31px;\n          vertical-align: middle;\n        }\n        .work-title {\n          font-weight: bold;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "license-element";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(LicenseElement), "properties", this)), {}, {
          /**
           * Title of the work.
           */
          title: {
            type: String
          },

          /**
           * Person or group that owns / created the work.
           */
          creator: {
            type: String
          },

          /**
           * Original Source of the work in question
           */
          source: {
            type: String
          },

          /**
           * License name, calculated or supplied by the end user if we don't have them.
           */
          licenseName: {
            type: String,
            attribute: "license-name"
          },
          licenseImage: {
            type: String,
            attribute: "license-image"
          },

          /**
           * License link for more details
           */
          licenseLink: {
            type: String,
            attribute: "license-link"
          },

          /**
           * License short hand. Options cc0,
           */
          license: {
            type: String
          },

          /**
           * More details label
           */
          moreLabel: {
            type: String,
            attribute: "more-label"
          },

          /**
           * More details link
           */
          moreLink: {
            type: String,
            attribute: "more-link"
          },

          /**
           * See if we have more things to point to
           */
          hasMore: {
            type: Boolean,
            attribute: "has-more"
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: true,
          gizmo: {
            title: "License",
            description: "Provide a license for you rwork",
            icon: "icons:copyright",
            color: "grey",
            groups: ["Content", "Copyright"],
            handles: [{
              type: "license",
              source: "source",
              title: "title",
              author: "creator",
              license: "license"
            }],
            meta: {
              author: "HAXTheWeb core team"
            }
          },
          settings: {
            configure: [{
              property: "title",
              title: "Title",
              description: "The title of the work being cited.",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "source",
              title: "Source link",
              description: "The source url for the element this is citing.",
              inputMethod: "textfield",
              icon: "link",
              validationType: "url"
            }, {
              property: "license",
              title: "License",
              description: "The source url for the element this is citing.",
              inputMethod: "select",
              options: new licenseList("select"),
              icon: "link"
            }, {
              property: "creator",
              title: "Creator",
              description: "Who made or owns this.",
              inputMethod: "textfield",
              icon: "link"
            }],
            advanced: [{
              property: "moreLink",
              title: "Source link",
              description: "Link to additional licensing details",
              inputMethod: "textfield",
              validationType: "url"
            }, {
              property: "moreLabel",
              title: "more label",
              description: "Label for more licensing details",
              inputMethod: "textfield"
            }]
          },
          demoSchema: [{
            tag: "license-element",
            properties: {
              title: "Wonderland",
              creator: "Mad Hatter",
              source: "https://haxtheweb.org/",
              license: "by"
            },
            content: ""
          }]
        };
      }
    }]);
    return LicenseElement;
  }((0, _schemaBehaviors.SchemaBehaviors)(_index.LitElement));

  _exports.LicenseElement = LicenseElement;
  customElements.define(LicenseElement.tag, LicenseElement);
});