define(["exports", "meta", "require", "../../lit/index.js", "../schema-behaviors/schema-behaviors.js", "../intersection-element/lib/IntersectionObserverMixin.js", "../i18n-manager/lib/I18NMixin.js"], function (_exports, meta, _require, _index, _schemaBehaviors, _IntersectionObserverMixin, _I18NMixin2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yGifPlayer = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);

  var _templateObject_9dfd97e08e0011ed99ce491205e67b1d, _templateObject2_9dfd97e08e0011ed99ce491205e67b1d, _templateObject3_9dfd97e08e0011ed99ce491205e67b1d, _templateObject4_9dfd97e08e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `a11y-gif-player`
   * plays gifs in an accessible way by having the user click to play their animation
  ### Styling
  
  `<a11y-gif-player>` provides the following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--a11y-gif-player-border` | border around player/button | none
  `--a11y-gif-player-border-radius` | border-radius for player/button | 0
  `--a11y-gif-player-focus-border` | border-radius for player/button when hovered or focused | none
  `--a11y-gif-player-cursor` | cursor for player/button when hovered or focused | pointer
  `--a11y-gif-player-outline` | outline for player/button when hovered or focused | 
  `--a11y-gif-player-disabled-cursor` | cursor for player/button when disabled | not-allowed
  `--a11y-gif-player-arrow-size` | arrow icon size | 30%
  `--a11y-gif-player-arrow-opacity` | default arrow icon opacity | 0.5
  `--a11y-gif-player-button-focus-opacity` | arrow icon opacity when hovered or focused | 0.7
  `--a11y-gif-player-button-color` | arrow icon color | #000000
  `--a11y-gif-player-arrow-border-color` | arrow icon border color | #ffffff
  `--a11y-gif-player-arrow-border-width` | arrow icon border width | 15px
  `--a11y-gif-player-button-text-color` | arrow icon text color | #ffffff
  `--a11y-gif-player-button-bg` | button background color when no static image | #cccccc
   *
   * @demo ./demo/index.html
   * @element a11y-gif-player
   */
  var A11yGifPlayer = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(A11yGifPlayer, _I18NMixin);

    var _super = _createSuper(A11yGifPlayer);

    function A11yGifPlayer() {
      var _this;

      babelHelpers.classCallCheck(this, A11yGifPlayer);
      _this = _super.call(this);
      _this.__gifLoaded = false;
      _this.disabled = false;
      _this.__playing = false;

      _this._updateFromSlot();

      _this.t = {
        toggleAnimation: "Toggle animation"
      };

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        basePath: meta.url,
        locales: ["es"]
      });

      return _this;
    }
    /**
     * LitElement render styles
     */


    babelHelpers.createClass(A11yGifPlayer, [{
      key: "__imageLoaded",
      value: function __imageLoaded(e) {
        this.__gifLoaded = true;
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_9dfd97e08e0011ed99ce491205e67b1d || (_templateObject_9dfd97e08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["", " "])), this.elementVisible ? (0, _index.html)(_templateObject2_9dfd97e08e0011ed99ce491205e67b1d || (_templateObject2_9dfd97e08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          <div id=\"container\">\n            <slot hidden></slot>\n            <img\n              src=\"", "\"\n              alt=\"", "\"\n              loading=\"lazy\"\n              aria-describedby=\"", " ", "\"\n              slot=\"summary\"\n            />\n            ", "\n\n            <button\n              id=\"button\"\n              aria-controls=\"gif\"\n              aria-pressed=\"", "\"\n              @click=\"", "\"\n              ?disabled=\"", "\"\n              .style=\"background-image: url('", "')\"\n            >\n              <svg\n                id=\"svg\"\n                aria-hidden=\"true\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 200 200\"\n              >\n                <g>\n                  <polygon points=\"30,20 30,180 170,100\"></polygon>\n                  <text x=\"50\" y=\"115\" font-size=\"40px\">GIF</text>\n                </g>\n              </svg>\n            </button>\n            <a11y-details\n              id=\"longdesc\"\n              ?hidden=\"", "\"\n              .style=\"opacity:", "\"\n            >\n              <div slot=\"summary\">info</div>\n              <div slot=\"details\">", "</div>\n            </a11y-details>\n          </div>\n        "])), this.__gifLoaded && this.__playing ? this.src : this.srcWithoutAnimation, this.alt, this.longdesc ? "longdesc" : "", (this.describedBy || "").trim(), this.__playing ? (0, _index.html)(_templateObject3_9dfd97e08e0011ed99ce491205e67b1d || (_templateObject3_9dfd97e08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<img\n                  src=\"", "\"\n                  alt=\"\"\n                  hidden\n                  slot=\"summary\"\n                  @load=\"", "\"\n                />"])), this.src, this.__imageLoaded) : _index.nothing, this.__playing ? "true" : "false", this.toggle, this.disabled || !this.src, this.srcWithoutAnimation, !this.src || !this.longdesc, this.__playing ? 0 : 1, this.longdesc) : _index.nothing);
      }
      /**
       * Convention
       */

    }, {
      key: "updated",
      value:
      /**
       * LitElement updated life-cycle
       */
      function updated(changedProperties) {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(A11yGifPlayer.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          // import on visibility
          if (propName === "elementVisible" && _this2[propName]) {
            new Promise(function (res, rej) {
              return _require.default(["../a11y-details/a11y-details.js"], res, rej);
            });
          }
        });
      }
      /**
       * mutation observer for a11y-details
       * @readonly
       * @returns {object}
       */

    }, {
      key: "observer",
      get: function get() {
        var _this3 = this;

        var callback = function callback() {
          return _this3._updateFromSlot();
        };

        return new MutationObserver(callback);
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this4 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(A11yGifPlayer.prototype), "connectedCallback", this)) babelHelpers.get(babelHelpers.getPrototypeOf(A11yGifPlayer.prototype), "connectedCallback", this).call(this);
        this.observer.observe(this, {
          attributes: false,
          childList: true,
          subtree: true
        });
        window.addEventListener("beforeprint", function (event) {
          _this4.shadowRoot.querySelector("#longdesc").toggleOpen();
        });
        window.addEventListener("afterprint", function (event) {
          _this4.shadowRoot.querySelector("#longdesc").toggleOpen();
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var _this5 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(A11yGifPlayer.prototype), "disconnectedCallback", this)) babelHelpers.get(babelHelpers.getPrototypeOf(A11yGifPlayer.prototype), "disconnectedCallback", this).call(this);
        this.observer.disconnect();
        window.removeEventListener("beforeprint", function (event) {
          _this5.shadowRoot.querySelector("#longdesc").toggleOpen();
        });
        window.removeEventListener("afterprint", function (event) {
          _this5.shadowRoot.querySelector("#longdesc").toggleOpen();
        });
      }
      /**
       * plays the animation regarless of previous state
       */

    }, {
      key: "play",
      value: function play() {
        this.__playing = true;
      }
      /**
       * stops the animation regarless of previous state
       */

    }, {
      key: "stop",
      value: function stop() {
        this.__playing = false;
      }
      /**
       * toggles the animation based on current state
       */

    }, {
      key: "toggle",
      value: function toggle() {
        if (this.__playing) {
          this.stop();
        } else {
          this.play();
        }
      }
      /**
       * deprecated. toggles the animation based on current state
       */

    }, {
      key: "toggleAnimation",
      value: function toggleAnimation() {
        if (this.__playing) {
          this.stop();
        } else {
          this.play();
        }
      }
      /**
       * when slot changes update with animated gif
       */

    }, {
      key: "_updateFromSlot",
      value: function _updateFromSlot() {
        var img = this.querySelector("img");

        if (img) {
          var src = img.src || null;
          var alt = img.alt || null;
          if (src) this.srcWithoutAnimation = src;
          if (alt) this.alt = alt;
        } // support simple-img tag since it can auto-convert gif to static!


        img = this.querySelector("simple-img");

        if (img) {
          var _src = img.srcconverted || null;

          var _alt = img.alt || null;

          if (_src) this.srcWithoutAnimation = _src;
          if (_alt) this.alt = _alt;
        }
      }
      /**
       * haxProperties integration via file reference
       */

    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject4_9dfd97e08e0011ed99ce491205e67b1d || (_templateObject4_9dfd97e08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        .sr-only {\n          position: absolute;\n          left: -9999999px;\n          top: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        #container {\n          padding: 0;\n          margin: 0;\n          position: relative;\n          border: var(--a11y-gif-player-border, none);\n          border-radius: var(--a11y-gif-player-border-radius, 0);\n        }\n        img {\n          width: 100%;\n        }\n        button {\n          position: absolute;\n          width: 100%;\n          top: 0;\n          left: 0;\n          bottom: 0;\n          right: 0;\n          background-size: contain;\n          background-color: var(--a11y-gif-player-button-bg, #cccccc);\n        }\n        button:active,\n        button:focus,\n        button:hover {\n          border: var(--a11y-gif-player-focus-border, none);\n          outline: var(--a11y-gif-player-outline, 3px solid);\n        }\n        button[disabled] {\n          cursor: var(--a11y-gif-player-disabled-cursor, not-allowed);\n        }\n        button[aria-pressed=\"true\"] {\n          opacity: 0;\n        }\n        svg {\n          position: absolute;\n          top: 35%;\n          left: 35%;\n          width: var(--a11y-gif-player-arrow-size, 30%);\n          height: var(--a11y-gif-player-arrow-size, 30%);\n        }\n        g {\n          opacity: var(--a11y-gif-player-arrow-opacity, 0.5);\n        }\n        button:not([disabled]):active g,\n        button:not([disabled]):hover g,\n        button:not([disabled]):focus g {\n          opacity: var(--a11y-gif-player-button-focus-opacity, 0.7);\n        }\n        polygon {\n          fill: var(--a11y-gif-player-button-color, #000000);\n          stroke: var(--a11y-gif-player-arrow-border-color, #ffffff);\n          stroke-width: var(--a11y-gif-player-arrow-border-width, 15px);\n        }\n        text {\n          fill: var(--a11y-gif-player-button-text-color, #ffffff);\n        }\n        #longdesc {\n          position: absolute;\n          left: 2px;\n          bottom: 2px;\n          width: calc(100% - 2px);\n          font-size: 80%;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "a11y-gif-player";
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(A11yGifPlayer), "properties", this)), {}, {
          /**
           * Alt text of gif
           */
          alt: {
            type: String
          },

          /**
           * Whether button is disabled
           */
          disabled: {
            type: Boolean
          },

          /*
           * other id's to add to aria-describedby
           */
          describedBy: {
            attribute: "described-by",
            type: String
          },

          /**
           * longer image description for accesibility
           */
          longdesc: {
            type: String,
            attribute: "longdesc"
          },

          /**
           * Source of animated gif
           */
          src: {
            type: String
          },

          /**
           * Source of static version of image
           */
          srcWithoutAnimation: {
            type: String,
            attribute: "src-without-animation"
          },

          /**
           * whether GIF is playing
           */
          __playing: {
            type: Boolean
          },

          /**
           * if the gif source is loaded to avoid jarring on load
           */
          __gifLoaded: {
            type: Boolean
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return decodeURIComponent(meta.url) + "/../lib/".concat(this.tag, ".haxProperties.json");
      }
    }]);
    return A11yGifPlayer;
  }((0, _I18NMixin2.I18NMixin)((0, _IntersectionObserverMixin.IntersectionObserverMixin)((0, _schemaBehaviors.SchemaBehaviors)(_index.LitElement))));

  _exports.A11yGifPlayer = A11yGifPlayer;
  customElements.define(A11yGifPlayer.tag, A11yGifPlayer);
});