define(["exports", "../../../lit/index.js", "./hax-store.js"], function (_exports, _index, _haxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxAppSearchResult = void 0;

  var _templateObject_9fa848e0809211edaa2833647dc78c6c, _templateObject2_9fa848e0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-source`
   * @element hax-source
   * `An element that brokers the visual display of a listing of material from an end point. The goal is to normalize data from some location which is media centric. This expects to get at least enough data in order to form a grid of items which are selectable. It's also generically implemented so that anything can be hooked up as a potential source for input (example: youtube API or custom in-house solution). The goal is to return enough info via fired event so that we can tell hax-body that the user selected a tag, properties, slot combination so that hax-body can turn the selection into a custom element / element injected into the hax-body slot.`
   */
  var HaxAppSearchResult = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HaxAppSearchResult, _LitElement);

    var _super = _createSuper(HaxAppSearchResult);

    function HaxAppSearchResult() {
      babelHelpers.classCallCheck(this, HaxAppSearchResult);
      return _super.call(this);
    }

    babelHelpers.createClass(HaxAppSearchResult, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_9fa848e0809211edaa2833647dc78c6c || (_templateObject_9fa848e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <button\n        draggable=\"true\"\n        @click=\"", "\"\n        @dragstart=\"", "\"\n        @dragend=\"", "\"\n        title=\"", "\"\n      >\n        <img loading=\"lazy\" class=\"image\" src=\"", "\" />\n        <div class=\"detail-wrapper\">", "</div>\n      </button>\n    "])), this._itemSelected, this._dragStart, this._dragEnd, this.details, this.image, this.title.substr(0, 40));
      }
    }, {
      key: "_dragStart",
      value:
      /**
       * Drag start so we know what target to set
       */
      function _dragStart(e) {
        // create the tag
        var target = this.cloneNode(true);
        _haxStore.HAXStore.__dragTarget = target;

        if (e.dataTransfer) {
          e.dataTransfer.effectAllowed = "move";
          e.dataTransfer.dropEffect = "move";
        }

        e.stopPropagation();
        e.stopImmediatePropagation();
      }
      /**
       * When we end dragging ensure we remove the mover class.
       */

    }, {
      key: "_dragEnd",
      value: function _dragEnd(e) {
        var _this = this;

        setTimeout(function () {
          _this._itemSelected(e);
        }, 0);
      }
      /**
       * Handle media item selected.
       */

    }, {
      key: "_itemSelected",
      value: function _itemSelected(e) {
        var map = this.map;
        var gizmoType = this.type; // sanity check as well as guessing based on type if we absolutely have to

        if ((!gizmoType || gizmoType == null || gizmoType == "" || gizmoType == "undefined") && map.source) {
          gizmoType = _haxStore.HAXStore.guessGizmoType(map);
        }

        var haxElements = _haxStore.HAXStore.guessGizmo(gizmoType, map, false, true); // see if we got anything


        if (haxElements.length > 0) {
          if (haxElements.length === 1) {
            if (babelHelpers.typeof(haxElements[0].tag) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              haxElements[0].nextToActive = true;
              this.dispatchEvent(new CustomEvent("hax-insert-content", {
                bubbles: true,
                cancelable: true,
                composed: true,
                detail: haxElements[0]
              }));
            }
          } else {
            // hand off to hax-app-picker to deal with the rest of this
            _haxStore.HAXStore.haxAppPicker.presentOptions(haxElements, gizmoType, "How would you like to display this " + gizmoType + "?", "gizmo");
          }
        } else {
          _haxStore.HAXStore.toast("Sorry, HAX can't handle that link yet.");
        }
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_9fa848e0809211edaa2833647dc78c6c || (_templateObject2_9fa848e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: flex;\n          flex-direction: column;\n          align-items: stretch;\n          justify-content: space-evenly;\n          height: 100%;\n        }\n        button {\n          font-size: var(--hax-ui-font-size-xs);\n          margin: 0;\n          padding: 0;\n          display: flex;\n          flex-direction: column;\n          align-items: stretch;\n          border-radius: 0;\n          border: none;\n          width: 100%;\n          outline: 1px solid var(--hax-toolbar-border-color);\n          opacity: 0.8;\n          background-color: var(--hax-toolbar-button-bg);\n          transition: 0.2s opacity ease-in-out, 0.2s outline-color ease-in-out;\n          flex: 1 0 auto;\n        }\n        button:hover,\n        button:focus,\n        button:active {\n          outline-color: var(--hax-tray-accent-color);\n          outline-width: 4px;\n          outline-style: solid;\n          opacity: 1;\n        }\n        .detail-wrapper {\n          flex: 1 0 auto;\n          max-height: 30px;\n          overflow: hidden;\n          text-align: center;\n          text-overflow: ellipsis;\n        }\n        .image {\n          flex: 0 0 auto;\n          width: 100%;\n          background-color: var(--hax-toolbar-border-color);\n        }\n        @media screen and (max-width: 1000px) {\n          :host {\n            width: 100%;\n          }\n          .title {\n            font-size: 12px;\n          }\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-app-search-result";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          image: {
            type: String
          },
          title: {
            type: String
          },
          details: {
            type: String
          },
          map: {
            type: Object
          },
          type: {
            type: String
          }
        };
      }
    }]);
    return HaxAppSearchResult;
  }(_index.LitElement);

  _exports.HaxAppSearchResult = HaxAppSearchResult;
  customElements.define(HaxAppSearchResult.tag, HaxAppSearchResult);
});