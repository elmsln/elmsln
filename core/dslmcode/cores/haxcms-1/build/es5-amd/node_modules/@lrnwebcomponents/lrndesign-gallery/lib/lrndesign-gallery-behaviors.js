define(["exports", "../../../lit/index.js", "../../simple-colors/simple-colors.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../simple-tooltip/simple-tooltip.js"], function (_exports, _index, _simpleColors, _simpleIconLite, _simpleIcons, _simpleTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignGalleryBehaviors = void 0;

  var _templateObject_a130bda0809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lerndesign-gallery-behaviors`
   * A set of properties for lerndesign-gallery components.
   *
   * @element lerndesign-gallery-behaviors
   * @extends SimpleColors
   *
   * @microcopy - language worth noting:
   *  -
   *
   */
  var LrndesignGalleryBehaviors = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(LrndesignGalleryBehaviors, _SimpleColors);

    var _super = _createSuper(LrndesignGalleryBehaviors);

    function LrndesignGalleryBehaviors() {
      var _this;

      babelHelpers.classCallCheck(this, LrndesignGalleryBehaviors);
      _this = _super.call(this);
      _this.aspectRatio = 1.33333333;
      _this.extraWide = false;
      _this.grid = false;
      _this.responsiveSize = "xs";
      _this.selected = {};
      _this.sizing = "cover";
      _this.sources = [];
      return _this;
    }

    babelHelpers.createClass(LrndesignGalleryBehaviors, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if ((propName == "galleryTitle" || propName == "title") && !_this2.galleryTitle) _this2.galleryTitle = _this2.title;
        });
      }
      /**
       * Generate a UUID
       */

    }, {
      key: "_generateUUID",
      value: function _generateUUID() {
        return "ss-s-s-s-sss".replace(/s/g, Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1));
      }
      /**
       * gets parent node's offset in light DOM
       *
       * @param {object} the node
       * @returns {number} the parent node's offset in pixels
       */

    }, {
      key: "_getParentOffset",
      value: function _getParentOffset(node) {
        var parent = node.parentNode;

        if (parent !== undefined && parent !== null && parent.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
          parent = parent.host;
        }

        return parent.offsetTop;
      }
    }, {
      key: "_itemChanged",
      value: function _itemChanged(query) {
        /**
         * Handles changes in selected item by firing an event to the gallery
         *
         * @event item-changed
         */
        this.dispatchEvent(new CustomEvent("item-changed", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: query
        }));
      }
      /**
       * tallies the offsets (item and parent) and scrolls to the item
       *
       * @param {array} an array of offsets
       */

    }, {
      key: "_scrollIntoView",
      value: function _scrollIntoView() {
        var offsets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0];
        window.scrollTo({
          top: offsets.reduce(function (total, num) {
            return total + num;
          }),
          behavior: "smooth"
        });
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "lrndesign-gallery-behaviors";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignGalleryBehaviors), "styles", this)), [(0, _index.css)(_templateObject_a130bda0809211edaa2833647dc78c6c || (_templateObject_a130bda0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          border-radius: var(--lrndesign-gallery-border-radius, 0px);\n          box-shadow: var(--lrndesign-gallery-box-shadow, unset);\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n        :host {\n          display: block;\n          --lrndesign-gallery-color: var(--simple-colors-default-theme-grey-12);\n          --lrndesign-gallery-background-color: var(\n            --simple-colors-default-theme-grey-1\n          );\n          --lrndesign-gallery-focus-color: var(\n            --simple-colors-default-theme-accent-9\n          );\n          --lrndesign-gallery-border-color: var(\n            --simple-colors-default-theme-grey-4\n          );\n          --lrndesign-gallery-thumbnail-outline: 1px solid\n            var(--simple-colors-default-theme-grey-12);\n\n          --lrndesign-gallery-dialog-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --lrndesign-gallery-dialog-background-color: var(\n            --simple-colors-default-theme-grey-1\n          );\n          --lrndesign-gallery-dialog-toggled-background-color: var(\n            --simple-colors-default-theme-grey-2\n          );\n          --lrndesign-gallery-dialog-border-color: var(\n            --simple-colors-default-theme-grey-4\n          );\n          --lrndesign-gallery-carousel-next-bg: linear-gradient(\n            to right,\n            rgba(255, 255, 255, 0) 0%,\n            rgba(255, 255, 255, 0.5) 50%,\n            rgba(255, 255, 255, 0.7) 70%,\n            rgba(255, 255, 255, 0.9) 90%\n          );\n          --lrndesign-gallery-carousel-prev-bg: linear-gradient(\n            to right,\n            rgba(255, 255, 255, 0.9) 10%,\n            rgba(255, 255, 255, 0.7) 30%,\n            rgba(255, 255, 255, 0.5) 50%,\n            rgba(255, 255, 255, 0) 100%\n          );\n          --lrndesign-gallery-thumbnail-image: {\n            display: block;\n            border-radius: 3px;\n            border: 2px solid transparent;\n          }\n          --lrndesign-gallery-thumbnail-image-focus: {\n            opacity: 0.7;\n            border: 2px solid var(--lrndesign-gallery-focus-color);\n          }\n          --lrndesign-gallery-thumbnail-image-selected: {\n            opacity: 0.5;\n            cursor: default;\n          }\n        }\n        :host([dark]) {\n          --lrndesign-gallery-background-color: var(\n            --simple-colors-default-theme-grey-2\n          );\n          --lrndesign-gallery-border-color: var(\n            --simple-colors-default-theme-grey-1\n          );\n          --lrndesign-gallery-carousel-next-bg: linear-gradient(\n            to right,\n            rgba(0, 0, 0, 0) 0%,\n            rgba(0, 0, 0, 0.5) 50%,\n            rgba(0, 0, 0, 0.7) 70%,\n            rgba(0, 0, 0, 0.9) 90%\n          );\n          --lrndesign-gallery-carousel-prev-bg: linear-gradient(\n            to right,\n            rgba(0, 0, 0, 0.9) 10%,\n            rgba(0, 0, 0, 0.7) 30%,\n            rgba(0, 0, 0, 0.5) 50%,\n            rgba(0, 0, 0, 0) 100%\n          );\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        .sr-only {\n          position: absolute;\n          left: -999999;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        .gallerythumb {\n          min-width: unset;\n          max-width: 100%;\n          padding: 0;\n          margin: 0;\n          display: inline-block;\n          transform: none !important;\n          position: static !important;\n          cursor: pointer;\n        }\n        lrndesign-gallery-zoom {\n          z-index: 2;\n        }\n        simple-tooltip {\n          z-index: 2;\n        }\n        .zoombg {\n          background-color: var(--lrndesign-gallery-dialog-background-color);\n          opacity: 0.25;\n        }\n        .zoombg,\n        .zoomicon {\n          position: absolute;\n          width: 24px;\n          height: 24px;\n          transition: opacity 0.5s ease-in-out;\n        }\n        lrndesign-gallery-zoom:focus-within .zoombg,\n        lrndesign-gallery-zoom:hover .zoombg {\n          opacity: 0;\n          transition: opacity 0.5s ease-in-out;\n        }\n        .zoomicon {\n          opacity: 0.75;\n          color: var(--lrndesign-gallery-color);\n          background-color: transparent;\n        }\n        lrndesign-gallery-zoom:focus-within .zoomicon,\n        lrndesign-gallery-zoom:hover .zoomicon {\n          opacity: 1;\n          transition: opacity 0.5s ease-in-out;\n        }\n        @media print {\n          #galleryscreen {\n            display: none !important;\n          }\n        }\n      "])))]);
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignGalleryBehaviors), "properties", this)), {}, {
          /**
           * a named anchor for the gallery
           */
          anchorData: {
            type: Object
          },

          /**
           * aspect ratio of media
           */
          aspectRatio: {
            type: Number
          },

          /**
           * size for responsive CSS
           */
          extraWide: {
            type: Boolean,
            reflect: true,
            attribute: "extra-wide"
          },

          /**
           * gallery's unique id
           */
          galleryId: {
            type: String
          },

          /**
           * gallery's title
           */
          galleryTitle: {
            type: String,
            reflect: true,
            attribute: "gallery-title"
          },

          /**
           * @deprecated Use @link{layout} instead
           */
          grid: {
            type: Boolean
          },

          /**
           * layout type: currently masonry, carousel, and grid
           */
          layout: {
            type: String,
            attribute: "layout"
          },

          /*
           * parent size for responsive styling
           */
          responsiveSize: {
            type: String,
            reflect: true,
            attribute: "responsive-size"
          },

          /*
           * id of item
           */
          selected: {
            type: Object,
            reflect: true
          },

          /*
           * array of gallery items
           */
          sources: {
            type: Array
          },

          /**
           * default sizing: fit screen by cropping (cover)
           * or with letterboxing (contain)
           */
          sizing: {
            type: String
          },

          /**
           * DEPRECATED gallery's title
           */
          title: {
            type: String
          }
        });
      }
    }]);
    return LrndesignGalleryBehaviors;
  }(_simpleColors.SimpleColors);

  _exports.LrndesignGalleryBehaviors = LrndesignGalleryBehaviors;
  customElements.define(LrndesignGalleryBehaviors.tag, LrndesignGalleryBehaviors);
});