define(["exports", "../../../../lit/index.js", "./rich-text-editor-toolbar.js", "../../../absolute-position-behavior/absolute-position-behavior.js"], function (_exports, _index, _richTextEditorToolbar, _absolutePositionBehavior) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorToolbarMini = void 0;

  var _templateObject_e9e534108e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-toolbar-mini`
   * `a mini floating toolbar for the rich text editor`
   *
   * @customElement
   * @extends RichTextEditorToolbarBehaviors
   * @extends LitElement
   * @lit-html
   * @lit-element
   * @element rich-text-editor-toolbar-mini
   * @demo ./demo/mini.html mini floating toolbar
   */
  var RichTextEditorToolbarMini = /*#__PURE__*/function (_RichTextEditorToolba) {
    babelHelpers.inherits(RichTextEditorToolbarMini, _RichTextEditorToolba);

    var _super = _createSuper(RichTextEditorToolbarMini);

    function RichTextEditorToolbarMini() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorToolbarMini);
      _this = _super.call(this);
      _this.sticky = false;
      _this.config = _this.miniConfig;
      return _this;
    }

    babelHelpers.createClass(RichTextEditorToolbarMini, [{
      key: "render",
      value: // properties available to the custom element for data binding
      function render() {
        return (0, _index.html)(_templateObject_e9e534108e0011ed99ce491205e67b1d || (_templateObject_e9e534108e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" ", " "])), babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarMini.prototype), "miniTemplate", this));
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarMini.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          //disable sticky for mini
          if (propName === "sticky" && _this2.sticky) _this2.sticky = false;
        });
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "rich-text-editor-toolbar-mini";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarMini), "baseStyles", this)), babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarMini), "miniStyles", this)));
      }
    }]);
    return RichTextEditorToolbarMini;
  }((0, _richTextEditorToolbar.RichTextEditorToolbarBehaviors)(_index.LitElement));

  _exports.RichTextEditorToolbarMini = RichTextEditorToolbarMini;
  customElements.define(RichTextEditorToolbarMini.tag, RichTextEditorToolbarMini);
});