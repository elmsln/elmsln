define(["exports", "../../lit/index.js", "../simple-colors/simple-colors.js", "../paper-avatar/paper-avatar.js"], function (_exports, _index, _simpleColors, _paperAvatar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignAvatar = void 0;

  var _templateObject_a7e859c08e0011ed99ce491205e67b1d, _templateObject2_a7e859c08e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
    * `lrndesign-avatar`
    * Visualize a user account either with an image, icon, initials, or as abstract art.
    *
   ### Styling
   Custom property | Description | Default
   ----------------|-------------|----------
   `--lrndesign-avatar-width` | Size (width and height) of the avatar image | 40px
    * @lit-html
    * @lit-element
    * @demo demo/index.html
    */
  var LrndesignAvatar = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(LrndesignAvatar, _SimpleColors);

    var _super = _createSuper(LrndesignAvatar);

    // life cycle
    function LrndesignAvatar() {
      var _this;

      babelHelpers.classCallCheck(this, LrndesignAvatar);
      _this = _super.call(this);
      _this.allowGrey = false;
      _this.dark = false;
      _this.twoChars = false;
      _this.jdenticon = false;
      _this.label = "|";
      return _this;
    }

    babelHelpers.createClass(LrndesignAvatar, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_a7e859c08e0011ed99ce491205e67b1d || (_templateObject_a7e859c08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <paper-avatar\n      accent-color=\"", "\"\n      ?allow-grey=\"", "\"\n      ?dark=\"", "\"\n      .label=\"", "\"\n      .icon=\"", "\"\n      .src=\"", "\"\n      ?two-chars=\"", "\"\n      ?jdenticon=\"", "\"\n    ></paper-avatar>"])), this.accentColor, this.allowGrey, this.dark, this.label || "", this.icon || "", this.src || "", this.twoChars, this.jdenticon);
      } // haxProperty definition

    }, {
      key: "_getAccentColor",
      value: function _getAccentColor() {
        // legacy API bridge
        if (this.colors && !this.allowGrey && (!this.accentColor || this.accentColor === "grey")) {
          var color = (this.color || "").replace("-text", "");

          if (color && this.colors[color]) {
            this.accentColor = color;
          } else {
            var str = this.label || this.icon,
                char = str && str.charCodeAt(0) ? str.charCodeAt(0) : Math.floor(Math.random() * 16),
                colors = Object.keys(this.colors);
            color = colors[char % 16 + 1];
            this.accentColor = colors[char % 16 + 1] || colors[Math.floor(Math.random() * this.colors.length)];
          }
        }
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignAvatar.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignAvatar.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "color" || propName == "label" || propName == "icon") {
            _this2._getAccentColor();
          }
        });
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignAvatar), "styles", this)), [(0, _index.css)(_templateObject2_a7e859c08e0011ed99ce491205e67b1d || (_templateObject2_a7e859c08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          margin: 0;\n          padding: 0;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        paper-avatar {\n          border-radius: var(--lrndesign-avatar-border-radius, 50%);\n          max-height: var(--lrndesign-avatar-width, 40px);\n          --paper-avatar-width: var(--lrndesign-avatar-width, 40px);\n          --paper-avatar-color: var(\n            --simple-colors-default-theme-accent-8,\n            #444\n          );\n          --paper-avatar-text-color: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n        }\n\n        :host([invert]) paper-avatar {\n          --paper-avatar-color: var(--simple-colors-default-theme-grey-1, #fff);\n          --paper-avatar-text-color: var(\n            --simple-colors-default-theme-accent-8,\n            #444\n          );\n        }\n      "])))]);
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: true,
          gizmo: {
            title: "Avatar",
            description: "Visualize a user account either with an image, icon, initials, or as abstract art.",
            icon: "image:collections",
            color: "yellow",
            groups: ["Media", "Image"],
            handles: [{
              type: "image",
              source: "image"
            }],
            meta: {
              author: "HAXTheWeb core team"
            }
          },
          settings: {
            configure: [{
              property: "accentColor",
              title: "Accent Color",
              description: "Pick an accent color.",
              inputMethod: "colorpicker"
            }, {
              property: "dark",
              title: "Dark",
              description: "Use dark text (and light background) for avatar.",
              inputMethod: "boolean"
            }, {
              property: "icon",
              title: "Icon",
              description: "Optional: Pick an icon for avatar.",
              inputMethod: "iconpicker"
            }, {
              property: "src",
              title: "Image Source",
              description: "Optional: Upload an image for avatar.",
              inputMethod: "haxupload"
            }, {
              property: "label",
              title: "Two-character initials",
              description: "Label used to create initials or unique Jdenticon.",
              inputMethod: "textfield"
            }, {
              property: "twoChars",
              title: "Two-character initials",
              description: "When no Jdenticon, image, or icon, use two-character for initials.",
              inputMethod: "boolean"
            }, {
              property: "jdenticon",
              title: "Jdenticon",
              description: "Optional: Unique icon design based on label.",
              inputMethod: "boolean"
            }],
            advanced: [{
              property: "allowGrey",
              title: "Allow Grey",
              description: "Allows grey if set. Otherwise a color will be assigned",
              inputMethod: "boolean"
            }]
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignAvatar), "properties", this)), {}, {
          /**
           * allow grey instead of accent color, default selects a color
           */
          allowGrey: {
            type: Boolean,
            attribute: "allow-grey"
          },

          /**
           * optional simple-icon
           */
          icon: {
            type: String
          },

          /**
           * invert colors
           */
          invert: {
            type: Boolean,
            attribute: "invert",
            reflect: true
          },

          /**
           * text to use for avatar
           */
          label: {
            type: String
          },

          /**
           * link to an image, optional
           */
          src: {
            type: String
          },

          /**
           * Mode for presenting 1st two letters
           */
          twoChars: {
            type: Boolean,
            attribute: "two-chars"
          },

          /**
           * "Deprecated": Color class work to apply
           */
          color: {
            type: String
          },

          /**
           * Form abstract art from hash of label
           */
          jdenticon: {
            type: Boolean
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "lrndesign-avatar";
      }
    }]);
    return LrndesignAvatar;
  }(_simpleColors.SimpleColors);

  _exports.LrndesignAvatar = LrndesignAvatar;
  customElements.define(LrndesignAvatar.tag, LrndesignAvatar);
});