define(["exports", "meta", "require", "../../../lit/index.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../i18n-manager/lib/I18NMixin.js"], function (_exports, meta, _require, _index, _simpleIconLite, _simpleIcons, _I18NMixin2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MapMenuHeader = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);

  var _templateObject_a17f79e0809211edaa2833647dc78c6c, _templateObject2_a17f79e0809211edaa2833647dc78c6c, _templateObject3_a17f79e0809211edaa2833647dc78c6c, _templateObject4_a17f79e0809211edaa2833647dc78c6c, _templateObject5_a17f79e0809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var MapMenuHeader = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(MapMenuHeader, _I18NMixin);

    var _super = _createSuper(MapMenuHeader);

    /**
     * HTMLElement
     */
    function MapMenuHeader() {
      var _this;

      babelHelpers.classCallCheck(this, MapMenuHeader);
      _this = _super.call(this);
      _this.avatarLabel = "";
      _this.icon = null;
      _this.url = "";
      _this.status = "";
      _this.opened = false;
      _this.active = false;
      _this.published = true;
      _this.locked = false;
      _this.t = {
        pageIsUnpublished: "Page is unpublished"
      };

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        namespace: "map-menu",
        localesPath: new URL("../locales", meta.url).href,
        locales: ["es"]
      });

      setTimeout(function () {
        _this.addEventListener("click", _this.__tap.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("keypress", _this.__keypress.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }
    /**
     * LitElement life cycle - properties changed callback
     */


    babelHelpers.createClass(MapMenuHeader, [{
      key: "render",
      value:
      /**
       * LitElement life cycle - render callback
       */
      function render() {
        return (0, _index.html)(_templateObject_a17f79e0809211edaa2833647dc78c6c || (_templateObject_a17f79e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"container\">\n        ", "\n        <div id=\"center\">\n          <a tabindex=\"-1\" href=\"", "\">\n            <button class=\"title\">\n              ", "\n              <div id=\"label\">", "</div>\n              <div class=\"title\">", "</div>\n              ", "\n            </button>\n          </a>\n        </div>\n      </div>\n    "])), this.avatarLabel ? (0, _index.html)(_templateObject2_a17f79e0809211edaa2833647dc78c6c || (_templateObject2_a17f79e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n              <div class=\"avatarlabel\">\n                <lrndesign-avatar\n                  label=\"", "\"\n                ></lrndesign-avatar>\n              </div>\n            "])), this.avatarLabel) : "", this.url, this.icon ? (0, _index.html)(_templateObject3_a17f79e0809211edaa2833647dc78c6c || (_templateObject3_a17f79e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n                    <simple-icon-lite icon=\"", "\"></simple-icon-lite>\n                  "])), this.icon) : "", this.label, this.title, !this.published ? (0, _index.html)(_templateObject4_a17f79e0809211edaa2833647dc78c6c || (_templateObject4_a17f79e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["<simple-icon-lite\n                    id=\"unpublished\"\n                    title=\"", "\"\n                    icon=\"icons:visibility-off\"\n                  ></simple-icon-lite>"])), this.t.pageIsUnpublished) : "");
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "opened") {
            _this2._openedChanged(_this2[propName], oldValue);
          }

          if (["id", "selected"].includes(propName)) {
            _this2.__selectedChanged(_this2.selected, _this2.id);
          } // only import avatar if we absolutely need it since its heavy


          if (propName == "avatarLabel" && _this2[propName] != "") {
            new Promise(function (res, rej) {
              return _require.default(["../../lrndesign-avatar/lrndesign-avatar.js"], res, rej);
            });
          }
        });
      }
      /**
       * LitElement life cycle - properties definition
       */

    }, {
      key: "_openedChanged",
      value: function _openedChanged(newValue, oldValue) {
        if (newValue) {
          this.__collapseIcon = "icons:expand-more";
          this.__collapseAria = "collapse menu";
        } else {
          this.__collapseIcon = "icons:chevron-right";
          this.__collapseAria = "expand menu";
        }
      }
    }, {
      key: "__selectedChanged",
      value: function __selectedChanged(selected, id) {
        if (selected === id) {
          if (!this.parentNode.expanded) {
            this.dispatchEvent(new CustomEvent("toggle-header", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: true
            }));
          }

          this.dispatchEvent(new CustomEvent("active-item", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        }
      }
    }, {
      key: "__tap",
      value: function __tap(e) {
        // send to toggle event
        this.__toggleEventHandler(e);
      }
    }, {
      key: "__keypress",
      value: function __keypress(e) {
        // send to toggle event
        if (e.code === "Enter") {
          this.__toggleEventHandler(e);
        }
      }
    }, {
      key: "__toggleEventHandler",
      value: function __toggleEventHandler(e) {
        if (!this.parentNode.expanded) {
          this.dispatchEvent(new CustomEvent("toggle-header", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: true
          }));
        }
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject5_a17f79e0809211edaa2833647dc78c6c || (_templateObject5_a17f79e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          transition: 0.1s all ease-in-out;\n          --map-menu-item-height: 24px;\n        }\n        :host([active]) {\n          background: var(--map-menu-active-color);\n          color: var(--map-menu-item-active-item-color, #000000);\n        }\n        #container {\n          display: flex;\n          align-items: center;\n        }\n\n        .avatarlabel {\n          margin-right: 10px;\n        }\n\n        #center {\n          flex: 1 1 auto;\n        }\n        a,\n        a:visited {\n          display: block;\n          color: var(--map-menu-item-a-color, inherit);\n          text-decoration: var(--map-menu-header-a-text-decoration, none);\n        }\n        a:hover button,\n        a:active button,\n        a:focus button {\n          color: var(\n            --map-menu-item-a-active-color,\n            var(--map-menu-item-a-color, inherit)\n          );\n          text-decoration: var(\n            --map-menu-header-a-text-decoration-hover,\n            underline\n          );\n        }\n        lrndesign-avatar {\n          display: inline-block;\n          background: #fff;\n          border-radius: 50%;\n          box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3);\n          padding: 2px;\n          position: relative;\n          margin-top: -2px;\n          transform: translateY(2px);\n        }\n\n        #link {\n          display: flex;\n          justify-content: flex-start;\n          align-items: flex-start;\n          flex-direction: column;\n        }\n\n        #right simple-icon-lite {\n          display: inline-block;\n          color: gray;\n        }\n\n        simple-icon-lite {\n          color: inherit;\n          display: inline-block;\n          --simple-icon-height: var(--map-menu-item-height);\n          --simple-icon-width: var(--map-menu-item-height);\n        }\n\n        button {\n          cursor: pointer;\n          color: inherit;\n          background-color: transparent;\n          text-transform: none;\n          width: 100%;\n          justify-content: left;\n          margin: 0px;\n          border: 0;\n          min-height: var(--map-menu-header-button-min-height, 48px);\n          padding: 4px;\n          text-align: left;\n          border-radius: 0;\n        }\n        :host([status=\"new\"]) a::after {\n          border-right: 8px solid green;\n          content: \"\";\n          margin-left: -8px;\n        }\n        :host([status=\"modified\"]) a::after {\n          border-right: 8px solid orange;\n          content: \"\";\n          margin-left: -8px;\n        }\n        :host([status=\"delete\"]) a::after {\n          border-right: 8px solid red;\n          content: \"\";\n          margin-left: -8px;\n        }\n        #unpublished {\n          --simple-icon-width: 20px;\n          --simple-icon-height: 20px;\n          color: orange;\n          float: right;\n          margin: -4px 32px 0px 0px;\n          vertical-align: top;\n          height: 0px;\n          width: 0px;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "map-menu-header";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          title: {
            type: String
          },
          label: {
            type: String
          },
          avatarLabel: {
            type: String,
            attribute: "avatar-label"
          },
          opened: {
            type: Boolean
          },
          url: {
            type: String
          },
          id: {
            type: String,
            reflect: true
          },
          icon: {
            type: String
          },
          active: {
            type: Boolean,
            reflect: true
          },
          published: {
            type: Boolean
          },
          locked: {
            type: Boolean
          },
          status: {
            type: String,
            reflect: true
          },
          selected: {
            type: String,
            reflect: true
          },
          __collapseIcon: {
            type: String
          },
          __collapseAria: {
            type: String
          }
        };
      }
    }]);
    return MapMenuHeader;
  }((0, _I18NMixin2.I18NMixin)(_index.LitElement));

  _exports.MapMenuHeader = MapMenuHeader;
  customElements.define(MapMenuHeader.tag, MapMenuHeader);
});