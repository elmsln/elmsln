define(["exports", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/elements/dom-repeat.js", "../../@polymer/polymer/lib/elements/dom-if.js"], function (_exports, _polymerElement, _domRepeat, _domIf) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnAssignments = _exports.LrnAssignment = void 0;

  var _templateObject_a70302d08e0011ed99ce491205e67b1d, _templateObject2_a70302d08e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  `lrn-assignment`
  
  * @demo demo/index.html
  */
  var LrnAssignment = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnAssignment, _PolymerElement);

    var _super = _createSuper(LrnAssignment);

    function LrnAssignment() {
      babelHelpers.classCallCheck(this, LrnAssignment);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnAssignment, null, [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_a70302d08e0011ed99ce491205e67b1d || (_templateObject_a70302d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: flex;\n          width: 100%;\n        }\n        div.card {\n          width: 100%;\n          box-shadow: 0 5px 5px rgba(0, 0, 0, 0.7);\n        }\n      </style>\n      <div class=\"card\">\n        <img src=\"[[image]]\" loading=\"lazy\" alt=\"\" />\n        <h3>[[title]]</h3>\n        <div class=\"card-content\">[[details]] <slot></slot></div>\n        <div class=\"card-actions\">\n          <template is=\"dom-repeat\" items=\"[[actions]]\">\n            <a href$=\"[[item.url]]\"><button raised>[[item.label]]</button></a>\n          </template>\n        </div>\n      </div>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrn-assignment";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title
           */
          title: {
            type: String
          },

          /**
           * Image url
           */
          image: {
            type: String
          },

          /**
           * Details of the assignment
           */
          details: {
            type: String
          },

          /**
           * url
           */
          url: {
            type: String
          },
          open: {
            type: Boolean,
            value: false
          },
          complete: {
            type: Boolean,
            value: false
          },
          actions: {
            type: Object
          }
        };
      }
    }]);
    return LrnAssignment;
  }(_polymerElement.PolymerElement);

  _exports.LrnAssignment = LrnAssignment;
  customElements.define(LrnAssignment.tag, LrnAssignment);

  var LrnAssignments = /*#__PURE__*/function (_PolymerElement2) {
    babelHelpers.inherits(LrnAssignments, _PolymerElement2);

    var _super2 = _createSuper(LrnAssignments);

    function LrnAssignments() {
      babelHelpers.classCallCheck(this, LrnAssignments);
      return _super2.apply(this, arguments);
    }

    babelHelpers.createClass(LrnAssignments, [{
      key: "assignmentsChanged",
      value: function assignmentsChanged(assignments) {
        if (assignments.length <= 1) {
          this.layout = "wide";
        } else if (assignments.length <= 4) {
          this.layout = "medium";
        } else if (assignments.length <= 6) {
          this.layout = "tight";
        }
      }
    }, {
      key: "rowItemsChanged",
      value: function rowItemsChanged(items) {}
    }, {
      key: "handleResponse",
      value: function handleResponse(data) {
        this.assignments = data.response;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject2_a70302d08e0011ed99ce491205e67b1d || (_templateObject2_a70302d08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: flex;\n          flex-wrap: wrap;\n        }\n        :host lrn-assignment {\n          margin: 16px;\n        }\n        :host([layout=\"wide\"]) lrn-assignment {\n          width: calc(100% - 32px);\n        }\n        :host([layout=\"medium\"]) lrn-assignment {\n          width: calc(50% - 32px);\n        }\n        :host([layout=\"tight\"]) lrn-assignment {\n          width: calc(25% - 32px);\n        }\n      </style>\n      <template is=\"dom-repeat\" items=\"[[assignments]]\">\n        <lrn-assignment\n          title=\"[[item.title]]\"\n          actions=\"[[item.actions]]\"\n        ></lrn-assignment>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[url]]\">\n        <iron-ajax\n          auto=\"\"\n          url=\"[[url]]\"\n          handle-as=\"json\"\n          on-response=\"handleResponse\"\n        ></iron-ajax>\n      </template>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrn-assignments";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          assignments: {
            type: Object,
            reflectToAttribute: true,
            observer: "assignmentsChanged"
          },
          layout: {
            type: String,
            reflectToAttribute: true
          },
          url: {
            type: String
          }
        };
      }
    }]);
    return LrnAssignments;
  }(_polymerElement.PolymerElement);

  _exports.LrnAssignments = LrnAssignments;
  customElements.define(LrnAssignments.tag, LrnAssignments);
});