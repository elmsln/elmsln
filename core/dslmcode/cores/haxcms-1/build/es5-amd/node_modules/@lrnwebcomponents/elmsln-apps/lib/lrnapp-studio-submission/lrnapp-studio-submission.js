define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../secure-request/secure-request.js", "../../../../@polymer/app-route/app-location.js", "../../../../@polymer/app-route/app-route.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../../@polymer/paper-toast/paper-toast.js", "./lrnapp-studio-submission-page.js", "../elmsln-base-deps.js", "./lrnapp-studio-submission-button.js"], function (_exports, _polymerElement, _secureRequest, _appLocation, _appRoute, _domIf, _paperToast, _lrnappStudioSubmissionPage, _elmslnBaseDeps, _lrnappStudioSubmissionButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioSubmission = void 0;

  var _templateObject_b42a3940809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappStudioSubmission = /*#__PURE__*/function (_SecureRequestXhr) {
    babelHelpers.inherits(LrnappStudioSubmission, _SecureRequestXhr);

    var _super = _createSuper(LrnappStudioSubmission);

    function LrnappStudioSubmission() {
      babelHelpers.classCallCheck(this, LrnappStudioSubmission);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappStudioSubmission, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappStudioSubmission.prototype), "connectedCallback", this).call(this);
        this.addEventListener("submissionDeleted", this._handleSubmissionDeletion.bind(this));
        this.addEventListener("displaymessage", this._handleDisplayMessage.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.removeEventListener("submissionDeleted", this._handleSubmissionDeletion.bind(this));
        this.removeEventListener("displaymessage", this._handleDisplayMessage.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnappStudioSubmission.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "_handleRouteChange",
      value: function _handleRouteChange(event) {
        var path = event.detail.path;

        if (path) {
          this.set("route.path", path);
          this.notifyPath("route.path");
        }
      } // If the current route is outside the scope of our app
      // then allow the website to break out of the single page
      // application routing

    }, {
      key: "_routeChanged",
      value: function _routeChanged(route, endPoint) {
        if (typeof route.path === "string") {
          if (typeof endPoint === "string") {
            if (route.path.startsWith(endPoint)) {
              return;
            }
          } // reload the page which since route changed will load that page


          window.location.reload();
        }
      }
    }, {
      key: "_handleSubmissionDeletion",
      value: function _handleSubmissionDeletion(e) {
        var submission = e.detail.submission;

        if (submission) {
          this.set("route.path", this.endPoint);
          this.notifyPath("route.path");
          this.$.toast.show("Submission has been deleted.");
        }
      }
    }, {
      key: "_updateCookies",
      value: function _updateCookies(endPoint, csrfToken) {
        if (endPoint && csrfToken) {
          this.setCookies(endPoint, csrfToken);
        }
      }
    }, {
      key: "_handleDisplayMessage",
      value: function _handleDisplayMessage(e, detail) {
        if (typeof e.detail.messsage !== "undefined") {
          this.$.toast.show(e.detail.message);
        }
      }
      /**
       * Simple way to convert from object to array.
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_b42a3940809211edaa2833647dc78c6c || (_templateObject_b42a3940809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        button {\n          padding: 0;\n          margin: 0;\n          min-width: 1rem;\n        }\n      </style>\n      <app-location route=\"{{route}}\"></app-location>\n      <app-route\n        route=\"{{route}}\"\n        pattern=\"[[endPoint]]/submissions/:submission\"\n        data=\"{{data}}\"\n        tail=\"{{tail}}\"\n      >\n      </app-route>\n\n      <template is=\"dom-if\" if=\"[[data.submission]]\">\n        <lrnapp-studio-submission-page\n          base-path=\"{{basePath}}\"\n          route=\"{{tail}}\"\n          id=\"[[data.submission]]\"\n          end-point=\"[[endPoint]]\"\n          csrf-token=\"[[csrfToken]]\"\n          data=\"{{data}}\"\n        ></lrnapp-studio-submission-page>\n      </template>\n      <template is=\"dom-if\" if=\"[[!data.submission]]\">\n        This is the lrnapp-studio-submission page.\n      </template>\n\n      <paper-toast id=\"toast\"></paper-toast>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-submission";
      }
    }, {
      key: "properties",
      get: function get() {
        var _ref;

        return _ref = {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },
          activePage: {
            type: String
          }
        }, babelHelpers.defineProperty(_ref, "basePath", {
          type: String
        }), babelHelpers.defineProperty(_ref, "endPoint", {
          type: String
        }), babelHelpers.defineProperty(_ref, "csrfToken", {
          type: String
        }), _ref;
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_routeChanged(route, endPoint)", "_updateCookies(endPoint, csrfToken)"];
      }
    }]);
    return LrnappStudioSubmission;
  }((0, _secureRequest.SecureRequestXhr)(_polymerElement.PolymerElement));

  _exports.LrnappStudioSubmission = LrnappStudioSubmission;
  customElements.define(LrnappStudioSubmission.tag, LrnappStudioSubmission);
});