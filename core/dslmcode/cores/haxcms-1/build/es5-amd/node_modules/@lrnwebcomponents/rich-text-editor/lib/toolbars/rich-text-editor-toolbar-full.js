define(["exports", "../../../../lit/index.js", "./rich-text-editor-toolbar.js", "./rich-text-editor-breadcrumbs.js"], function (_exports, _index, _richTextEditorToolbar, _richTextEditorBreadcrumbs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorToolbarFull = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-toolbar-full`
   * `a full toolbar with breadcrumbs for the rich text editor`
   *
   * @customElement
   * @extends RichTextEditorToolbarBehaviors
   * @extends LitElement
   * @lit-html
   * @lit-element
   * @element rich-text-editor-toolbar-full
   * @demo ./demo/index.html demo
   * @demo ./demo/full.html toolbar with breadcrumb
   */
  var RichTextEditorToolbarFull = /*#__PURE__*/function (_RichTextEditorToolba) {
    babelHelpers.inherits(RichTextEditorToolbarFull, _RichTextEditorToolba);

    var _super = _createSuper(RichTextEditorToolbarFull);

    function RichTextEditorToolbarFull() {
      babelHelpers.classCallCheck(this, RichTextEditorToolbarFull);
      return _super.call(this);
    }
    /**
     * overriden default to enable breadcrums
     *
     * @readonly
     * @memberof RichTextEditorToolbarFull
     */


    babelHelpers.createClass(RichTextEditorToolbarFull, [{
      key: "render",
      value: // render function for template
      function render() {
        return babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull.prototype), "render", this).call(this);
      } // properties available to the custom element for data binding

    }, {
      key: "hasBreadcrumbs",
      get: function get() {
        return true;
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "rich-text-editor-toolbar-full";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull), "baseStyles", this)), babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull), "stickyStyles", this)));
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull), "properties", this));
      }
    }]);
    return RichTextEditorToolbarFull;
  }((0, _richTextEditorToolbar.RichTextEditorToolbarBehaviors)(_index.LitElement));

  _exports.RichTextEditorToolbarFull = RichTextEditorToolbarFull;
  customElements.define(RichTextEditorToolbarFull.tag, RichTextEditorToolbarFull);
});