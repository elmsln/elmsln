define(["exports", "../../../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxLabel = void 0;

  var _templateObject_72fd3210809211edaa2833647dc78c6c, _templateObject2_72fd3210809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AppHaxLabel = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(AppHaxLabel, _LitElement);

    var _super = _createSuper(AppHaxLabel);

    function AppHaxLabel() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxLabel);
      _this = _super.call(this);
      _this.title = "Welcome";
      _this.subtitle = "Start your journey now!";
      return _this;
    }

    babelHelpers.createClass(AppHaxLabel, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_72fd3210809211edaa2833647dc78c6c || (_templateObject_72fd3210809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"topBar\">\n        <div class=\"title\" part=\"title\">\n          <span class=\"bracket\">&#60;</span><slot>", "</slot\n          ><span class=\"bracket\">&#62;</span>\n        </div>\n        <div class=\"subtitle\" part=\"subtitle\">\n          <slot name=\"subtitle\">", "</slot>\n        </div>\n      </div>\n    "])), this.title, this.subtitle);
      }
    }], [{
      key: "tag",
      get: // a convention I enjoy so you can change the tag name in 1 place
      function get() {
        return "app-hax-label";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          title: {
            type: String
          },
          subtitle: {
            type: String
          }
        };
      } // TODO: If scaling is weird with font-sizes, try using clamp() (https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/)

    }, {
      key: "styles",
      get: function get() {
        return (0, _index.css)(_templateObject2_72fd3210809211edaa2833647dc78c6c || (_templateObject2_72fd3210809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      :host {\n        font-family: \"Press Start 2P\", sans-serif;\n        text-align: center;\n      }\n\n      .title {\n        -webkit-text-stroke: 1px\n          var(--app-hax-accent-color, var(--accent-color));\n        -webkit-text-fill-color: var(\n          --app-hax-background-color,\n          var(--background-color)\n        );\n        font-weight: normal;\n        font-size: 3.5vw;\n        display: inline-flex;\n        align-items: center;\n      }\n\n      .subtitle {\n        color: var(--app-hax-accent-color, var(--accent-color));\n        font-weight: normal;\n        margin-top: 2px;\n        font-size: 20px;\n      }\n      @media (max-width: 700px) {\n        .subtitle {\n          font-size: 12px;\n        }\n      }\n\n      .bracket {\n        font-size: 8vw;\n        font-weight: normal;\n        vertical-align: middle;\n        -webkit-text-stroke: 0px;\n        -webkit-text-fill-color: var(\n          --app-hax-accent-color,\n          var(--accent-color)\n        );\n      }\n      @media (max-height: 500px) {\n        .title {\n          -webkit-text-stroke: unset;\n          -webkit-text-fill-color: unset;\n        }\n        .bracket {\n          font-size: 4vw;\n          margin: 0;\n          padding: 0;\n        }\n      }\n    "])));
      }
    }]);
    return AppHaxLabel;
  }(_index.LitElement);

  _exports.AppHaxLabel = AppHaxLabel;
  customElements.define(AppHaxLabel.tag, AppHaxLabel);
});