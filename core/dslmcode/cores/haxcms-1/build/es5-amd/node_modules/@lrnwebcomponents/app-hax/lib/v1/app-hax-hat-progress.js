define(["exports", "meta", "../../../../lit/index.js", "../../../simple-colors/simple-colors.js", "../../../../mobx/dist/mobx.esm.js", "./AppHaxStore.js", "../../../promise-progress/promise-progress.js"], function (_exports, meta, _index, _simpleColors, _mobxEsm, _AppHaxStore, _promiseProgress) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxHatProgress = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_ae054ac08e0011ed99ce491205e67b1d, _templateObject2_ae054ac08e0011ed99ce491205e67b1d;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AppHaxHatProgress = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(AppHaxHatProgress, _SimpleColors);

    var _super = _createSuper(AppHaxHatProgress);

    function AppHaxHatProgress() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxHatProgress);
      _this = _super.call(this);
      _this.promises = [];
      _this.max = 100;
      (0, _mobxEsm.autorun)(function () {
        _this.promises = (0, _mobxEsm.toJS)(_AppHaxStore.store.newSitePromiseList);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.dark = (0, _mobxEsm.toJS)(_AppHaxStore.store.darkMode);
      });
      return _this;
    }

    babelHelpers.createClass(AppHaxHatProgress, [{
      key: "process",
      value: function process() {
        this.shadowRoot.querySelector("#progress2").process();
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxHatProgress.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxHatProgress.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        this.dispatchEvent(new CustomEvent("progress-ready", {
          detail: true
        }));
        setTimeout(function () {
          _this2.shadowRoot.querySelector("#progress2").addEventListener("value-changed", function (e) {
            _this2.shadowRoot.querySelector("#value").textContent = e.detail.value;
          });

          _this2.shadowRoot.querySelector("#progress2").addEventListener("max-changed", function (e) {
            _this2.max = e.detail.value;
          });

          _this2.shadowRoot.querySelector("#progress2").addEventListener("promise-progress-finished", function (e) {
            if (e.detail.value) {
              // this will seem like magic... but our createSite
              // Promise has a special flag on the function that
              // saves the result in an object relative to our API broker
              // this way if we ask it for the last thing it created
              // the response is there even though we kicked it off previously
              // we more or less assume it completed bc the Promises all resolved
              // and it was our 1st Promise we asked to issue!
              // state clean up incase activated twice
              if (_this2.shadowRoot.querySelector(".game")) {
                _this2.shadowRoot.querySelector(".game").remove();
              }

              var createResponse = _AppHaxStore.store.AppHaxAPI.lastResponse.createSite.data;
              var text = document.createElement("button");
              _this2.shadowRoot.querySelector("#value").textContent = _this2.max;
              text.textContent = "Let's go!";
              text.classList.add("game");
              text.addEventListener("pointerdown", function () {
                _AppHaxStore.store.appEl.playSound("click");
              });
              text.addEventListener("click", function () {
                _AppHaxStore.store.appEl.reset();

                setTimeout(function () {
                  window.location = createResponse.slug.replace("index.html", "");
                }, 0);
              });

              _this2.shadowRoot.querySelector("#progress2").parentNode.appendChild(text); // show you saying you got this!


              _AppHaxStore.store.toast("".concat(createResponse.title ? createResponse.title : "", " ready!"), 1500, {
                hat: "random"
              });

              _AppHaxStore.store.setPageTitle("".concat(createResponse.title ? createResponse.title : "", " ready!"));

              setTimeout(function () {
                _AppHaxStore.store.toast("redirecting in 3..", 10000, {
                  hat: "random",
                  walking: true
                });

                _AppHaxStore.store.setPageTitle("Redirecting in 3..");

                setTimeout(function () {
                  _AppHaxStore.store.toast("redirecting in 2..", 10000, {
                    hat: "random",
                    walking: true
                  });

                  _AppHaxStore.store.setPageTitle("Redirecting in 2..");

                  setTimeout(function () {
                    _AppHaxStore.store.toast("redirecting in 1..", 10000, {
                      hat: "random",
                      walking: true
                    });

                    _AppHaxStore.store.setPageTitle("Redirecting in 1..");

                    _AppHaxStore.store.appEl.reset();

                    setTimeout(function () {
                      _AppHaxStore.store.setPageTitle("Enjoy!");

                      window.location = createResponse.slug.replace("index.html", "");
                    }, 1000);
                  }, 1000);
                }, 1000);
              }, 1800);

              _this2.dispatchEvent(new CustomEvent("promise-progress-finished", {
                composed: true,
                bubbles: true,
                cancelable: true,
                detail: true
              }));
            }
          });
        }, 0);
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_ae054ac08e0011ed99ce491205e67b1d || (_templateObject_ae054ac08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <img\n        src=\"", "\"\n        alt=\"\"\n      />\n      <promise-progress\n        id=\"progress2\"\n        accent-color=\"red\"\n        ?dark=\"", "\"\n        class=\"progress\"\n        .list=", "\n      ></promise-progress>\n      <div class=\"count\"><span id=\"value\">0</span>%</div>\n    "])), new URL("../assets/images/HatBlank.svg", meta.url).href, this.dark, this.promises);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "app-hax-hat-progress";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxHatProgress), "properties", this)), {}, {
          promises: {
            type: Array
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxHatProgress), "styles", this)), [(0, _index.css)(_templateObject2_ae054ac08e0011ed99ce491205e67b1d || (_templateObject2_ae054ac08e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          height: 400px;\n          width: 400px;\n        }\n        img {\n          width: 400px;\n          height: 400px;\n          pointer-events: none;\n        }\n        .progress {\n          margin: -148px 0 0 10px;\n          z-index: -1;\n        }\n        .progress::part(progress) {\n          height: 100px;\n          width: 338px;\n          margin-top: -1px 0 0 -4px;\n        }\n\n        .progress::part(progress)::-moz-progress-bar {\n          background-color: red;\n          height: 50px;\n          margin: 24px 0 0 0;\n          border: none;\n        }\n\n        .count {\n          color: var(--simple-colors-default-theme-grey-1, white);\n          font-family: \"Press Start 2P\", sans-serif;\n          width: 350px;\n          text-align: center;\n          position: relative;\n          display: block;\n          font-size: 30px;\n          margin-top: -250px;\n          margin-left: 30px;\n        }\n        .game {\n          font-family: \"Press Start 2P\", sans-serif;\n          font-size: 28px;\n          font-weight: bold;\n          text-align: center;\n          width: 310px;\n          background-color: var(--simple-colors-default-theme-red-7, red);\n          color: var(--simple-colors-default-theme-grey-1, white);\n          border: 0px;\n          height: 54px;\n          display: block;\n          position: relative;\n          margin: 138px 0px 0px 52px;\n          padding: 0;\n          box-sizing: border-box;\n        }\n        .game:focus,\n        .game:hover {\n          cursor: pointer;\n          background-color: var(--simple-colors-default-theme-red-8);\n          color: var(--simple-colors-default-theme-grey-2);\n        }\n        .game:active {\n          cursor: progress;\n          background-color: var(--simple-colors-default-theme-red-10);\n          color: var(--simple-colors-default-theme-grey-5);\n        }\n      "])))]);
      }
    }]);
    return AppHaxHatProgress;
  }(_simpleColors.SimpleColors);

  _exports.AppHaxHatProgress = AppHaxHatProgress;
  customElements.define(AppHaxHatProgress.tag, AppHaxHatProgress);
});