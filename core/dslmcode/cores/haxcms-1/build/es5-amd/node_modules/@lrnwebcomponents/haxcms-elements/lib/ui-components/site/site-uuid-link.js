define(["exports", "../../../../../lit/index.js", "../../core/haxcms-site-store.js", "../../../../../mobx/dist/mobx.esm.js"], function (_exports, _index, _haxcmsSiteStore, _mobxEsm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteUuidLink = void 0;

  var _templateObject_fad524108e0011ed99ce491205e67b1d, _templateObject2_fad524108e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `site-uuid-link`
   * `UUID to render an accurate link and title in the site`
   *
   * @demo demo/index.html
   */
  var SiteUuidLink = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(SiteUuidLink, _LitElement);

    var _super = _createSuper(SiteUuidLink);

    function SiteUuidLink() {
      var _this;

      babelHelpers.classCallCheck(this, SiteUuidLink);
      _this = _super.call(this);
      _this.uuid = null;
      return _this;
    }
    /**
     * LitElement
     */


    babelHelpers.createClass(SiteUuidLink, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_fad524108e0011ed99ce491205e67b1d || (_templateObject_fad524108e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <a href=\"", "\" @click=\"", "\">\n        ", "\n      </a>\n    "])), this.getLinkFromUUID(this.uuid), this.testOpen, this.getTitleFromUUID(this.uuid));
      }
    }, {
      key: "testOpen",
      value: function testOpen(e) {
        if (this._haxstate) {
          // do not do default so we can select this
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
          return false;
        }
      } // get title from uuid

    }, {
      key: "getLinkFromUUID",
      value: function getLinkFromUUID(uuid) {
        if (uuid && _haxcmsSiteStore.store.findItem(uuid)) {
          var item = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.findItem(uuid));
          return item.slug;
        }

        return "";
      } // get title from uuid

    }, {
      key: "getTitleFromUUID",
      value: function getTitleFromUUID(uuid) {
        if (uuid && _haxcmsSiteStore.store.findItem(uuid)) {
          var item = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.findItem(uuid));
          return item.title;
        }

        return "";
      }
      /**
       * Props
       */

    }, {
      key: "haxHooks",
      value:
      /**
       * Implements haxHooks to tie into life-cycle if hax exists.
       */
      function haxHooks() {
        return {
          editModeChanged: "haxeditModeChanged",
          activeElementChanged: "haxactiveElementChanged",
          setupActiveElementForm: "haxsetupActiveElementForm"
        };
      }
    }, {
      key: "haxeditModeChanged",
      value: function haxeditModeChanged(value) {
        this._haxstate = value;
      }
      /**
       * double-check that we are set to inactivate click handlers
       * this is for when activated in a duplicate / adding new content state
       */

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        if (val) {
          this._haxstate = val;
        }
      }
      /**
       * Allow for dynamic setting of the parent field if we have the store around
       * with values to do so
       */

    }, {
      key: "haxsetupActiveElementForm",
      value: function haxsetupActiveElementForm(props) {
        var _this2 = this;

        if (window.HAXCMS) {
          var itemManifest = _haxcmsSiteStore.store.getManifestItems(true); // default to null parent as the whole site


          var items = [{
            text: "Select page",
            value: null
          }];
          itemManifest.forEach(function (el) {
            if (el.id != _this2.itemId) {
              (function () {
                // calculate -- depth so it looks like a tree
                var itemBuilder = el; // walk back through parent tree

                var distance = "- ";

                while (itemBuilder && itemBuilder.parent != null) {
                  itemBuilder = itemManifest.find(function (i) {
                    return i.id == itemBuilder.parent;
                  }); // double check structure is sound

                  if (itemBuilder) {
                    distance = "--" + distance;
                  }
                }

                items.push({
                  text: distance + el.title,
                  value: el.id
                });
              })();
            }
          });
          props.settings.configure.forEach(function (attr, index) {
            if (attr.property === "uuid") {
              props.settings.configure[index].inputMethod = "select";
              props.settings.configure[index].itemsList = items;
            }
          });
        }
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_fad524108e0011ed99ce491205e67b1d || (_templateObject2_fad524108e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline;\n        }\n      "])))];
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "site-uuid-link";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          uuid: {
            type: String
          }
        };
      }
      /**
       * haxProperties integration via file reference
       */

    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: false,
          gizmo: {
            title: "HAX link",
            description: "A link to a specific resource in the site your working on.",
            icon: "icons:link",
            color: "grey",
            groups: ["Content", "CMS"],
            handles: [{
              type: "inline",
              text: "term"
            }],
            meta: {
              author: "HAXTheWeb core team"
            }
          },
          settings: {
            configure: [{
              property: "uuid",
              title: "Item",
              description: "Item to render for the link / title data",
              inputMethod: "textfield"
            }]
          }
        };
      }
    }]);
    return SiteUuidLink;
  }(_index.LitElement);

  _exports.SiteUuidLink = SiteUuidLink;
  customElements.define(SiteUuidLink.tag, SiteUuidLink);
});