define(["exports", "../../../lit/index.js", "./simple-fields-container.js", "../../code-editor/code-editor.js", "../../utils/utils.js"], function (_exports, _index, _simpleFieldsContainer, _codeEditor, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsCode = void 0;

  var _templateObject_dd5df5608e0011ed99ce491205e67b1d, _templateObject2_dd5df5608e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   *`simple-fields-code`
   * HTML inputs (excluding submit, reset, button, and image)
   * with label, description, error massage,
   * and aria-invalid functionality if needed.
   *
   * @customElement
   * @group simple-fields
   * @element simple-fields-code
   * @demo ./demo/field.html
   * @class SimpleFieldsCode
   * @extends {SimpleFieldsContainerBehaviors(LitElement)}
   */
  var SimpleFieldsCode = /*#__PURE__*/function (_SimpleFieldsContaine) {
    babelHelpers.inherits(SimpleFieldsCode, _SimpleFieldsContaine);

    var _super = _createSuper(SimpleFieldsCode);

    function SimpleFieldsCode() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFieldsCode);
      _this = _super.call(this);
      _this.autofocus = false;
      _this.fontSize = 14;
      _this.id = _this._generateUUID();
      _this.language = "html";
      _this.mode = "html";
      _this.readonly = false;
      return _this;
    }

    babelHelpers.createClass(SimpleFieldsCode, [{
      key: "render",
      value: function render() {
        return !this.hasFieldSet ? babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCode.prototype), "render", this).call(this) : this.fieldsetTemplate;
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var _this2 = this;

        this.removeEventListener("click", function (e) {
          return _this2.focus();
        });
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCode.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "id" && !_this3.id) _this3.id = _this3._generateUUID();
          if (propName === "field" && !_this3.field) _this3._updateField();
          if (propName === "value") _this3._fireValueChanged();
        });
      }
      /**
       * template label and field
       *
       * @readonly
       * @returns {object}
       * @memberof SimpleFieldsContainerBehaviors
       */

    }, {
      key: "fieldMainTemplate",
      get: function get() {
        var _this4 = this;

        return (0, _index.html)(_templateObject_dd5df5608e0011ed99ce491205e67b1d || (_templateObject_dd5df5608e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"field-main\" part=\"field-main\">\n        ", "\n        <code-editor\n          ?autofocus=\"", "\"\n          ?disabled=\"", "\"\n          font-size=\"", "\"\n          editor-value=\"", "\"\n          theme=\"", "\"\n          language=\"", "\"\n          mode=\"", "\"\n          ?read-only=\"", "\"\n          @value-changed=\"", "\"\n          @focused-changed=\"", "\"\n          @code-editor-focus=\"", "\"\n          @code-editor-blur=\"", "\"\n          part=\"editor\"\n        >\n        </code-editor>\n        <input name=\"", "\" type=\"hidden\" value=\"", "\" />\n      </div>\n    "])), this.labelTemplate, this.autofocus, this.disabled, this.fontSize, this.__editorValue || "", this.theme || "auto", this.language, this.mode, this.readonly || this.disabled, this._onChange, this._onFocusChange, function (e) {
          return _this4.focused == true;
        }, function (e) {
          return _this4.focused == false;
        }, this.id, this.value);
      }
      /**
       * makes handles code-editor changes
       *
       * @memberof SimpleFieldsCode
       */

    }, {
      key: "_onChange",
      value: function _onChange(e) {
        var target = (0, _utils.normalizeEventPath)(e)[0];
        if (!target) return;
        if (this.value !== target.value) this.value = target.value; //this.autoGrow(target);
      }
      /**
       * overridden mutation observer
       *
       * @readonly
       * @memberof SimpleFieldsContainerBehaviors
       */

    }, {
      key: "slottedFieldObserver",
      get: function get() {}
      /**
       * checks validation constraints and returns error data
       * @memberof SimpleFieldsCode
       */

    }, {
      key: "validate",
      value: function validate() {
        if (!this.value && this.required) {
          this.error = true;
          this.errorMessage = this.requiredMessage || "required";
        } // to match container response


        return !this.error;
      }
      /**
       * fires when value changes
       * @event value-changed
       */

    }, {
      key: "_fireValueChanged",
      value: function _fireValueChanged() {
        this.dispatchEvent(new CustomEvent("value-changed", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
    }, {
      key: "_onFocusChange",
      value: function _onFocusChange(e) {
        this.focused = e.detail.focused;
      }
      /**
       * listens for focusout
       * overridden for fields in shadow DOM
       *
       * @param {boolean} [init=true] whether to start observing or disconnect observer
       * @memberof SimpleFieldsContainerBehaviors
       */

    }, {
      key: "_observeAndListen",
      value: function _observeAndListen() {
        var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (init) {
          this.addEventListener("click", this.focus);
          this.addEventListener("focusout", this._onFocusout);
          this.addEventListener("focusin", this._onFocusin);
        } else {
          this.removeEventListener("click", this.focus);
          this.removeEventListener("focusout", this._onFocusout);
          this.removeEventListener("focusin", this._onFocusin);
        }
      }
      /**
       * updates field an type
       *
       * @memberof SimpleFieldsCode
       */

    }, {
      key: "_updateField",
      value: function _updateField() {
        this.field = this.shadowRoot && this.shadowRoot.querySelector("code-editor") ? this.shadowRoot.querySelector("code-editor") : undefined;
      }
      /**
       * generates a unique id
       * @returns {string } unique id
       */

    }, {
      key: "_generateUUID",
      value: function _generateUUID() {
        return "ss-s-s-s-sss".replace(/s/g, Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1));
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-fields-code";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCode), "styles", this)), [(0, _index.css)(_templateObject2_dd5df5608e0011ed99ce491205e67b1d || (_templateObject2_dd5df5608e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        #options {\n          display: var(--simple-fields-radio-option-display, flex);\n          flex-wrap: var(--simple-fields-radio-option-flex-wrap, wrap);\n        }\n        code-editor {\n          margin: 0;\n          transition: height 0.5s ease-in-out;\n          box-sizing: border-box;\n          vertical-align: bottom;\n        }\n        code-editor:focus {\n          outline: none;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCode), "properties", this)), {}, {
          /**
           * Automatically focus on field when the page is loaded
           */
          autofocus: {
            type: Boolean
          },

          /**
           * changes the value of the editor
           */
          editorValue: {
            type: String,
            attribute: "editor-value"
          },

          /**
           * Whether the field is hidden
           */
          focused: {
            type: Boolean,
            reflect: true
          },

          /**
           * Font-size of editor
           */
          fontSize: {
            type: Number,
            attribute: "font-size"
          },

          /**
           * language of code-editor
           */
          language: {
            type: String
          },

          /**
           * mode of code-editor
           */
          mode: {
            type: Number
          },

          /**
           * Value is not editable
           */
          readonly: {
            type: Boolean,
            reflect: true
          },

          /**
           * error message when field is required and has no value
           */
          requiredMessage: {
            type: String
          },

          /**
           * theme of code-editor
           */
          theme: {
            type: String,
            reflect: true
          },

          /**
           * Current value of the form control. Submitted with the form as part of a name/value pair.
           */
          value: {
            reflect: true
          }
        });
      }
    }]);
    return SimpleFieldsCode;
  }((0, _simpleFieldsContainer.SimpleFieldsContainerBehaviors)(_index.LitElement));

  _exports.SimpleFieldsCode = SimpleFieldsCode;
  customElements.define(SimpleFieldsCode.tag, SimpleFieldsCode);
});