define(["exports", "meta", "../../lit/index.js", "../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _index, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Hal9000 = void 0;
  meta = _interopRequireWildcard(meta);

  var _templateObject_68880a80809211edaa2833647dc78c6c, _templateObject2_68880a80809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
    * `hal-9000`
    * @element hal-9000
    * `Robot assistant tag, hopefully not evil`
    *
   
    * @demo demo/index.html
    */
  var Hal9000 = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(Hal9000, _LitElement);

    var _super = _createSuper(Hal9000);

    /**
     * Establish the element
     */
    function Hal9000() {
      var _this;

      babelHelpers.classCallCheck(this, Hal9000);
      _this = _super.call(this);
      _this.commands = {};
      _this.respondsTo = "(hal)";
      _this.debug = false;
      _this.pitch = 0.9;
      _this.rate = 0.9;
      _this.language = navigator.language; // ensure singleton is set

      window.Hal9000 = window.Hal9000 || {};
      window.Hal9000.instance = babelHelpers.assertThisInitialized(_this);
      var location = "".concat(new URL("./lib/annyang/annyang.min.js", meta.url).href);
      window.addEventListener("es-bridge-annyang-loaded", _this._annyangLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      window.ESGlobalBridge.requestAvailability().load("annyang", location); // check for speech synthesis API

      if (typeof window.speechSynthesis !== "undefined") {
        _this.synth = window.speechSynthesis;
        _this.voices = _this.synth.getVoices();

        for (var i = 0; i < _this.voices.length; i++) {
          if (_this.voices[i].default) {
            _this.defaultVoice = _this.voices[i].name;
          }
        }
      }

      return _this;
    }
    /**
     * Notice new voice commands added
     */


    babelHelpers.createClass(Hal9000, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_68880a80809211edaa2833647dc78c6c || (_templateObject_68880a80809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <slot></slot>"])));
      } // properties available to the custom element for data binding

    }, {
      key: "_commandsChanged",
      value: function _commandsChanged(newValue) {
        this.addCommands(newValue);
      }
      /**
       * Just rout add commands call to the right place
       */

    }, {
      key: "addCommands",
      value: function addCommands(commands) {
        if (this.annyang) {
          this.annyang.addCommands(commands);
        }
      }
      /**
       * And the word was good.
       */

    }, {
      key: "speak",
      value: function speak(text) {
        this.__text = text;

        if (this.synth) {
          this.utter = new SpeechSynthesisUtterance(this.__text);
          this.utter.pitch = this.pitch;
          this.utter.rate = this.rate;
          this.utter.lang = this.language;
          this.utter.voice = this.defaultVoice; // THOU SPEAKITH

          this.synth.speak(this.utter);
        } else {
          console.warn("I have no voice...");
        }
      }
      /**
       * Annyang library has been loaded globally so we can use it
       */

    }, {
      key: "_annyangLoaded",
      value: function _annyangLoaded() {
        this.annyang = window.annyang; // Add our commands to annyang

        if (this.annyang) {
          this.annyang.addCommands(this.commands);
          this.annyang.debug(this.debug); // Start listening. You can call this here, or attach this call to an event, button, etc.

          if (this.auto) {
            this.annyang.start({
              autoRestart: true,
              continuous: true
            });
          } else if (this.enabled) {
            this.annyang.start();
          } // alert alert we are ready


          var evt = new CustomEvent("hal-9000-online", {
            bubbles: true,
            cancelable: false,
            detail: true
          });
          this.dispatchEvent(evt);
        }
      }
      /**
       * Change the key name that is responded to
       */

    }, {
      key: "_respondsToChanged",
      value: function _respondsToChanged(newValue, oldValue) {
        // remove all as our voice changed
        if (this.annyang) {
          this.annyang.removeCommands();
        }

        var commands = {};

        for (var i in this.commands) {
          if (i.replace(oldValue, newValue) !== i) {
            commands[i.replace(oldValue, newValue)] = this.commands[i];
          } else {
            commands[i] = this.commands[i];
          }
        }

        if (commands.length > 0) {
          this.commands = _objectSpread({}, commands);
        }
      }
      /**
       * Notice auto state changed so we start listening
       */

    }, {
      key: "_autoChanged",
      value: function _autoChanged(newValue) {
        this.enabled = newValue;
      }
      /**
       * React to enabled state changing
       */

    }, {
      key: "_enabledChanged",
      value: function _enabledChanged(newValue) {
        if (this.annyang) {
          if (newValue) {
            if (this.auto) {
              this.annyang.start({
                autoRestart: true,
                continuous: true
              });
            } else {
              this.annyang.start();
            }
          } else {
            this.annyang.abort();
          }
        }
      }
      /**
       * debug mode changed
       */

    }, {
      key: "_debugChanged",
      value: function _debugChanged(newValue, oldValue) {
        if (this.annyang) {
          this.annyang.debug(newValue);
        }
      }
      /**
       * LitElement properties changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "commands") {
            _this2._commandsChanged(_this2[propName], oldValue);
          }

          if (propName == "respondsTo") {
            _this2._respondsToChanged(_this2[propName], oldValue);
          }

          if (propName == "debug") {
            _this2._debugChanged(_this2[propName], oldValue);
          }

          if (propName == "auto") {
            _this2._autoChanged(_this2[propName], oldValue);
          }

          if (propName == "enabled") {
            _this2._enabledChanged(_this2[propName], oldValue);
          }
        });
      }
      /**
       * life cycle, element is removed from the DOM
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-annyang-loaded", this._annyangLoaded.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(Hal9000.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_68880a80809211edaa2833647dc78c6c || (_templateObject2_68880a80809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(Hal9000), "properties", this)), {}, {
          /**
           * Commands to listen for and take action on
           */
          commands: {
            name: "commands",
            type: Object
          },

          /**
           * The name that HAL 9000 should respond to.
           */
          respondsTo: {
            name: "respondsTo",
            type: String,
            attribute: "responds-to"
          },

          /**
           * Debug mode for annyang
           */
          debug: {
            name: "debug",
            type: Boolean
          },

          /**
           * Start automatically
           */
          auto: {
            name: "auto",
            type: Boolean,
            reflect: true
          },

          /**
           * Status of listening
           */
          enabled: {
            name: "enabled",
            type: Boolean,
            reflect: true
          },

          /**
           * Pitch of speech
           */
          pitch: {
            name: "pitch",
            type: Number,
            reflect: true
          },

          /**
           * Rate of speech
           */
          rate: {
            name: "rate",
            type: Number,
            reflect: true
          },

          /**
           * Language of the speaker
           */
          language: {
            name: "language",
            type: String,
            reflect: true
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "hal-9000";
      }
    }]);
    return Hal9000;
  }(_index.LitElement); // haxHooks() {
  //   return {
  //     haleditModeChanged: "haxeditModeChanged",
  //     halActiveElementChanged: "halActiveElementChanged",
  //   };
  // }
  // halActiveElementChanged(element, value) {
  //   if (value) {
  //     this._haxstate = value;
  //   }
  // }
  // haxeditModeChanged(value) {
  //   this._haxstate = value;
  // }
  // ensure we can generate a singleton


  _exports.Hal9000 = Hal9000;
  customElements.define(Hal9000.tag, Hal9000);
  window.Hal9000 = window.Hal9000 || {};

  window.Hal9000.requestAvailability = function () {
    if (!window.Hal9000.instance) {
      window.Hal9000.instance = new Hal9000();
    }
  };
});