define(["exports", "require", "../../lit/index.js", "../micro-frontend-registry/micro-frontend-registry.js", "../micro-frontend-registry/lib/microServices.js"], function (_exports, _require, _index, _microFrontendRegistry, _microServices) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EnhancedText = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_6695fe80809211edaa2833647dc78c6c, _templateObject2_6695fe80809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // enable services for glossary enhancement
  (0, _microServices.enableServices)(["haxcms"]);

  _microFrontendRegistry.MicroFrontendRegistry.add({
    endpoint: "/api/services/text/textVide",
    name: "@enhancedText/textVide",
    title: "text-vide",
    description: "Enhance readability of text based on brain science",
    params: {
      body: "Block of text to enhance"
    }
  });
  /**
   * `enhanced-text`
   * `take text and process it with various enhancements`
   * @demo demo/index.html
   * @element enhanced-text
   */


  var EnhancedText = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(EnhancedText, _LitElement);

    var _super = _createSuper(EnhancedText);

    /**
     * HTMLElement
     */
    function EnhancedText() {
      var _this;

      babelHelpers.classCallCheck(this, EnhancedText);
      _this = _super.call(this);
      _this.loading = false;
      _this.auto = false;
      _this.fixationPoint = 4;
      _this.vide = false;
      _this.wikipedia = false;
      _this.haxcmsGlossary = false;
      _this.haxcmsSiteLocation = "";
      _this.haxcmsSite = null;
      _this.haxcmsMarkAll = false;
      return _this;
    }

    babelHelpers.createClass(EnhancedText, [{
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(EnhancedText.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(EnhancedText.prototype), "firstUpdated", this).call(this, changedProperties);
        } // automatic enhancement if set, otherwise manual


        if (this.auto) {
          this.enhance();
        }
      } // apply terms from whatever came back

    }, {
      key: "applyTermFromList",
      value: function applyTermFromList(data) {
        var _this2 = this;

        if (data.status && data.data && data.data.length) {
          new Promise(function (res, rej) {
            return _require.default(["../vocab-term/vocab-term.js"], res, rej);
          }); // loop through and apply terms that were found w/ the vocab-term element
          // get all text nodes internally

          var textNodes = babelHelpers.toConsumableArray(this.childNodes) // has childNodes inside, including text ones
          .filter(function (child) {
            return child.nodeType === 3;
          }) // get only text nodes
          .filter(function (child) {
            return child.textContent.trim();
          }); // eliminate empty text
          // no text nodes, look for html

          if (textNodes.length === 0) {
            var content = this.innerText;
            this.innerHTML = "";
            content.split(/\s|\.+/).forEach(function (item) {
              var tn = document.createTextNode(item);

              _this2.appendChild(tn);

              _this2.appendChild(document.createTextNode(" "));
            });
            textNodes = babelHelpers.toConsumableArray(this.childNodes) // has childNodes inside, including text ones
            .filter(function (child) {
              return child.nodeType === 3;
            }) // get only text nodes
            .filter(function (child) {
              return child.textContent.trim();
            }); // eliminate empty text
          } // if we only have 1, leverage it


          if (textNodes.length === 1) {
            var _content = textNodes[0].textContent;
            textNodes[0].remove();

            _content.split(/\s|\.+/).forEach(function (item) {
              var tn = document.createTextNode(item);

              _this2.appendChild(tn);

              _this2.appendChild(document.createTextNode(" "));
            });

            textNodes = babelHelpers.toConsumableArray(this.childNodes) // has childNodes inside, including text ones
            .filter(function (child) {
              return child.nodeType === 3;
            }) // get only text nodes
            .filter(function (child) {
              return child.textContent.trim();
            }); // eliminate empty text
          } // loop through data and apply vocab-term wrapper


          for (var i = 0; i < data.data.length; i++) {
            var term = data.data[i];
            var found = false; // find textnodes that match the term and apply

            for (var j = 0; j < textNodes.length; j++) {
              var el = textNodes[j];

              if (el.textContent.toLowerCase() == term.term.toLowerCase() && (!found || this.haxcmsMarkAll)) {
                // find term in contents of page
                // replace in context
                var termEl = document.createElement("vocab-term");
                termEl.term = el.textContent;
                termEl.information = term.definition; // support for links from endpoint

                if (term.links && term.links.length > 0) {
                  var div = document.createElement("div");
                  div.classList.add("links");

                  for (var t = 0; t < term.links.length; t++) {
                    var a = document.createElement("a");
                    a.href = term.links[t].href;
                    a.innerText = term.links[t].title;
                    div.appendChild(a);
                  }

                  termEl.appendChild(div);
                }

                el.parentNode.insertBefore(termEl, el);
                termEl.appendChild(el);
                found = true;
              }
            }
          }
        }
      } // apply enhancement to text. if not in auto user must invoke this.

    }, {
      key: "enhance",
      value: function () {
        var _enhance = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var body;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  body = this.innerHTML;
                  this.loading = true;

                  if (!this.vide) {
                    _context.next = 5;
                    break;
                  }

                  _context.next = 5;
                  return _microFrontendRegistry.MicroFrontendRegistry.call("@enhancedText/textVide", {
                    body: body,
                    fixationPoint: this.fixationPoint
                  }, this.enahncedTextResponse.bind(this));

                case 5:
                  if (!(this.haxcmsGlossary && (this.haxcmsSiteLocation || this.haxcmsSite))) {
                    _context.next = 13;
                    break;
                  }

                  if (!this.haxcmsSite) {
                    _context.next = 11;
                    break;
                  }

                  _context.next = 9;
                  return _microFrontendRegistry.MicroFrontendRegistry.call("@haxcms/termsInPage", {
                    body: body,
                    type: "site",
                    site: this.haxcmsSite,
                    wikipedia: this.wikipedia
                  }, this.applyTermFromList.bind(this));

                case 9:
                  _context.next = 13;
                  break;

                case 11:
                  _context.next = 13;
                  return _microFrontendRegistry.MicroFrontendRegistry.call("@haxcms/termsInPage", {
                    body: body,
                    type: "link",
                    site: this.haxcmsSiteLocation,
                    wikipedia: this.wikipedia
                  }, this.applyTermFromList.bind(this));

                case 13:
                  // all above will run in order
                  this.loading = false;

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function enhance() {
          return _enhance.apply(this, arguments);
        }

        return enhance;
      }()
    }, {
      key: "enahncedTextResponse",
      value: function enahncedTextResponse(data) {
        if (data.status && data.data && data.data.length) {
          var parser = new DOMParser();
          var doc = parser.parseFromString(data.data, "text/html");
          this.innerHTML = doc.body.innerHTML;
        }
      }
      /**
       * LitElement style callback
       */

    }, {
      key: "render",
      value:
      /**
       * LitElement render callback
       */
      function render() {
        return (0, _index.html)(_templateObject_6695fe80809211edaa2833647dc78c6c || (_templateObject_6695fe80809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"loading\"></div>\n      <slot></slot>\n    "])));
      }
      /**
       * Convention we use
       */

    }], [{
      key: "properties",
      get: function get() {
        return {
          wikipedia: {
            type: Boolean,
            reflect: true
          },
          vide: {
            type: Boolean,
            reflect: true
          },
          fixationPoint: {
            type: Number,
            attribute: "fixation-point"
          },
          haxcmsGlossary: {
            type: Boolean,
            attribute: "haxcms-glossary"
          },
          haxcmsSiteLocation: {
            type: String,
            attribute: "haxcms-site-location"
          },
          haxcmsSite: {
            type: Object,
            attribute: "haxcms-site"
          },
          haxcmsMarkAll: {
            type: Boolean,
            attribute: "haxcms-mark-all"
          },
          loading: {
            type: Boolean,
            reflect: true
          },
          auto: {
            type: Boolean,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        // support for using in other classes
        var styles = [];

        if (babelHelpers.get(babelHelpers.getPrototypeOf(EnhancedText), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(EnhancedText), "styles", this);
        }

        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject2_6695fe80809211edaa2833647dc78c6c || (_templateObject2_6695fe80809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        div::slotted(bold) {\n          font-weight: 800;\n        }\n        :host([loading]) .loading {\n          margin: 8px 0 0 -12px;\n          font-size: 2px;\n          width: 4px;\n          height: 4px;\n          border-radius: 50%;\n          position: absolute;\n          -webkit-animation: load5 1.1s infinite ease;\n          animation: load5 1.1s infinite ease;\n          -webkit-transform: translateZ(0);\n          -ms-transform: translateZ(0);\n          transform: translateZ(0);\n        }\n        @-webkit-keyframes load5 {\n          0%,\n          100% {\n            box-shadow: 0em -2.6em 0em 0em var(--enhanced-text-color, #000000),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.2),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.5),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.7);\n          }\n          12.5% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.7),\n              1.8em -1.8em 0 0em var(--enhanced-text-color, #000000),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.2),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.5);\n          }\n          25% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.5),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.7),\n              2.5em 0em 0 0em var(--enhanced-text-color, #000000),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n          }\n          37.5% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.5),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.7),\n              1.75em 1.75em 0 0em var(--enhanced-text-color, #000000),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n          }\n          50% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.5),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.7),\n              0em 2.5em 0 0em var(--enhanced-text-color, #000000),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n          }\n          62.5% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.2),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.5),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.7),\n              -1.8em 1.8em 0 0em var(--enhanced-text-color, #000000),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n          }\n          75% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.2),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.5),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.7),\n              -2.6em 0em 0 0em var(--enhanced-text-color, #000000),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n          }\n          87.5% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.2),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.5),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.7),\n              -1.8em -1.8em 0 0em var(--enhanced-text-color, #000000);\n          }\n        }\n        @keyframes load5 {\n          0%,\n          100% {\n            box-shadow: 0em -2.6em 0em 0em var(--enhanced-text-color, #000000),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.2),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.5),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.7);\n          }\n          12.5% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.7),\n              1.8em -1.8em 0 0em var(--enhanced-text-color, #000000),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.2),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.5);\n          }\n          25% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.5),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.7),\n              2.5em 0em 0 0em var(--enhanced-text-color, #000000),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n          }\n          37.5% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.5),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.7),\n              1.75em 1.75em 0 0em var(--enhanced-text-color, #000000),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n          }\n          50% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.5),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.7),\n              0em 2.5em 0 0em var(--enhanced-text-color, #000000),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n          }\n          62.5% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.2),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.5),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.7),\n              -1.8em 1.8em 0 0em var(--enhanced-text-color, #000000),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n          }\n          75% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.2),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.5),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.7),\n              -2.6em 0em 0 0em var(--enhanced-text-color, #000000),\n              -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n          }\n          87.5% {\n            box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),\n              1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),\n              2.5em 0em 0 0em rgba(255, 255, 255, 0.2),\n              1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),\n              0em 2.5em 0 0em rgba(255, 255, 255, 0.2),\n              -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.5),\n              -2.6em 0em 0 0em rgba(255, 255, 255, 0.7),\n              -1.8em -1.8em 0 0em var(--enhanced-text-color, #000000);\n          }\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "enhanced-text";
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          gizmo: {
            title: "Enhanced text",
            description: "Add content look up to a blob of text"
          },
          setttings: {
            configure: [{
              slot: "",
              title: "Text to process",
              description: "Text that will be enhanced"
            }, {
              property: "wikipedia",
              type: "boolean",
              title: "Wikipedia articles",
              description: "Enhance found definitions in glossary with possibly related wikipedia article links"
            }, {
              property: "haxcmsGlossary",
              type: "boolean",
              title: "haxcms: Glossary",
              description: "Automatically link to definitions found on the /glossary page of a haxcms site"
            }, {
              property: "haxcmsSiteLocation",
              type: "textfield",
              title: "haxcms: site url",
              description: "Link to the HAXcms site to leverage for glossary of terms"
            }, {
              property: "haxcmsSite",
              type: "textarea",
              title: "haxcms: site",
              description: "JSON blob of the site.json file itself"
            }]
          }
        };
      }
    }]);
    return EnhancedText;
  }(_index.LitElement);

  _exports.EnhancedText = EnhancedText;
  customElements.define(EnhancedText.tag, EnhancedText);
});