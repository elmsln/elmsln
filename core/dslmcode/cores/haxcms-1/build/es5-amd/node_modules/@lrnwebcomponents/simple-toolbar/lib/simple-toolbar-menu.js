define(["exports", "../../../lit/index.js", "../../a11y-menu-button/a11y-menu-button.js", "./simple-toolbar-button.js", "../../utils/utils.js", "./simple-toolbar-menu-item.js"], function (_exports, _index, _a11yMenuButton, _simpleToolbarButton, _utils, _simpleToolbarMenuItem) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleToolbarMenuBehaviors = _exports.SimpleToolbarMenu = void 0;

  var _templateObject_de8537508e0011ed99ce491205e67b1d, _templateObject2_de8537508e0011ed99ce491205e67b1d, _templateObject3_de8537508e0011ed99ce491205e67b1d, _templateObject4_de8537508e0011ed99ce491205e67b1d, _templateObject5_de8537508e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-toolbar-menu`
   * `An icon / button that has support for multiple options via drop down.`
   *
   * @microcopy - the mental model for this element
   * - panel - the flyout from left or right side that has elements that can be placed
   * - button - an item that expresses what interaction you will have with the content.
   *
   * @extends A11yMenuButtonBehaviors
   * @extends SimpleToolbarButtonBehaviors
   * @element simple-toolbar-menu
   *
   */
  var SimpleToolbarMenuBehaviors = function SimpleToolbarMenuBehaviors(SuperClass) {
    return /*#__PURE__*/function (_A11yMenuButtonBehavi) {
      babelHelpers.inherits(_class, _A11yMenuButtonBehavi);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.tooltipDirection = "top";
        return _this;
      }
      /**
       * styles that control layout of button
       *
       * @readonly
       * @static
       */


      babelHelpers.createClass(_class, [{
        key: "buttonTemplate",
        get:
        /**
         * template menu button
         *
         * @readonly
         */
        function get() {
          return (0, _index.html)(_templateObject_de8537508e0011ed99ce491205e67b1d || (_templateObject_de8537508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        <button\n          id=\"menubutton\"\n          aria-haspopup=\"true\"\n          aria-controls=\"menu\"\n          ?disabled=\"", "\"\n          aria-expanded=\"", "\"\n          @blur=\"", "\"\n          part=\"button\"\n          tabindex=\"", "\"\n        >\n          ", "\n          <simple-icon-lite\n            id=\"dropdownicon\"\n            icon=\"arrow-drop-down\"\n            aria-hidden=\"true\"\n            part=\"dropdown-icon\"\n          ></simple-icon-lite>\n        </button>\n        ", "\n      "])), this.disabled, this.expanded ? "true" : "false", this._handleBlur, this.isCurrentItem ? 1 : -1, this.buttonInnerTemplate, this.tooltipTemplate);
        }
      }, {
        key: "buttonInnerTemplate",
        get: function get() {
          return babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "buttonInnerTemplate", this);
        }
        /**
         * template for button tooltip
         *
         * @readonly
         */

      }, {
        key: "tooltipTemplate",
        get: function get() {
          return !this.tooltipVisible ? "" : (0, _index.html)(_templateObject2_de8537508e0011ed99ce491205e67b1d || (_templateObject2_de8537508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["<simple-tooltip\n            id=\"tooltip\"\n            for=\"menubutton\"\n            position=\"", "\"\n            part=\"tooltip\"\n            fit-to-visible-bounds\n            >", "</simple-tooltip\n          >"])), this.tooltipDirection || "top", this.currentTooltip || this.currentLabel);
        }
      }, {
        key: "focusableElement",
        get:
        /**
         * gets focusable button element
         *
         * @readonly {object}
         * @memberof A11yMenuButton
         */
        function get() {
          return this.shadowRoot && this.shadowRoot.querySelector("#menubutton") ? this.shadowRoot.querySelector("#menubutton") : undefined;
        }
        /**
         * can be overridden when extending this button,
         * so that certain elements in menuitems are excluded from keyboard handling
         *
         * @param {event} event
         * @returns {boolean}
         * @memberof A11yMenuButton
         */

      }, {
        key: "_excludeEvent",
        value: function _excludeEvent(event) {
          var path = (0, _utils.normalizeEventPath)(event) || [],
              target = path[0]; //don't handle form field keystrokes for fields

          return target.closest("simple-toolbar-field") && target.tagName === "BUTTON" ? true : false;
        }
        /**
         * handles when menu has focus
         *
         * @param {event} event
         * @memberof A11yMenuButton
         */

      }, {
        key: "_handleFocus",
        value: function _handleFocus(event) {
          if (_simpleToolbarButton.SimpleToolbarButtonBehaviors._handleFocus) _simpleToolbarButton.SimpleToolbarButtonBehaviors._handleFocus(event);
          if (_a11yMenuButton.A11yMenuButtonBehaviors._handleFocus) _a11yMenuButton.A11yMenuButtonBehaviors._handleFocus(event);
        }
        /**
         * handles when menu loses focus
         *
         * @param {event} event
         * @memberof A11yMenuButton
         */

      }, {
        key: "_handleBlur",
        value: function _handleBlur(event) {
          if (_simpleToolbarButton.SimpleToolbarButtonBehaviors._handleBlur) _simpleToolbarButton.SimpleToolbarButtonBehaviors._handleBlur(event);
          if (_a11yMenuButton.A11yMenuButtonBehaviors._handleBlur) _a11yMenuButton.A11yMenuButtonBehaviors._handleBlur(event);
          if (!this.isCurrentItem) setTimeout(this.close(), 300);
        }
        /**
         * adds a menuitem to lists and sets up its listeners
         *
         * @param {ibject} item menu item element
         */

      }, {
        key: "addItem",
        value: function addItem(item) {
          var _this2 = this;

          if (this.getItemIndex(item) < 0) {
            var listeners = this.itemListeners;
            this.__menuItems = this.__menuItems || [];

            this.__menuItems.push(item);

            Object.keys(listeners).forEach(function (evt) {
              return (item.focusableElement || item).addEventListener(evt, listeners[evt].bind(_this2));
            });
          }
        }
        /**
         * removes a menuitem's listners and menuitem istelf from list
         *
         * @param {ibject} item menu item element
         */

      }, {
        key: "removeItem",
        value: function removeItem(item) {
          var _this3 = this;

          if (this.getItemIndex(item) < 0) {
            var listeners = this.itemListeners;
            Object.keys(listeners).forEach(function (evt) {
              return (item.focusableElement || item).removeEventListener(evt, listeners[evt].bind(_this3));
            });
            if (this.__menuItems) this.__menuItems = babelHelpers.toConsumableArray(this.menuItems.filter(function (i) {
              return item !== i;
            }));
          }
        }
      }], [{
        key: "simpleButtonCoreStyles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(_class), "simpleButtonCoreStyles", this)), [(0, _index.css)(_templateObject3_de8537508e0011ed99ce491205e67b1d || (_templateObject3_de8537508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          :host {\n            --icon-offset-left: 12px;\n          }\n          #menubutton {\n            display: flex;\n            flex-wrap: none;\n            align-items: center;\n            min-width: calc(42px - var(--icon-offset-left));\n            padding-right: var(--icon-offset-left);\n          }\n          #dropdownicon {\n            --simple-icon-height: 18px;\n            --simple-icon-width: 18px;\n            position: absolute;\n            right: 2px;\n          }\n        "])))]);
        }
      }, {
        key: "simpleButtonLayoutStyles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(_class), "simpleButtonLayoutStyles", this)), [(0, _index.css)(_templateObject4_de8537508e0011ed99ce491205e67b1d || (_templateObject4_de8537508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          #menu {\n            width: var(--simple-toolbar-button-width);\n            min-width: var(--simple-toolbar-button-min-width);\n          }\n        "])))]);
        }
        /**
         * styles that provide theming button
         *
         * @readonly
         * @static
         */

      }, {
        key: "simpleButtonThemeStyles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(_class), "simpleButtonThemeStyles", this)), [(0, _index.css)(_templateObject5_de8537508e0011ed99ce491205e67b1d || (_templateObject5_de8537508e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n          :host([expanded]) absolute-position-behavior {\n            border-style: solid;\n            border-width: var(\n              --simple-toolbar-button-border-width,\n              var(--simple-toolbar-border-width, 1px)\n            );\n            border-color: var(\n              --simple-toolbar-button-border-color,\n              var(--simple-toolbar-border-color, inherit)\n            );\n            background-color: var(--simple-toolbar-button-bg, white);\n            box-shadow: var(--simple-toolbar-menu-list-box-shadow, unset);\n          }\n        "])))]);
        }
      }, {
        key: "styles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(_class), "menuButtonCoreStyles", this)), babelHelpers.toConsumableArray(this.simpleButtonCoreStyles), babelHelpers.toConsumableArray(this.iconStyles), babelHelpers.toConsumableArray(this.labelStyles), babelHelpers.toConsumableArray(this.tooltipStyles), babelHelpers.toConsumableArray(this.simpleButtonLayoutStyles), babelHelpers.toConsumableArray(this.simpleButtonThemeStyles));
        }
      }, {
        key: "tag",
        get: function get() {
          return "simple-toolbar-menu";
        }
      }, {
        key: "properties",
        get: function get() {
          return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this));
        }
      }]);
      return _class;
    }((0, _a11yMenuButton.A11yMenuButtonBehaviors)((0, _simpleToolbarButton.SimpleToolbarButtonBehaviors)(SuperClass)));
  };
  /**
   *
   *
   * @class SimpleToolbarMenu
   * @extends {SimpleToolbarMenuBehaviors(LitElement)}
   * @customElement
   * @extends SimpleToolbarButtonBehaviors
   * @extends LitElement
   * @lit-html
   * @lit-element
   * @demo ./demo/menu.html
   */


  _exports.SimpleToolbarMenuBehaviors = SimpleToolbarMenuBehaviors;

  var SimpleToolbarMenu = /*#__PURE__*/function (_SimpleToolbarMenuBeh) {
    babelHelpers.inherits(SimpleToolbarMenu, _SimpleToolbarMenuBeh);

    var _super2 = _createSuper(SimpleToolbarMenu);

    function SimpleToolbarMenu() {
      babelHelpers.classCallCheck(this, SimpleToolbarMenu);
      return _super2.apply(this, arguments);
    }

    return babelHelpers.createClass(SimpleToolbarMenu);
  }(SimpleToolbarMenuBehaviors(_index.LitElement));

  _exports.SimpleToolbarMenu = SimpleToolbarMenu;
  customElements.define(SimpleToolbarMenu.tag, SimpleToolbarMenu);
});