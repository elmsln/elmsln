define(["exports", "../../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ImgLoader = void 0;

  var _templateObject_a0de57e0809211edaa2833647dc78c6c;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /*
  `img-loader` preloads images
  */
  var ImgLoader = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(ImgLoader, _LitElement);

    var _super = _createSuper(ImgLoader);

    /**
     * HTMLElement
     */
    function ImgLoader() {
      var _this;

      babelHelpers.classCallCheck(this, ImgLoader);
      _this = _super.call(this);
      _this.loaded = false;
      _this.error = false;
      _this.loading = false;
      return _this;
    }
    /**
     * LitElement properties changed
     */


    babelHelpers.createClass(ImgLoader, [{
      key: "render",
      value:
      /**
       * LitElement render
       */
      function render() {
        return (0, _index.html)(_templateObject_a0de57e0809211edaa2833647dc78c6c || (_templateObject_a0de57e0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([""])));
      }
      /**
       * convention
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "src") _this2._loadPageSrc();

          if (["error", "loaded", "loading"].includes(propName)) {
            // notify
            _this2.dispatchEvent(new CustomEvent("".concat(propName, "-changed"), {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
    }, {
      key: "_loadPageSrc",
      value: function _loadPageSrc() {
        var _this3 = this;

        if (this.__imageLoader) this.__imageLoader.remove();

        if (this.src) {
          this.__imageLoader = new Image();

          this.__imageLoader.onload = function () {
            _this3.loading = false;
            _this3.loaded = true;
            if (_this3.__imageLoader) _this3.__imageLoader.remove();
          };

          this.__imageLoader.onerror = function () {
            _this3.loading = false;
            _this3.loaded = false;
            if (_this3.__imageLoader) _this3.__imageLoader.remove();
          };

          this.__imageLoader.src = this.src;
        }

        this.loading = !!this.src;
        this.loaded = false;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "img-loader";
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          src: {
            type: String
          },

          /**
           * Read-only value that is true when the image is loaded.
           */
          loaded: {
            type: Boolean
          },

          /**
           * Read-only value that tracks the loading state of the image when the `preload`
           * option is used.
           */
          loading: {
            type: Boolean
          },

          /**
           * aria-describedby attribute
           */
          describedBy: {
            type: String,
            attribute: "described-by"
          },

          /**
           * Read-only value that indicates that the last set `src` failed to load.
           */
          error: {
            type: Boolean
          }
        };
      }
    }]);
    return ImgLoader;
  }(_index.LitElement);

  _exports.ImgLoader = ImgLoader;
  customElements.define(ImgLoader.tag, ImgLoader);
});