define(["exports", "../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yDetails = void 0;

  var _templateObject_62ad52a0809211edaa2833647dc78c6c, _templateObject2_62ad52a0809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
    * `a11y-details`
    * accessible progressive disclosure with detail and summary
   ### Styling
   #### Summary Button
   Custom property | Description | Default
   ----------------|-------------|----------
   --a11y-details-summary-fontSize | font-size | 0.8em
   --a11y-details-summary-color | text color | #000
   --a11y-details-summary-backgroundColor | background-color | #fff
   --a11y-details-summary-borderColor | border-color | #000
   --a11y-details-summary-borderWidth | border-width | 1px
   --a11y-details-summary-borderStyle | border-style | solid
   --a11y-details-summary-borderRadius | border-radius | 3px
   --a11y-details-summary-padding | padding | 0.5em
   
   #### Summary Button (:focus state)
   Custom property | Description | Default
   ----------------|-------------|----------
   --a11y-details-summary-focus-color | text color | #000
   --a11y-details-summary-focus-backgroundColor | background-color | #fff
   --a11y-details-summary-focus-borderColor | border-color | #000
   --a11y-details-summary-focus-borderWidth | border-width | 1px
   --a11y-details-summary-focus-borderStyle | border-style | dotted
   --a11y-details-summary-focus-borderRadius | border-radius | 3px
   
   #### Details
   Custom property | Description | Default
   ----------------|-------------|----------
   --a11y-details-fontSize | font-size  | 0.8em
   --a11y-details-color | text color | #000
   --a11y-details-backgroundColor | background-color | rgba(255,255,255,0.8)
   --a11y-details-borderColor | border-color | #000
   --a11y-details-borderWidth | border-width | 1px
   --a11y-details-borderStyle | border-style | solid
   --a11y-details-borderRadius | border-radius | 3px
   --a11y-details-padding | padding | 0.5em
   --a11y-details-left | left position | 0
   --a11y-details-right | right position | 0
   --a11y-details-maxHeight | max-height | 400px
   
    *
    * @microcopy - language worth noting:
    *  -
    *
    * @customElement
    * @lit-html
    * @lit-element
    * @demo demo/index.html
    */
  var A11yDetails = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(A11yDetails, _LitElement);

    var _super = _createSuper(A11yDetails);

    // life cycle
    function A11yDetails() {
      var _this;

      babelHelpers.classCallCheck(this, A11yDetails);
      _this = _super.call(this);
      _this.closeText = "";
      _this.openText = "";
      _this.tag = A11yDetails.tag;
      return _this;
    }
    /**
     * life cycle, element is removed from the DOM
     */


    babelHelpers.createClass(A11yDetails, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_62ad52a0809211edaa2833647dc78c6c || (_templateObject_62ad52a0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <details id=\"details\">\n        <summary\n          @click=\"", "\"\n          @keyup=\"", "\"\n          tabindex=\"0\"\n          role=\"button\"\n        >\n          <span class=\"open-text\">", "</span>\n          <span class=\"close-text\">", "</span>\n          <slot name=\"summary\" class=\"", "\"></slot>\n        </summary>\n        <div id=\"details-inner\"><slot name=\"details\"></slot></div>\n      </details>\n      <slot hidden></slot>"])), this._handleClick, this._handleKeyup, this.openText, this.closeText, this.summaryClasses);
      } // haxProperty definition

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        if (this.observer && this.observer.disconnect) this.observer.disconnect();
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yDetails.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(A11yDetails.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(A11yDetails.prototype), "firstUpdated", this).call(this);

        this._updateElement();

        this.observer.observe(this, {
          childList: true,
          subtree: true
        });
      }
      /**
       * gets the details element in shadowRoot
       *
       * @readonly
       * @memberof A11yDetails
       */

    }, {
      key: "details",
      get: function get() {
        return this && this.shadowRoot && this.shadowRoot.querySelector("details") ? this.shadowRoot.querySelector("details") : undefined;
      }
      /**
       * gets classe sfor summary to hide summary slot if open/closed text is provided
       *
       * @readonly
       * @memberof A11yDetails
       */

    }, {
      key: "summaryClasses",
      get: function get() {
        return [this.openText && this.openText.trim && this.openText.trim() !== "" ? "has-open-text" : "", this.closeText && this.closeText.trim && this.closeText.trim() !== "" ? "has-close-text" : ""].join(" ");
      }
      /**
       * mutation observer for a11y-details
       * @readonly
       * @returns {object}
       */

    }, {
      key: "observer",
      get: function get() {
        var _this2 = this;

        var callback = function callback(mutationsList) {
          return _this2._watchChildren(mutationsList);
        };

        return new MutationObserver(callback);
      }
      /**
       * mutation observer for <details/> in unnamed slot
       * @readonly
       * @returns {object}
       */

    }, {
      key: "detailsObserver",
      get: function get() {
        var _this3 = this;

        var callback = function callback() {
          return _this3._updateElement();
        };

        return new MutationObserver(callback);
      }
      /**
       * provides click for keyboard if open property is not supported by browser
       *
       * @param {event} e
       * @memberof A11yDetails
       */

    }, {
      key: "_handleClick",
      value: function _handleClick(e) {
        if (this.details && typeof this.details.open === "undefined") {
          this.toggleOpen();
          e.preventDefault();
          e.stopPropagation();
        }
      }
      /**
       * provides support for keyboard if open property is not supported by browser
       *
       * @param {event} e
       * @memberof A11yDetails
       */

    }, {
      key: "_handleKeyup",
      value: function _handleKeyup(e) {
        if (this.details && typeof this.details.open === "undefined" && e.keyCode == 13 || e.keyCode == 32) {
          this.toggleOpen();
          e.preventDefault();
          e.stopPropagation();
        }
      }
      /**
       * toggles the element
       */

    }, {
      key: "toggleOpen",
      value: function toggleOpen() {
        if (this.details.hasAttribute("open")) {
          this.details.removeAttribute("open");
          if (this.details.open) this.details.open = false;
        } else {
          this.details.setAttribute("open", "");
          if (this.details.open) this.details.open = true;
        }
      }
      /**
       * updates an element based on changes in slot
       *
       * @memberof A11yDetails
       */

    }, {
      key: "_updateElement",
      value: function _updateElement() {
        var details = this.querySelector("* > details"),
            summary = details ? details.querySelector("* > summary") : undefined;
        if (summary) this._copyToSlot("summary", summary.cloneNode(true));

        if (details) {
          var clone = details.cloneNode(true),
              filtered = clone.querySelectorAll("* > summary");
          Object.keys(filtered || {}).forEach(function (i) {
            return filtered[i].remove();
          });

          this._copyToSlot("details", clone, "div");
        }
      }
      /**
       * watches the element's slots for a <details/> element
       *
       * @param {object} mutationsList
       * @memberof A11yDetails
       */

    }, {
      key: "_watchChildren",
      value: function _watchChildren(mutationsList) {
        if (this._hasMutations(mutationsList)) {
          this._updateElement();

          this.detailsObserver.observe(this.querySelector("* > details"), {
            childList: true,
            subtree: true,
            characterData: true
          });
        } else if (this._hasMutations(mutationsList, "removedNodes") && !this.querySelector("* > details") && this.detailsObserver.disconnect) {
          this.detailsObserver.disconnect();
        }
      }
      /**
       * searches a mutations list to see if a <details/> element was added or removed
       *
       * @param {object} mutationsList
       * @param {string} [nodeListType="addedNodes"] "addedNodes" of "removedNodes"
       * @returns {boolean}
       * @memberof A11yDetails
       */

    }, {
      key: "_hasMutations",
      value: function _hasMutations(mutationsList) {
        var nodeListType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "addedNodes";
        return Object.keys(mutationsList || {}).filter(function (i) {
          var nodes = mutationsList[i][nodeListType];
          return Object.keys(nodes || {}).filter(function (j) {
            var nodeName = nodes[j].tagName;
            return nodeName === "DETAILS";
          }).length > 0;
        }).length > 0;
      }
      /**
       * moves content cloned from unnamed slot to designated named slot
       *
       * @param {string} slotName 'details' or 'summary' slot
       * @param {string} tagName the tag that will become a slot
       * @param {object} clone content cloned from unnamed slot
       * @memberof A11yDetails
       */

    }, {
      key: "_copyToSlot",
      value: function _copyToSlot(slotName, clone) {
        var tagName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "span";
        var filteredNodes = Object.keys(clone.childNodes || {}).filter(function (i) {
          var node = clone.childNodes[i];
          return !!node.tagName || node.textContent.trim().length > 0;
        }).map(function (i) {
          return clone.childNodes[parseInt(i)];
        });

        if (filteredNodes.length === 1 && filteredNodes[0].tagName) {
          clone = filteredNodes[0];
          tagName = clone.tagName;
        }

        var slot = this._getSlot(slotName, tagName);

        slot.innerHTML = clone.innerHTML;
        clone.remove();
      }
      /**
       * gets an existing named slot or makes one
       *
       * @param {string} slotName
       * @returns {object}
       * @memberof A11yDetails
       */

    }, {
      key: "_getSlot",
      value: function _getSlot(slotName) {
        var tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "span";
        var slot = this.querySelector("[slot=".concat(slotName, "]"));
        if (slot && slot.tagName !== tagName) slot.remove();

        if (!slot) {
          slot = document.createElement(tagName);
          slot.slot = slotName;
          this.append(slot);
        }

        return slot;
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_62ad52a0809211edaa2833647dc78c6c || (_templateObject2_62ad52a0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host,\n        details {\n          display: inline-flex;\n          overflow: visible;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        summary {\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          font-size: var(--a11y-details-summary-fontSize, 0.8em);\n          color: var(--a11y-details-summary-color, #000);\n          background-color: var(--a11y-details-summary-backgroundColor, #fff);\n          border-color: var(--a11y-details-summary-borderColor, #ddd);\n          border-width: var(--a11y-details-summary-borderWidth, 1px);\n          border-style: var(--a11y-details-summary-borderStyle, solid);\n          border-radius: var(--a11y-details-summary-borderRadius, 3px);\n          padding: var(--a11y-details-summary-padding, 0.5em);\n        }\n\n        summary:focus {\n          outline: var(--a11y-details-summary-focus-outline, 1px solid #006688);\n          color: var(\n            --a11y-details-summary-focus-color,\n            var(--a11y-details-summary-color, #000)\n          );\n          background-color: var(\n            --a11y-details-summary-focus-backgroundColor,\n            var(--a11y-details-summary-backgroundColor, #fff)\n          );\n          border-color: var(\n            --a11y-details-summary-focus-borderColor,\n            var(--a11y-details-borderColor, #999)\n          );\n          border-width: var(\n            --a11y-details-summary-focus-borderWidth,\n            var(--a11y-details-summary-borderWidth, 1px)\n          );\n          border-style: var(\n            --a11y-details-summary-focus-borderStyle,\n            var(--a11y-details-summary-borderStyle, dotted)\n          );\n          border-radius: var(\n            --a11y-details-summary-focus-borderRadius,\n            var(--a11y-details-summary-borderRadius, 3px)\n          );\n        }\n\n        #details-inner {\n          position: absolute;\n          display: none;\n          max-height: 0px;\n          transition: all 0.7s ease-in-out 0.2s;\n          overflow-y: auto;\n          padding: 0;\n          font-size: var(--a11y-details-fontSize, 0.8em);\n          color: var(--a11y-details-color, #000);\n          background-color: var(\n            --a11y-details-backgroundColor,\n            rgba(255, 255, 255, 0.8)\n          );\n          border-color: var(--a11y-details-borderColor, #999);\n          border-width: var(--a11y-details-borderWidth, 1px);\n          border-style: var(--a11y-details-borderStyle, solid);\n          border-radius: var(--a11y-details-borderRadius, 3px);\n        }\n\n        ::slotted(*:not[slot=\"summary\"]) {\n          display: none;\n        }\n\n        .close-text,\n        details[open] .open-text,\n        details:not([open]) .has-open-text,\n        details[open] .has-close-text {\n          display: none;\n        }\n\n        details[open] .close-text {\n          display: inline;\n        }\n\n        ::slotted([slot=\"details\"]) {\n          display: block;\n          height: auto;\n          max-height: 0;\n          overflow: hidden;\n          transition: all 0.7s ease-in-out 0.2s;\n        }\n\n        details[open] ::slotted([slot=\"details\"]) {\n          max-height: var(--a11y-details-maxHeight, 400px);\n          transition: all 0.7s ease-in-out 0.2s;\n        }\n\n        details[open] #details-inner {\n          z-index: 9999999999;\n          display: block;\n          left: var(--a11y-details-left, unset);\n          right: var(--a11y-details-right, unset);\n          padding: var(--a11y-details-padding, 0.5em);\n          max-height: var(--a11y-details-maxHeight, 400px);\n          padding: var(--a11y-details-padding, 0.5em);\n          width: calc(auto - 2 * var(--a11y-details-padding, 0.5em));\n          transition: all 0.7s ease-in-out 0.2s;\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Accessible Details Button",
            description: "Accessible progressive disclosure with detail and summary",
            icon: "icons:arrow-drop-down",
            color: "grey",
            groups: ["11"],
            handles: [{
              type: ""
            }],
            meta: {
              author: "HAXTheWeb core team",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              slot: "summary",
              title: "Button",
              description: 'Summary of the content that if concealed, eg. "info", "medatadata", etc. ',
              inputMethod: "code-editor"
            }, {
              slot: "details",
              title: "Decription",
              description: "Detailed description that can be hidden or shown",
              inputMethod: "code-editor"
            }, {
              slot: "",
              title: "Decription Button",
              description: 'Default for button that shows/hides description text, eg. "info", "medatadata", etc. ',
              inputMethod: "code-editor"
            }],
            advanced: [{
              property: "openText",
              title: "Optional summary text when details are open",
              inputMethod: "textfield",
              required: false
            }, {
              property: "closeText",
              title: "Optional summary text when details are closed",
              inputMethod: "textfield",
              required: false
            }]
          },
          demoSchema: [{
            tag: "a11y-details",
            properties: {
              openText: "Show Aenean",
              closeText: "Hide Aenean"
            },
            content: '<div slot="summary">Show Aenean</div>\n<div slot="details">Aenean eget nisl volutpat, molestie purus eget, bibendum metus. Pellentesque magna velit, tincidunt quis pharetra id, gravida placerat erat. Maecenas id dui pretium risus pulvinar feugiat vel nec leo. Praesent non congue tellus. Suspendisse ac tincidunt purus. Donec eu dui a metus vehicula bibendum sed nec tortor. Nunc convallis justo sed nibh consectetur, at pharetra nulla accumsan.\n</div>'
          }]
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(A11yDetails), "properties", this)), {}, {
          /**
           * optional text for when summary button is open,
           * eg. "Hide", "Less" or "Close"
           */
          closeText: {
            type: String,
            attribute: "close-text",
            reflect: true
          },

          /**
           * optional text for when summary button is closed,
           * eg. "Show", "More" or "Open"
           */
          openText: {
            type: String,
            attribute: "open-text",
            reflect: true
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "a11y-details";
      }
    }]);
    return A11yDetails;
  }(_index.LitElement);

  _exports.A11yDetails = A11yDetails;
  customElements.define("a11y-details", A11yDetails);
});