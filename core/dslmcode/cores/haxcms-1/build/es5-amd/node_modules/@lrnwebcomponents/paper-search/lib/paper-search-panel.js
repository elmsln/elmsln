define(["exports", "../../../@polymer/polymer/polymer-element.js", "./paper-search-bar.js", "./paper-filter-dialog.js"], function (_exports, _polymerElement, _paperSearchBar, _paperFilterDialog) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PaperSearchPanel = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var PaperSearchPanel = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(PaperSearchPanel, _PolymerElement);

    var _super = _createSuper(PaperSearchPanel);

    function PaperSearchPanel() {
      babelHelpers.classCallCheck(this, PaperSearchPanel);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(PaperSearchPanel, [{
      key: "getPaperSearchBarInstance",
      value: function getPaperSearchBarInstance() {
        return this.shadowRoot.querySelector("#paperSearchBar");
      } // Private methods

    }, {
      key: "_loadMore",
      value: function _loadMore() {
        this.count += 20;

        this._updateData();
      }
    }, {
      key: "_computeHasItems",
      value: function _computeHasItems(items) {
        return typeof items !== "undefined" && items.length > 0;
      }
    }, {
      key: "_showNoResults",
      value: function _showNoResults(_hasItems, loading) {
        return !_hasItems && !loading;
      }
    }, {
      key: "_onChangeRequest",
      value: function _onChangeRequest(newValue, oldValue) {
        // Ignore initial setting of properties (caller is supposed to trigger this call automatically)
        if (typeof oldValue !== "undefined") {
          // Set back to default to avoid endless listers
          this.count = 20;

          this._updateData();
        }
      }
    }, {
      key: "_updateData",
      value: function _updateData() {
        this.dispatchEvent(new CustomEvent("change-request-params", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: true
        }));
      }
    }, {
      key: "_onFilter",
      value: function _onFilter() {
        this.shadowRoot.querySelector("#filterDialog").open();
      }
    }, {
      key: "_onSearch",
      value: function _onSearch() {
        this.dispatchEvent(new CustomEvent("search", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: true
        }));
      } // Counts the selected filters

    }, {
      key: "_getNrSelectedFilters",
      value: function _getNrSelectedFilters(selectedFilters) {
        if (Object.keys(selectedFilters).length <= 0) {
          return 0;
        }

        var nrSelectedFilters = Object.keys(selectedFilters).map(function (key) {
          // Returns number of selected value for a filter
          return selectedFilters[key].length;
        }).reduce(function (sum, value) {
          // Sum up the selected values across filters
          return sum + value;
        });
        return nrSelectedFilters;
      }
    }, {
      key: "_disableFilterButton",
      value: function _disableFilterButton(filters) {
        return !(filters && filters.length > 0);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "paper-search-panel";
      }
      /**
       * Fired when the user changes the parameter defining the currently shown items
       *
       * @event change-request-params
       */

      /**
       * Fired when the user requests to search for a query
       *
       * @event search
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Query for which the user was searching
           */
          search: {
            type: String,
            observer: "_onChangeRequest",
            notify: true
          },

          /**
           * All filters from which the user can choose
           */
          filters: Object,

          /**
           * All filters that have been selected by the user, e.g. `{ age: [ "child", "teen" ] }`
           */
          selectedFilters: {
            type: Object,
            observer: "_onChangeRequest",
            notify: true,
            value: {}
          },

          /**
           * Items that are currently shown in the lister
           */
          items: Array,

          /**
           * True if further items could be loaded
           */
          hasMore: {
            type: Boolean,
            value: false
          },

          /**
           * True if items are currently loaded
           */
          loading: {
            type: Boolean,
            value: false
          },

          /**
           * Whether to hide the Filter button. Set attribute "hide-filter-button" to do so.
           */
          hideFilterButton: {
            type: Boolean,
            value: false
          },

          /**
           * Number of items loaded per page (i.e. for each click on [more])
           */
          count: {
            type: Number,
            notify: true,
            value: 20
          },

          /**
           * Icon shown in the search background
           */
          icon: {
            type: String,
            value: "search"
          },

          /**
           * Text shown in the search box if the user didn't enter any query
           */
          placeholder: {
            type: String,
            value: "Search"
          },

          /**
           * Text shown if no results are found. Use this property to localize the element.
           */
          noResultsText: {
            type: String,
            value: "No matching results found."
          },

          /**
           * Text for the more button to load more data. Use this property to localize the element.
           */
          moreButton: {
            type: String,
            value: "More"
          },

          /**
           * Text for the reset button in the filter dialog. Use this property to localize the element.
           */
          resetButton: String,

          /**
           * Text for the save button in the filter dialog. Use this property to localize the element.
           */
          saveButton: String,

          /**
           * Label shown if no values are selected for a filter. Use this property to localize the element.
           */
          noValuesLabel: String,
          _hasItems: {
            type: Boolean,
            computed: "_computeHasItems(items)",
            value: false
          }
        };
      }
    }]);
    return PaperSearchPanel;
  }(_polymerElement.PolymerElement);

  _exports.PaperSearchPanel = PaperSearchPanel;
  customElements.define(PaperSearchPanel.tag, PaperSearchPanel);
});