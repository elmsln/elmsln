define(["exports", "../../../lit/index.js", "./simple-fields-field.js", "../../simple-colors/simple-colors.js", "./simple-tag.js"], function (_exports, _index, _simpleFieldsField, _simpleColors, _simpleTag) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsTagList = void 0;

  var _templateObject_ddc124008e0011ed99ce491205e67b1d, _templateObject2_ddc124008e0011ed99ce491205e67b1d, _templateObject3_ddc124008e0011ed99ce491205e67b1d, _templateObject4_ddc124008e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   *`simple-fields-tag-list`
   * input tags and validate an array of input
   * can return as a string or object based on
   * requirements of the implementing element
   *
   * @customElement
   * @group simple-fields
   * @element simple-fields-code
   * @demo ./demo/field.html
   * @class SimpleFieldsTagList
   * @extends {SimpleFieldsFieldBehaviors(LitElement)}
   * @demo ./demo/tags.html Demo
   */
  var SimpleFieldsTagList = /*#__PURE__*/function (_SimpleFieldsFieldBeh) {
    babelHelpers.inherits(SimpleFieldsTagList, _SimpleFieldsFieldBeh);

    var _super = _createSuper(SimpleFieldsTagList);

    function SimpleFieldsTagList() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFieldsTagList);
      _this = _super.call(this);
      _this.label = "Tags";
      _this.value = "";
      _this.tagList = [];
      _this.id = _this._generateUUID();

      _this.addEventListener("dragleave", _this._handleDragLeave);

      _this.addEventListener("dragover", _this._handleDragEnter);

      _this.addEventListener("drop", _this._handleDragDrop);

      return _this;
    }

    babelHelpers.createClass(SimpleFieldsTagList, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "id" && !_this2.id) _this2.id = _this2._generateUUID();
          if (propName === "value") _this2._fireValueChanged();
          if (propName === "tagList") _this2._fireTagListChanged();
        });
      }
    }, {
      key: "_handleGlobalTagDrop",
      value: function _handleGlobalTagDrop(e) {
        this.classList.remove("drop-possible");
      }
    }, {
      key: "_handleGlobalTagDrag",
      value: function _handleGlobalTagDrag(e) {
        this.classList.add("drop-possible");
      }
      /**
       * template for slotted or shadow DOM prefix
       *
       * @readonly
       * @returns {object}
       * @memberof SimpleFieldsContainer
       */

    }, {
      key: "prefixTemplate",
      get: function get() {
        var _this3 = this;

        return (0, _index.html)(_templateObject_ddc124008e0011ed99ce491205e67b1d || (_templateObject_ddc124008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      ", "\n      <slot name=\"taglist\">\n        ", "\n      </slot>\n    "])), babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsTagList.prototype), "prefixTemplate", this), this.tagList.map(function (tag) {
          return (0, _index.html)(_templateObject2_ddc124008e0011ed99ce491205e67b1d || (_templateObject2_ddc124008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n            <simple-tag\n              cancel-button\n              .data=", "\n              value=\"", "\"\n              accent-color=\"", "\"\n              @simple-tag-clicked=\"", "\"\n            ></simple-tag>\n          "])), tag, tag.term, tag.color, _this3.removeTag);
        }));
      }
    }, {
      key: "getInput",
      value: function getInput() {
        return (0, _index.html)(_templateObject3_ddc124008e0011ed99ce491205e67b1d || (_templateObject3_ddc124008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <span class=\"input-option\" part=\"option-inner\">\n        <input\n          @keydown=\"", "\"\n          @keyup=\"", "\"\n          ?autofocus=\"", "\"\n          .aria-descrbedby=\"", "\"\n          .aria-invalid=\"", "\"\n          @blur=\"", "\"\n          @change=\"", "\"\n          class=\"field box-input\"\n          ?disabled=\"", "\"\n          @focus=\"", "\"\n          ?hidden=\"", "\"\n          id=\"", "\"\n          @input=\"", "\"\n          name=\"", "\"\n          .placeholder=\"", "\"\n          ?readonly=\"", "\"\n          ?required=\"", "\"\n          tabindex=\"0\"\n          type=\"text\"\n          value=\"", "\"\n          part=\"option-input\"\n        />\n      </span>\n    "])), this._handleKeydown, this._handleKeyup, this.autofocus, this.describedBy || "", this.error ? "true" : "false", this._onFocusout, this._handleFieldChange, this.disabled, this._onFocusin, this.hidden, this.id, this._handleFieldChange, this.id, this.placeholder || "", this.readonly, this.required, this.value);
      }
    }, {
      key: "removeTag",
      value: function removeTag(e) {
        this.tagList = babelHelpers.toConsumableArray(this.tagList.filter(function (i) {
          if (i.term === e.detail.value) {
            return false;
          }

          return true;
        }));
      }
    }, {
      key: "_handleDragLeave",
      value: function _handleDragLeave(e) {
        this.classList.remove("drag-focus");
        this.classList.add("drop-possible");
      }
    }, {
      key: "_handleDragEnter",
      value: function _handleDragEnter(e) {
        e.preventDefault();
        this.classList.add("drag-focus");
        this.classList.remove("drop-possible");
      }
    }, {
      key: "_handleDragDrop",
      value: function _handleDragDrop(e) {
        e.preventDefault();
        this.classList.remove("drop-possible");
        this.classList.remove("drag-focus"); // sanity check we have text here; this HAS to have been set by

        if (JSON.parse(e.dataTransfer.getData("text"))) {
          var tmp = JSON.parse(e.dataTransfer.getData("text")); // ensure there is no duplicate value / term

          this.tagList = babelHelpers.toConsumableArray(this.tagList.filter(function (i) {
            if (i.term === tmp.term) {
              return false;
            }

            return true;
          }));
          var tagList = this.tagList;
          tagList.push(tmp);
          this.tagList = babelHelpers.toConsumableArray(tagList);
        }
      }
    }, {
      key: "_handleKeydown",
      value: function _handleKeydown(e) {
        if (e.key === "Enter" && this.shadowRoot.querySelector("input").value != "") {
          this._updateTaglist();
        }
      }
    }, {
      key: "_handleKeyup",
      value: function _handleKeyup(e) {
        if (e.key === "," && this.shadowRoot.querySelector("input").value != "") {
          this._updateTaglist();
        }
      }
    }, {
      key: "_updateTaglist",
      value: function _updateTaglist() {
        var _this4 = this;

        var tag = this.shadowRoot.querySelector("input").value;
        tag = tag.replace(/,$/, "").trim(); // ensure there is no duplicate value / term

        this.tagList = babelHelpers.toConsumableArray(this.tagList.filter(function (i) {
          if (i.term === _this4.shadowRoot.querySelector("input").value) {
            return false;
          }

          return true;
        }));
        var tagList = this.tagList;
        tagList.push({
          term: tag,
          color: "grey"
        });
        this.tagList = babelHelpers.toConsumableArray(tagList);
        this.shadowRoot.querySelector("input").value = "";
      }
      /**
       * overridden mutation observer
       *
       * @readonly
       * @memberof SimpleFieldsContainerBehaviors
       */

    }, {
      key: "slottedFieldObserver",
      get: function get() {}
      /**
       * checks validation constraints and returns error data
       * @memberof SimpleFieldsCode
       */

    }, {
      key: "validate",
      value: function validate() {
        if (!this.value && this.required) {
          this.error = true;
          this.errorMessage = this.requiredMessage || "required";
        } // to match container response


        return !this.error;
      }
      /**
       * fires when value changes
       * @event value-changed
       */

    }, {
      key: "_fireValueChanged",
      value: function _fireValueChanged() {
        this.dispatchEvent(new CustomEvent("value-changed", {
          bubbles: false,
          cancelable: false,
          composed: false,
          detail: this
        }));
      }
      /**
       * fires when tagList changes
       * @event simple-fields-tag-list-changed
       */

    }, {
      key: "_fireTagListChanged",
      value: function _fireTagListChanged(e) {
        this.dispatchEvent(new CustomEvent("simple-fields-tag-list-changed", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
    }, {
      key: "_onFocusout",
      value: function _onFocusout(e) {
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsTagList.prototype), "_onFocusout", this).call(this, e);

        if (this.shadowRoot.querySelector("input").value != "") {
          this._updateTaglist();
        }
      }
      /**
       * listens for focusout
       * overridden for fields in shadow DOM
       *
       * @param {boolean} [init=true] whether to start observing or disconnect observer
       */

    }, {
      key: "_observeAndListen",
      value: function _observeAndListen() {
        var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (init) {
          this.addEventListener("click", this.focus);
          this.addEventListener("focusout", this._onFocusout);
          this.addEventListener("focusin", this._onFocusin);
        } else {
          this.removeEventListener("click", this.focus);
          this.removeEventListener("focusout", this._onFocusout);
          this.removeEventListener("focusin", this._onFocusin);
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsTagList.prototype), "connectedCallback", this).call(this);
        window.addEventListener("simple-tag-dragstart", this._handleGlobalTagDrag.bind(this));
        window.addEventListener("simple-tag-drop", this._handleGlobalTagDrop.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("simple-tag-dragstart", this._handleGlobalTagDrag.bind(this));
        window.removeEventListener("simple-tag-drop", this._handleGlobalTagDrop.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsTagList.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-fields-tag-list";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsTagList), "styles", this)), [(0, _index.css)(_templateObject4_ddc124008e0011ed99ce491205e67b1d || (_templateObject4_ddc124008e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --simple-fields-tag-list-height: 24px;\n        }\n        #field-main-inner {\n          align-items: center;\n          flex-wrap: wrap;\n        }\n        simple-tag {\n          flex: 0 1 auto;\n          margin: calc(0.5 * var(--simple-fields-button-padding, 2px))\n            var(--simple-fields-button-padding, 2px);\n          height: var(--simple-fields-tag-list-height);\n        }\n        :host(.drop-possible) [part=\"option-inner\"] {\n          --simple-fields-accent-color: var(\n            --simple-fields-tag-list-possible,\n            var(--simple-colors-default-theme-accent-2, #eeffee)\n          );\n          background-color: var(--simple-fields-accent-color);\n          outline: 2px dashed\n            var(--simple-colors-default-theme-accent-12, #eeffee);\n          outline-offset: 1px;\n        }\n        :host(.drag-focus) [part=\"option-inner\"] {\n          --simple-fields-accent-color: var(\n            --simple-fields-tag-list-focus,\n            var(--simple-colors-default-theme-accent-8, #44ff44)\n          );\n          background-color: var(--simple-fields-accent-color);\n          outline: 2px dashed\n            var(--simple-colors-default-theme-accent-10, #44ff44);\n          outline-offset: 1px;\n        }\n        [part=\"option-inner\"] {\n          height: var(--simple-fields-tag-list-height);\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsTagList), "properties", this)), {}, {
          /**
           * error message when field is required and has no value
           */
          requiredMessage: {
            type: String
          },
          tagList: {
            type: Array,
            attribute: "tag-list"
          },

          /**
           * Current value of the form control. Submitted with the form as part of a name/value pair.
           */
          value: {
            reflect: true
          },
          label: {
            type: String
          }
        });
      }
    }]);
    return SimpleFieldsTagList;
  }((0, _simpleFieldsField.SimpleFieldsFieldBehaviors)(_simpleColors.SimpleColors));

  _exports.SimpleFieldsTagList = SimpleFieldsTagList;
  customElements.define(SimpleFieldsTagList.tag, SimpleFieldsTagList);
});