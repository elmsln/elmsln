define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HtmlBlock = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `html-block`
   * @element html-block
   * `A basic HTML block that provides HAXschema wiring`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @demo demo/index.html
   */
  var HtmlBlock = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(HtmlBlock, _HTMLElement);

    var _super = _createSuper(HtmlBlock);

    /**
     * life cycle
     */
    function HtmlBlock() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, HtmlBlock);
      _this = _super.call(this); // set tag for later use

      _this.tag = HtmlBlock.tag;
      return _this;
    }
    /**
     * life cycle, element is afixed to the DOM
     */


    babelHelpers.createClass(HtmlBlock, [{
      key: "html",
      get: // render function
      function get() {
        return "\n<style>\n\n        </style>\n<slot></slot>";
      } // haxProperty definition

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        // default we block all script unless the user says to do so
        // @todo ensure HAX actually respects this down the road, right now it sanitizes it
        this.allowscript = false;
        this.__ignoreChange = false;
        this.style.display = "block"; // ensure we keep applying sanitization as needed while monitoring the tree

        this.__observer = new MutationObserver(this.render.bind(this));

        this.__observer.observe(this, {
          attributes: true,
          characterData: true,
          childList: true,
          subtree: true
        });
      }
    }, {
      key: "render",
      value: function render() {
        if (!this.__ignoreChange) {
          if (this.allowscript == null || !this.allowscript || babelHelpers.typeof(this.allowscript) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.__sanitizeHTML();
          }
        } else {
          this.__ignoreChange = false;
        }
      }
    }, {
      key: "allowscript",
      get: function get() {
        return this.getAttribute("allowscript");
      },
      set: function set(value) {
        if (value) {
          this.setAttribute("allowscript", "allowscript");
        } else {
          this.removeAttribute("allowscript");
        }
      } // disconnectedCallback() {}

    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(attr, oldValue, newValue) {
        if (attr === "allowscript") {
          if (newValue == null || !newValue || babelHelpers.typeof(newValue) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            // we should sanitize innerHTML but create a holding pen for the rawHTML first
            this.__sanitizeHTML();
          } else {
            // see if we had anything in the holding pen
            if (this.__rawHTML) {
              this.__ignoreChange = true;
              this.innerHTML = this.__rawHTML;
            }
          }
        }
      }
    }, {
      key: "__sanitizeHTML",
      value: function __sanitizeHTML() {
        if (!this.__pen) {
          this.__pen = document.createElement("div");
        }

        this.__pen.innerHTML = this.innerHTML;
        this.__rawHTML = this.__pen.cloneNode(true).innerHTML; // clear it up

        if (typeof this.innerHTML === "function") {
          this.innerHTML = this.innerHTML.replace(/<script[\s\S]*?>/gi, "&lt;script&gt;");
          this.innerHTML = this.innerHTML.replace(/<\/script>/gi, "&lt;/script&gt;");
        }
      }
    }], [{
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Html block",
            description: "A basic HTML block that provides HAXschema wiring",
            icon: "hax:html-code",
            color: "red",
            groups: ["Block"],
            handles: [{
              type: "html",
              content: "slot"
            }],
            meta: {
              author: "HAXTheWeb",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              slot: "",
              title: "HTML",
              description: "HTML code you want to present in content",
              inputMethod: "code-editor"
            }],
            advanced: []
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "html-block";
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        return ["allowscript"];
      }
    }]);
    return HtmlBlock;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.HtmlBlock = HtmlBlock;
  customElements.define(HtmlBlock.tag, HtmlBlock);
});