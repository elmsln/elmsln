define(["exports", "require", "../../lit/index.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button.js"], function (_exports, _require, _index, _simpleIcon, _simpleIcons, _simpleIconButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappFabMenu = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_6c1ffe50809211edaa2833647dc78c6c, _templateObject2_6c1ffe50809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrnapp-fab-menu`
   * `floating action button with menu`
   * @demo demo/index.html
   * @element lrnapp-fab-menu
   */
  var LrnappFabMenu = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(LrnappFabMenu, _LitElement);

    var _super = _createSuper(LrnappFabMenu);

    function LrnappFabMenu() {
      var _this;

      babelHelpers.classCallCheck(this, LrnappFabMenu);
      _this = _super.call(this);
      _this.icon = "add";
      _this.disabled = false;
      setTimeout(function () {
        // prettier-ignore
        new Promise(function (res, rej) {
          return _require.default(["./lib/lrnapp-fab-speed-dial-action.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../paper-fab-speed-dial/paper-fab-speed-dial.js"], res, rej);
        }); // prettier-ignore

        new Promise(function (res, rej) {
          return _require.default(["../paper-fab-speed-dial/lib/paper-fab-speed-dial-overlay.js"], res, rej);
        });
      }, 0);
      return _this;
    }

    babelHelpers.createClass(LrnappFabMenu, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_6c1ffe50809211edaa2833647dc78c6c || (_templateObject_6c1ffe50809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <simple-icon-button\n        icon=\"", "\"\n        class=\"open\"\n        @click=\"", "\"\n        ?hidden=\"", "\"\n        ?disabled=\"", "\"\n      ></simple-icon-button>\n\n      <paper-fab-speed-dial-overlay\n        class=\"overlay\"\n        ?opened=\"", "\"\n        @opened-changed=\"", "\"\n        with-backdrop\n      >\n        <slot></slot>\n        <simple-icon-button\n          icon=\"close\"\n          class=\"close\"\n          @click=\"", "\"\n        ></simple-icon-button>\n      </paper-fab-speed-dial-overlay>\n    "])), this.icon, this.open, this.opened, this.disabled, this.opened, this.openedChangedEvent, this.close);
      }
    }, {
      key: "openedChangedEvent",
      value: function openedChangedEvent(e) {
        this.opened = e.detail.value;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "opened") {
            _this2.dispatchEvent(new CustomEvent("opened-changed", {
              value: _this2[propName]
            }));
          }
        });
      }
    }, {
      key: "open",
      value: // Public methods
      function open(e) {
        // Required for mobile Safari to avoid passing the tap event to an element below the FAB
        if (e) {
          e.preventDefault();
        }

        this.opened = true;
      }
    }, {
      key: "close",
      value: function close(e) {
        // Required for mobile Safari to avoid passing the tap event to an element below the FAB
        if (e) {
          e.preventDefault();
        }

        this.opened = false;
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_6c1ffe50809211edaa2833647dc78c6c || (_templateObject2_6c1ffe50809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        lrnapp-fab-speed-dial-action:not(:defined),\n        paper-fab-speed-dial-overlay:not(:defined),\n        paper-fab-speed-dial:not(:defined) {\n          display: none;\n        }\n        .open,\n        .overlay {\n          position: fixed;\n          bottom: var(--paper-fab-speed-dial-bottom, 16px);\n          right: var(--paper-fab-speed-dial-right, 16px);\n        }\n        .open {\n          --paper-fab-background: var(--paper-fab-speed-dial-background);\n          --paper-fab-keyboard-focus-background: var(\n            --paper-fab-speed-dial-keyboard-focus-background\n          );\n        }\n        .close {\n          --paper-fab-background: var(--paper-grey-500);\n          --paper-fab-keyboard-focus-background: var(--paper-grey-500);\n          margin-top: 20px;\n          display: inline-block;\n        }\n        .overlay {\n          text-align: right;\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-fab-menu";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          icon: {
            type: String
          },
          opened: {
            type: Boolean
          },
          disabled: {
            type: Boolean
          }
        };
      }
    }]);
    return LrnappFabMenu;
  }(_index.LitElement);

  _exports.LrnappFabMenu = LrnappFabMenu;
  customElements.define(LrnappFabMenu.tag, LrnappFabMenu);
});