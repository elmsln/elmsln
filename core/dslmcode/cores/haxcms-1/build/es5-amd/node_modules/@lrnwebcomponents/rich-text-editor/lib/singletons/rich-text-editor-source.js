define(["exports", "require", "../../../../lit/index.js"], function (_exports, _require, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorSource = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_b2b46220809211edaa2833647dc78c6c, _templateObject2_b2b46220809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-source`
   * a standalone rich text editor
  ### Styling
  
  `<rich-text-editor-source>`  uses RichTextStyles variables, 
  as well as an additional style:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  --rich-text-editor-source-min-height | minimum height of editor | 20px
   *
   * @extends LitElement
   * @customElement
   * @element rich-text-editor-source
   * @lit-html
   * @lit-element
   * @demo ./demo/index.html demo
   * @demo ./demo/mini.html mini floating toolbar
   * @demo ./demo/full.html toolbar with breadcrumb
   * @demo ./demo/config.html custom configuration
   * @demo ./demo/rawhtml.html raw HTML
   */
  var RichTextEditorSource = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(RichTextEditorSource, _LitElement);

    var _super = _createSuper(RichTextEditorSource);

    function RichTextEditorSource() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorSource);
      _this = _super.call(this);
      _this.id = "";
      new Promise(function (res, rej) {
        return _require.default(["../../../code-editor/code-editor.js"], res, rej);
      }); // sets instance to current instance

      if (!window.RichTextEditorSource.instance) {
        window.RichTextEditorSource.instance = babelHelpers.assertThisInitialized(_this);
        return babelHelpers.possibleConstructorReturn(_this, babelHelpers.assertThisInitialized(_this));
      }

      return _this;
    }

    babelHelpers.createClass(RichTextEditorSource, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_b2b46220809211edaa2833647dc78c6c || (_templateObject_b2b46220809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral([" <div id=\"container\">\n      <div id=\"wysiwyg\" part=\"wysiwyg\">\n        <slot></slot>\n      </div>\n      <code-editor\n        id=\"source\"\n        font-size=\"13\"\n        language=\"html\"\n        @value-changed=\"", "\"\n        word-wrap\n        part=\"source\"\n      >\n      </code-editor>\n    </div>"])), this._handleSourceChange);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorSource.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorSource.prototype), "firstUpdated", this).call(this);
        this.toggle();
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorSource.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {});
      }
    }, {
      key: "toggle",
      value: function toggle(toolbar) {
        var code = this.shadowRoot ? this.shadowRoot.querySelector("#source") : undefined;

        if (!code || !toolbar || !toolbar.target || this.__toolbar && this.__toolbar === toolbar) {
          babelHelpers.toConsumableArray(document.querySelectorAll("[data-rich-text-editor-view-source-mode]")).forEach(function (node) {
            return node.removeAttribute("data-rich-text-editor-view-source-mode");
          });
          if (this.__target) this.__target.focus();
          this.hidden = true;
          this.__toolbar = undefined;
          this.__target = undefined;
          this.disabled = true;
          this.__codeEditorValue = "";
          this.innerHTML = this.__codeEditorValue;
          document.body.append(this);
        } else {
          this.__toolbar = toolbar;
          this.__target = toolbar.target;
          this.disabled = this.__target.disabled;

          this.__target.setAttribute("data-rich-text-editor-view-source-mode", true);

          this.__target.parentNode.insertBefore(this, this.__target);

          this.__codeEditorValue = this.__toolbar.targetHTML;
          this.innerHTML = this.__codeEditorValue;
          code.editorValue = this.__codeEditorValue;
          this.hidden = false;
          code.focus();
        }
      }
      /**
       * updates editor content to code-editor value
       *
       * @param {event} e code-editor's value change event
       * @memberof RichTextEditorSource
       */

    }, {
      key: "_handleSourceChange",
      value: function _handleSourceChange(e) {
        var _this2 = this;

        if (!!this.__toolbar && !!this.__target && !this.__needsUpdate) {
          this.__needsUpdate = !!e.detail && !!e.detail.value ? this.__toolbar.htmlMatchesTarget("".concat(e.detail.value)) : true;

          var update = function update() {
            _this2.__needsUpdate = false;
            _this2.__codeEditorValue = e.detail.value;
            _this2.innerHTML = e.detail.value;
            _this2.__target.innerHTML = e.detail.value;
          };

          if (this.__needsUpdate) setTimeout(update.bind(this), 300);
        }
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_b2b46220809211edaa2833647dc78c6c || (_templateObject2_b2b46220809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n\n        :host([disabled]),\n        :host([view-source]) {\n          outline: none !important;\n        }\n        #container {\n          display: flex;\n          align-items: stretch;\n          justify-content: space-between;\n          width: 100%;\n        }\n        #source,\n        #wysiwyg {\n          margin: 0;\n          padding: 0;\n          min-height: var(--rich-text-editor-min-height, 20px);\n          cursor: pointer;\n          outline: none;\n          overflow: auto;\n          resize: horizontal;\n        }\n        #source {\n          flex: 1 1 auto;\n          min-width: 300px;\n          padding-bottom: 20px;\n        }\n        #wysiwyg {\n          flex: 0 1 auto;\n          display: block;\n          margin-left: 10px;\n          max-height: 70vh;\n          overflow-x: hidden;\n          resize: auto;\n        }\n        #source:hover,\n        #source:focus-within {\n          outline: var(--rich-text-editor-border-width, 1px)\n            var(--rich-text-editor-focus-border-style, 1px)\n            var(--rich-text-editor-focus-color, blue);\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorSource), "properties", this)), {}, {
          /**
           * editor's unique id
           */
          id: {
            name: "id",
            type: String,
            reflect: true,
            attribute: "id"
          },

          /**
           * don't reveal toolbar on mouseover
           */
          disabled: {
            name: "disabled",
            type: Boolean,
            attribute: "disabled",
            reflect: true
          },

          /**
           * don't reveal toolbar on mouseover
           */
          hidden: {
            name: "hidden",
            type: Boolean,
            attribute: "hidden",
            reflect: true
          },

          /**
           * id for editable region
           */
          __target: {
            type: Object
          },

          /**
           * id for toolbar
           */
          __toolbar: {
            type: Object
          },

          /**
           * code-editor for view source
           */
          __codeEditorValue: {
            type: String
          },

          /**
           * has focus
           */
          __needsUpdate: {
            type: Boolean
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "rich-text-editor-source";
      }
    }]);
    return RichTextEditorSource;
  }(_index.LitElement);

  _exports.RichTextEditorSource = RichTextEditorSource;
  customElements.define(RichTextEditorSource.tag, RichTextEditorSource);
  // register globally so we can make sure there is only one
  window.RichTextEditorSource = window.RichTextEditorSource || {}; // request if this exists. This helps invoke element existing in dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through same modal

  window.RichTextEditorSource.requestAvailability = function () {
    if (!window.RichTextEditorSource.instance) {
      window.RichTextEditorSource.instance = document.createElement("rich-text-editor-source");
      window.RichTextEditorSource.stylesheet = document.createElement("style");
      window.RichTextEditorSource.stylesheet.innerHTML = "rich-text-editor-source + [data-rich-text-editor-view-source-mode] { display: none }";
      document.body.appendChild(window.RichTextEditorSource.instance);
      document.head.appendChild(window.RichTextEditorSource.stylesheet);
    }

    return window.RichTextEditorSource.instance;
  };
});