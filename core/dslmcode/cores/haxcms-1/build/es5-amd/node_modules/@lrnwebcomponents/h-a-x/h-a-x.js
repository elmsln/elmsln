define(["exports", "../hax-body/lib/hax-store.js", "./lib/h-a-x-dependencies.js", "../utils/utils.js", "../editable-table/lib/editable-table-behaviors.js"], function (_exports, _haxStore, _hAXDependencies, _utils, _editableTableBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAX = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `h-a-x`
   * @element h-a-x
   * `Single tag to transform authoring`
   *
   * @microcopy - language worth noting:
   *  - HAX - Headless Authoring eXperience
   *  - Body - the editable area that can be worked on and gets saved as a string / blob
   *
  
   * @demo demo/index.html
   */
  var HAX = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(HAX, _HTMLElement);

    var _super = _createSuper(HAX);

    /**
     * HTMLElement
     */
    function HAX() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, HAX);
      _this = _super.call(this);
      _this.__rendered = false; // set tag for later use

      _this.tag = HAX.tag;
      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      }); // if we shouldn't delay rendering


      if (!delayRender) {
        _this.render();
      } // setup events, only run them once and remove


      window.addEventListener("hax-store-ready", _this.storeReady.bind(babelHelpers.assertThisInitialized(_this)), {
        once: true,
        passive: true
      });
      window.addEventListener("hax-store-app-store-loaded", _this.appStoreReady.bind(babelHelpers.assertThisInitialized(_this)), {
        once: true,
        passive: true
      }); // map events from tray

      window.addEventListener("hax-cancel", _this.cancelEvent.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("hax-save", _this.saveEvent.bind(babelHelpers.assertThisInitialized(_this)));
      return _this;
    }

    babelHelpers.createClass(HAX, [{
      key: "html",
      get: // render function
      function get() {
        var styles = ["red", "blue", "green", "orange", "purple"].map(function (item) {
          return "\n        [data-style-decoration~=\"highlight\"] {\n          color: var(--haxcms-style-element-color, white);\n          background-color: var(--haxcms-style-element-background-color, black);\n          font-weight: 400;\n          word-wrap: break-word;\n          padding: 4px 8px;\n          text-transform: uppercase;\n          text-decoration: none;\n        }\n        [data-style-decoration~=\"".concat(item, "\"] {\n          --haxcms-style-element-background-color: var(--simple-colors-default-theme-").concat(item, "-7, ").concat(item, ");\n        }\n        ");
        });
        return "\n    <style>\n    ".concat(styles.join("\n"), "\n    ").concat(_editableTableBehaviors.editableTableDisplayStyles.map(function (s) {
          return s.cssText.replace(/:host/g, "hax-body table");
        }).join(" "), "\n    :host,h-a-x {\n      display: block;\n      font-size: var(--haxcms-base-styles-body-font-size);\n      font-family: var(--haxcms-base-styles-body-font-family);\n      line-height: var(--haxcms-base-styles-body-line-height);\n      letter-spacing: var(--haxcms-base-styles-body-letter-spacing);\n    }\n\n    :host([hidden]),h-a-x([hidden]) {\n      display: none;\n    }\n\n    :host hax-body, h-a-x hax-body {\n      font-size: var(--haxcms-base-styles-body-font-size);\n      font-family: var(--haxcms-base-styles-body-font-family);\n      line-height: var(--haxcms-base-styles-body-line-height);\n      letter-spacing: var(--haxcms-base-styles-body-letter-spacing);\n    }\n\n    :host img, h-a-x img {\n      max-width: 100%;\n      max-width: -moz-available;\n      max-width: -webkit-fill-available;\n      max-width: fill-available;\n    }\n\n    hax-body h1 {\n      font-size: var(--hax-base-styles-h1-font-size);\n      line-height: var(--hax-base-styles-h1-line-height);\n    }\n\n    hax-body h2 {\n      font-size: var(--hax-base-styles-h2-font-size);\n    }\n\n    hax-body h3 {\n      font-size: var(--hax-base-styles-h3-font-size);\n    }\n\n    hax-body h4 {\n      font-size: var(--hax-base-styles-h4-font-size);\n    }\n\n    hax-body h5 {\n      font-size: var(--hax-base-styles-h5-font-size);  \n    }\n\n    hax-body h6 {\n      font-size: var(--hax-base-styles-h6-font-size);\n    }\n\n    hax-body p {\n      min-height: var(--hax-base-styles-p-min-height);\n      font-size: var(--hax-base-styles-p-font-size);\n      line-height: var(--hax-base-styles-p-line-height);\n      letter-spacing: var(--hax-base-styles-p-letter-spacing);\n    }\n    hax-body p code {\n      padding: 0.2em 0.4em;\n      margin: 0;\n      font-size: 12px;\n      background-color: var(--hax-base-styles-code-background-color,rgba(175, 184, 193, 0.2));\n      border-radius: 6px;\n      font-family: var(--hax-base-styles-code-font-family, ui-monospace,monospace);\n    }\n    hax-body pre {\n      padding: 16px;\n      overflow: auto;\n      line-height: 1.45;\n      background-color: var(--hax-base-styles-pre-background-color,rgba(175, 184, 193, 0.2));\n      border-radius: 6px;\n      margin-bottom: 0;\n      word-break: normal;\n      word-wrap: normal;\n      margin-top: 0;\n      font-family: var(--hax-base-styles-pre-font-family, ui-monospace,monospace);\n      font-size: 12px;\n    }\n\n    hax-body a,\n    hax-body a:-webkit-any-link,\n    hax-body a,\n    hax-body a:-webkit-any-link    {\n      font-size: var(--hax-base-styles-a-font-size,var(--hax-base-styles-p-font-size));\n    }\n\n    hax-body ol,\n    hax-body ul\n    hax-body ol li,\n    hax-body ul li,\n    hax-body li {\n      line-height: var(--hax-base-styles-list-line-height,var(--hax-base-styles-p-line-height));\n      font-size: var(--hax-base-styles-list-font-size,var(--hax-base-styles-p-font-size));\n    }\n\n    hax-body  ul,\n    hax-body  ul ol,\n    hax-body  ol ul,\n    hax-body  ol ol {\n      padding-bottom: unset;\n    }\n    hax-body table {\n      min-width: 300px;\n      border-collapse: collapse;\n      margin: 0 0 15px;\n      display: table!important;\n    }\n    hax-body table caption,\n    hax-body table th,\n    hax-body table td {\n      border: 1px solid #888;\n      padding: 5px 10px;\n      text-align: left;\n      vertical-align: middle;\n    }\n    figure {\n      margin-left: 0;\n      margin-right: 0;\n    }\n    figure > *:first-child, \n    figcaption > *:first-child{\n      margin-top: 0;\n    }\n    figure > *:last-child.\n    figcaption > *:last-child {\n      margin-bottom: 0;\n    }\n    </style>\n    <hax-body>\n        <slot></slot>\n    </hax-body>");
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "cancelEvent",
      value: function cancelEvent(e) {
        this.importSlotToHaxBody();
      }
    }, {
      key: "saveEvent",
      value: function () {
        var _saveEvent = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {
          var body;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _haxStore.HAXStore.activeHaxBody.haxToContent();

                case 2:
                  body = _context.sent;
                  this.innerHTML = body;
                  this.dispatchEvent(new CustomEvent("hax-save-body-value", {
                    composed: true,
                    bubbles: true,
                    cancelable: true,
                    detail: {
                      value: body
                    }
                  }));

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function saveEvent(_x) {
          return _saveEvent.apply(this, arguments);
        }

        return saveEvent;
      }()
      /**
       * life cycle, element is afixed to the DOM
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAX.prototype), "connectedCallback", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAX.prototype), "connectedCallback", this).call(this);
        } // this ensures it's only applied once


        if (!this.__HAXApplied && !window.__HAXApplied) {
          window.__HAXApplied = this.__HAXApplied = this.applyHAX();
        }
      }
      /**
       * Store is ready, now we can pass along the app store definition
       * which HAX will react to an load the data it finds.
       */

    }, {
      key: "storeReady",
      value: function storeReady(e) {
        var _this2 = this;

        if (e.detail) {
          setTimeout(function () {
            try {
              var appStore = _objectSpread({}, JSON.parse(_this2.getAttribute("app-store")));

              if (babelHelpers.typeof(appStore) === "object") {
                _haxStore.HAXStore.appStore = appStore;
              }
            } catch (e) {
              console.warn(e);
            }

            if (_this2.hidePanelOps === "hide-panel-ops") {
              _this2.hidePanelOps = true;
            }

            _haxStore.HAXStore.haxTray.hidePanelOps = _this2.hidePanelOps;
            _haxStore.HAXStore.haxTray.offsetMargin = _this2.offsetMargin;
            _haxStore.HAXStore.elementAlign = _this2.elementAlign;
          }, 0);
          window.removeEventListener("hax-store-ready", this.storeReady.bind(this), {
            once: true,
            passive: true
          });
        }
      } // import into the active body if there's content
      // obtain the nodes that have been assigned to the slot of our element

    }, {
      key: "importSlotToHaxBody",
      value: function importSlotToHaxBody() {
        var nodes = [];

        if (this.shadowRoot.querySelector("slot")) {
          nodes = this.shadowRoot.querySelector("slot").assignedNodes();
        } else {
          nodes = this.children;
        }

        var body = ""; // loop the nodes and if it has an outerHTML attribute, append as string

        for (var i in nodes) {
          if (babelHelpers.typeof(nodes[i].outerHTML) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            body += nodes[i].outerHTML;
          }
        }

        _haxStore.HAXStore.activeHaxBody.importContent(body);
      }
      /**
       * Appstore has been loaded, NOW we can safely do an import
       */

    }, {
      key: "appStoreReady",
      value: function appStoreReady(e) {
        if (e.detail) {
          this.importSlotToHaxBody();
          window.removeEventListener("hax-store-app-store-loaded", this.appStoreReady.bind(this), {
            once: true,
            passive: true
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        this.__rendered = true;
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;
        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
      /**
       * Apply tags to the screen to establish HAX
       */

    }, {
      key: "applyHAX",
      value: function applyHAX() {
        // store needs to come before anyone else, use it's availability request mechanism
        var store = window.HaxStore.requestAvailability(); // now everyone else

        var tray = document.createElement("hax-tray");
        tray.hidePanelOps = this.hidePanelOps;
        this.elementAlign = (0, _utils.localStorageGet)("hax-tray-elementAlign");

        if (!this.elementAlign || this.elementAlign == null) {
          this.elementAlign = "right";
        }

        store.elementAlign = this.elementAlign;
        document.body.appendChild(tray);
        document.body.appendChild(document.createElement("hax-app-picker"));
        document.body.appendChild(document.createElement("hax-autoloader"));
        document.body.appendChild(document.createElement("hax-cancel-dialog"));
        return true;
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("hax-store-ready", this.storeReady.bind(this), {
          once: true,
          passive: true
        });
        window.removeEventListener("hax-store-app-store-loaded", this.appStoreReady.bind(this), {
          once: true,
          passive: true
        });
        window.removeEventListener("hax-cancel", this.cancelEvent.bind(this));
        window.removeEventListener("hax-save", this.saveEvent.bind(this));

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAX.prototype), "disconnectedCallback", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAX.prototype), "disconnectedCallback", this).call(this);
        }
      }
    }, {
      key: "elementAlign",
      get: function get() {
        return this.getAttribute("element-align");
      },
      set: function set(newValue) {
        if (this.__rendered) {
          this.setAttribute("element-align", newValue); // bind to the hax store global on change

          _haxStore.HAXStore.elementAlign = newValue;
        }
      }
    }, {
      key: "offsetMargin",
      get: function get() {
        return this.getAttribute("offset-margin");
      },
      set: function set(newValue) {
        this.setAttribute("offset-margin", newValue);

        if (this.__rendered) {
          // bind to the hax store global on change
          _haxStore.HAXStore.haxTray.offsetMargin = newValue;
        }
      }
    }, {
      key: "hidePanelOps",
      get: function get() {
        return this.getAttribute("hide-panel-ops");
      },
      set: function set(newValue) {
        if (newValue) {
          this.setAttribute("hide-panel-ops", "hide-panel-ops");

          if (this.__rendered) {
            // bind to the hax store global on change
            _haxStore.HAXStore.haxTray.hidePanelOps = newValue;
          }
        }
      }
    }, {
      key: "appStore",
      get: function get() {
        return this.getAttribute("app-store");
      },
      set: function set(newValue) {
        this.setAttribute("app-store", newValue);

        if (this.__rendered) {
          // bind to the hax store global on change
          _haxStore.HAXStore.appStore = _objectSpread({}, JSON.parse(this.getAttribute("app-store")));
        }
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(attr, oldValue, newValue) {}
    }], [{
      key: "tag",
      get: function get() {
        return "h-a-x";
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        return ["element-align", "offset-margin", "app-store", "hide-panel-ops"];
      }
    }]);
    return HAX;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.HAX = HAX;
  customElements.define("h-a-x", HAX);
});