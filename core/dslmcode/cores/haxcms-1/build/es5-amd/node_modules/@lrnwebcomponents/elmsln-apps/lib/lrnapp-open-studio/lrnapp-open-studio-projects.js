define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../lrnsys-button/lrnsys-button.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../materializecss-styles/materializecss-styles.js", "../lrnapp-studio-submission/lrnapp-studio-submission-display.js"], function (_exports, _polymerElement, _polymerDom, _lrnsysButton, _domIf, _domRepeat, _materializecssStyles, _lrnappStudioSubmissionDisplay) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappOpenStudioProjects = void 0;

  var _templateObject_eadcb3708e0011ed99ce491205e67b1d;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var LrnappOpenStudioProjects = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappOpenStudioProjects, _PolymerElement);

    var _super = _createSuper(LrnappOpenStudioProjects);

    function LrnappOpenStudioProjects() {
      babelHelpers.classCallCheck(this, LrnappOpenStudioProjects);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappOpenStudioProjects, [{
      key: "_renderSubmissionsCompute",
      value: function _renderSubmissionsCompute(submissions, activeProject, activeAuthorId) {
        // if we don't have all three variables then we need to bail and set to null
        if (!submissions || !activeProject || !activeAuthorId) {
          return null;
        }

        var renderSubmissions = []; // make an array of parent assignment ids

        var parentAssignments = activeProject.attributes.steps.map(function (step) {
          return step.id;
        }); // filter the submissions by if they are listed in the active projects steps

        renderSubmissions = submissions.filter(function (submission) {
          return parentAssignments.includes(submission.relationships.assignment.id);
        }); // sort render submissions by how the assignment steps are listed in the active project

        renderSubmissions.sort(function (a, b) {
          for (var index = 0; index < activeProject.attributes.steps.length; index++) {
            if (activeProject.attributes.steps[index].id == a.relationships.assignment.id) {
              return -1;
            }

            if (activeProject.attributes.steps[index].id == b.relationships.assignment.id) {
              return 1;
            }
          }

          return 0;
        });
        return renderSubmissions;
      }
    }, {
      key: "_activeProjectCompute",
      value: function _activeProjectCompute(activeProjectId, projects) {
        var activeProject = null;

        if (projects) {
          activeProject = projects.find(function (project) {
            return project.id === activeProjectId;
          });
        }

        return activeProject;
      }
    }, {
      key: "_showSubmissions",
      value: function _showSubmissions(activeProjectId, activeAuthorId) {
        if (activeProjectId && activeAuthorId) {
          return true;
        }

        return false;
      }
    }, {
      key: "_getSubmissionIcon",
      value: function _getSubmissionIcon(id) {
        for (var index = 0; index < this.renderSubmissions.length; index++) {
          if (this.renderSubmissions[index].relationships.assignment.id == id) {
            return "check";
          }
        }

        return "assignment";
      }
    }, {
      key: "_getSubmissionClass",
      value: function _getSubmissionClass(id) {
        for (var index = 0; index < this.renderSubmissions.length; index++) {
          if (this.renderSubmissions[index].relationships.assignment.id == id) {
            return "green-text text-darken-2";
          }
        }

        return "grey-text";
      }
    }, {
      key: "_scrollToTarget",
      value: function _scrollToTarget(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var local = normalizedEvent.localTarget; // this will have the id of the current submission

        var active = local.getAttribute("data-assignment-id");

        if (this.shadowRoot.querySelector(".assignment-" + active)) {
          this.shadowRoot.querySelector(".assignment-" + active).scrollIntoView({
            block: "end",
            behavior: "smooth"
          });
        }
      }
      /**
       * Handle response for the whole projects object.
       */

    }, {
      key: "_handleResponse",
      value: function _handleResponse(event) {
        this.$.loading.hidden = true;
      }
      /**
       * Simple way to convert from object to array.
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_eadcb3708e0011ed99ce491205e67b1d || (_templateObject_eadcb3708e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"materializecss-styles\"></style>\n      <style>\n        :host {\n          display: block;\n          align-content: center;\n        }\n        #loading {\n          width: 100%;\n          z-index: 1000;\n          opacity: 0.8;\n          text-align: center;\n          align-content: center;\n          justify-content: center;\n          height: 100vh;\n          position: absolute;\n          background-color: white;\n        }\n        h1.empty-title,\n        h1.project-title {\n          font-size: 32px;\n        }\n        h2.assignment-title {\n          font-size: 28px;\n          font-weight: bold;\n          width: 100%;\n          border-bottom: solid 1px grey;\n        }\n        .project-steps {\n          display: flex;\n          align-items: center;\n        }\n        .project-step {\n          overflow: hidden;\n          text-overflow: ellipsis;\n          word-break: break-all;\n          word-wrap: break-word;\n        }\n        .project-step::part(lrnsys-button-button) {\n          font-size: 11px;\n        }\n        .project-step::part(lrnsys-button-inner-div) {\n          padding: 0 4px;\n        }\n      </style>\n      <template is=\"dom-if\" if=\"[[!showSubmissions]]\">\n        <h1 class=\"empty-title black-text\">\n          Please select an Author and Project in order to review their portfolio\n        </h1>\n      </template>\n      <template is=\"dom-if\" if=\"[[showSubmissions]]\">\n        <h1 class=\"project-title black-text\">\n          [[activeProject.attributes.title]]\n        </h1>\n        <div class=\"project-steps\">\n          <template\n            is=\"dom-repeat\"\n            items=\"[[activeProject.attributes.steps]]\"\n            as=\"assignment\"\n          >\n            <lrnsys-button\n              icon$=\"[[_getSubmissionIcon(assignment.id)]]\"\n              icon-class$=\"[[_getSubmissionClass(assignment.id)]]\"\n              on-click=\"_scrollToTarget\"\n              label=\"[[assignment.title]]\"\n              data-assignment-id$=\"[[assignment.id]]\"\n              class=\"project-step\"\n              hover-class=\"blue white-text\"\n              hidden$=\"[[!assignment.title]]\"\n            ></lrnsys-button>\n          </template>\n        </div>\n        <template is=\"dom-repeat\" items=\"[[renderSubmissions]]\" as=\"submission\">\n          <a\n            name=\"[[submission.relationships.assignment.title]]\"\n            class$=\"assignment-[[submission.relationships.assignment.id]]\"\n            ><h2 class=\"assignment-title\">\n              [[submission.relationships.assignment.title]]\n            </h2></a\n          >\n          <lrnapp-studio-submission-display\n            submission=\"[[submission]]\"\n            class=\"ferpa-protect\"\n          ></lrnapp-studio-submission-display>\n        </template>\n      </template>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-open-studio-projects";
      }
    }, {
      key: "properties",
      get: function get() {
        return babelHelpers.defineProperty({
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },

          /**
           * The projects that exist so we can make other calls for data
           */
          projects: {
            type: Array,
            notify: true
          },

          /**
           * The submissions that exist so we can make other calls for data
           */
          submissions: {
            type: Array,
            notify: true
          },

          /**
           * The renderSubmissions we kick to the screen
           */
          renderSubmissions: {
            type: Array,
            notify: true,
            computed: "_renderSubmissionsCompute(submissions, activeProject, activeAuthorId)"
          },
          activeProjectId: {
            type: String,
            reflectToAttribute: true,
            value: null
          },
          activeProject: {
            type: Object,
            computed: "_activeProjectCompute(activeProjectId, projects)"
          },
          activeAuthorId: {
            type: String,
            reflectToAttribute: true,
            value: null
          },
          showSubmissions: {
            type: Boolean,
            computed: "_showSubmissions(activeProjectId, activeAuthorId)",
            value: false
          },

          /**
           * Endpoint for submission data.
           */
          sourcePath: {
            type: String,
            notify: true
          }
        }, "basePath", {
          type: String,
          notify: true
        });
      }
    }]);
    return LrnappOpenStudioProjects;
  }(_polymerElement.PolymerElement);

  _exports.LrnappOpenStudioProjects = LrnappOpenStudioProjects;
  customElements.define(LrnappOpenStudioProjects.tag, LrnappOpenStudioProjects);
});