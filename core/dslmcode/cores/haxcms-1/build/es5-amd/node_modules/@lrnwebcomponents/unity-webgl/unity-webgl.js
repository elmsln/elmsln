define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.UnityWebgl = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Copyright 2021 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
  var ATTRS = ["target", "compression", "streamingurl", "companyname", "productname", "productversion", "width", "height", "background"];
  /**
   * `unity-webgl`
   * `Unity WebGL player`
   *
   * @demo demo/index.html
   * @element unity-webgl
   */

  var UnityWebgl = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(UnityWebgl, _HTMLElement);

    var _super = _createSuper(UnityWebgl);

    /**
     * object life cycle
     */
    function UnityWebgl() {
      var _this;

      babelHelpers.classCallCheck(this, UnityWebgl);
      _this = _super.call(this); // create a template element for processing shadowRoot

      _this.template = document.createElement("template"); // create a shadowRoot

      _this.attachShadow({
        mode: "open"
      });

      return _this;
    }
    /**
     * This is a convention, not the standard to return HTML of the element
     */


    babelHelpers.createClass(UnityWebgl, [{
      key: "html",
      get: function get() {
        return "\n    <style> \n      :host { \n        display: block;\n        width: ".concat(this.width, ";\n        height: ").concat(this.height, ";\n        background: ").concat(this.background, ";\n      }\n    </style>\n    <canvas style=\"width: ").concat(this.width, "; height: ").concat(this.height, "; background: ").concat(this.background, "\"></canvas>");
      }
      /**
       * life cycle, element is afixed to the DOM
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        if (window.ShadyCSS) {
          window.ShadyCSS.styleElement(this);
        } // set initial values based on attributes in dom node


        ATTRS.forEach(function (a) {
          _this2[a] = _this2.getAttribute(a);
        });
      }
      /**
       * Render / rerender the shadowRoot
       */

    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
        var script = document.createElement("script");

        script.onload = function () {
          // do stuff with the script
          createUnityInstance(_this3.shadowRoot.querySelector("canvas"), {
            dataUrl: _this3.target + ".data." + _this3.compression,
            frameworkUrl: _this3.target + ".framework.js." + _this3.compression,
            codeUrl: _this3.target + ".wasm." + _this3.compression,
            streamingAssetsUrl: _this3.streamingurl,
            company_name: _this3.companyname,
            product_name: _this3.productname,
            product_version: _this3.productversion
          });
        };

        script.src = this.target + ".loader.js";
        this.shadowRoot.appendChild(script);

        script.onerror = function () {
          console.log("Error loading " + this.src);
        };
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(attr, oldValue, newValue) {
        var _this4 = this;

        if (this.shadowRoot && newValue && oldValue != newValue) {
          clearTimeout(this._debounce);
          this._debounce = setTimeout(function () {
            _this4.render();
          }, 0);
        }
      }
    }, {
      key: "target",
      get: function get() {
        return this.getAttribute("target");
      },
      set: function set(val) {
        this.setAttribute("target", val);
      }
    }, {
      key: "compression",
      get: function get() {
        return this.getAttribute("compression");
      },
      set: function set(val) {
        this.setAttribute("compression", val);
      }
    }, {
      key: "streamingurl",
      get: function get() {
        return this.getAttribute("streamingurl");
      },
      set: function set(val) {
        this.setAttribute("streamingurl", val);
      }
    }, {
      key: "companyname",
      get: function get() {
        return this.getAttribute("companyname");
      },
      set: function set(val) {
        this.setAttribute("companyname", val);
      }
    }, {
      key: "productname",
      get: function get() {
        return this.getAttribute("productname");
      },
      set: function set(val) {
        this.setAttribute("productname", val);
      }
    }, {
      key: "productversion",
      get: function get() {
        return this.getAttribute("productversion");
      },
      set: function set(val) {
        this.setAttribute("productversion", val);
      }
    }, {
      key: "width",
      get: function get() {
        return this.getAttribute("width");
      },
      set: function set(val) {
        this.setAttribute("width", val);
      }
    }, {
      key: "height",
      get: function get() {
        return this.getAttribute("height");
      },
      set: function set(val) {
        this.setAttribute("height", val);
      }
    }, {
      key: "background",
      get: function get() {
        return this.getAttribute("background");
      },
      set: function set(val) {
        this.setAttribute("background", val);
      }
    }], [{
      key: "tag",
      get:
      /**
       * This is a convention, not the standard
       */
      function get() {
        return "unity-webgl";
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        // const set above
        return ATTRS;
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Unity Player",
            description: "Unity WebGL Player",
            icon: "av:games",
            color: "purple",
            groups: ["3D"],
            handles: [],
            meta: {
              author: "Brainmedia"
            }
          },
          settings: {
            configure: [{
              property: "target",
              title: "Target",
              description: "Target game path",
              inputMethod: "textfield"
            }, {
              property: "compression",
              title: "Compression method",
              description: "Game's files extention",
              inputMethod: "textfield"
            }, {
              property: "streamingurl",
              title: "Streaming url",
              description: "Streaming assets url",
              inputMethod: "textfield"
            }, {
              property: "companyname",
              title: "Company Name",
              description: "Company Name",
              inputMethod: "textfield"
            }, {
              property: "productname",
              title: "Product Name",
              description: "Game title",
              inputMethod: "textfield"
            }, {
              property: "productversion",
              title: "Product Version",
              description: "Release Version",
              inputMethod: "textfield"
            }, {
              property: "width",
              title: "Canvas Width",
              description: "Canvas CSS Width (with px/em/etc.)",
              inputMethod: "textfield"
            }, {
              property: "height",
              title: "Canvas Height",
              description: "Canvas CSS Height (with px/em/etc.)",
              inputMethod: "textfield"
            }, {
              property: "background",
              title: "Canvas Background",
              description: "Canvas CSS Background",
              inputMethod: "textfield"
            }],
            advanced: []
          },
          saveOptions: {
            unsetAttributes: []
          },
          demoSchema: [{
            tag: "unity-webgl",
            content: "",
            properties: {
              target: "/elements/unity-webgl/demo/example/build web",
              compression: "unityweb",
              streamingurl: "StreamingAssets",
              companyname: "DefaultCompany",
              productname: "test webgl",
              productversion: "0.1",
              width: "460px",
              height: "400px",
              background: "#231F20"
            }
          }]
        };
      }
    }]);
    return UnityWebgl;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.UnityWebgl = UnityWebgl;
  customElements.define(UnityWebgl.tag, UnityWebgl);
});