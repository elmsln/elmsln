define(["exports", "../../lit/index.js", "../simple-colors/simple-colors.js"], function (_exports, _index, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleRangeInput = void 0;

  var _templateObject_72019400809211edaa2833647dc78c6c, _templateObject2_72019400809211edaa2833647dc78c6c;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-range-input`
   * `simple styling on a range input`
   *
   * @demo demo/index.html
   * @element simple-range-input
   */
  var SimpleRangeInput = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(SimpleRangeInput, _SimpleColors);

    var _super = _createSuper(SimpleRangeInput);

    /**
     * object life cycle
     */
    function SimpleRangeInput() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleRangeInput);
      _this = _super.call(this);
      _this.dragging = false;
      _this.label = "Range input";
      _this.min = 0;
      _this.max = 100;
      _this.step = 1;
      _this.value = 0;
      _this.immediateValue = 0;
      _this.disabled = false;

      _this.addEventListener("mousedown", function () {
        _this.dragging = true;
      });

      _this.addEventListener("mouseup", function () {
        _this.dragging = false;
        _this.value = _this.immediateValue;
      });

      _this.addEventListener("keydown", function () {
        _this.dragging = true;
        setTimeout(function () {
          _this.value = _this.immediateValue;
        }, 0);
      });

      _this.addEventListener("keyup", function () {
        _this.dragging = false;
        _this.value = _this.immediateValue;
      });

      return _this;
    }

    babelHelpers.createClass(SimpleRangeInput, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_72019400809211edaa2833647dc78c6c || (_templateObject_72019400809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["<input\n        @input=\"", "\"\n        @changed=\"", "\"\n        ?disabled=\"", "\"\n        type=\"range\"\n        min=\"", "\"\n        step=\"", "\"\n        max=\"", "\"\n        .value=\"", "\"\n        aria-labelledby=\"label\"\n      /><label id=\"label\">", "</label>"])), this._inputChanged, this._valueChanged, this.disabled, this.min, this.step, this.max, this.value, this.label);
      }
    }, {
      key: "_inputChanged",
      value: function _inputChanged(e) {
        this.immediateValue = e.target.value;
      }
    }, {
      key: "_valueChanged",
      value: function _valueChanged(e) {
        this.value = e.target.value;
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleRangeInput.prototype), "firstUpdated", this).call(this); // helps ensure a flood of initial stampping input does not occur
        // this is because of a vanilla element + event monitoring to set initials

        setTimeout(function () {
          _this2.__ready = true;
        }, 0);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleRangeInput.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleRangeInput.prototype), "updated", this).call(this, changedProperties);
        }

        if (this.shadowRoot && this.__ready) {
          changedProperties.forEach(function (oldValue, propName) {
            if (propName === "immediateValue") {
              if (_this3.dragging) {
                _this3.dispatchEvent(new CustomEvent("immediate-value-changed", {
                  detail: {
                    value: _this3.immediateValue
                  }
                }));
              } else {
                _this3.value = _this3.immediateValue;
              }
            }

            if (propName === "value") {
              _this3.dispatchEvent(new CustomEvent("value-changed", {
                detail: {
                  value: _this3.value
                }
              }));
            }
          });
        }
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleRangeInput), "properties", this)), {}, {
          dragging: {
            type: Boolean,
            reflect: true
          },
          immediateValue: {
            type: Number,
            attribute: "immediate-value"
          },
          value: {
            type: Number,
            reflect: true
          },
          min: {
            type: Number
          },
          step: {
            type: Number
          },
          max: {
            type: Number
          },
          label: {
            type: String
          },
          disabled: {
            type: Boolean,
            reflect: true
          }
        });
      }
      /**
       * This is a convention, not the standard
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-range-input";
      } // Template return function

    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleRangeInput), "styles", this)), [(0, _index.css)(_templateObject2_72019400809211edaa2833647dc78c6c || (_templateObject2_72019400809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          min-height: var(--simple-range-input-track-height, 10px);\n          height: var(--simple-range-input-pin-height, 20px);\n        }\n        :host([disabled]) {\n          pointer-events: none;\n        }\n        input[type=\"range\"] {\n          -webkit-appearance: none;\n          margin: 0;\n          padding: 0;\n          width: 100%;\n        }\n        input[type=\"range\"]:focus {\n          outline: none;\n        }\n        input[type=\"range\"]::-webkit-slider-runnable-track {\n          width: 100%;\n          height: var(--simple-range-input-track-height, 10px);\n          cursor: pointer;\n          box-shadow: var(\n            --simple-range-input-box-shadow,\n            0px 0px 0px #000000,\n            0px 0px 0px #0d0d0d\n          );\n          background: var(\n            --simple-range-input-bg,\n            var(--simple-colors-default-theme-accent-2, black)\n          );\n          border-radius: var(--simple-range-input-track-border-radius, 2px);\n          border: var(--simple-range-input-border, 0px solid #000000);\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n          box-shadow: var(\n            --simple-range-input-box-shadow,\n            0px 0px 0px #000000,\n            0px 0px 0px #0d0d0d\n          );\n          border: var(--simple-range-input-border, 0px solid #000000);\n          height: var(--simple-range-input-pin-height, 20px);\n          width: var(\n            --simple-range-input-pin-width,\n            var(--simple-range-input-pin-height, 20px)\n          );\n          border-radius: var(--simple-range-input-border-radius, 50%);\n          background: var(\n            --simple-range-input-color,\n            var(--simple-colors-default-theme-accent-8, grey)\n          );\n          cursor: pointer;\n          margin: calc(\n              0.5 *\n                (\n                  var(--simple-range-input-track-height, 10px) -\n                    var(--simple-range-input-pin-height, 20px)\n                )\n            )\n            0;\n          -webkit-appearance: none;\n        }\n        input[type=\"range\"]:focus::-webkit-slider-runnable-track {\n          background: var(\n            --simple-range-input-bg,\n            var(--simple-colors-default-theme-accent-2, black)\n          );\n        }\n        input[type=\"range\"]::-moz-range-track {\n          width: 100%;\n          height: var(--simple-range-input-track-height, 10px);\n          cursor: pointer;\n          box-shadow: var(\n            --simple-range-input-box-shadow,\n            0px 0px 0px #000000,\n            0px 0px 0px #0d0d0d\n          );\n          background: var(\n            --simple-range-input-bg,\n            var(--simple-colors-default-theme-accent-2, black)\n          );\n          border-radius: var(--simple-range-input-track-border-radius, 2px);\n          border: var(--simple-range-input-border, 0px solid #000000);\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n          box-shadow: var(\n            --simple-range-input-box-shadow,\n            0px 0px 0px #000000,\n            0px 0px 0px #0d0d0d\n          );\n          border: var(--simple-range-input-border, 0px solid #000000);\n          height: var(--simple-range-input-pin-height, 20px);\n          width: var(\n            --simple-range-input-pin-width,\n            var(--simple-range-input-pin-height, 20px)\n          );\n          border-radius: var(--simple-range-input-border-radius, 50%);\n          background: var(\n            --simple-range-input-color,\n            var(--simple-colors-default-theme-accent-8, grey)\n          );\n          cursor: pointer;\n          margin: calc(\n              0.5 *\n                (\n                  var(--simple-range-input-track-height, 10px) -\n                    var(--simple-range-input-pin-height, 20px)\n                )\n            )\n            0;\n        }\n        input[type=\"range\"]::-ms-track {\n          width: 100%;\n          height: var(--simple-range-input-track-height, 10px);\n          cursor: pointer;\n          background: transparent;\n          border-color: transparent;\n          border-width: var(--simple-range-input-pin-height, 20px) 0;\n          color: transparent;\n        }\n        input[type=\"range\"]::-ms-fill-lower {\n          background: var(\n            --simple-range-input-bg,\n            var(--simple-colors-default-theme-accent-2, black)\n          );\n          border: var(--simple-range-input-border, 0px solid #000000);\n          border-radius: var(--simple-range-input-track-border-radius, 2px);\n          box-shadow: var(\n            --simple-range-input-box-shadow,\n            0px 0px 0px #000000,\n            0px 0px 0px #0d0d0d\n          );\n        }\n        input[type=\"range\"]::-ms-fill-upper {\n          background: var(\n            --simple-range-input-bg,\n            var(--simple-colors-default-theme-accent-2, black)\n          );\n          border: var(--simple-range-input-border, 0px solid #000000);\n          border-radius: var(--simple-range-input-track-border-radius, 2px);\n          box-shadow: var(\n            --simple-range-input-box-shadow,\n            0px 0px 0px #000000,\n            0px 0px 0px #0d0d0d\n          );\n        }\n        input[type=\"range\"]::-ms-thumb {\n          box-shadow: var(\n            --simple-range-input-box-shadow,\n            0px 0px 0px #000000,\n            0px 0px 0px #0d0d0d\n          );\n          border: var(--simple-range-input-border, 0px solid #000000);\n          height: var(--simple-range-input-pin-height, 20px);\n          width: var(\n            --simple-range-input-pin-width,\n            var(--simple-range-input-pin-height, 20px)\n          );\n          border-radius: var(--simple-range-input-border-radius, 50%);\n          background: var(\n            --simple-range-input-color,\n            var(--simple-colors-default-theme-accent-8, grey)\n          );\n          cursor: pointer;\n          margin: calc(\n              0.5 *\n                (\n                  var(--simple-range-input-track-height, 10px) -\n                    var(--simple-range-input-pin-height, 20px)\n                )\n            )\n            0;\n        }\n        input[type=\"range\"]:focus::-ms-fill-lower {\n          background: var(\n            --simple-range-input-bg,\n            var(--simple-colors-default-theme-accent-2, black)\n          );\n        }\n        input[type=\"range\"]:focus::-ms-fill-upper {\n          background: var(\n            --simple-range-input-bg,\n            var(--simple-colors-default-theme-accent-2, black)\n          );\n        }\n        #label {\n          position: absolute;\n          left: -10000px;\n          top: auto;\n          width: 1px;\n          height: 1px;\n          overflow: hidden;\n        }\n      "])))]);
      }
    }]);
    return SimpleRangeInput;
  }(_simpleColors.SimpleColors);

  _exports.SimpleRangeInput = SimpleRangeInput;
  customElements.define(SimpleRangeInput.tag, SimpleRangeInput);
});