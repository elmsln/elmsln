define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/async.js", "../simple-modal/simple-modal.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button.js"], function (_exports, _require, _polymerElement, async, _simpleModal, _simpleIcon, _simpleIcons, _simpleIconButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysOutline = void 0;
  _require = _interopRequireWildcard(_require);
  async = _interopRequireWildcard(async);

  var _templateObject_6dac6ab0809211edaa2833647dc78c6c;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrnsys-outline`
   * @element lrnsys-outline
   * `Outline that items can be shuffled around in`
   *
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   *  -
   */
  var LrnsysOutline = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnsysOutline, _PolymerElement);

    var _super = _createSuper(LrnsysOutline);

    function LrnsysOutline() {
      var _this;

      babelHelpers.classCallCheck(this, LrnsysOutline);
      _this = _super.call(this);
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-input/paper-input.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./lib/lrnsys-outline-item.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(LrnsysOutline, [{
      key: "connectedCallback",
      value:
      /**
       * Attached lifecycle
       */
      function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnsysOutline.prototype), "connectedCallback", this).call(this);
        window.SimpleModal.requestAvailability(); // fix stack order

        this.addEventListener("delete-item", this._handleRemoveItem.bind(this));
        this.addEventListener("indent-item", this._handleIndentItem.bind(this));
        this.addEventListener("add-item", this._handleAddItem.bind(this));
        this.addEventListener("move-item", this._handleMoveItem.bind(this));
        this.addEventListener("change-item", this._handleChangeItem.bind(this));
        this.addEventListener("focus-item", this._handleFocusItem.bind(this));
        this.addEventListener("blur-item", this._handleBlurItem.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.removeEventListener("delete-item", this._handleRemoveItem.bind(this));
        this.removeEventListener("indent-item", this._handleIndentItem.bind(this));
        this.removeEventListener("add-item", this._handleAddItem.bind(this));
        this.removeEventListener("move-item", this._handleMoveItem.bind(this));
        this.removeEventListener("change-item", this._handleChangeItem.bind(this));
        this.removeEventListener("focus-item", this._handleFocusItem.bind(this));
        this.removeEventListener("blur-item", this._handleBlurItem.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnsysOutline.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnsysOutline.prototype), "ready", this).call(this);

        if (this.data === null || this.data.length < 1) {
          this.__tempid = this.__tempid === undefined ? 0 : this.__tempid + 1;
          this.data = [{
            id: "outline-item-" + this.__tempid,
            title: "",
            order: 0,
            parent: null
          }];
        }

        this.setData(this.data);
      }
      /**
       * gets a nested array of items to convert & updates the dom-repeat
       */

    }, {
      key: "setData",
      value: function setData(data) {
        if (data !== undefined && data.length > 0) {
          var prevIndent = -1;

          for (var i in data) {
            var indent = parseInt(this._getIndent(data, i));
            this.__tempid = this.__tempid === undefined ? 0 : this.__tempid + 1;
            data[i].index = parseInt(i);
            data[i].indent = indent;
            data[i].prevSibling = this._getSibling(parseInt(i), indent, true);
            data[i].nextSibling = this._getSibling(parseInt(i), indent, false);
            data[i].disableUp = data[i].prevSibling === null;
            data[i].disableDown = data[i].nextSibling === null;
            data[i].disableLeft = indent === 0;
            data[i].disableRight = indent > prevIndent;
            data[i].id = data[i].id === undefined ? "outline-item-" + this.__tempid : data[i].id;
            prevIndent = indent;
          }
        }

        this.set("items", []);
        this.set("items", data);
      }
      /**
       * gets a flat array of items to convert & updates it to a nested array
       */

    }, {
      key: "getData",
      value: function getData() {
        for (var i in this.items) {
          this.items[i].order = this._getOrder(this.items[i]);
          this.notifyPath("items.".concat(i, ".order"));
        }

        return this.items;
      }
      /**
       * adds a new item
       */

    }, {
      key: "addItem",
      value: function addItem(detail) {
        var _this2 = this;

        var item = detail.item;
        var title = detail.new;
        var spliceIndex = this.items.findIndex(function (j) {
          return j.id === item.id;
        }) + 1;
        this.__tempid = this.__tempid + 1;
        this.splice("items", spliceIndex, 0, {
          id: "outline-item-" + this.__tempid,
          title: title,
          indent: item.indent,
          parent: item.parent
        });
        this.items[spliceIndex].indentLevel = item.indent;
        this.notifyPath("items.".concat(spliceIndex, ".indentLevel"));
        this.setData(this.items);

        if (this.__focusedItem !== undefined && this.__focusedItem !== null) {
          setTimeout(function () {
            _this2.__focusedItem = item.nextElementSibling;

            _this2.__focusedItem.focus();
          }, 50);
        }
      }
      /**
       * removes an item
       */

    }, {
      key: "removeItem",
      value: function removeItem(item) {
        var i = this.items.findIndex(function (j) {
          return j.id === item.id;
        });
        var b = document.createElement("button");
        b.raised = true;
        b.addEventListener("click", this._deleteItemConfirm.bind(this));
        b.appendChild(document.createTextNode("Yes, delete"));
        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          cancelable: true,
          detail: {
            title: "Do you really want to delete ".concat(this.items[i].title, "?"),
            elements: {
              buttons: b
            },
            styles: {
              "--simple-modal-width": "75vw",
              "--simple-modal-max-width": "75vw",
              "--simple-modal-z-index": "100000000",
              "--simple-modal-min-height": "50vh"
            },
            invokedBy: item.shadowRoot.querySelector("#delete"),
            clone: false
          }
        });
        this.dispatchEvent(evt);
      }
      /**
       * Delete item confirmation
       */

    }, {
      key: "_deleteItemConfirm",
      value: function _deleteItemConfirm(e) {
        var _this3 = this;

        var i = this.items.findIndex(function (j) {
          return j.id === _this3.activeItem.id;
        });
        this.activeItem.classList.add("collapse-to-remove");
        var evt = new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        });
        this.dispatchEvent(evt);
        setTimeout(function () {
          _this3.__focusedItem = _this3.activeItem.previousElementSibling;

          for (var k in _this3.items) {
            if (_this3.items[k].parent == _this3.items[i].id) {
              _this3.items[k].parent = _this3.items[i].parent;
            }
          }

          _this3.activeItem.classList.remove("collapse-to-remove");

          _this3.splice("items", i, 1);

          if (_this3.__focusedItem !== undefined && _this3.__focusedItem !== null) {
            setTimeout(function () {
              _this3.__focusedItem.focus();
            }, 50);
          }
        }, 300);
      }
      /**
       * moves an grop of items down
       */

    }, {
      key: "moveItem",
      value: function moveItem(item, moveUp) {
        var _this4 = this;

        var sourceStart = item.index,
            sourceEnd = this._getLastChild(item),
            sourceCount = sourceEnd - sourceStart + 1;

        var target = moveUp ? this.items[sourceStart].prevSibling : this._getLastChild(this.items[sourceEnd + 1]) - sourceCount + 1;

        if (target > -1 && target < this.items.length) {
          if (moveUp && !item.disableUp || !moveUp && !item.disableDown) {
            var item2 = this.splice("items", sourceStart, sourceCount);
            this.splice("items", target, 0, item2);
            this.__focusedItem = this.shadowRoot.querySelector("#itemslist").querySelectorAll("lrnsys-outline-item")[target];
            this.setData(this.items);

            if (this.__focusedItem !== undefined && this.__focusedItem !== null) {
              setTimeout(function () {
                _this4.__focusedItem.focus();
              }, 50);
            }
          }
        }
      }
      /**
       * adjust indent
       */

    }, {
      key: "_adjustIndent",
      value: function _adjustIndent(item, amount) {
        if (amount > 0 && !item.disableRight || amount < 0 && !item.disableLeft) {
          var i = parseInt(item.index),
              oldIndent = item.indent,
              indent = item.indent + amount,
              n = i + 1;
          var prevParent = item.prevSibling !== null && babelHelpers.typeof(item.prevSibling) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) ? item.prevSibling.id : null;
          var grandParent = this._getItemById(item.parent) && this._getItemById(item.parent).parent ? this._getItemById(item.parent).parent.id : null;
          item.indent = indent;
          item.parent = amount > 0 ? prevParent : grandParent;
          item.prevSibling = this._getSibling(i, indent, true);
          item.nextSibling = this._getSibling(i, indent, false);
          item.disableUp = item.prevSibling === null;
          item.disableDown = item.nextSibling === null;
          item.disableLeft = indent === 0;
          item.disableRight = this.items[i - 1] === null || babelHelpers.typeof(this.items[i - 1]) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) || indent > this.items[i - 1].indentLevel;
          this.set("items.".concat(i), item);
          this.notifyPath("items.".concat(i, ".*"));

          while (this.items[n] !== null && this.items[n] !== undefined && oldIndent < this.items[n].indentLevel) {
            this.items[n].indentLevel = this.items[n].indentLevel + amount;
            this.notifyPath("items.".concat(n, ".indentLevel"));
            n++;
            next = this.items[n];
          }
        }
      }
      /**
       * gets all children of an item
       */

    }, {
      key: "_getLastChild",
      value: function _getLastChild(item) {
        var next = item !== undefined && item !== null ? this._getSibling(item.index, item.indent, false) : null;

        if (next !== null && next !== undefined) {
          return next - 1;
        } else if (babelHelpers.typeof(item) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && item.parent !== null && item.parent !== null && this._getItemById(item.parent) !== null) {
          return this._getLastChild(this._getItemById(item.parent));
        } else {
          return this.items.length - 1;
        }
      }
      /**
       * converts a nested array of items and returns a flat list with indents
       */

    }, {
      key: "_getIndent",
      value: function _getIndent(data, i) {
        if (babelHelpers.typeof(data[i].parent) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          var k = data.findIndex(function (j) {
            return j.id === data[i].parent;
          });

          if (k !== -1 && babelHelpers.typeof(data[k]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && data[k].indent !== undefined) {
            return data[k].indent + 1;
          }
        }

        return 0;
      }
      /**
       * returns order relative to siblings
       */

    }, {
      key: "_getOrder",
      value: function _getOrder(item) {
        var ctr = 0,
            order = 0;

        for (var i in this.items) {
          if (this.items[i].parent == item.parent && this.items[i].id == item.id) {
            order = ctr;
          } else if (this.items[i].parent == item.parent) {
            ctr++;
          }
        }

        return order;
      }
      /**
       * returns previous or next sibling
       */

    }, {
      key: "_getSibling",
      value: function _getSibling(index, indent, prev) {
        var inc = prev ? -1 : 1,
            i = index + inc,
            sib = null;

        if (this.items !== null) {
          while (i < this.items.length && i > -1) {
            if (sib === null && babelHelpers.typeof(this.items[i]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(this.items[index]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && this.items[i].parent === this.items[index].parent) {
              sib = i;
            }

            i += inc;
          }
        }

        return sib;
      }
      /**
       * get an item by item id
       */

    }, {
      key: "_getItemById",
      value: function _getItemById(id, offset) {
        var i = this.items.findIndex(function (j) {
          return j.id === id;
        });
        offset = offset === undefined ? 0 : offset;

        if (this.items[i + offset] !== undefined) {
          return this.items[i + offset];
        } else {
          return null;
        }
      }
      /**
       * listener to add an item
       */

    }, {
      key: "_handleAddItem",
      value: function _handleAddItem(e) {
        this.addItem(e.detail);
      }
      /**
       * listener to delete an item
       */

    }, {
      key: "_handleRemoveItem",
      value: function _handleRemoveItem(e) {
        this.activeItem = e.detail.item;
        this.removeItem(e.detail.item);
      }
      /**
       * listener to move an item
       */

    }, {
      key: "_handleMoveItem",
      value: function _handleMoveItem(e) {
        this.activeItem = e.detail.item;
        this.moveItem(e.detail.item, e.detail.moveUp, e.detail.byGroup);
      }
      /**
       * listener to move focus up or down
       */

    }, {
      key: "_handleFocusItem",
      value:
      /**
       * listener for focus or mouseover
       */
      function _handleFocusItem(e) {
        this.__focusedItem = e.srcElement;
      }
      /**
       * listener for blur or mouseout
       */

    }, {
      key: "_handleIndentItem",
      value:
      /**
       * listener to increase or decrease indent
       */
      function _handleIndentItem(e) {
        var amt = e.detail.increase ? 1 : -1;

        this._adjustIndent(this._getItemById(e.detail.item.id), amt);

        this.setData(this.items);
      }
      /**
       * listener to handle changes to text inputs
       */

    }, {
      key: "_handleChangeItem",
      value: function _handleChangeItem(e) {
        if (this._getItemById(e.detail.item.id) != null) {
          var i = this.items.findIndex(function (j) {
            return j.id === e.detail.item.id;
          });

          if (babelHelpers.typeof(this.items[i]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.items[i].title = e.detail.value;
            this.notifyPath("items.".concat(i, ".title"));
          }
        }
      }
    }, {
      key: "_handleBlurItem",
      value: function _handleBlurItem(e) {}
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_6dac6ab0809211edaa2833647dc78c6c || (_templateObject_6dac6ab0809211edaa2833647dc78c6c = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        :host kbd {\n          display: inline-block;\n          background: #333;\n          color: white;\n          border-radius: 4px;\n          margin: 4px 4px 4px 0;\n          padding: 8px;\n          font-family: Verdana, Geneva, Tahoma, sans-serif;\n          font-size: 85%;\n        }\n      </style>\n      <div id=\"itemslist\">\n        <template is=\"dom-repeat\" items=\"{{items}}\" as=\"item\">\n          <lrnsys-outline-item\n            disable-down=\"[[item.disableDown]]\"\n            disable-left=\"[[item.disableLeft]]\"\n            disable-right=\"[[item.disableRight]]\"\n            disable-up=\"[[item.disableUp]]\"\n            id$=\"[[item.id]]\"\n            index$=\"[[item.index]]\"\n            indent-level=\"{{item.indent}}\"\n            parent=\"{{item.parent}}\"\n            title=\"{{item.title}}\"\n          >\n          </lrnsys-outline-item>\n        </template>\n      </div>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnsys-outline";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          data: {
            type: Array,
            value: null
          },
          items: {
            type: Array,
            value: null,
            notify: true
          },
          activeItem: {
            type: Object,
            notify: true
          }
        };
      }
    }]);
    return LrnsysOutline;
  }(_polymerElement.PolymerElement);

  _exports.LrnsysOutline = LrnsysOutline;
  customElements.define(LrnsysOutline.tag, LrnsysOutline);
});