define(["exports", "../../../lit/index.js", "./hax-toolbar.js", "../../simple-toolbar/lib/simple-toolbar-menu-item.js", "./hax-store.js", "./hax-toolbar-menu.js", "./hax-context-item.js", "../../utils/utils.js", "../../../mobx/dist/mobx.esm.js", "./hax-context-behaviors.js", "../../i18n-manager/lib/I18NMixin.js", "../../simple-toast/simple-toast.js"], function (_exports, _index, _haxToolbar, _simpleToolbarMenuItem, _haxStore, _haxToolbarMenu, _haxContextItem, _utils, _mobxEsm, _haxContextBehaviors, _I18NMixin2, _simpleToast) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxPlateContext = void 0;

  var _templateObject_d77226808e0011ed99ce491205e67b1d, _templateObject2_d77226808e0011ed99ce491205e67b1d, _templateObject3_d77226808e0011ed99ce491205e67b1d, _templateObject4_d77226808e0011ed99ce491205e67b1d, _templateObject5_d77226808e0011ed99ce491205e67b1d, _templateObject6_d77226808e0011ed99ce491205e67b1d;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-plate-context`
   * `A context menu that provides common grid plate based authoring options.`
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of text based buttons and events for use in a larger solution.
   * - grid plate - the container / full HTML tag which can have operations applied to it.
   */
  var HaxPlateContext = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(HaxPlateContext, _I18NMixin);

    var _super = _createSuper(HaxPlateContext);

    /**
     * LitElement constructable styles enhancement
     */
    function HaxPlateContext() {
      var _this;

      babelHelpers.classCallCheck(this, HaxPlateContext);
      _this = _super.call(this);
      _this.disableOps = false;
      _this.disableItemOps = false;
      _this.insertAbove = true;
      _this.disableDuplicate = false;
      _this.hasActiveEditingElement = false;
      _this.haxUIElement = true;
      _this.tourName = "hax";
      _this.trayDetail = "content-edit";
      _this.trayStatus = "collapsed";
      _this.t = {
        edit: "Edit",
        dragHandle: "Drag handle",
        moveUp: "Move up",
        moveDown: "Move down",
        addColumn: "Add column",
        removeColumn: "Remove column",
        remove: "Remove",
        duplicate: "Duplicate",
        confirmDelete: "Confirm delete",
        changeTo: "Change to",
        editElement: "Edit Mode",
        modifyHTMLSource: "Modify HTML source",
        clickToChange: "Click to change",
        regions: "Available regions",
        insertItemAbove: "Insert item above",
        insertItemAboveOrBelow: "Insert item above or below",
        insertItemBelow: "Insert item below",
        selectLayout: "Select Layout Element"
      };

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        namespace: "hax"
      }); //this.onScreen = false;


      _this.ceButtons = [];
      _this.activeTagName = "";
      _this.activeTagIcon = "hax:paragraph";

      _this.addEventListener("hax-context-item-selected", _this.handleCECustomEvent.bind(babelHelpers.assertThisInitialized(_this)));

      return _this;
    }

    babelHelpers.createClass(HaxPlateContext, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_d77226808e0011ed99ce491205e67b1d || (_templateObject_d77226808e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n      <hax-toolbar always-expanded>\n        <div class=\"group\">\n          <hax-toolbar-menu\n            ?disabled=\"", "\"\n            id=\"drag\"\n            action\n            icon=\"hax:arrow-all\"\n            label=\"", "\"\n            draggable=\"true\"\n            reset-on-select\n            data-simple-tour-stop\n            data-stop-title=\"label\"\n            ?hidden=\"", "\"\n          >\n            <simple-toolbar-menu-item slot=\"menuitem\">\n              <hax-context-item\n                action\n                align-horizontal=\"left\"\n                ?disabled=\"", "\"\n                show-text-label\n                role=\"menuitem\"\n                icon=\"hax:keyboard-arrow-up\"\n                label=\"", "\"\n                event-name=\"hax-plate-up\"\n              ></hax-context-item>\n            </simple-toolbar-menu-item>\n            <simple-toolbar-menu-item slot=\"menuitem\">\n              <hax-context-item\n                action\n                align-horizontal=\"left\"\n                ?disabled=\"", "\"\n                role=\"menuitem\"\n                show-text-label\n                icon=\"hax:keyboard-arrow-down\"\n                label=\"", "\"\n                event-name=\"hax-plate-down\"\n              ></hax-context-item>\n            </simple-toolbar-menu-item>\n            ", "\n            <div slot=\"tour\" data-stop-content>\n              Click the drag handle once to show a menu to just move up or down\n              one item in the content OR click and drag to place the item\n              exactly where you want it to go.\n            </div>\n          </hax-toolbar-menu>\n          <hax-toolbar-menu\n            action\n            align-horizontal=\"left\"\n            ?disabled=\"", "\"\n            icon=\"hax:select-element\"\n            label=\"", "\"\n          >\n            <simple-toolbar-menu-item slot=\"menuitem\">\n              <hax-context-item\n                action\n                align-horizontal=\"left\"\n                ?hidden=\"", "\"\n                .icon=\"", "\"\n                label=\"", "\"\n                event-name=\"hax-select-grid\"\n                .eventData=\"", "\"\n                role=\"menuitem\"\n                show-text-label\n              >\n              </hax-context-item>\n              <hax-context-item\n                action\n                align-horizontal=\"left\"\n                ?disabled=\"", "\"\n                ?hidden=\"", "\"\n                .icon=\"", "\"\n                label=\"", "\"\n                event-name=\"hax-select-grid\"\n                .eventData=\"", "\"\n                role=\"menuitem\"\n                show-text-label\n              >\n              </hax-context-item>\n            </simple-toolbar-menu-item>\n            ", "\n            \n          </hax-toolbar-menu>\n          <slot name=\"primary\"></slot>\n          <hax-toolbar-menu\n            icon=\"add-box\"\n            label=\"", "\"\n            ?disabled=\"", "\"\n          >\n            <simple-toolbar-menu-item slot=\"menuitem\">\n              <hax-context-item\n                action\n                align-horizontal=\"left\"\n                show-text-label\n                role=\"menuitem\"\n                ?disabled=\"", "\"\n                icon=\"hardware:keyboard-arrow-up\"\n                event-name=\"insert-above-active\"\n                label=\"", "\"\n              ></hax-context-item>\n            </simple-toolbar-menu-item>\n            <simple-toolbar-menu-item slot=\"menuitem\">\n              <hax-context-item\n                action\n                align-horizontal=\"left\"\n                show-text-label\n                role=\"menuitem\"\n                icon=\"hardware:keyboard-arrow-down\"\n                event-name=\"insert-below-active\"\n                label=\"", "\"\n                ?disabled=\"", "\"\n              ></hax-context-item>\n            </simple-toolbar-menu-item>\n            ", "\n          </hax-toolbar-menu>\n          <hax-context-item\n            action\n            ?disabled=\"", "\"\n            label=\"", "\"\n            icon=\"icons:content-copy\"\n            event-name=\"hax-plate-duplicate\"\n            data-simple-tour-stop\n            data-stop-title=\"label\"\n          >\n            <div slot=\"tour\" data-stop-content>\n              Duplicate the active piece of content and place it below the\n              current item.\n            </div>\n          </hax-context-item>\n        </div>\n        <hax-context-item\n          action\n          icon=\"delete\"\n          ?disabled=\"", "\"\n          icon=\"delete\"\n          label=\"", "\"\n          event-name=\"hax-plate-delete\"\n          data-simple-tour-stop\n          data-stop-title=\"label\"\n      >\n          <div slot=\"tour\" data-stop-content>\n            Delete the current item. You can always use the undo arrow to\n            bring this back.\n          </div>\n        </hax-context-item>\n          <hax-context-item\n            action\n            id=\"right\"\n            class=\"paddle\"\n            icon=\"hax:table-column-remove\"\n            label=\"", "\"\n            ?disabled=\"", "\"\n            event-name=\"hax-plate-create-right\"\n            data-simple-tour-stop\n            data-stop-title=\"label\"\n          >\n            <div slot=\"tour\" data-stop-content>\n              Add a column to split the current column into two pieces. This can\n              be done up to six pieces columns. For differnet layouts see Grid\n              settings panel.\n            </div>\n          </hax-context-item>\n          <hax-context-item\n            action\n            class=\"paddle\"\n            icon=\"hax:table-column-plus-after\"\n            label=\"", "\"\n            ?disabled=\"", "\"\n            event-name=\"hax-plate-remove-right\"\n            ?hidden=\"", "\"\n            id=\"rightremove\"\n            data-simple-tour-stop\n            data-stop-title=\"label\"\n          >\n            <div slot=\"tour\" data-stop-content>\n              Remove a column from the split column layout. If at two columns\n              and removing it will remove the layout split and make it 100%\n              width.\n            </div>\n          </hax-context-item>\n          ", "\n          <slot name=\"secondary\"></slot>\n        </div>\n        <div class=\"group\">\n          <hax-context-item\n            action\n            more\n            label=\"", "...\"\n            tooltip=\"", ", ", "\"\n            ?disabled=\"", "\"\n            event-name=\"hax-transform-node\"\n          ></hax-context-item>\n            <hax-context-item\n              action\n              label=\"", "\"\n              ?disabled=\"", "\"\n              ?hidden=\"", "\"\n              event-name=\"hax-edit-element-toggle\"\n              .eventData=\"", "\"\n              toggles\n              ?toggled=\"", "\"\n            ></hax-context-item>\n          <hax-context-item\n            action\n            icon=\"icons:code\"\n            label=\"", "\"\n            ?disabled=\"", "\"\n            event-name=\"hax-source-view-toggle\"\n            toggles\n            ?toggled=\"", "\"\n          ></hax-context-item>\n          <slot name=\"more\"></slot>\n          <hax-context-item\n            icon=\"build\"\n            action\n            align-horizontal=\"left\"\n            ?disabled=\"", "\"\n            label=\"", "\"\n            data-simple-tour-stop\n            data-stop-title=\"label\"\n            event-name=\"content-edit\"\n            toggles\n            ?toggled=\"", "\"\n          >\n            <div slot=\"tour\" data-stop-content>\n              Opens the Edit panel for more advanced settings.\n            </div>\n          </hax-context-item>\n        </div>\n      </hax-toolbar>\n    "])), this.hasActiveEditingElement || !this.canMoveElement || this.viewSource, this.t.dragHandle, !this.canMoveElement, this.hasActiveEditingElement, this.t.moveUp, this.hasActiveEditingElement, this.t.moveDown, !this.activeNode || !this.activeNode.parentNode || !_haxStore.HAXStore.isLayoutElement(this.activeNode.parentNode) ? "" : (this.slottedItems || []).map(function (slot, i) {
          return (0, _index.html)(_templateObject2_d77226808e0011ed99ce491205e67b1d || (_templateObject2_d77226808e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                        <simple-toolbar-menu-item\n                          slot=\"menuitem\"\n                          class=\"move-to-slot ", "\"\n                        >\n                          <hax-context-item\n                            action\n                            align-horizontal=\"left\"\n                            ?disabled=\"", "\"\n                            label=\"", "\"\n                            event-name=\"move-to-slot\"\n                            data-slot=\"", "\"\n                            role=\"menuitem\"\n                            show-text-label\n                          >\n                          </hax-context-item>\n                        </simple-toolbar-menu-item>\n                      "])), i < 1 ? "first-slot" : "", _this2.viewSource, slot.label, slot.slot);
        }), this.viewSource || this.disableOps, this.t.selectLayout, !this.layoutParent || this.activeNode !== this.layoutElement, this.elementIcon(this.layoutParent), this.elementLabel(this.layoutParent), this.layoutParent, this.activeNode === this.layoutElement, !this.layoutElement, this.elementIcon(this.layoutElement), this.elementLabel(this.layoutElement), this.layoutElement, (this.slottedItems || []).map(function (slot, i) {
          return (slot.items || []).map(function (item, j) {
            return (0, _index.html)(_templateObject3_d77226808e0011ed99ce491205e67b1d || (_templateObject3_d77226808e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                    <simple-toolbar-menu-item\n                      slot=\"menuitem\"\n                      class=\"hax-select-grid-item ", "\"\n                    >\n                      <hax-context-item\n                        action\n                        align-horizontal=\"left\"\n                        ?disabled=\"", "\"\n                        label=\"", "", "\"\n                        event-name=\"hax-select-grid-item\"\n                        .eventData=\"", "\"\n                        role=\"menuitem\"\n                        show-text-label\n                      >\n                      </hax-context-item>\n                    </simple-toolbar-menu-item>\n                  "])), i < 1 && j < 1 ? "first-slot" : "", _this2.viewSource || _this2.activeNode === item, slot.title || slot.id, slot.items.length > 1 ? " (".concat(j + 1, ")") : "", {
              target: item,
              grid: slot.grid,
              slot: slot.slot,
              index: j,
              editMode: slot.editMode
            });
          });
        }), this.t.insertItemAboveOrBelow, this.viewSource, !this.insertAbove, this.t.insertItemAbove, this.t.insertItemBelow, this.viewSource, !_haxStore.HAXStore.isLayoutElement(this.activeNode) ? "" : (this.slottedItems || []).map(function (slot, i) {
          return (0, _index.html)(_templateObject4_d77226808e0011ed99ce491205e67b1d || (_templateObject4_d77226808e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n                        <simple-toolbar-menu-item\n                          slot=\"menuitem\"\n                          class=\"insert-into-active ", "\"\n                        >\n                          <hax-context-item\n                            action\n                            align-horizontal=\"left\"\n                            ?disabled=\"", "\"\n                            label=\"", "\"\n                            event-name=\"insert-into-active\"\n                            data-slot=\"", "\"\n                            role=\"menuitem\"\n                            show-text-label\n                          >\n                          </hax-context-item>\n                        </simple-toolbar-menu-item>\n                      "])), i < 1 ? "first-slot" : "", _this2.viewSource, slot.label, slot.slot);
        }), this.hasActiveEditingElement || this.viewSource || this.disableOps || this.disableDuplicate, this.t.duplicate, this.hasActiveEditingElement || this.viewSource || this.disableOps, this.t.remove, this.t.addColumn, this.hasActiveEditingElement || this.viewSource || this.disableOps, this.t.removeColumn, this.hasActiveEditingElement || this.viewSource || this.disableOps, !this.activeNode || _haxStore.HAXStore.isOriginalGridPlate(this.activeNode), this.ceButtons.map(function (el) {
          return (0, _index.html)(_templateObject5_d77226808e0011ed99ce491205e67b1d || (_templateObject5_d77226808e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral([" <hax-context-item\n              action\n              icon=\"", "\"\n              label=\"", "\"\n              event-name=\"hax-ce-custom-button\"\n              value=\"", "\"\n              ?disabled=\"", "\"\n            ></hax-context-item>"])), el.icon, el.label, el.callback, el.disabled || _this2.disableItemOps);
        }), this.t.changeTo, this.activeTagName, this.t.clickToChange, this.disableTransform || this.viewSource || this.disableOps, this.t.editElement, this.viewSource || this.disableOps, !this.editElementProperty, {
          target: this.activeNode,
          editMode: this.editElementProperty
        }, this.editElementToggled, this.t.modifyHTMLSource, !this.sourceView || this.disableOps || this.editElementToggled, this.viewSource, this.hasActiveEditingElement || this.viewSource || this.disableOps, this.t.edit, this.trayDetail === "content-edit" && this.trayStatus !== "collapsed");
      }
    }, {
      key: "disableTransform",
      get: function get() {
        return _haxStore.HAXStore.isTextElement(this.activeNode); // || !this.filteredBlocks || this.filteredBlocks.length < 1;
      }
      /**
       * get a list of valid blocks for active node
       * (if active node is a slot, some blockes may not be permitted)
       *
       * @readonly
       * @returns {array}
       * @memberof HaxPlateContext
       */

    }, {
      key: "filteredBlocks",
      get: function get() {
        return this.getFilteredBlocks(this.formatBlocks);
      }
    }, {
      key: "__updatePlatePosition",
      value: function __updatePlatePosition(active) {
        var right = this.shadowRoot.querySelector("#right");
        var rightremove = this.shadowRoot.querySelector("#rightremove"); // support for enabling or disabling

        right.disabled = false;
        rightremove.disabled = false;

        if (active && active.tagName == "GRID-PLATE") {
          if (active.layout == "1-1-1-1-1-1") {
            right.disabled = true;
          }
        } else {
          rightremove.disabled = true;
        }
      }
    }, {
      key: "__dblClickFire",
      value: function __dblClickFire(event) {
        if (event.target.id === "remove") {
          this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              target: event.target,
              eventName: "hax-plate-delete",
              value: event.target.value
            }
          }));
        }
      }
    }, {
      key: "_handleOpen",
      value: function _handleOpen(e) {
        this.dispatchEvent(new CustomEvent("hax-transform-node", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: _haxStore.HAXStore.elementList[el]
        }));
      }
    }, {
      key: "handleCECustomEvent",
      value: function handleCECustomEvent(e) {
        var detail = e.detail; // support a simple insert event to bubble up or everything else

        switch (detail.eventName) {
          case "hax-ce-custom-button":
            if (this.activeNode && typeof this.activeNode[detail.value] === "function") {
              if (this.activeNode[detail.value](e)) {
                _haxStore.HAXStore.refreshActiveNodeForm();
              }
            }

            break;
        }
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxPlateContext.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxPlateContext.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "onScreen" && _this3.onScreen) {
            _this3._resetCEMenu();
          }

          if (propName === "activeNode" || propName === "activeEditingElement") {
            _this3.activeSchema = _haxStore.HAXStore.activeSchema();
            _this3.editElementProperty = _this3.activeSchema && _this3.activeSchema.editElement ? _this3.activeSchema.editElement : false;
            _this3.editElementToggled = _this3.activeNode && _this3.editElementProperty && !!_this3.activeNode[_this3.editElementProperty];
          }
        });
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this4 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HaxPlateContext.prototype), "firstUpdated", this).call(this, changedProperties);
        (0, _mobxEsm.autorun)(function () {
          _this4.activeNode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);

          if (_this4.activeNode && _this4.activeNode.classList) {
            _this4._resetCEMenu();
          }

          if (_this4.activeNode && _this4.getAttribute("on-screen")) {
            _this4.__updatePlatePosition(_this4.activeNode);
          }
        });
        (0, _mobxEsm.autorun)(function () {
          if ((0, _mobxEsm.toJS)(_haxStore.HAXStore.activeEditingElement)) {
            _this4.hasActiveEditingElement = true;
          } else {
            _this4.hasActiveEditingElement = false;
          }
        });
        this.shadowRoot.querySelector("#drag").addEventListener("dragstart", this._dragStart);
        this.shadowRoot.querySelector("#drag").addEventListener("dragend", this._dragEnd);
      }
      /**
       * When we end dragging ensure we remove the mover class.
       */

    }, {
      key: "_dragEnd",
      value: function _dragEnd(e) {
        var menu = (0, _utils.normalizeEventPath)(e) ? (0, _utils.normalizeEventPath)(e)[0] : undefined;
        if (menu) menu.close(true);
        _haxStore.HAXStore._lockContextPosition = false;
      }
      /**
       * Drag start so we know what target to set
       */

    }, {
      key: "_dragStart",
      value: function _dragStart(e) {
        var target = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode),
            menu = (0, _utils.normalizeEventPath)(e) ? (0, _utils.normalizeEventPath)(e)[0] : undefined;
        if (menu) menu.close(true);
        _haxStore.HAXStore.__dragTarget = target;
        _haxStore.HAXStore._lockContextPosition = true; // wipe the add context menu for motion

        _haxStore.HAXStore.activeHaxBody.__activeHover = null;

        _haxStore.HAXStore.activeHaxBody._hideContextMenu(_haxStore.HAXStore.activeHaxBody.contextMenus.add);

        if (e.dataTransfer) {
          e.dataTransfer.effectAllowed = "move";
          e.dataTransfer.dropEffect = "move";
          e.dataTransfer.setDragImage(target, -20, -20);
        }

        e.stopPropagation();
        e.stopImmediatePropagation();
      }
      /**
       * HAX properties changed, update buttons available.
       */

    }, {
      key: "_resetCEMenu",
      value: function () {
        var _resetCEMenu2 = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var schema;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (this.shadowRoot) {
                    (0, _utils.wipeSlot)(this, "*");
                  } // reset buttons in-case this element has new ones


                  this.ceButtons = [];

                  if (_haxStore.HAXStore.activeHaxBody && this.activeNode != null) {
                    schema = _haxStore.HAXStore.haxSchemaFromTag(this.activeNode.tagName);
                    this.sourceView = schema.canEditSource;
                    /*
                    // this is a performance bottle neck just for disabling a button that is not often clicked
                          if (this.activeNode) {
                            // detect if this can be transformed into anything else
                            let elements =
                                (await HAXStore.activeHaxBody.replaceElementWorkflow(
                                  this.activeNode,
                                  true
                                )) || [],
                              tag =
                                !!this.activeNode && !!this.activeNode.tagName
                                  ? this.activeNode.tagName.toLowerCase()
                                  : undefined,
                              primTag = HAXStore.activeHaxBody.primitiveTextBlocks.includes(tag)
                                ? "p"
                                : undefined;
                            this.formatBlocks = !!tag
                              ? elements.filter((el) => el.tag && ![tag, primTag].includes(el.tag))
                              : elements;
                          }*/

                    if (_haxStore.HAXStore.activeGizmo) {
                      this.activeTagName = _haxStore.HAXStore.activeGizmo.title;
                      this.activeTagIcon = _haxStore.HAXStore.activeGizmo.icon;
                    }
                  } else if (_haxStore.HAXStore.activeGizmo) {
                    this.activeTagName = _haxStore.HAXStore.activeGizmo.title;
                    this.activeTagIcon = _haxStore.HAXStore.activeGizmo.icon;
                  } else {
                    this.activeTagName = "";
                    this.activeTagIcon = "";
                  } // @see haxHook inlineContextMenu


                  _context.next = 5;
                  return _haxStore.HAXStore.runHook(this.activeNode, "inlineContextMenu", [this]);

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function _resetCEMenu() {
          return _resetCEMenu2.apply(this, arguments);
        }

        return _resetCEMenu;
      }()
      /**
       * LitElement / popular convention
       */

    }], [{
      key: "tag",
      get: function get() {
        return "hax-plate-context";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HaxPlateContext), "styles", this)), [(0, _index.css)(_templateObject6_d77226808e0011ed99ce491205e67b1d || (_templateObject6_d77226808e0011ed99ce491205e67b1d = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          width: calc(100% - 2px);\n          align-items: stretch;\n        }\n        hax-toolbar::part(morebutton) {\n          --simple-toolbar-button-color: var(--hax-ui-color);\n          --simple-toolbar-button-bg: var(--hax-ui-background-color);\n          --simple-toolbar-button-border-color: var(--hax-ui-border-color);\n          --simple-toolbar-button-border-width: 1px;\n          --simple-toolbar-button-hover-color: var(--hax-ui-color);\n          --simple-toolbar-button-hover-bg: var(\n            --hax-ui-background-color-secondary\n          );\n          --simple-toolbar-button-toggled-color: var(--hax-ui-color-accent);\n          --simple-toolbar-button-toggled-bg: var(--hax-ui-background-color);\n          --simple-toolbar-button-toggled-border-color: var(\n            --hax-ui-color-accent\n          );\n          --simple-toolbar-button-disabled-opacity: 1;\n          --simple-toolbar-button-disabled-color: var(--hax-ui-disabled-color);\n          --simple-toolbar-button-disabled-bg: var(--hax-ui-background-color);\n          --simple-toolbar-button-disabled-border-color: unset;\n          --simple-toolbar-border-radius: 0;\n          align-self: flex-end;\n          justify-self: stretch;\n          margin: 0px -2px 0px 2px;\n        }\n        #remove {\n          max-width: 44px;\n          overflow: visible;\n        }\n        hax-toolbar {\n          max-width: calc(100% - 2px);\n          display: flex;\n          align-items: stretch;\n          justify-content: flex-start;\n        }\n        .group {\n          display: flex;\n          align-items: stretch;\n          flex: 0 0 auto;\n          justify-content: center;\n          border: 1px solid var(--rich-text-editor-border-color, #ddd);\n          padding: 0;\n          border-width: 1px;\n          margin: -1px;\n        }\n        .group,\n        .group > * {\n          z-index: 1;\n        }\n        .group:empty {\n          display: none;\n        }\n        .group > *,\n        :host([collapsed]) .group {\n          flex: 0 0 auto;\n        }\n        .group *:not([toggled])::part(button) {\n          border-color: transparent;\n        }\n        :host .group:focus,\n        :host .group:focus-within,\n        :host .group > *:focus,\n        :host .group > *:focus-within {\n          z-index: 2;\n        }\n        :host .group:hover,\n        :host .group > *:hover {\n          z-index: 3;\n        }\n        .first-slot:not(:first-child) {\n          border-top: 1px solid black;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxPlateContext), "properties", this)), {}, {
          activeTagIcon: {
            type: String
          },
          activeSchema: {
            type: Object
          },
          editElementProperty: {
            type: String
          },
          editElementToggled: {
            type: Boolean
          },
          activeTagName: {
            type: String
          },
          disableOps: {
            type: Boolean
          },
          disableItemOps: {
            type: Boolean
          },
          insertAbove: {
            type: Boolean
          },
          disableDuplicate: {
            type: Boolean
          },
          canMoveElement: {
            type: Boolean
          },
          ceButtons: {
            type: Array
          },
          hasActiveEditingElement: {
            type: Boolean
          },
          onScreen: {
            type: Boolean,
            attribute: "on-screen",
            reflect: true
          },
          sourceView: {
            type: Boolean
          },

          /**
           * is hax tray collapsed, side-panel, or full-panel
           */
          trayDetail: {
            type: String,
            reflect: true,
            attribute: "tray-detail"
          },

          /**
           * is hax tray collapsed, side-panel, or full-panel
           */
          trayStatus: {
            type: String,
            reflect: true,
            attribute: "tray-status"
          }
        });
      }
    }]);
    return HaxPlateContext;
  }((0, _I18NMixin2.I18NMixin)((0, _haxContextBehaviors.HaxContextBehaviors)(_index.LitElement)));

  _exports.HaxPlateContext = HaxPlateContext;
  customElements.define(HaxPlateContext.tag, HaxPlateContext);
});