import{noChange as t}from"../lit-html.js";import{isPrimitive as e}from"../directive-helpers.js";import{AsyncDirective as s}from"../async-directive.js";import{PseudoWeakRef as i,Pauser as n}from"./private-async-helpers.js";import{directive as r}from"../directive.js";
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const me=t=>!e(t)&&"function"==typeof t.then,o=1073741823;class we extends s{constructor(){super(...arguments),this.wt=o,this.bt=[],this.K=new i(this),this.X=new n}render(...e){return e.find((t=>!me(t)))??t}update(e,s){const i=this.bt;let n=i.length;this.bt=s;const r=this.K,c=this.X;this.isConnected||this.disconnected();for(let t=0;t<s.length&&!(t>this.wt);t++){const e=s[t];if(!me(e))return this.wt=t,e;t<n&&e===i[t]||(this.wt=o,n=0,Promise.resolve(e).then((async t=>{for(;c.get();)await c.get();const s=r.deref();if(void 0!==s){const i=s.bt.indexOf(e);i>-1&&i<s.wt&&(s.wt=i,s.setValue(t))}})))}return t}disconnected(){this.K.disconnect(),this.X.pause()}reconnected(){this.K.reconnect(this),this.X.resume()}}const c=r(we);export{we as UntilDirective,c as until};