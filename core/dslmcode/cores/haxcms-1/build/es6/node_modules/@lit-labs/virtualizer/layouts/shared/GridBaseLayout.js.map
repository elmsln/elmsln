{"version":3,"file":"GridBaseLayout.js","sourceRoot":"","sources":["../../src/layouts/shared/GridBaseLayout.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  SizeGapPaddingBaseLayout,\n  SizeGapPaddingBaseLayoutConfig,\n  AutoGapSpec,\n  gap2 as gap2Name,\n} from './SizeGapPaddingBaseLayout.js';\nimport {dim1} from './BaseLayout.js';\n\ntype FlexSpec =\n  | boolean\n  | {preserve: 'aspect-ratio' | 'area' | 'width' | 'height'};\ntype JustifySpec =\n  | 'start'\n  | 'center'\n  | 'end'\n  | 'space-evenly'\n  | 'space-around'\n  | 'space-between';\n\nexport interface GridBaseLayoutConfig\n  extends Omit<SizeGapPaddingBaseLayoutConfig, 'gap'> {\n  gap?: AutoGapSpec;\n  flex?: FlexSpec;\n  justify?: JustifySpec;\n}\n\ninterface GridLayoutMetrics {\n  rolumns: number;\n  itemSize1: number;\n  itemSize2: number;\n  gap1: number;\n  gap2: number;\n  padding1: {\n    start: number;\n    end: number;\n  };\n  padding2: {\n    start: number;\n    end: number;\n  };\n  positions: number[];\n}\n\n///\n\nexport abstract class GridBaseLayout<\n  C extends GridBaseLayoutConfig\n> extends SizeGapPaddingBaseLayout<C> {\n  protected _metrics: GridLayoutMetrics | null = null;\n  flex: FlexSpec | null = null;\n  justify: JustifySpec | null = null;\n\n  protected _getDefaultConfig(): C {\n    return Object.assign({}, super._getDefaultConfig(), {\n      flex: false,\n      justify: 'start',\n    });\n  }\n\n  set gap(spec: AutoGapSpec) {\n    super._setGap(spec);\n  }\n\n  protected _updateLayout() {\n    const justify = this.justify as JustifySpec;\n    const [padding1Start, padding1End] = this._padding1;\n    const [padding2Start, padding2End] = this._padding2;\n\n    // TODO (graynorton): Omit these checks in production mode\n    ['_gap1', '_gap2'].forEach((gap) => {\n      const gapValue = this[gap as '_gap1' | '_gap2'];\n      if (\n        gapValue === Infinity &&\n        !['space-between', 'space-around', 'space-evenly'].includes(justify)\n      ) {\n        throw new Error(\n          `grid layout: gap can only be set to 'auto' when justify is set to 'space-between', 'space-around' or 'space-evenly'`\n        );\n      }\n      if (gapValue === Infinity && gap === '_gap2') {\n        throw new Error(\n          `grid layout: ${gap2Name(\n            this.direction\n          )}-gap cannot be set to 'auto' when direction is set to ${\n            this.direction\n          }`\n        );\n      }\n    });\n\n    const usePaddingAndGap2 =\n      this.flex || ['start', 'center', 'end'].includes(justify);\n\n    const metrics: GridLayoutMetrics = {\n      rolumns: -1,\n      itemSize1: -1,\n      itemSize2: -1,\n      // Infinity represents 'auto', so we set an invalid placeholder until we can calculate\n      gap1: this._gap1 === Infinity ? -1 : this._gap1,\n      gap2: usePaddingAndGap2 ? this._gap2 : 0,\n      // Infinity represents 'match-gap', so we set padding to match gap\n      padding1: {\n        start: padding1Start === Infinity ? this._gap1 : padding1Start,\n        end: padding1End === Infinity ? this._gap1 : padding1End,\n      },\n      padding2: usePaddingAndGap2\n        ? {\n            start: padding2Start === Infinity ? this._gap2 : padding2Start,\n            end: padding2End === Infinity ? this._gap2 : padding2End,\n          }\n        : {\n            start: 0,\n            end: 0,\n          },\n      positions: [],\n    };\n\n    // 1. Calculate available space, taking padding into account\n    const availableSpace =\n      this._viewDim2 - metrics.padding2.start - metrics.padding2.end;\n    if (availableSpace <= 0) {\n      // If we have no space, we won't render any rolumns\n      metrics.rolumns = 0;\n    } else {\n      // 2. Calculate how many ideally sized \"rolumns\" (including gaps) fit in the available space\n      const gapSize = usePaddingAndGap2 ? metrics.gap2 : 0;\n      let rolumns = 0;\n      let spaceTaken = 0;\n      if (availableSpace >= this._idealSize2) {\n        rolumns =\n          Math.floor(\n            (availableSpace - this._idealSize2) / (this._idealSize2 + gapSize)\n          ) + 1;\n        spaceTaken = rolumns * this._idealSize2 + (rolumns - 1) * gapSize;\n      }\n      // 3. If we're flexing items to fill the available space exactly, decide whether to add\n      // a rolumn and reduce item size, or keep the number of rolumns and increase item size\n      if (this.flex) {\n        // If we have at least half the space we need for another rolumn, go ahead and add one\n        if (\n          (availableSpace - spaceTaken) / (this._idealSize2 + gapSize) >=\n          0.5\n        ) {\n          rolumns = rolumns + 1;\n        }\n        metrics.rolumns = rolumns;\n        // Calculate the flexed item size\n        metrics.itemSize2 = Math.round(\n          (availableSpace - gapSize * (rolumns - 1)) / rolumns\n        );\n        // Calculate item size in the other dimension, preserving area (the default), aspect ratio or ideal size in that dimension as specified\n        const preserve = this.flex === true ? 'area' : this.flex.preserve;\n        switch (preserve) {\n          case 'aspect-ratio':\n            metrics.itemSize1 = Math.round(\n              (this._idealSize1 / this._idealSize2) * metrics.itemSize2\n            );\n            break;\n          case dim1(this.direction):\n            metrics.itemSize1 = Math.round(this._idealSize1);\n            break;\n          case 'area':\n          default:\n            metrics.itemSize1 = Math.round(\n              (this._idealSize1 * this._idealSize2) / metrics.itemSize2\n            );\n        }\n      } else {\n        // We're not flexing, so use the specified sizes unmodified\n        metrics.itemSize1 = this._idealSize1;\n        metrics.itemSize2 = this._idealSize2;\n        metrics.rolumns = rolumns;\n      }\n      // 4. Calculate the position for each item in a template rolumn\n      let pos: number;\n      if (usePaddingAndGap2) {\n        const spaceTaken =\n          metrics.rolumns * metrics.itemSize2 +\n          (metrics.rolumns - 1) * metrics.gap2;\n        pos =\n          this.flex || justify === 'start'\n            ? metrics.padding2.start\n            : justify === 'end'\n            ? this._viewDim2 - metrics.padding2.end - spaceTaken\n            : Math.round(this._viewDim2 / 2 - spaceTaken / 2);\n      } else {\n        const spaceToDivide =\n          availableSpace - metrics.rolumns * metrics.itemSize2;\n        if (justify === 'space-between') {\n          metrics.gap2 = Math.round(spaceToDivide / (metrics.rolumns - 1));\n          pos = 0;\n        } else if (justify === 'space-around') {\n          metrics.gap2 = Math.round(spaceToDivide / metrics.rolumns);\n          pos = Math.round(metrics.gap2 / 2);\n        } else {\n          // justify == 'space-evenly'\n          metrics.gap2 = Math.round(spaceToDivide / (metrics.rolumns + 1));\n          pos = metrics.gap2;\n        }\n        // If primary-axis gap was set to 'auto', provide the value now\n        // (and set 'match-gap' padding values transitively)\n        if (this._gap1 === Infinity) {\n          metrics.gap1 = metrics.gap2;\n          if (padding1Start === Infinity) {\n            metrics.padding1.start = pos;\n          }\n          if (padding1End === Infinity) {\n            metrics.padding1.end = pos;\n          }\n        }\n      }\n      for (let i = 0; i < metrics.rolumns; i++) {\n        metrics.positions.push(pos);\n        pos += metrics.itemSize2 + metrics.gap2;\n      }\n    }\n\n    this._metrics = metrics;\n  }\n}\n"]}