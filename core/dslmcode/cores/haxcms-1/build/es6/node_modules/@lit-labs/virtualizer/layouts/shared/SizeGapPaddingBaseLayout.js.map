{"version":3,"file":"SizeGapPaddingBaseLayout.js","sourceRoot":"","sources":["../../src/layouts/shared/SizeGapPaddingBaseLayout.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// import { dimension } from './Layout.js';\nimport {BaseLayoutConfig} from './Layout.js';\nimport {BaseLayout, dim1, dim2} from './BaseLayout.js';\nimport {ScrollDirection, Size} from './Layout.js';\n\nexport type PixelSize = `${'0' | `${number}px`}`;\n\ntype GapValue = PixelSize;\ntype TwoGapValues = `${GapValue} ${GapValue}`;\n\nexport type GapSpec = GapValue | TwoGapValues;\n\nexport type AutoGapSpec =\n  | PixelSize\n  | `${PixelSize} ${PixelSize}`\n  | `auto ${PixelSize}`\n  | `${PixelSize} auto`;\n\ntype PaddingValue = PixelSize | 'match-gap';\ntype TwoPaddingValues = `${PaddingValue} ${PaddingValue}`;\ntype ThreePaddingValues = `${TwoPaddingValues} ${PaddingValue}`;\ntype FourPaddingValues = `${ThreePaddingValues} ${PaddingValue}`;\ntype PaddingSpec =\n  | PaddingValue\n  | TwoPaddingValues\n  | ThreePaddingValues\n  | FourPaddingValues;\n\ntype PixelDimensions = {width: PixelSize; height: PixelSize};\n\n// function numberToPixelSize(n: number): PixelSize {\n//     return n === 0 ? '0' : `${n}px`;\n// }\n\nfunction paddingValueToNumber(v: PaddingValue): number {\n  if (v === 'match-gap') {\n    return Infinity;\n  }\n  return parseInt(v);\n}\n\nfunction gapValueToNumber(v: GapValue | 'auto'): number {\n  if (v === 'auto') {\n    return Infinity;\n  }\n  return parseInt(v);\n}\n\nexport function gap1(direction: ScrollDirection) {\n  return direction === 'horizontal' ? 'column' : 'row';\n}\n\nexport function gap2(direction: ScrollDirection) {\n  return direction === 'horizontal' ? 'row' : 'column';\n}\n\nexport function padding1(direction: ScrollDirection): [side, side] {\n  return direction === 'horizontal' ? ['left', 'right'] : ['top', 'bottom'];\n}\n\nexport function padding2(direction: ScrollDirection): [side, side] {\n  return direction === 'horizontal' ? ['top', 'bottom'] : ['left', 'right'];\n}\n\nexport interface SizeGapPaddingBaseLayoutConfig extends BaseLayoutConfig {\n  // gap?: GapSpec,\n  padding?: PaddingSpec;\n  itemSize?: PixelDimensions | PixelSize;\n}\n\ntype gap = 'row' | 'column';\ntype side = 'top' | 'right' | 'bottom' | 'left';\ntype Gaps = {[key in gap]: number};\ntype Padding = {[key in side]: number};\n\nexport abstract class SizeGapPaddingBaseLayout<\n  C extends SizeGapPaddingBaseLayoutConfig\n> extends BaseLayout<C> {\n  protected _itemSize: Size | {} = {};\n  protected _gaps: Gaps | {} = {};\n  protected _padding: Padding | {} = {};\n\n  protected _getDefaultConfig(): C {\n    return Object.assign({}, super._getDefaultConfig(), {\n      itemSize: {width: '300px', height: '300px'},\n      gap: '8px',\n      padding: 'match-gap',\n    }) as C;\n  }\n\n  // Temp, to support current flexWrap implementation\n  protected get _gap(): number {\n    return (this._gaps as Gaps).row;\n  }\n\n  // Temp, to support current flexWrap implementation\n  protected get _idealSize(): number {\n    return (this._itemSize as Size)[dim1(this.direction)];\n  }\n\n  protected get _idealSize1(): number {\n    return (this._itemSize as Size)[dim1(this.direction)];\n  }\n\n  protected get _idealSize2(): number {\n    return (this._itemSize as Size)[dim2(this.direction)];\n  }\n\n  protected get _gap1(): number {\n    return (this._gaps as Gaps)[gap1(this.direction)];\n  }\n\n  protected get _gap2(): number {\n    return (this._gaps as Gaps)[gap2(this.direction)];\n  }\n\n  protected get _padding1(): [number, number] {\n    const padding = this._padding as Padding;\n    const [start, end] = padding1(this.direction);\n    return [padding[start], padding[end]];\n  }\n\n  protected get _padding2(): [number, number] {\n    const padding = this._padding as Padding;\n    const [start, end] = padding2(this.direction);\n    return [padding[start], padding[end]];\n  }\n\n  set itemSize(dims: PixelDimensions | PixelSize) {\n    const size = this._itemSize as Size;\n    if (typeof dims === 'string') {\n      dims = {\n        width: dims,\n        height: dims,\n      };\n    }\n    const width = parseInt(dims.width);\n    const height = parseInt(dims.height);\n    if (width !== size.width) {\n      size.width = width;\n      this._triggerReflow();\n    }\n    if (height !== size.height) {\n      size.height = height;\n      this._triggerReflow();\n    }\n  }\n\n  set gap(spec: GapSpec | AutoGapSpec) {\n    this._setGap(spec);\n  }\n\n  // This setter is overridden in specific layouts to narrow the accepted types\n  protected _setGap(spec: GapSpec | AutoGapSpec) {\n    const values = spec.split(' ').map((v) => gapValueToNumber(v as GapValue));\n    const gaps = this._gaps as Gaps;\n    if (values[0] !== gaps.row) {\n      gaps.row = values[0];\n      this._triggerReflow();\n    }\n    if (values[1] === undefined) {\n      if (values[0] !== gaps.column) {\n        gaps.column = values[0];\n        this._triggerReflow();\n      }\n    } else {\n      if (values[1] !== gaps.column) {\n        gaps.column = values[1];\n        this._triggerReflow();\n      }\n    }\n  }\n\n  set padding(spec: PaddingSpec) {\n    const padding = this._padding as Padding;\n    const values = spec\n      .split(' ')\n      .map((v) => paddingValueToNumber(v as PaddingValue));\n    if (values.length === 1) {\n      padding.top = padding.right = padding.bottom = padding.left = values[0];\n      this._triggerReflow();\n    } else if (values.length === 2) {\n      padding.top = padding.bottom = values[0];\n      padding.right = padding.left = values[1];\n      this._triggerReflow();\n    } else if (values.length === 3) {\n      padding.top = values[0];\n      padding.right = padding.left = values[1];\n      padding.bottom = values[2];\n      this._triggerReflow();\n    } else if (values.length === 4) {\n      ['top', 'right', 'bottom', 'left'].forEach(\n        (side, idx) => (padding[side as side] = values[idx])\n      );\n      this._triggerReflow();\n    }\n  }\n}\n"]}