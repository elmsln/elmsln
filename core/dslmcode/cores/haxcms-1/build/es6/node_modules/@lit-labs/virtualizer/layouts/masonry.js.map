{"version":3,"file":"masonry.js","sourceRoot":"","sources":["../src/layouts/masonry.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LayoutHostSink, Positions, Size} from './shared/Layout.js';\nimport {GridBaseLayout, GridBaseLayoutConfig} from './shared/GridBaseLayout.js';\nimport {PixelSize} from './shared/SizeGapPaddingBaseLayout.js';\n\ntype GetAspectRatio = (item: unknown) => number;\n\nexport interface MasonryLayoutConfig\n  extends Omit<GridBaseLayoutConfig, 'flex' | 'itemSize'> {\n  flex: boolean;\n  itemSize: PixelSize;\n  getAspectRatio: GetAspectRatio;\n}\n\ntype MasonryLayoutSpecifier = MasonryLayoutConfig & {\n  type: new (\n    hostSink: LayoutHostSink,\n    config?: MasonryLayoutConfig\n  ) => MasonryLayout;\n};\n\ntype MasonryLayoutSpecifierFactory = (\n  config?: MasonryLayoutConfig\n) => MasonryLayoutSpecifier;\n\nexport const masonry: MasonryLayoutSpecifierFactory = (\n  config?: MasonryLayoutConfig\n) =>\n  Object.assign(\n    {\n      type: MasonryLayout,\n    },\n    config\n  );\n\ntype RangeMapEntry = [number, number];\n\nconst MIN = 'MIN';\nconst MAX = 'MAX';\ntype MinOrMax = 'MIN' | 'MAX';\n\nexport class MasonryLayout extends GridBaseLayout<MasonryLayoutConfig> {\n  private _RANGE_MAP_GRANULARITY = 100;\n  private _positions = new Map<number, Positions>();\n  private _rangeMap = new Map<number, RangeMapEntry>();\n  private _getAspectRatio?: GetAspectRatio;\n\n  protected _getDefaultConfig(): MasonryLayoutConfig {\n    return Object.assign({}, super._getDefaultConfig(), {\n      getAspectRatio: () => 1,\n    });\n  }\n\n  set getAspectRatio(getAspectRatio: GetAspectRatio) {\n    this._getAspectRatio = getAspectRatio;\n  }\n\n  protected _setItems(items: unknown[]) {\n    if (items !== this._items) {\n      this._scheduleLayoutUpdate();\n    }\n    super._setItems(items);\n  }\n\n  protected _getItemSize(_idx: number): Size {\n    return {\n      [this._sizeDim]: this._metrics!.itemSize1,\n      [this._secondarySizeDim]: this._metrics!.itemSize2,\n    } as unknown as Size;\n  }\n\n  protected _updateLayout() {\n    super._updateLayout();\n    // Possibly, we want to do this somewhere else instead\n    this._layOutChildren();\n  }\n\n  private _getRangeMapKey(scrollPos: number, minOrMax: MinOrMax) {\n    const G = this._RANGE_MAP_GRANULARITY;\n    return minOrMax === MIN\n      ? Math.floor(scrollPos / G) * G\n      : Math.ceil(scrollPos / G) * G;\n  }\n\n  private _layOutChildren() {\n    const G = this._RANGE_MAP_GRANULARITY;\n    this._positions.clear();\n    this._rangeMap.clear();\n    const {rolumns, padding1, itemSize2, gap1, positions} = this._metrics!;\n    let nextPos = padding1.start;\n    const nextPosPerRolumn = new Array(rolumns).fill(null).map((_) => nextPos);\n    let nextRolumn = 0;\n    let scrollSize = 0;\n    let minRangeMapKey = Infinity;\n    let maxRangeMapKey = -Infinity;\n    this.items.forEach((item, idx) => {\n      const aspectRatio = this._getAspectRatio!(item as {integer: number});\n      const size1 =\n        this.direction === 'horizontal'\n          ? itemSize2 * aspectRatio\n          : itemSize2 / aspectRatio;\n      const pos1 = nextPosPerRolumn[nextRolumn];\n      const pos2 = positions[nextRolumn];\n      this._positions.set(idx, {\n        [this._positionDim]: pos1,\n        [this._secondaryPositionDim]: pos2,\n        [this._sizeDim]: size1,\n        [this._secondarySizeDim]: itemSize2,\n      } as Positions);\n      const max1 = pos1 + size1;\n      const firstRangeMapKey = this._getRangeMapKey(pos1, MIN);\n      if (firstRangeMapKey < minRangeMapKey) {\n        minRangeMapKey = firstRangeMapKey;\n      }\n      const lastRangeMapKey = this._getRangeMapKey(max1, MAX);\n      if (lastRangeMapKey > maxRangeMapKey) {\n        maxRangeMapKey = lastRangeMapKey;\n      }\n      for (let n = firstRangeMapKey; n <= lastRangeMapKey; n += G) {\n        const [minIdx, maxIdx] = this._rangeMap.get(n) ?? [Infinity, -Infinity];\n        this._rangeMap.set(n, [Math.min(idx, minIdx), Math.max(idx, maxIdx)]);\n      }\n      scrollSize = Math.max(scrollSize, max1 + padding1.end);\n      nextPosPerRolumn[nextRolumn] += size1 + gap1;\n      nextPos = Infinity;\n      nextPosPerRolumn.forEach((pos, rolumn) => {\n        if (pos < nextPos) {\n          nextPos = pos;\n          nextRolumn = rolumn;\n        }\n      });\n    });\n    if (minRangeMapKey !== Infinity) {\n      for (let n = 0; n < minRangeMapKey; n += G) {\n        this._rangeMap.set(n, [-1, -1]);\n      }\n    }\n    if (maxRangeMapKey !== -Infinity) {\n      const maxRange = this._rangeMap.get(maxRangeMapKey)!;\n      for (let n = maxRangeMapKey + G; n < scrollSize + G; n += G) {\n        this._rangeMap.set(n, maxRange);\n      }\n    }\n    this._scrollSize = scrollSize;\n  }\n\n  _getActiveItems() {\n    const metrics = this._metrics!;\n    const {rolumns} = metrics;\n    if (rolumns === 0 || this._rangeMap.size === 0) {\n      this._first = -1;\n      this._last = -1;\n      this._physicalMin = 0;\n      this._physicalMax = 0;\n    } else {\n      const min = Math.max(0, this._scrollPosition - this._overhang);\n      const max = Math.min(\n        this._scrollSize,\n        this._scrollPosition + this._viewDim1 + this._overhang\n      );\n      const maxIdx = this.items.length - 1;\n      const minKey = this._getRangeMapKey(min, MIN);\n      const maxKey = this._getRangeMapKey(max, MAX);\n      let first = maxIdx;\n      let last = 0;\n      for (let n = minKey; n <= maxKey; n += this._RANGE_MAP_GRANULARITY) {\n        const [rangeFirst, rangeLast] = this._rangeMap.get(n) ?? [maxIdx, 0];\n        first = Math.min(first, rangeFirst);\n        last = Math.max(last, rangeLast);\n      }\n      this._first = first;\n      this._last = last;\n    }\n  }\n\n  _getItemPosition(idx: number): Positions {\n    return this._positions.get(idx)!;\n  }\n\n  _updateScrollSize() {\n    // We calculate scrollSize in _layouOutChildren(),\n    // no need to do it here\n  }\n}\n"]}