/**
 * Copyright 2020 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as e,html as t,css as i}from"../../../lit/index.js";import"../../accent-card/accent-card.js";import"../../../@github/time-elements/dist/index.js";import"../../nav-card/nav-card.js";import"../../hexagon-loader/hexagon-loader.js";import"../../simple-icon/lib/simple-icon-lite.js";import"../../hax-iconset/lib/simple-hax-iconset.js";import"./elmsln-studio-link.js";import"./elmsln-studio-button.js";const ElmslnStudioUtilities=function(e){return class extends e{static get properties(){return{...super.properties,demoMode:{type:Boolean,attribute:"demo-mode",reflect:!0}}}constructor(){super(),this.demoMode=!1,import("../../lrndesign-avatar/lrndesign-avatar.js"),import("../../simple-tooltip/simple-tooltip.js")}get defaultModalToolbars(){return{bottom:{id:"bottom",type:"toolbar-group",contents:["prevbutton","homebutton","rotategroup","zoomgroup","pageXofY","pangroup","fullscreenbutton","nextbutton"]}}}sortDates(e,t=!1){return e.sort(((e,i)=>{let s="string"==typeof e.date?Date.parse(e.date):e.date,o="string"==typeof i.date?Date.parse(i.date):i.date;return t?s-o:o-s}))}addDays(e=new Date,t=0){return new Date(Date.parse(e)+864e5*t)}addWeeks(e=new Date,t=0){return new Date(Date.parse(e)+6048e5*t)}toArray(e,t){return Object.keys(e||{}).map((i=>{let s=e[i];return s.id=i,Object.keys(t||{}).forEach((e=>s[e]=t[e])),s}))}isEarly(e,t){return new Date(e)>(new Date(t)||new Date)}onTime(e,t){return new Date(e)===(new Date(t)||new Date)}isLate(e,t){return new Date(e)<(t?new Date(t):new Date)}getStatus(e,t,i,s,o,a){let r=!!e&&!!e.date&&!!t.date&&e.date>t.date;return!e&&!!t.date&&this.isLate(t.date)?i:r?s:e?o:a}getStatusIcon(e,t){return this.getStatus(e,t,"report-problem","assignment-late","assignment-turned-in","assignment")}getStatusColor(e,t){return this.getStatus(e,t,"red","amber","green","grey")}getStatusMessage(e,t){return this.getStatus(e,t,"Overdue","Submitted Late","Submitted","Not Submitted")}_recentArray(e){return this.sortDates(this.toArray(e))}getAncestor(e,t){if(e&&t&&t.length>0){t[0][1];let i=t[0][0],s=e[`${t[0][1]}`];return this.getAncestor(i[s],t.slice(1))}return e}getFigures(e,i="src",s="alt",o="full",a="longdesc"){return(e||[]).map((e=>({src:e[o]||e[i],info:e[s]&&e[a]?t`
                  <p>${e[s]}:</p>
                  <div>${e[a]}</div>
                `:e[s]?t` ${e[s]} `:t` ${e[a]} `}))).filter((e=>!!e.src))}getThumnailGrid(e,i=!1){return t`
        <div class="thumbnail-grid">
          ${(e.sources||[]).map(((s,o)=>t`
              <img-view-modal
                class="thumbnail"
                ?disabled="${i}"
                page="${o}"
                title="${e.assignment} by ${e.firstName} ${e.lastName}"
                .toolbars="${this.defaultModalToolbars}"
                .figures="${this.getFigures(e.sources)}"
              >
                <button
                  ?disabled="${i}"
                  id="view-thumb-${e.id}"
                  .style="${this.getThumbailStyle(s.src)}"
                >
                  <span class="sr-only">${s.alt}</span>
                  <div class="zoombg"></div>
                  <simple-icon-lite
                    icon="zoom-in"
                    class="zoomicon"
                  ></simple-icon-lite>
                  <div class="imgbg"></div>
                </button>
                <simple-tooltip for="view-thumb-${e.id}"
                  >View Thumbnail</simple-tooltip
                >
              </img-view-modal>
            `))}
        </div>
      `}getThumbailStyle(e){return`--elmsln-studio-image-button-backgroundImage: url(${e});`}fullName(e,t=!1){return e&&!t?`${e.firstName} ${e.lastName}`:e?`${e.lastName}, ${e.firstName}`:""}dateFormat(e,t){return"string"==typeof e&&(e=new Date(e)),e?"long"===t?e.toLocaleDateString(void 0,{weekday:"long",year:"numeric",month:"long",day:"numeric"}):"short"===t?e.toLocaleDateString(void 0,{month:"long",day:"numeric"}):e.toLocaleDateString(void 0,{year:"numeric",month:"long",day:"numeric"}):""}accentColor(e){let t=globalThis.document.createElement("accent-card"),i=t&&t.colors?Object.keys(t.colors):[""],s=e&&e.charCodeAt(0)?e.charCodeAt(0):Math.floor(16*Math.random());return i[s%16+1]?i[s%16+1]:i[Math.floor(Math.random()*i.length)]}getActivityLink(e,t=!1,i=!1){return"submission"===e.activity?`project/${e.portfolioId||e.id}${e.portfolioId?`?submission=${e.id}`:""}${t?"":e.portfolioId?`&comment=true&sort-latest=${i}`:`?comment=true&sort-latest=${i}`}`:"discussion"===e.activity?`project/${e.projectId||e.submissionId}${e.portfolioId?`?submission=${e.submissionId}&`:"?"}comment=${e.id}`:`project/${e.projectId||e.submissionId}${e.portfolioId?`?submission=${e.submissionId}&`:"?"}comment=${e.feedbackId}`}getActivityTitle(e){return t`
        ${"submission"===e.activity?`${[e.firstName,e.lastName].join(" ")} submitted ${e.assignment}`:"discussion"===e.activity?`${[e.firstName,e.lastName].join(" ")}'s feedback on ${[e.creatorFirstName,e.creatorLastName].join(" ")}'s ${e.assignment}`:`${[e.firstName,e.lastName].join(" ")} replied to ${[e.reviewerFirstName,e.reviewerLastName].join(" ")}`}
      `}activityLink(e,t){return"submission"===t?this.submissionLink(e):"feedback"===e.activity?this.feedbackLink(e):this.replyLink(e)}activityTitle(e,t){return"submission"===t?this.submissionTitle(e):"feedback"===e.activity?this.feedbackTitle(e):this.replyTitle(e)}submissionLink(e){return`project/${e.userId}-${e.projectId}?submission=${e.id}`}submissionTitle(e){return`${e.firstName} submitted ${e.assignment}`}feedbackLink(e){return`project/${e.creator}-${e.projectId}?submission=${e.submissionId}&comment=${e.id}`}feedbackTitle(e){return`${e.firstName} left feedback on ${e.creatorFirstName}'s\n        ${e.assignment}`}replyLink(e){return`portfolios/${e.creator}-${e.projectId}?submission=${e.submissionId}&comment=${e.id}`}replyTitle(e){return`${e.firstName} replied to ${e.feedbackFirstName}'s feedback`}getFeedbackIcon(e){return 0===e?"communication:comment":e<10?`hax:messages-${e}`:"hax:messages-9-plus"}rubricTable(e){return e?t`
            <table class="rubric-table">
              <caption>
                Rubric
              </caption>
              ${e.key&&e.key?t`
                    <thead>
                      <th scope="col">Criteria</th>
                      ${e.key.map((e=>t`<th scope="col">
                            ${e.description&&(e.points||e.points>-1)?`${e.description} (${e.points})`:e.description||e.points}
                          </th>`))}
                    </thead>
                  `:""}
              <tbody>
                ${Object.keys(e.values||{}).map((i=>t`
                    <tr>
                      <th scope="row">${i}</th>
                      ${(e.values[i]||[]).map((e=>t`<td>${e}</td>`))}
                    </tr>
                  `))}
              </tbody>
            </table>
          `:""}_getValign(e){return e&&e.indexOf("top")>-1?"top":e&&e.indexOf("bottom")>-1?"bottom":"center"}_getAlign(e){return e&&e.indexOf("left")>-1?"left":e&&e.indexOf("right")>-1?"right":"center"}message404(e,i,s){return t` <div id="primary" class="primary-404">
        <p id="message-404">
          ${e} with this URL does not exist. Return to
          <elmsln-studio-link href="${s}">
            ${i}</elmsln-studio-link
          >
          to search for assignment.
        </p>
      </div>`}prevNextNav(e,i,s,o){return t`
        <div id="prev-next-nav">
          <elmsln-studio-link
            href="${i}"
            ?disabled="${!i}"
            icon="chevron-left"
          >
            <span class="prev-next-label">
              <span>Previous</span>
              <span>${e}</span>
            </span>
          </elmsln-studio-link>
          <elmsln-studio-link
            href="${o}"
            ?disabled="${!o}"
            icon="chevron-right"
          >
            <span slot="before" class="prev-next-label">
              <span>Next</span>
              <span>${s}</span>
            </span>
          </elmsln-studio-link>
        </div>
      `}loading(e,i,s="small"){return i?t`<hexagon-loader
            loading
            item-count="3"
            size="${s}"
            color="${e}"
            slot="${i}"
          >
          </hexagon-loader>`:t`<hexagon-loader
            loading
            item-count="3"
            size="${s}"
            color="${e}"
          >
          </hexagon-loader>`}submitData(e,t){console.log("submitData",e,t),this.dispatchEvent(new CustomEvent("submit-data",{bubbles:!0,cancelable:!0,composed:!0,detail:{type:e,data:t}}))}fetchData(e,t=!1){this.dispatchEvent(new CustomEvent("fetch-data",{bubbles:!0,cancelable:!0,composed:!0,detail:{type:e,refresh:t}}))}_handleLinkButton(e,t){location.href=t,this.dispatchEvent(new CustomEvent("link-button-click",{bubbles:!0,cancelable:!0,composed:!0,detail:t}))}}};export{ElmslnStudioUtilities};