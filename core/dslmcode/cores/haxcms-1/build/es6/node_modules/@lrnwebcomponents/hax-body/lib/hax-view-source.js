import{LitElement as t,html as e,css as o}from"../../../lit/index.js";import{MtzFileDownloadBehaviors as a}from"../../dl-behavior/dl-behavior.js";import{stripMSWord as i,formatHTML as n,b64toBlob as l}from"../../utils/utils.js";import{HAXStore as s}from"./hax-store.js";import"./hax-toolbar.js";import{HaxComponentStyles as r}from"./hax-ui-styles.js";import{autorun as d,toJS as c}from"../../../mobx/dist/mobx.esm.js";import{I18NMixin as h}from"../../i18n-manager/lib/I18NMixin.js";import"../../file-system-broker/lib/docx-file-system-broker.js";import"../../simple-toolbar/lib/simple-toolbar-menu.js";import"../../simple-toolbar/lib/simple-toolbar-menu-item.js";import"./hax-tray-button.js";import{MicroFrontendRegistry as m}from"../../micro-frontend-registry/micro-frontend-registry.js";class HaxViewSource extends(h(a(t))){static get styles(){return[...r,o`
        :host,
        #wrapper {
          margin: 0;
          padding: 0;
          display: flex;
          flex-direction: column;
          align-items: stretch;
          position: relative;
          flex: 1 1 100%;
        }
        #spacer {
          flex: 1 1 100%;
          z-index: -1;
        }
        #textarea {
          position: absolute;
          top: 0;
          bottom: 0;
          margin: 0;
          padding: 0;
        }
        hax-toolbar {
          flex: 0 0 auto;
          background-color: var(--hax-ui-background-color);
        }
        hax-toolbar::part(buttons) {
          display: flex;
          justify-content: center;
          align-items: stretch;
          margin: 0 auto;
        }
        hax-tray-button {
          flex: 1 1 auto;
        }
        simple-toolbar-menu {
          --simple-toolbar-button-border-color: var(--hax-ui-border-color);
        }
        /** This is mobile layout for controls */
        @media screen and (max-width: 800px) {
          hax-tray-button {
            flex: 0 1 auto;
          }
        }
      `]}render(){return e`
      <hax-toolbar always-expanded>
        <simple-toolbar-menu
          icon="icons:file-upload"
          icon-position="top"
          label="${this.t.importContent}"
          show-text-label
        >
          <simple-toolbar-menu-item>
            ${m.has("@core/docxToHtml")?e` <hax-tray-button
                  @click="${this.importDOCXviaMicro}"
                  label="${this.t.importDOCX}"
                  icon="hax:file-docx"
                  show-text-label
                  icon-position="top"
                >
                </hax-tray-button>`:e`
                  <hax-tray-button
                    @click="${this.importDOCX}"
                    label="${this.t.importDOCX}"
                    icon="hax:file-docx"
                    show-text-label
                    icon-position="top"
                  >
                  </hax-tray-button>
                `}
          </simple-toolbar-menu-item>
          ${m.has("@core/mdToHtml")?e`
                <simple-toolbar-menu-item>
                  <hax-tray-button
                    label="${this.t.importMarkdown}"
                    icon="hax:format-textblock"
                    @click="${this.importMDviaMicro}"
                    show-text-label
                    icon-position="top"
                  >
                  </hax-tray-button>
                </simple-toolbar-menu-item>
              `:e``}
        </simple-toolbar-menu>
        <hax-tray-button
          @click="${this.scrubContent}"
          icon="editor:format-clear"
          label="${this.t.cleanFormatting}"
          show-text-label
          icon-position="top"
        >
        </hax-tray-button>
        <hax-tray-button
          @click="${this.selectBody}"
          icon="hax:html-code"
          label="${this.t.copyHTML}"
          show-text-label
          icon-position="top"
        >
        </hax-tray-button>
        <simple-toolbar-menu
          icon="icons:file-download"
          icon-position="top"
          label="${this.t.downloadContent}"
          @dblclick="${this.download}"
          show-text-label
        >
          <simple-toolbar-menu-item>
            <hax-tray-button
              icon="hax:file-html"
              icon-position="top"
              label="${this.t.downloadHTML}"
              @click="${this.download}"
              show-text-label
            >
            </hax-tray-button>
          </simple-toolbar-menu-item>
          <simple-toolbar-menu-item>
            ${m.has("@core/htmlToDocx")?e`
                  <hax-tray-button
                    label="${this.t.downloadDOCX}"
                    icon="hax:file-docx"
                    @click="${this.downloadDOCXviaMicro}"
                    show-text-label
                    icon-position="top"
                  >
                  </hax-tray-button>
                `:e`
                  <hax-tray-button
                    label="${this.t.downloadDOCX}"
                    icon="hax:file-docx"
                    @click="${this.downloadDOCX}"
                    show-text-label
                    icon-position="top"
                  >
                  </hax-tray-button>
                `}
          </simple-toolbar-menu-item>
          ${m.has("@core/htmlToMd")?e`
                <simple-toolbar-menu-item>
                  <hax-tray-button
                    label="${this.t.downloadMD}"
                    icon="hax:format-textblock"
                    @click="${this.downloadMDviaMicro}"
                    show-text-label
                    icon-position="top"
                  >
                  </hax-tray-button>
                </simple-toolbar-menu-item>
              `:e``}
          ${m.has("@core/htmlToPdf")?e`
                <simple-toolbar-menu-item>
                  <hax-tray-button
                    label="${this.t.downloadPDF}"
                    icon="lrn:pdf"
                    @click="${this.downloadPDFviaMicro}"
                    show-text-label
                    icon-position="top"
                  >
                  </hax-tray-button>
                </simple-toolbar-menu-item>
              `:e``}
          <simple-toolbar-menu-item>
            <hax-tray-button
              @click="${this.htmlToHaxElements}"
              label="${this.t.haxSchema}"
              icon="hax:code-json"
              show-text-label
              icon-position="top"
            ></hax-tray-button>
          </simple-toolbar-menu-item>
        </simple-toolbar-menu>
        <hax-tray-button
          label="${this.t.updateContent}"
          icon="icons:check"
          @click="${this.importContent}"
          show-text-label
          icon-position="top"
        >
        </hax-tray-button>
      </hax-toolbar>
      <div id="wrapper">
        <div id="spacer"></div>
        <textarea id="hiddentextarea" hidden></textarea>
        <code-editor
          id="textarea"
          theme="${"hax"==this.haxUiTheme?"vs":"haxdark"==this.haxUiTheme?"vs-dark":"auto"}"
          language="html"
          font-size="13"
          word-wrap
        ></code-editor>
      </div>
    `}static get tag(){return"hax-view-source"}refreshHTMLEditor(t){this.updateEditor()}importDOCX(t){import("../../file-system-broker/lib/docx-file-system-broker.js").then((async t=>{const e=window.FileSystemBroker.requestAvailability(),o=await e.loadFile("docx");window.DOCXFileSystemBroker.requestAvailability().fileToHTML(o,"hax-view-source")}))}importMDviaMicro(t){import("../../file-system-broker/lib/docx-file-system-broker.js").then((async t=>{const e=window.FileSystemBroker.requestAvailability(),o=await e.getFileContents("markdown"),a=await m.call("@core/mdToHtml",{md:o});200==a.status&&this.insertContentsFromFile({detail:{name:"hax-view-source",value:a.data}})}))}importDOCXviaMicro(t){import("../../file-system-broker/lib/docx-file-system-broker.js").then((async t=>{const e=window.FileSystemBroker.requestAvailability(),o=await e.loadFile("docx"),a=new FormData;a.append("upload",o);const i=await m.call("@core/docxToHtml",a);200==i.status&&this.insertContentsFromFile({detail:{name:"hax-view-source",value:i.data.contents}})}))}insertContentsFromFile(t){if("hax-view-source"===t.detail.name){let o=document.createElement("div");o.innerHTML=t.detail.value;let a=!1;s.activeNode.hasAttribute("slot")&&(a=s.activeNode.getAttribute("slot"));for(var e=o.children.length-1;e>0;e--)a&&o.children[e].setAttribute("slot",a),s.activeNode.parentNode.insertBefore(o.children[e],s.activeNode.nextSibling);s.toast(this.t.fileImported),this.close()}}connectedCallback(){super.connectedCallback(),window.addEventListener("docx-file-system-data",this.insertContentsFromFile.bind(this))}disconnectedCallback(){window.removeEventListener("docx-file-system-data",this.insertContentsFromFile.bind(this)),super.disconnectedCallback()}async download(t){const e=await this.contentToFile(!1);this.downloadFromData(e,"html","my-new-code"),s.toast(this.t.fileDownloaded),this.close()}async downloadDOCX(t){let e=await s.activeHaxBody.haxToContent();window.DOCXFileSystemBroker.requestAvailability().HTMLToDOCX(e,document.title),s.toast(this.t.fileDownloaded),this.close()}async downloadDOCXviaMicro(t){let e=await s.activeHaxBody.haxToContent();const o=await m.call("@core/htmlToDocx",{html:e});if(200==o.status){const t=document.createElement("a");t.href=window.URL.createObjectURL(l(`${o.data}`,"application/vnd.openxmlformats-officedocument.wordprocessingml.document")),t.download="PageContents.docx",t.target="_blank",this.appendChild(t),t.click(),this.removeChild(t),s.toast(this.t.fileDownloaded),this.close()}}async downloadMDviaMicro(t){let e=await s.activeHaxBody.haxToContent();const o=await m.call("@core/htmlToMd",{html:e});if(200==o.status&&o.data){const t=document.createElement("a");t.href=window.URL.createObjectURL(l(btoa(o.data),"text/markdown")),t.download="PageContents.md",t.target="_blank",this.appendChild(t),t.click(),this.removeChild(t),s.toast(this.t.fileDownloaded),this.close()}}async downloadPDFviaMicro(t){let e=await s.activeHaxBody.haxToContent();var o="";document.querySelector("base")&&(o=document.querySelector("base").href);const a=await m.call("@core/htmlToPdf",{base:o,html:e});if(200==a.status&&a.data){const t=document.createElement("a");t.href=window.URL.createObjectURL(l(a.data,"application/pdf")),t.download="PageContents.pdf",t.target="_blank",this.appendChild(t),t.click(),this.removeChild(t),s.toast(this.t.fileDownloaded),this.close()}}async downloadfull(t){const e=await this.contentToFile(!0);this.downloadFromData(e,"html","my-new-webpage"),s.toast(this.t.fileDownloaded),this.close()}importContent(t){const e=this.shadowRoot.querySelector("#textarea").value;s.activeHaxBody.importContent(e),s.haxTray.trayDetail=""}scrubContent(t){const e=this.shadowRoot.querySelector("#textarea").value;s.toast("Scrubbed, Content updated"),s.activeHaxBody.importContent(i(e)),this.close()}openSource(){window.customElements.get("code-editor")?this.updateEditor():import("../../code-editor/code-editor.js").then((()=>{this.updateEditor(),setTimeout((()=>{this.updateEditor()}),1e3)}))}selectBody(t){let e=this.shadowRoot.querySelector("#hiddentextarea");e.value=this.shadowRoot.querySelector("#textarea").value,e.removeAttribute("hidden"),e.focus(),e.select(),document.execCommand("copy"),e.setAttribute("hidden","hidden"),s.toast(this.t.copiedToClipboard)}async htmlToHaxElements(t){let e=await s.htmlToHaxElements(this.shadowRoot.querySelector("#textarea").value);var o=JSON.stringify(e,null,2);let a=this.shadowRoot.querySelector("#textarea").value,i=this.shadowRoot.querySelector("#hiddentextarea");i.removeAttribute("hidden"),i.value=o,i.focus(),i.select(),document.execCommand("copy"),i.value=a,i.setAttribute("hidden","hidden"),s.toast(this.t.copiedToClipboard),this.close()}close(){s.haxTray.trayDetail=""}updateEditor(){s.activeHaxBody&&this.shadowRoot&&this.shadowRoot.querySelector("#textarea")&&(this.shadowRoot.querySelector("#textarea").editorValue="",setTimeout((async()=>{const t=n(await s.activeHaxBody.haxToContent());this.shadowRoot.querySelector("#textarea").editorValue=t}),0))}async contentToFile(t){let e=await s.activeHaxBody.haxToContent();var o=e;return t&&(o=`\n        <!DOCTYPE html>\n        <html lang="en">\n          <head>\n            <meta charset="utf-8" />\n            <meta\n              name="viewport"\n              content="width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes"\n            />\n            <title>hax-body demo</title>\n            <script>window.WCGlobalCDNPath="https://cdn.webcomponents.psu.edu/cdn/"; <\/script> <script src="https://cdn.webcomponents.psu.edu/cdn/build.js"><\/script> \n            <style>\n              body {\n                padding: 32px;\n              }\n            </style>\n          </head>\n          <body>\n          ${e}\n          </body>\n        </html>\n      `),o}static get properties(){return{...super.properties,globalPreferences:{type:Object},theme:{type:String}}}constructor(){super(),this.t={updateContent:"Update content",copyHTML:"Copy HTML",downloadContent:"Download content",downloadHTML:"Download HTML",fileDownloaded:"File downloaded",downloadDOCX:"Download DOCX",downloadMD:"Download Markdown",downloadPDF:"Download PDF",cleanFormatting:"Clean Formatting",haxSchema:"HAXSchema",importContent:"Import content",importMarkdown:"Import Markdown",importDOCX:"Import DOCX",fileImported:"File imported"},this.registerLocalization({context:this,namespace:"hax"}),this.fileTypes={CSV:"text/csv",JSON:"text/json",PDF:"application/pdf",TXT:"text/plain",HTML:"text/html"},d((()=>{this.globalPreferences=c(s.globalPreferences),this.haxUiTheme=(this.globalPreferences||{}).haxUiTheme||"hax"}))}}customElements.define(HaxViewSource.tag,HaxViewSource);export{HaxViewSource};