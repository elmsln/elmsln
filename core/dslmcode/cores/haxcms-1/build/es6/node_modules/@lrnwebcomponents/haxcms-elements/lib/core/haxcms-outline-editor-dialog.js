import{LitElement as t,html as e,css as i}from"../../../../lit/index.js";import{store as o}from"./haxcms-site-store.js";import{autorun as s,toJS as a}from"../../../../mobx/dist/mobx.esm.js";import{HAXCMSI18NMixin as n}from"./utils/HAXCMSI18NMixin.js";import"../../../json-outline-schema/json-outline-schema.js";import"../../../editable-outline/editable-outline.js";import"../../../simple-icon/simple-icon.js";import"../../../simple-icon/lib/simple-icons.js";class HAXCMSOutlineEditorDialog extends(n(t)){static get styles(){return[i`
        :host {
          display: block;
          height: 60vh;
          min-width: 40vw;
          overflow: auto;
          padding-bottom: 40px;
        }
        .buttons {
          position: absolute;
          bottom: 0;
          z-index: 1000000;
          background-color: var(--simple-modal-titlebar-background, #000000);
          left: 0;
          right: 32px;
        }
        .buttons button {
          color: black;
          background-color: white;
        }
        simple-icon {
          margin-right: 4px;
        }
        editable-outline:not(:defined) {
          display: none;
        }
        #toggle {
          float: right;
          text-transform: unset;
        }
        button.hax-modal-btn {
          font-size: 30px;
          padding: 8px;
          margin: 4px;
          color: white;
          background-color: green;
          border: 4px solid black;
          border-radius: 8px;
          font-family: 'Press Start 2P', sans-serif;
        }
        button.hax-modal-btn.cancel {
          background-color: red;
        }
        button.hax-modal-btn:hover,
        button.hax-modal-btn:focus {
          outline: 2px solid black;
          cursor: pointer;
          background-color: darkgreen;
        }
        button.hax-modal-btn.cancel:hover,
        button.hax-modal-btn.cancel:focus {
          background-color: darkred;
        }
      `]}static get tag(){return"haxcms-outline-editor-dialog"}render(){return e`
      <editable-outline
        id="outline"
        edit-mode
        .hidden="${this.viewMode}"
        .items="${this.manifestItems}"
      ></editable-outline>
      <div class="buttons">
        <button @click="${this._saveTap}" class="hax-modal-btn">
          ${this.t.save}
        </button>
        <button @click="${this._cancelTap}" class="cancel hax-modal-btn">
          ${this.t.cancel}
        </button>
      </div>
    `}constructor(){super(),this.__disposer=[],this.viewMode=!1,this.t=this.t||{},this.t={...this.t,save:"Save",cancel:"cancel"}}static get properties(){return{opened:{type:Boolean},manifestItems:{type:Array},manifestItemsStatic:{type:String,attribute:"manifest-items-static"},viewLabel:{type:String,attribute:"view-label"},viewMode:{type:Boolean,attribute:"view-mode"}}}updated(t){super.updated&&super.updated(t),t.forEach(((t,e)=>{"opened"==e&&this.dispatchEvent(new CustomEvent("opened-changed",{detail:this[e]})),"manifestItems"==e&&(this._manifestItemsChanged(this[e],t),this.dispatchEvent(new CustomEvent("manifest-edit-mode-changed",{detail:this[e]})))}))}_manifestItemsChanged(t){t&&(window.JSONOutlineSchema.requestAvailability().items=t,this.manifestItemsStatic=JSON.stringify(t,null,2))}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),this.shadowRoot.querySelector("#outline").importJsonOutlineSchemaItems()}connectedCallback(){super.connectedCallback(),s((t=>{this.manifestItems=[...a(o.manifest.items)],this.__disposer.push(t)}))}disconnectedCallback(){for(var t in this.__disposer)this.__disposer[t].dispose();super.disconnectedCallback()}_saveTap(t){o.playSound("click"),window.dispatchEvent(new CustomEvent("haxcms-save-outline",{bubbles:!0,composed:!0,detail:this.shadowRoot.querySelector("#outline").exportJsonOutlineSchemaItems(!0)})),setTimeout((()=>{this.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,composed:!0,cancelable:!1,detail:!1}))}),0)}_cancelTap(t){o.playSound("error"),this.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,composed:!0,cancelable:!1,detail:!1}))}}window.customElements.define(HAXCMSOutlineEditorDialog.tag,HAXCMSOutlineEditorDialog);export{HAXCMSOutlineEditorDialog};