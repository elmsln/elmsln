/**
 * Copyright 2019 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as t,html as e,css as i}from"../../lit/index.js";import"./lib/map-menu-builder.js";import"./lib/map-menu-container.js";import{normalizeEventPath as n}from"../utils/utils.js";class MapMenu extends t{static get styles(){return[i`
        :host {
          --map-menu-active-color: rgba(0, 0, 0, 0.1);
          --map-menu-size: 1;
          display: block;
          overflow-y: scroll;
          position: relative;
          height: 100%;
          transition: all 0.1s ease-in-out;
          opacity: 1;
          background-color: transparent;
        }
        #itemslist {
          display: var(--map-menu-items-list-display);
          flex-direction: var(--map-menu-items-list-flex-direction);
          flex: var(--map-menu-items-list-flex);
        }
        #activeindicator {
          background: var(--map-menu-active-color);
          transition: all 0.1s ease-in-out;
          position: absolute;
          pointer-events: none;
        }

        map-menu-container {
          padding: var(--map-menu-container-padding, 0);
          display: var(--map-menu-container-display);
          flex-direction: var(--map-menu-container-flex-direction);
          flex: var(--map-menu-container-flex);
          background-color: var(--map-menu-container-background-color);
          color: var(--map-menu-container-color);
        }

        /* turn default active color if indicator is on */
        :host([active-indicator]) map-menu-builder {
          --map-menu-active-color: transparent;
        }
      `]}constructor(){super(),this.disabled=!1,this.title="Content outline",this.data=null,this.items=[],this.autoScroll=!1,this.activeIndicator=!1,setTimeout((()=>{this.addEventListener("link-clicked",this.__linkClickedHandler.bind(this)),this.addEventListener("toggle-updated",this.__toggleUpdated.bind(this)),this.addEventListener("active-item",this.__activeItemHandler.bind(this)),this.addEventListener("map-meu-item-hidden-check",this._mapMeuItemHiddenCheckHandler.bind(this))}),0)}render(){return e`
      <div id="itemslist">
        <map-menu-container>
          <div id="activeindicator"></div>
          <map-menu-builder
            id="builder"
            .items="${this.items}"
            .selected="${this.selected}"
          ></map-menu-builder>
        </map-menu-container>
      </div>
    `}static get tag(){return"map-menu"}static get properties(){return{disabled:{type:Boolean,reflect:!0},title:{type:String},data:{type:Array},manifest:{type:Object},items:{type:Array},selected:{type:String},activeItem:{type:Object},autoScroll:{type:Boolean,attribute:"auto-scroll"},activeIndicator:{type:Boolean,reflect:!0,attribute:"active-indicator"}}}updated(t){t.forEach(((t,e)=>{"data"==e&&this._dataChanged(this[e]),"manifest"==e&&this._manifestChanged(this[e]),"activeItem"==e&&this.refreshActiveChildren(this[e],t),["manifest","items","selected"].includes(e)&&this.dispatchEvent(new CustomEvent(`${e}-changed`,{detail:{value:this[e]}}))}))}__activeItemHandler(t){this.activeItem=t.detail}_mapMeuItemHiddenCheckHandler(t){const e=t.detail.action,i=t.detail.hiddenChild;"closed"===e&&!0===i?this.__updateActiveIndicator(this.activeItem,!0):this.__updateActiveIndicator(this.activeItem,!1)}refreshActiveChildren(t,e){t&&(t.setAttribute("active","active"),this.activeIndicator&&this.__updateActiveIndicator(t),this.autoScroll&&this.__scrollHandler(t,{duration:50,delay:0,scrollElement:this})),e&&(e.removeAttribute("active"),this.__updateActiveIndicator(t))}__scrollHandler(t,e){const i={align:"top",delay:0,duration:300,scrollElement:window},n=Object.assign({},i,e),a=t.getBoundingClientRect(),s=(n.scrollElement.getBoundingClientRect(),n.scrollElement.getBoundingClientRect().bottom-n.scrollElement.getBoundingClientRect().top),l=a.bottom-a.top,o=n.scrollElement.scrollTop;let r=t.getBoundingClientRect().top-n.scrollElement.getBoundingClientRect().top;switch(r-=s/2,n.align){case"center":r+=l/2;break;case"bottom":r+=l}let d=null;requestAnimationFrame((function animation(t){null===d&&(d=t);let e=t-d,i=function ease(t,e,i,n){return(t/=n/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e}(e,o,r,n.duration);n.scrollElement.scrollTop=i,e<n.duration&&requestAnimationFrame(animation)}))}_manifestChanged(t){t&&(this.data=t.items)}_dataChanged(t){const e=[];t&&(t.forEach((t=>{t.parent||e.push(t)})),e.forEach(((e,i)=>{this._setChildren(e,t)})),this.items=[...e])}_setChildren(t,e){const i=e.filter((e=>t.id===e.parent));t.children=i,t.children.length>0&&t.children.forEach((t=>{this._setChildren(t,e)}))}__hasChildren(t){return t.children.length>0}__linkClickedHandler(t){this.selected=t.detail.id,this.dispatchEvent(new CustomEvent("selected",{bubbles:!0,cancelable:!0,composed:!0,detail:t.detail.id}))}__toggleUpdated(t){const e=t.detail.opened?"opened":"closed",i=n(t)[0];void 0!==this.activeItem&&(this.__updateActiveIndicator(this.activeItem,!1),this.activeItem.dispatchEvent(new CustomEvent("map-menu-item-hidden-check",{bubbles:!0,cancelable:!0,composed:!0,detail:Object.assign({},{action:e,target:i})})))}__isInViewport(t){const e=this.__getScrollParent(t);if(!e)return!1;var i=t.offsetTop,n=i+t.offsetHeight,a=e.offsetTop,s=a+e.offsetHeight;return n>a&&i<s}__getScrollParent(t){return null==t?null:t.scrollHeight>t.clientHeight?t:this.__getScrollParent(t.parentNode)}__updateActiveIndicator(t,e=!1){setTimeout((()=>{const i=this.shadowRoot.querySelector("#activeindicator"),n=t.offsetLeft,a=t.offsetTop,s=t.offsetWidth,l=e?0:t.offsetHeight;i.setAttribute("style",`width:${s}px;height:${l}px;top:${a}px;left:${n}px`)}),200)}__parentsHidden(t){const e=t.parentNode;return null==e?null:"MAP-MENU-SUBMENU"===e.tagName&&!e.opened||"MAP-MENU"!==e.tagName&&this.__parentsHidden(e)}}customElements.define(MapMenu.tag,MapMenu);export{MapMenu};