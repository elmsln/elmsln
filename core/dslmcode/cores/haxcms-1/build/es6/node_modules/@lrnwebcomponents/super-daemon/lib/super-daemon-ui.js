import{html as e,css as t,nothing as i}from"../../../lit/index.js";import"../../simple-icon/lib/simple-icons.js";import"../../simple-icon/lib/simple-icon-button-lite.js";import"../../hax-iconset/lib/simple-hax-iconset.js";import"../../simple-icon/simple-icon.js";import"../../simple-icon/lib/simple-icon-lite.js";import"../../simple-fields/lib/simple-fields-field.js";import"../../simple-fields/lib/simple-tag.js";import{SimpleFilterMixin as o}from"../../simple-filter/simple-filter.js";import{I18NMixin as s}from"../../i18n-manager/lib/I18NMixin.js";import{SimpleColors as r}from"../../simple-colors/simple-colors.js";import"./super-daemon-row.js";export class SuperDaemonUI extends(o(s(r))){constructor(){super(),this.voiceSearch=!1,this.iconAccent="purple",this.multiMatch=!0,this._defaultTextEmpty="No results for this term",this.t=this.t||{},this.t={...this.t,noResultsForThisTerm:this._defaultTextEmpty,whatAreYouLookingFor:"Type what you are looking to do here..",voiceSearch:"Voice search",filterCommands:"Filter commands",commands:"Commands",loadingResults:"Loading results",commonTasksText:"Here are some common questions Merlin can answer.."},this.opened=!1,this.items=[],this.mini=!1,this.loading=!1,this.listeningForInput=!1,this.programSearch="",this.commandContext="*",this.programName=null,this.shadowRootOptions={...r.shadowRootOptions,delegatesFocus:!0},this.where="index",this.icon="hardware:keyboard-return",this.questionTags=[]}static get tag(){return"super-daemon-ui"}static get properties(){return{...super.properties,icon:{type:String},iconAccent:{type:String,attribute:"icon-accent"},voiceSearch:{type:Boolean,reflect:!0,attribute:"voice-search"},listeningForInput:{type:Boolean,reflect:!0,attribute:"listening-for-input"},mini:{type:Boolean,reflect:!0},loading:{type:Boolean,reflect:!0},programSearch:{type:String,attribute:"program-search"},programName:{type:String,attribute:"program-name"},commandContext:{type:String,attribute:"command-context"},opened:{type:Boolean,reflect:!0},questionTags:{type:Array}}}static get styles(){let e=[];return super.styles&&(e=super.styles),[...e,t`
        :host {
          display: block;
        }
        .question-tags {
          display: flex;
          justify-content: space-evenly;
          padding: 8px;
        }
        .common-tasks-text {
          font-size: 18px;
          padding: 8px;
        }
        .search {
          display: flex;
          margin: 16px;
        }
        .search input {
          display: inline-flex;
          width: 100%;
        }
        .search .icon {
          display: inline-flex;
          --simple-icon-height: 50px;
          --simple-icon-width: 100px;
        }
        .voice {
          --simple-icon-height: 50px;
          --simple-icon-width: 100px;
          --simple-icon-button-border-radius: 0;
          color: var(--simple-colors-default-theme-grey-10, grey);
          transition: color 0.6s ease-in-out;
        }
        :host([mini]) .voice {
          --simple-icon-height: 24px;
          --simple-icon-width: 24px;
        }
        .voice:hover,
        .voice:focus {
          color: var(--simple-colors-default-theme-purple-6, purple);
        }
        .voice.listening {
          color: var(--simple-colors-default-theme-purple-4, purple);
        }

        .search .user-context-icon {
          display: inline-flex;
          --simple-icon-height: 50px;
          --simple-icon-width: 30px;
        }
        :host([mini]) .search .user-context-icon {
          --simple-icon-height: 24px;
          --simple-icon-width: 24px;
          margin-top: 0px;
        }
        .loading {
          font-size: 24px;
          font-family: "Roboto Mono", monospace;
          font-style: italic;
          margin: 16px;
        }
        .program {
          display: inline-flex;
          font-family: "Roboto Mono", monospace;
          color: var(--simple-colors-default-theme-grey-1, white);
          background-color: var(--simple-colors-default-theme-grey-12, black);
          line-break: anywhere;
          word-break: break-all;
          word-wrap: break-word;
          text-overflow: clip;
          overflow: hidden;
          line-height: 16px;
          height: 16px;
          padding: 2px 4px;
          margin: 16px 0 0 -2px;
          font-size: 10px;
          width: 100%;
          max-width: 100px;
        }
        :host([mini]) .program {
          line-height: 12px;
          font-size: 10px;
          max-width: 50px;
          height: 24px;
          margin: 0;
          padding: 2px;
        }
        .results-stats {
          right: 0;
          position: absolute;
          font-size: 12px;
          color: var(--simple-colors-default-theme-grey-10, black);
          padding: 8px;
          margin: 8px;
        }
        .results {
          width: 100%;
          display: block;
          border: 2px solid var(--simple-colors-default-theme-grey-10, black);
          max-height: 50vh;
          min-height: 30vh;
          overflow-y: scroll;
          scroll-snap-align: start;
          scroll-snap-type: y mandatory;
          padding: 32px 0px;
        }
        .no-results {
          font-size: 32px;
          font-weight: bold;
          max-width: 90%;
          word-break: break-all;
          overflow: hidden;
          line-height: 32px;
          height: 32px;
          margin: 16px auto;
          border: 1px solid transparent;
          box-shadow: none;
          outline: 0px;
        }
        .slotted {
          display: block;
          max-width: 90%;
          font-size: 20px;
        }
        .slotted ::slotted(a) {
          color: var(--simple-colors-default-theme-grey-8, blue);
          font-weight: bold;
          text-decoration: underline;
          cursor: pointer;
        }
        :host([mini]) .no-results {
          font-size: 14px;
          margin: 8px auto;
          line-height: 14px;
        }
        simple-fields-field {
          line-height: 40px;
          padding: 8px;
          color: var(--simple-colors-default-theme-grey-12, black);
          background-color: var(--simple-colors-default-theme-grey-1, white);
          line-height: normal;
          font-family: inherit;
          width: 100%;
          margin: 0px;
        }
        simple-tag:hover,
        simple-tag:focus {
          cursor: pointer;
          outline: 1px solid var(--simple-colors-default-theme-grey-10, black);
          outline-offset: 4px;
        }
        :host([mini]) simple-fields-field::part(option-input) {
          font-size: 12px;
        }
        simple-fields-field::part(option-input) {
          padding: 0px 2px;
          font-size: 24px;
        }
        simple-fields-field::part(label) {
          opacity: 0;
          height: 0;
          width: 0;
          position: absolute;
          pointer-events: none;
        }

        @media screen and (max-width: 800px) {
          .voice {
            --simple-icon-height: 30px;
            --simple-icon-width: 30px;
          }
          .search {
            margin: 8px;
          }
          simple-fields-field::part(option-input) {
            font-size: 14px;
            line-height: 20px;
          }
          .results-stats,
          .common-tasks-text,
          .question-tags {
            display: none;
          }
          .results {
            padding: 0px;
          }
          simple-fields-field {
            line-height: 20px;
          }
          .search .icon {
            display: none;
          }
          super-daemon-row {
            --super-daemon-row-icon: 30px;
            margin: 4px;
          }

          super-daemon-row::part(label-wrap) {
            min-width: 70%;
          }
          super-daemon-row::part(button) {
            padding: 4px;
          }
          super-daemon-row::part(action) {
            font-size: 24px;
            line-height: 24px;
            height: 24px;
            max-width: unset;
          }
          super-daemon-row::part(tags) {
            display: none;
          }
          super-daemon-row::part(path) {
            font-size: 12px;
          }
        }
        :host([mini]) {
          color: var(--simple-colors-default-theme-grey-12, black);
          background-color: var(--simple-colors-default-theme-grey-1, white);
        }
        :host([mini]) super-daemon-row {
          --super-daemon-row-icon: 24px;
          border-radius: 0px;
        }
        :host([mini]) .results-stats,
        :host([mini]) .common-tasks-text,
        :host([mini]) .question-tags {
          display: none;
        }
        :host([mini]) .results {
          padding: 4px 0px;
          max-height: unset;
          min-height: unset;
          height: 200px;
        }
        :host([mini]) .search .icon {
          display: none;
        }
      `]}updated(e){super.updated&&super.updated(e),e.forEach(((e,t)=>{if("filtered"==t&&void 0!==e){const e=window.SuperDaemonManager.requestAvailability();(e.santaMode||this.listeningForInput)&&(clearTimeout(this._selectTimeout),this._selectTimeout=setTimeout((()=>{(1===this.filtered.length||this.filtered&&this.filtered[0]&&this.filtered[0].title.toLocaleLowerCase()==e.value.toLocaleLowerCase())&&(this.shadowRoot.querySelector("super-daemon-row").selected(),e.listeningForInput=!0)}),600))}"opened"==t&&this.opened&&(this.shadowRoot.querySelector("#inputfilter").focus(),this.shadowRoot.querySelector(".results").scrollTo(0,0)),"commandContext"==t&&this.dispatchEvent(new CustomEvent("super-daemon-command-context-changed",{detail:{value:this[t]}})),"like"==t&&this.dispatchEvent(new CustomEvent("like-changed",{detail:{value:this[t]}}))}))}setupProgram(){this.programSearch="",this.shadowRoot.querySelector("#inputfilter").focus(),this.shadowRoot.querySelector("#inputfilter").select(),this.shadowRoot.querySelector(".results").scrollTo(0,0)}inputfilterChanged(e){this.programName?this.programSearch=e.target.value:this.like=e.target.value}itemSelected(e){this.like="",this.programSearch=""}_resultsKeydown(e){if(this.filtered.length>0&&this.shadowRoot.querySelector("super-daemon-row[active]"))switch(e.key){case"ArrowUp":case"ArrowLeft":this.shadowRoot.querySelector("super-daemon-row[active]")===this.shadowRoot.querySelector("super-daemon-row")?this.shadowRoot.querySelector("super-daemon-row:last-child").shadowRoot.querySelector("button").focus():this.shadowRoot.querySelector("super-daemon-row[active]").previousElementSibling.shadowRoot.querySelector("button").focus();break;case"ArrowDown":case"ArrowRight":this.shadowRoot.querySelector("super-daemon-row[active]")===this.shadowRoot.querySelector("super-daemon-row:last-child")?this.shadowRoot.querySelector("super-daemon-row").shadowRoot.querySelector("button").focus():this.shadowRoot.querySelector("super-daemon-row[active]").nextElementSibling.shadowRoot.querySelector("button").focus()}}_inputKeydown(e){if(this.filtered.length>0)switch(e.key){case"Enter":this.shadowRoot.querySelector("super-daemon-row").selected();break;case"ArrowUp":this.shadowRoot.querySelector("super-daemon-row:last-child").shadowRoot.querySelector("button").focus(),this.shadowRoot.querySelector("super-daemon-row:last-child").scrollIntoView({block:"end",inline:"nearest"});break;case"ArrowDown":this.shadowRoot.querySelector("super-daemon-row").shadowRoot.querySelector("button").focus(),this.shadowRoot.querySelector("super-daemon-row").scrollIntoView({block:"start",inline:"nearest"})}switch(e.key){case"!":case"/":case"\\":case">":case"<":case"?":"\\"===e.key&&""==this.like||"!"===e.key&&""==this.like?(this.commandContext="/",e.preventDefault()):"<"===e.key&&""==this.like?(this.commandContext=">",e.preventDefault()):""==this.like&&(this.commandContext=e.key,e.preventDefault());break;case"Backspace":""==this.programSearch&&this.programName?(this.dispatchEvent(new CustomEvent("super-daemon-run-program",{bubbles:!0,cancelable:!0,composed:!0,detail:!1})),e.preventDefault()):!this.programName&&""==this.like&&this.commandContext&&(this.commandContext="*",e.preventDefault())}}getActiveTitle(e){switch(e){case"/":return this.t.slashCommandsActive;case">":return this.t.developerConsoleActive;case"?":return this.t.helpActive}return""}getActiveIcon(e){switch(e){case"/":return"hax:slash";case">":return"hax:console-line";case"?":return"icons:help"}return""}commonConcepts(e){const t=window.SuperDaemonManager.requestAvailability();switch(e){case"*":case">":case"/":case"?":t.runProgram(e,{},null,null,"","");break;case"media":t.runProgram("/",{},null,null,"","sources");break;default:t.runProgram("*",{},null,null,"",e)}}tagClick(e){this.commonConcepts(e.target.getAttribute("data-value"))}tagKeydown(e){"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),this.commonConcepts(e.target.getAttribute("data-value")))}voiceSearchClick(){const e=window.SuperDaemonManager.requestAvailability();this.listeningForInput?e.listeningForInput=!1:(e.hal.speak("How may I help you?",e.santaMode).then((t=>{e.playSound(),e.listeningForInput=!0})),this.shadowRoot.querySelector("#inputfilter").focus(),this.shadowRoot.querySelector(".results").scrollTo(0,0))}render(){return e`
      <div class="common-tasks-text">${this.t.commonTasksText}</div>
      <div class="question-tags">
        ${this.questionTags?this.questionTags.map(((t,i)=>e` <simple-tag
                tabindex="0"
                @keydown="${this.tagKeydown}"
                @click="${this.tagClick}"
                accent-color="grey"
                value="${t.label}"
                part="tag tag-${i}"
                data-value="${t.value}"
              ></simple-tag>`)):""}
      </div>
      <div class="search">
        ${this.voiceSearch?e`<simple-icon-button-lite
              class="voice ${this.listeningForInput?"listening":""}"
              @click="${this.voiceSearchClick}"
              icon="${this.listeningForInput?"hax:loading":"settings-voice"}"
              ?dark="${this.dark}"
              title="${this.t.voiceSearch}"
            ></simple-icon-button-lite>`:""}
        ${"*"!=this.commandContext?e`<simple-icon-lite
              title="${this.getActiveTitle(this.commandContext)}"
              icon="${this.getActiveIcon(this.commandContext)}"
              class="user-context-icon"
            ></simple-icon-lite>`:""}
        ${this.programName?e`<span class="program">${this.programName}</span>`:""}
        <simple-fields-field
          id="inputfilter"
          @value-changed="${this.inputfilterChanged}"
          @keydown="${this._inputKeydown}"
          .value="${this.like}"
          aria-controls="filter"
          label="${this.t.filterCommands}"
          placeholder="${this.t.whatAreYouLookingFor}"
          type="text"
          auto-validate=""
          autofocus
          part="filter"
        ></simple-fields-field>
        <simple-icon
          icon="${this.icon}"
          class="icon"
          accent-color="${this.listeningForInput?this.iconAccent:"grey"}"
        ></simple-icon>
      </div>
      <div class="results-stats">
        ${this.filtered.length} / ${this.items.length} ${this.t.commands}
      </div>
      <div
        class="results"
        @keydown="${this._resultsKeydown}"
        @super-daemon-row-selected="${this.itemSelected}"
      >
        ${this.loading?e`<div class="loading">${this.t.loadingResults}..</div>`:e`
              ${this.filtered.length&&0!==this.filtered.length?e`
                    ${this.filtered.map(((t,o)=>e`
                        <super-daemon-row
                          data-row-index="${o}"
                          .value="${t.value}"
                          icon="${t.icon}"
                          image="${t.image}"
                          ?dark="${this.dark}"
                          text-character="${t.textCharacter}"
                          title="${t.title}"
                          .tags="${t.tags}"
                          event-name="${t.eventName}"
                          path="${t.path}"
                          ?more="${t.more&&!this.mini}"
                          ?mini="${this.mini}"
                          >${t.more?t.more:i}</super-daemon-row
                        >
                      `))}
                  `:e`<div class="no-results">
                      ${this.t.noResultsForThisTerm}
                    </div>
                    <div class="slotted"><slot></slot></div>`}
            `}
      </div>
    `}}customElements.define(SuperDaemonUI.tag,SuperDaemonUI);