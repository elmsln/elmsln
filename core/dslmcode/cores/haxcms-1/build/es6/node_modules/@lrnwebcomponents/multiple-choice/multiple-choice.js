import{html as e,css as t,LitElement as s}from"../../lit/index.js";import{SchemaBehaviors as i}from"../schema-behaviors/schema-behaviors.js";import{SimpleColorsSuper as r}from"../simple-colors/simple-colors.js";import"./lib/multiple-choice-response.js";import"../simple-icon/simple-icon.js";import"../simple-icon/lib/simple-icons.js";import"../simple-fields/lib/simple-fields-field.js";import"../simple-toolbar/lib/simple-toolbar-button.js";import{SimpleToastStore as o}from"../simple-toast/simple-toast.js";class MultipleChoice extends(i(r(s))){static get styles(){return[...super.styles,t`
        :host {
          display: block;
          min-width: 160px;
          padding: 16px;
          margin-bottom: 16px;
          border: 1px solid var(--simple-colors-default-theme-grey-8);
          border-radius: 3px;
          color: var(--simple-colors-default-theme-grey-12);
          --simple-toolbar-button-border-color: var(
            --simple-colors-default-theme-grey-4
          );
          --simple-fields-field-color: var(
            --simple-colors-default-theme-grey-12
          );
          --simple-fields-field-ink-color: var(
            --simple-colors-default-theme-grey-12
          );
          --simple-fields-field-checked-color: var(
            --simple-colors-default-theme-accent-8
          );
          --simple-fields-field-checked-ink-color: var(
            --simple-colors-default-theme-accent-8
          );
          --simple-fields-field-checkmark-color: var(
            --simple-colors-default-theme-grey-1
          );
          --simple-fields-field-label-color: var(
            --simple-colors-default-theme-grey-12
          );
          --simple-fields-field-error-color: var(
            --simple-colors-default-theme-red-8
          );
          --simple-fields-border-bottom-size: 0px;
          --simple-fields-border-bottom-focus-size: 0px;
        }

        :host button {
          background-color: var(--simple-colors-default-theme-grey-1);
          color: var(--simple-colors-default-theme-grey-12);
        }
        :host button:hover,
        :host button:focus,
        :host button:active {
          cursor: pointer;
          background-color: var(--simple-colors-default-theme-grey-2);
          color: var(--simple-colors-default-theme-grey-12);
        }
        ul {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        ul li {
          padding: 0;
        }
        simple-icon {
          display: inline-flex;
        }
        h3 {
          margin-top: 0;
        }
        #buttons {
          display: flex;
          align-items: center;
          justify-content: flex-end;
        }
        #check {
          margin-right: 8px;
        }
        .feedback {
          background-color: black;
          color: white;
          display: flex;
          align-items: center;
          justify-content: flex-start;
          padding: 8px;
          border-radius: 3px;
        }
        .feedback simple-icon {
          margin-right: 8px;
        }
        ::slotted([slot="question"]) {
          margin: 0;
        }
        .feedback,
        ::slotted(multiple-choice-response),
        ::slotted([slot="correct-feedback"]),
        ::slotted([slot="incorrect-feedback"]) {
          font-size: var(--simple-fields-font-size, 16px);
          text-align: var(--simple-fields-text-align);
          font-family: var(--simple-fields-font-family, sans-serif);
          line-height: var(--simple-fields-line-height, 22px);
        }
      `]}static get tag(){return"multiple-choice"}constructor(){super(),this.__ctr=0,this.randomize=!1,this.hideButtons=!1,this.disabled=!1,this.singleOption=!1,this.checkLabel="Check Answer",this.resetLabel="Reset",this.question="",this.answers=[],this.displayedAnswers=[],this.editMode=!1,this.correctText="Great job!",this.correctIcon="icons:thumb-up",this.incorrectText="Better luck next time!",this.incorrectIcon="icons:thumb-down",this.quizName="default",this.addEventListener("value-changed",this._handleChange)}updated(e){super.updated&&super.updated(e),e.forEach(((e,t)=>{if(["answers","displayedAnswers"].includes(t)){let e=`${t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}-changed`;this.dispatchEvent(new CustomEvent(e,{detail:{value:this[t]}}))}"answers"==t&&this.answers&&this.answers.length>0&&(this.answers.forEach((e=>({...e,answerId:e.answerId||this._getSlotanswerId(),text:e.text||e.value||e.label,value:e.value||e.label}))),this._setSlottedAnswers(),this.displayedAnswers=[...this._computeDisplayedAnswers(this.answers,this.randomize)]),"singleOption"==t&&this.singleOption&&JSON.parse(this.correctAnswers||"[]").length>1&&(this.answers=[...this.answers[0]]),"correctText"==t&&this._setSlottedText(this.correctText,"correct-feedback"),"incorrectText"==t&&this._setSlottedText(this.incorrectText,"incorrect-feedback"),"title"==t&&this._setSlottedText(this.title,"question"),"editMode"!=t||this.editMode||this._handleSlotChange()}))}render(){return e`
      <confetti-container id="confetti">
        <meta property="oer:assessing" content="${this.relatedResource}" />
        <h3 id="question" property="oer:name"><slot name="question"></slot></h3>
        ${this.editMode?e` <div id="editMode">
              <slot name="question"></slot>
              <slot></slot>
              <p class="feedback">
                <simple-icon
                  icon="${this.correctIcon}"
                  accent-color="green"
                  dark
                ></simple-icon>
                <slot name="correct-feedback"></slot>
              </p>
              <p class="feedback">
                <simple-icon
                  icon="${this.incorrectIcon}"
                  accent-color="red"
                  dark
                ></simple-icon>
                <slot name="incorrect-feedback"></slot>
              </p>
            </div>`:e`
              <simple-fields-field
                id="multiple-choice-question"
                aria-labelledby="question"
                block-options
                ?disabled="${this.disabled}"
                ?inline="${!1}"
                type="${this.inputType}"
                .itemsList="${this.displayedAnswers}"
                .value="${this.userGuess||[]}"
                name="answers"
                @value-changed="${this.checkedEvent}"
              ></simple-fields-field>
              ${this.hideButtons?"":e`
                    <div id="buttons">
                      <simple-toolbar-button
                        id="check"
                        ?disabled="${this.disabled}"
                        @click="${this._verifyAnswers}"
                        label="${this.checkLabel}"
                      >
                      </simple-toolbar-button>
                      <simple-toolbar-button
                        id="reset"
                        ?disabled="${this.disabled}"
                        @click="${this.resetAnswers}"
                        label="${this.resetLabel}"
                      >
                      </simple-toolbar-button>
                    </div>
                  `}
            `}
      </confetti-container>
    `}checkedEvent(e){this.userGuess=e.detail.value||[]}static get properties(){return{...super.properties,disabled:{type:Boolean},singleOption:{type:Boolean,attribute:"single-option"},checkLabel:{type:String,attribute:"check-label"},resetLabel:{type:String,attribute:"reset-label"},relatedResource:{type:String,attribute:"related-resource"},question:{type:String},answers:{type:Array},displayedAnswers:{type:Array},correctText:{type:String,attribute:"correct-text"},incorrectText:{type:String,attribute:"incorrect-text"},correctIcon:{type:String,attribute:"correct-icon"},incorrectIcon:{type:String,attribute:"incorrect-icon"},quizName:{type:String,attribute:"quiz-name"},randomize:{type:Boolean,reflect:!0},hideButtons:{type:Boolean,attribute:"hide-buttons"},editMode:{type:Boolean,attribute:"edit-mode",reflect:!0},userGuess:{type:Array}}}resetAnswers(e){o.hide(),this.displayedAnswers=[],this.userGuess=[];const t=JSON.parse(JSON.stringify(this.answers));this.answers=[...t]}get inputType(){let e=this.correctAnswers.split().length<2&&this.singleOption?"radio":"checkbox";return Array.from(this.querySelectorAll("multiple-choice-response")).forEach((t=>t.type=e)),e}get isCorrect(){let e=this.userGuess||[];return"string"==typeof e&&(e=[e]),this.correctAnswers===JSON.stringify(e.sort())}get correctAnswers(){return JSON.stringify(this.displayedAnswers.filter((e=>!!e.correct)).map((e=>e.value||e.label)).sort())}_handleChange(e){if(!(this.editMode&&this.singleOption&&e.detail&&e.detail.value))return;let t=e.detail&&e.detail.parentNode&&e.detail.parentNode.host&&"MULTIPLE-CHOICE-RESPONSE"===e.detail.parentNode.host.tagName?e.detail.parentNode.host:void 0;t&&Array.from(this.querySelectorAll("multiple-choice-response")).forEach((e=>{e!==t&&(e.correct=!1)}))}_verifyAnswers(e){o.hide();let t=this.isCorrect,s=document.createElement("simple-icon");this.__toastColor="grey",s.dark=!0,t?(s.accentColor="green",this.__toastIcon=this.correctIcon,this.__toastText=this.correctText,import("./lib/confetti-container.js").then((e=>{setTimeout((()=>{this.shadowRoot.querySelector("#confetti").setAttribute("popped","")}),0)}))):(this.__toastIcon=this.incorrectIcon,this.__toastText=this.incorrectText,s.accentColor="red"),s.icon=this.__toastIcon,s.style.marginLeft="16px",o.showSimpleToast({detail:{duration:3e3,text:this.__toastText,slot:s,dark:!s.dark,accentColor:this.__toastColor}});let i={activityDisplay:"answered",objectName:this.quizName,resultSuccess:t};this.dispatchEvent(new CustomEvent("user-engagement",{bubbles:!0,composed:!0,cancelable:!1,detail:i}))}_computeDisplayedAnswers(e,t){if(void 0!==e&&null!=e&&e.length>0&&t&&!this._haxstate){let t=e;for(var s,i,r=t.length;0!==r;)i=Math.floor(Math.random()*r),s=t[r-=1],t[r]=t[i],t[i]=s;return t}return e}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}_getSlottedAnswers(){let e="[slot=correct-feedback][slot=incorrect-feedback],[slot=question]",t=Array.from(this.querySelectorAll("multiple-choice-response,input,ul>li,ol>li")).filter((t=>!t.closest(e))),s=[];return t.forEach((e=>s.push(this._getSlottedAnswer(e)))),Array.from(this.querySelectorAll("ul")).forEach((t=>{t.closest(e)||t.remove()})),s}_getSlottedAnswer(e){let t={answerId:this._getSlotanswerId(e),value:(e.value||e.innerHTML).trim(),text:(e.value||e.innerHTML).trim(),correct:"INPUT"!==e.tagName&&"LI"!==e.tagName?!!e.correct:null!==e.getAttribute("correct")};return"INPUT"!==e.tagName&&"LI"!==e.tagName||(e.remove(),this._setSlottedAnswer(t)),t}_getSlotanswerId(e){let t=`mc-${Date.now()}-${this.__ctr++}`;return e&&!e.answerId&&(e.answerId=t),e?e.answerId:t}_setSlottedAnswer(e){let t=Array.from(this.querySelectorAll("multiple-choice-response")).filter((t=>(e.label||e.value||"").trim===(t.innerHTML||"").trim()))[0];t||(t=document.createElement("multiple-choice-response"),t.innerHTML=e.label||e.value,this.appendChild(t)),t.answerId=this._getSlotanswerId(t),t.correct=e.correct,t.type=this.inputType}_setSlottedAnswers(){if(this.answers.length>0){let e=this.answers.map((e=>e.answerId)),t={};Array.from(this.querySelectorAll("multiple-choice-response,input")).map((s=>{let i=this._getSlotanswerId(s);t[i]=s,e.includes(i)||s.remove()})),this.answers.forEach((e=>{let s=t[e.answerId];s?s.innerHTML=e.text:this._setSlottedAnswer(e)}))}}_setSlottedText(e,t,s=!1){if(["question","correct-feedback","incorrect-feedback"].includes(t)&&this.querySelector(`[slot=${t}]`))this.querySelector(`[slot=${t}]`).innerHTML=e;else{let i=document.createElement("p");i.slot=t,i.innerHTML=e,s?this.insertBefore(i,this.firstChild):this.appendChild(i)}}_getSlottedText(e,t){let s=`[slot=${t}]`,i=this.querySelector(s),r=i&&i.innerHTML?i.innerHTML.trim():void 0;this[e]&&this[e].trim()===r||(this[e]=r)}_handleSlotChange(e=!1){this.answers=this._getSlottedAnswers();let t={title:"question",correctText:"correct-feedback",incorrectText:"incorrect-feedback"};Object.keys(t).forEach((s=>{!this.querySelector(`[slot=${t[s]}]`)&&e?this._setSlottedText(this[s],t[s],"question"==s):this._getSlottedText(s,t[s])}))}firstUpdated(e){super.firstUpdated&&super.firstUpdated(e),this.setAttribute("typeof","oer:Assessment"),this.children.length>0?this._handleSlotChange(!0):(this._setSlottedAnswers(),this._setSlottedText(this.correctText,"correct-feedback"),this._setSlottedText(this.incorrectText,"incorrect-feedback"),this._setSlottedText(this.title,"question",!0))}}customElements.define(MultipleChoice.tag,MultipleChoice);export{MultipleChoice};