import{LitElement as e,html as t,css as s}from"../../lit/index.js";import{SchemaBehaviors as i}from"../schema-behaviors/schema-behaviors.js";import{SimpleColorsSuper as r}from"../simple-colors/simple-colors.js";import"../simple-icon/simple-icon.js";import"../simple-icon/lib/simple-icons.js";import"../simple-fields/lib/simple-fields-field.js";import"../simple-toolbar/lib/simple-toolbar-button.js";import"../simple-toast/simple-toast.js";class MultipleChoice extends(i(r(e))){static get styles(){return[...super.styles,s`
        :host {
          display: block;
          min-width: 160px;
          padding: 16px;
          margin-bottom: 16px;
          border: 1px solid var(--simple-colors-default-theme-grey-8);
          background-color: var(--simple-colors-default-theme-accent-1);
          border-radius: 3px;
          color: var(--simple-colors-default-theme-grey-12);
          --simple-toolbar-button-border-color: var(
            --simple-colors-default-theme-grey-4
          );
          --simple-fields-field-color: var(
            --simple-colors-default-theme-grey-12
          );
          --simple-fields-field-ink-color: var(
            --simple-colors-default-theme-grey-12
          );
          --simple-fields-field-checked-color: var(
            --simple-colors-default-theme-accent-8
          );
          --simple-fields-field-checked-ink-color: var(
            --simple-colors-default-theme-accent-8
          );
          --simple-fields-field-checkmark-color: var(
            --simple-colors-default-theme-grey-1
          );
          --simple-fields-field-label-color: var(
            --simple-colors-default-theme-grey-12
          );
          --simple-fields-field-error-color: var(
            --simple-colors-default-theme-red-8
          );
          --simple-fields-border-bottom-size: 0px;
          --simple-fields-border-bottom-focus-size: 0px;
        }

        :host button {
          background-color: var(--simple-colors-default-theme-grey-1);
          color: var(--simple-colors-default-theme-grey-12);
        }
        :host button:hover,
        :host button:focus,
        :host button:active {
          cursor: pointer;
          background-color: var(--simple-colors-default-theme-grey-2);
          color: var(--simple-colors-default-theme-grey-12);
        }
        ul {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        ul li {
          padding: 0;
        }
        simple-icon {
          display: inline-flex;
        }
        h3 {
          margin-top: 0;
        }
        #buttons {
          display: flex;
          align-items: center;
          justify-content: flex-end;
        }
        #check {
          margin-right: 8px;
        }
        simple-fields-field {
          padding: 8px;
          margin: 2px;
          background-color: var(--simple-colors-default-theme-accent-2);
        }
        simple-fields-field::part(option-inner) {
          position: absolute;
          right: 0px;
          bottom: 50%;
          top: 50%;
          padding: 0px;
          margin: 0px;
        }
        simple-icon {
          display: inline-flex;
        }
      `]}static get tag(){return"multiple-choice"}constructor(){super(),this.shadowRootOptions={...e.shadowRootOptions,delegatesFocus:!0},this.randomize=!1,this.hideButtons=!1,this.disabled=!1,this.singleOption=!1,this.checkLabel="Check answer",this.resetLabel="Reset",this.question="",this.answers=[],this.displayedAnswers=[],this.correctText="Great job!",this.correctIcon="icons:thumb-up",this.incorrectText="Better luck next time!",this.incorrectIcon="icons:thumb-down",this.quizName="default"}updated(e){super.updated&&super.updated(e),e.forEach(((e,t)=>{if(["answers","displayedAnswers"].includes(t)){let e=`${t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}-changed`;this.dispatchEvent(new CustomEvent(e,{detail:{value:this[t]}}))}"answers"==t&&this.answers&&this.answers.length>0&&(this.displayedAnswers=[...this._computeDisplayedAnswers(this.answers,this.randomize)])}))}render(){return t`
      <confetti-container id="confetti">
        <meta property="oer:assessing" content="${this.relatedResource}" />
        <h3><span property="oer:name">${this.question}</span></h3>
        ${this.singleOption?t`
              <fieldset id="answers">
                ${this.displayedAnswers.map(((e,s)=>t`
                    <simple-fields-field
                      ?disabled="${this.disabled}"
                      property="oer:answer"
                      type="radio"
                      name="${s}"
                      @mousedown="${this.clickSingle}"
                      @keydown="${this.clickSingle}"
                      .value="${e?e.userGuess:""}"
                      @value-changed="${this.checkedEvent}"
                      label="${e&&e.label?e.label:""}"
                    ></simple-fields-field>
                  `))}
              </fieldset>
            `:t`
              <ul>
                ${this.displayedAnswers.map(((e,s)=>t`
                    <li>
                      <simple-fields-field
                        ?disabled="${this.disabled}"
                        property="oer:answer"
                        name="${s}"
                        type="checkbox"
                        label="${e&&e.label?e.label:""}"
                        .value="${e?e.userGuess:""}"
                        @value-changed="${this.checkedEvent}"
                      ></simple-fields-field>
                    </li>
                  `))}
              </ul>
            `}
        ${this.hideButtons?"":t`
              <div id="buttons">
                <simple-toolbar-button
                  id="check"
                  ?disabled="${this.disabled}"
                  @click="${this._verifyAnswers}"
                  label="${this.checkLabel}"
                >
                </simple-toolbar-button>
                <simple-toolbar-button
                  id="reset"
                  ?disabled="${this.disabled}"
                  @click="${this.resetAnswers}"
                  label="${this.resetLabel}"
                >
                </simple-toolbar-button>
              </div>
            `}
      </confetti-container>
    `}clickSingle(e){this.singleOption&&this.displayedAnswers.forEach(((e,t)=>{this.displayedAnswers[t].userGuess=!1}))}checkedEvent(e){let t=this.displayedAnswers;t[e.target.name].userGuess=e.detail.value,this.displayedAnswers=[...t]}static get properties(){return{...super.properties,disabled:{type:Boolean},singleOption:{type:Boolean,attribute:"single-option"},checkLabel:{type:String,attribute:"check-label"},resetLabel:{type:String,attribute:"reset-label"},relatedResource:{type:String,attribute:"related-resource"},question:{type:String},answers:{type:Array},displayedAnswers:{type:Array},correctText:{type:String,attribute:"correct-text"},incorrectText:{type:String,attribute:"incorrect-text"},correctIcon:{type:String,attribute:"correct-icon"},incorrectIcon:{type:String,attribute:"incorrect-icon"},quizName:{type:String,attribute:"quiz-name"},randomize:{type:Boolean,reflect:!0},hideButtons:{type:Boolean,attribute:"hide-buttons"}}}resetAnswers(e){window.dispatchEvent(new CustomEvent("simple-toast-hide",{bubbles:!0,composed:!0,cancelable:!1,detail:!1})),this.displayedAnswers=[],this.answers.forEach((e=>{e.userGuess=!1}));const t=JSON.parse(JSON.stringify(this.answers));this.answers=[...t]}checkAnswers(){let e=!0;for(var t in this.displayedAnswers)0!=e&&this.displayedAnswers[t].correct&&this.displayedAnswers[t].userGuess?e=!0:(this.displayedAnswers[t].correct&&!this.displayedAnswers[t].userGuess||!this.displayedAnswers[t].correct&&this.displayedAnswers[t].userGuess)&&(e=!1);return e}_verifyAnswers(e){window.dispatchEvent(new CustomEvent("simple-toast-hide",{bubbles:!0,composed:!0,cancelable:!1,detail:!1}));let t=document.createElement("simple-icon-lite"),s={},i="simple-toast-show";window.HAXCMSToast&&(i="haxcms-toast-show",t.style.setProperty("--simple-icon-height","40px"),t.style.setProperty("--simple-icon-width","40px"),t.style.height="150px",t.style.marginLeft="8px");let r=this.checkAnswers();r?(this.__toastColor="green",this.__toastIcon=this.correctIcon,this.__toastText=this.correctText,import("./lib/confetti-container.js").then((e=>{setTimeout((()=>{this.shadowRoot.querySelector("#confetti").setAttribute("popped","")}),0)})),s.hat="party"):(this.__toastColor="red",this.__toastIcon=this.incorrectIcon,this.__toastText=this.incorrectText,s.fire=!0),t.icon=this.__toastIcon,t.style.marginLeft="16px",t.accentColor=this.__toastColor,t.dark=!0,window.dispatchEvent(new CustomEvent(i,{bubbles:!0,composed:!0,cancelable:!0,detail:{text:this.__toastText,accentColor:this.__toastColor,duration:3e3,slot:t,...s}}));let o={activityDisplay:"answered",objectName:this.quizName,resultSuccess:r};this.dispatchEvent(new CustomEvent("user-engagement",{bubbles:!0,composed:!0,cancelable:!1,detail:o}))}_computeDisplayedAnswers(e,t){if(void 0!==e&&null!=e&&e.length>0&&t&&!this._haxstate){let t=e;for(var s,i,r=t.length;0!==r;)i=Math.floor(Math.random()*r),s=t[r-=1],t[r]=t[i],t[i]=s;return t}return e}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}haxHooks(){return{editModeChanged:"haxeditModeChanged",activeElementChanged:"haxactiveElementChanged",preProcessNodeToContent:"haxpreProcessNodeToContent",preProcessInsertContent:"haxpreProcessInsertContent",inlineContextMenu:"haxinlineContextMenu"}}haxactiveElementChanged(e,t){t&&(this._haxstate=t)}haxeditModeChanged(e){this._haxstate=e}haxinlineContextMenu(e){e.ceButtons=[{icon:"icons:add",callback:"haxClickInlineAdd",label:"Add answer"},{icon:"icons:remove",callback:"haxClickInlineRemove",label:"Remove answer"}]}haxClickInlineAdd(e){this.resetAnswers();let t=this.answers;return t.push({label:"New answer",correct:!1}),this.answers=[...t],!0}haxClickInlineRemove(e){if(this.answers.length>0){this.resetAnswers();let e=this.answers;return e.pop(),this.answers=[...e],!0}}async haxpreProcessNodeToContent(e){if(e.answers)for(var t in this.innerHTML="",e.answers)if(e.answers[t]){let s=document.createElement("input");s.setAttribute("type","checkbox"),s.value=e.answers[t].label,e.answers[t].correct&&s.setAttribute("correct","correct"),e.appendChild(s)}return e}haxpreProcessInsertContent(e,t){return e.properties.answers&&(e.properties.answers=e.properties.answers.map((function(e){return e.userGuess&&delete e.userGuess,e}))),e}firstUpdated(e){if(super.firstUpdated&&super.firstUpdated(e),this.setAttribute("typeof","oer:Assessment"),this.children.length>0){let e=Array.from(this.querySelectorAll("input")),s=[];for(var t in e){let i={label:e[t].value,correct:null!=e[t].getAttribute("correct")};s.push(i)}this.answers=s,this.innerHTML=""}}}window.customElements.define(MultipleChoice.tag,MultipleChoice);export{MultipleChoice};