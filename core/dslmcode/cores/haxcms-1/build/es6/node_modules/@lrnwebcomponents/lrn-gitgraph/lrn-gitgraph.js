import{html as e,PolymerElement as t}from"../../@polymer/polymer/polymer-element.js";import"./lib/gitgraphjs/src/gitgraph.js";class LrnGitgraph extends t{static get template(){return e`
      <style>
        :host {
          display: block;
          overflow-x: scroll;
        }
      </style>
      <canvas id="gitGraph"></canvas>
    `}static get tag(){return"lrn-gitgraph"}static get properties(){return{commits:{type:Array,value:[]},template:{type:String,value:"blackarrow"},orientation:{type:String,value:"horizontal"},mode:{type:String,value:""},reverseArrow:{type:Boolean,value:!1},config:{type:Object}}}static get observers(){return["_commitsChanged(commits)"]}_commitsChanged(e){var t=this;if(t.config&&e.length>0){var r=new GitGraph(t.config),a=[];e.forEach((function(e){e.commits&&e.commits.forEach((function(t){t.branch=e.branch,a.push(t)}))})),console.log("befor",a),(a=(a=t._treeRemoveDuplicates(a)).sort((function(e,t){return new Date(t.date)-new Date(e.date)}))).reverse();var o=[];a.forEach((function(e,t){void 0===o[e.branch]&&(o[e.branch]=r.branch(e.branch)),o[e.branch].commit({sha1:e.commit,message:e.subject,author:e.author,tag:e.refs})}))}}_treeRemoveDuplicates(e){var t=[],r=[];return e.forEach((function(e){r.includes(e.commit)||(t.push(e),r.push(e.commit))})),t}ready(){super.ready();var e=this,t={template:e.template,reverseArrow:!1,orientation:e.orientation,element:e.shadowRoot.querySelector("#gitGraph")};""!==e.mode&&(t.mode=e.mode),e.config=t}}customElements.define(LrnGitgraph.tag,LrnGitgraph);export{LrnGitgraph};