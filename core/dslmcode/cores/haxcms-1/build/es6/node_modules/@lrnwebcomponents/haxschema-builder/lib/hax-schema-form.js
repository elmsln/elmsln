import{html as e,PolymerElement as a}from"../../../@polymer/polymer/polymer-element.js";import{HaxSchematizer as t,HaxElementizer as o}from"../../hax-body-behaviors/lib/HAXFields.js";import"../../simple-icon/simple-icon.js";import"../../simple-icon/lib/simple-icons.js";import"../../simple-icon/lib/simple-icon-button.js";class HaxSchemaForm extends a{constructor(){super(),import("../../../@polymer/paper-tabs/paper-tabs.js"),import("../../../@polymer/paper-tabs/paper-tab.js"),import("../../simple-fields/simple-fields.js"),import("../../simple-fields/lib/simple-fields-form.js"),import("../../code-editor/code-editor.js"),import("../../simple-fields/lib/simple-fields-field.js"),import("../../simple-picker/simple-picker.js"),import("../../simple-icon-picker/simple-icon-picker.js"),import("../../simple-colors/lib/simple-colors-picker.js")}static get template(){return e`
      <style>
        :host {
          display: block;
          background-color: #ffffff;
          overflow: hidden;
        }
        div.card.form-wrapper {
          margin: 0;
          padding: 0 16px 80px 16px;
          width: 100%;
          min-height: 160px;
          background-color: transparent;
          overflow: auto;
          height: 100%;
          box-shadow: 0 5px 5px rgba(0, 0, 0, 0.7);
        }

        simple-fields {
          width: 50%;
        }

        #modetabs {
          height: 64px;
          padding: 0px;
          margin: 16px 0 0 0;
          box-sizing: content-box;
          color: var(--hax-color-text, #000000);
          text-align: center;
          background-color: transparent;
          border-bottom: 1px solid var(--hax-color-border-outline);
          display: block;
          justify-content: space-evenly;
          --paper-tabs-selection-bar-color: var(
            --hax-color-accent1,
            --simple-colors-default-theme-light-blue-7
          );
          --paper-tabs: {
            background: transparent;
          };
        }

        #modetabs paper-tab {
          display: inline-flex;
          height: 100%;
          --paper-tab-ink: var(
            --hax-color-accent1,
            --simple-colors-default-theme-light-blue-7
          );
          --paper-tab: {
            font-size: 16px;
          };
        }
        #modetabs paper-tab button {
          min-width: unset;
          width: 100%;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
        }
        simple-fields {
          color: var(--hax-text-color);
          --simple-colors-picker-preview-size: 20px;
        }
      </style>
      <paper-tabs
        id="modetabs"
        selected="{{modeTab}}"
        attr-for-selected="data-mode"
      >
        <paper-tab id="configurebutton" data-mode="configure"
          ><button>Configure</button></paper-tab
        >
        <paper-tab id="advancedbutton" data-mode="advanced"
          ><button>Advanced</button></paper-tab
        >
      </paper-tabs>
      <div class="card form-wrapper">
        <simple-fields
          id="form"
          schema="[[schema]]"
          .schematizer="${t}"
          .elementizer="${o}"
          value="{{value}}"
        ></simple-fields>
      </div>
    `}static get tag(){return"hax-schema-form"}static get properties(){return{initialValue:{type:Object,notify:!0,value:{},observer:"_valueChanged"},value:{type:Object,notify:!0,value:{}},modeTab:{type:String,observer:"_editorModeChanged"},advancedForm:{type:Boolean,value:!1},canEditSource:{type:Boolean},formKey:{type:String,computed:"_computedFormKey(advancedForm)",observer:"_formKeyChanged"},schema:{type:Object,notify:!0},configureSchema:{type:Object,value:{schema:{}}},advancedSchema:{type:Object,value:{schema:{}}}}}_computedFormKey(e){return e?"advanced":"configure"}_formKeyChanged(e,a){e&&("advanced"===e?this.set("schema",this.advancedSchema):this.set("schema",this.configureSchema),this.notifyPath("schema.*"))}_valueChanged(e){if(e&&this.schema)for(var a in e)this.schema[a].value=e[a]}_editorModeChanged(e){e&&(this.advancedForm="advanced"===e)}addField(e,a,t="configure"){"configure"===t?(this.configureSchema.properties[e]=a,this.set("schema",this.configureSchema)):this.set("schema",this.advancedSchema),this.notifyPath("schema.*")}removeField(e,a="configure"){"configure"===a?(delete this.configureSchema.properties[e],this.set("schema",this.configureSchema)):(delete this.advancedSchema.properties[e],this.set("schema",this.advancedSchema)),this.notifyPath("schema.*")}}customElements.define(HaxSchemaForm.tag,HaxSchemaForm);export{HaxSchemaForm};