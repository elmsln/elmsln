/**
 * Copyright 2019 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as t,html as e,css as i,nothing as o}from"../../lit/index.js";import{SchemaBehaviors as r}from"../schema-behaviors/schema-behaviors.js";import{IntersectionObserverMixin as s}from"../intersection-element/lib/IntersectionObserverMixin.js";import{I18NMixin as a}from"../i18n-manager/lib/I18NMixin.js";class A11yGifPlayer extends(a(s(r(t)))){constructor(){super(),this.__gifLoaded=!1,this.disabled=!1,this.__playing=!1,this._updateFromSlot(),this.t={toggleAnimation:"Toggle animation"},this.registerLocalization({context:this,basePath:import.meta.url,locales:["es"]})}static get styles(){return[i`
        :host {
          display: block;
        }
        :host([hidden]) {
          display: none;
        }
        .sr-only {
          position: absolute;
          left: -9999999px;
          top: 0;
          width: 0;
          overflow: hidden;
        }
        #container {
          padding: 0;
          margin: 0;
          position: relative;
          border: var(--a11y-gif-player-border, none);
          border-radius: var(--a11y-gif-player-border-radius, 0);
        }
        img {
          width: 100%;
        }
        button {
          position: absolute;
          width: 100%;
          top: 0;
          left: 0;
          bottom: 0;
          right: 0;
          background-size: contain;
          background-color: var(--a11y-gif-player-button-bg, #cccccc);
        }
        button:active,
        button:focus,
        button:hover {
          border: var(--a11y-gif-player-focus-border, none);
          outline: var(--a11y-gif-player-outline, 3px solid);
        }
        button[disabled] {
          cursor: var(--a11y-gif-player-disabled-cursor, not-allowed);
        }
        button[aria-pressed="true"] {
          opacity: 0;
        }
        svg {
          position: absolute;
          top: 35%;
          left: 35%;
          width: var(--a11y-gif-player-arrow-size, 30%);
          height: var(--a11y-gif-player-arrow-size, 30%);
        }
        g {
          opacity: var(--a11y-gif-player-arrow-opacity, 0.5);
        }
        button:not([disabled]):active g,
        button:not([disabled]):hover g,
        button:not([disabled]):focus g {
          opacity: var(--a11y-gif-player-button-focus-opacity, 0.7);
        }
        polygon {
          fill: var(--a11y-gif-player-button-color, #000000);
          stroke: var(--a11y-gif-player-arrow-border-color, #ffffff);
          stroke-width: var(--a11y-gif-player-arrow-border-width, 15px);
        }
        text {
          fill: var(--a11y-gif-player-button-text-color, #ffffff);
        }
        #longdesc {
          position: absolute;
          left: 2px;
          bottom: 2px;
          width: calc(100% - 2px);
          font-size: 80%;
        }
      `]}__imageLoaded(t){this.__gifLoaded=!0}render(){return e`${this.elementVisible?e`
          <div id="container">
            <slot hidden></slot>
            <img
              src="${this.__gifLoaded&&this.__playing?this.src:this.srcWithoutAnimation}"
              alt="${this.alt}"
              loading="lazy"
              aria-describedby="${this.longdesc?"longdesc":""} ${(this.describedBy||"").trim()}"
              slot="summary"
            />
            ${this.__playing?e`<img
                  src="${this.src}"
                  alt=""
                  hidden
                  slot="summary"
                  @load="${this.__imageLoaded}"
                />`:o}

            <button
              id="button"
              aria-controls="gif"
              aria-pressed="${this.__playing?"true":"false"}"
              @click="${this.toggle}"
              ?disabled="${this.disabled||!this.src}"
              .style="background-image: url('${this.srcWithoutAnimation}')"
            >
              <svg
                id="svg"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 200 200"
              >
                <g>
                  <polygon points="30,20 30,180 170,100"></polygon>
                  <text x="50" y="115" font-size="40px">GIF</text>
                </g>
              </svg>
            </button>
            <a11y-details
              id="longdesc"
              ?hidden="${!this.src||!this.longdesc}"
              .style="opacity:${this.__playing?0:1}"
            >
              <div slot="summary">info</div>
              <div slot="details">${this.longdesc}</div>
            </a11y-details>
          </div>
        `:o} `}static get tag(){return"a11y-gif-player"}static get properties(){return{...super.properties,alt:{type:String},disabled:{type:Boolean},describedBy:{attribute:"described-by",type:String},longdesc:{type:String,attribute:"longdesc"},src:{type:String},srcWithoutAnimation:{type:String,attribute:"src-without-animation"},__playing:{type:Boolean},__gifLoaded:{type:Boolean}}}updated(t){super.updated(t),t.forEach(((t,e)=>{"elementVisible"===e&&this[e]&&import("../a11y-details/a11y-details.js")}))}get observer(){return new MutationObserver((()=>this._updateFromSlot()))}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this.observer.observe(this,{attributes:!1,childList:!0,subtree:!0}),window.addEventListener("beforeprint",(t=>{this.shadowRoot.querySelector("#longdesc").toggleOpen()})),window.addEventListener("afterprint",(t=>{this.shadowRoot.querySelector("#longdesc").toggleOpen()}))}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback(),this.observer.disconnect(),window.removeEventListener("beforeprint",(t=>{this.shadowRoot.querySelector("#longdesc").toggleOpen()})),window.removeEventListener("afterprint",(t=>{this.shadowRoot.querySelector("#longdesc").toggleOpen()}))}play(){this.__playing=!0}stop(){this.__playing=!1}toggle(){this.__playing?this.stop():this.play()}toggleAnimation(){this.__playing?this.stop():this.play()}_updateFromSlot(){let t=this.querySelector("img");if(t){let e=t.src||null,i=t.alt||null;e&&(this.srcWithoutAnimation=e),i&&(this.alt=i)}if(t=this.querySelector("simple-img"),t){let e=t.srcconverted||null,i=t.alt||null;e&&(this.srcWithoutAnimation=e),i&&(this.alt=i)}}static get haxProperties(){return decodeURIComponent(import.meta.url)+`/../lib/${this.tag}.haxProperties.json`}}customElements.define(A11yGifPlayer.tag,A11yGifPlayer);export{A11yGifPlayer};