import{LitElement as t,html as e,css as o}from"../../lit/index.js";import{remoteLinkBehavior as i}from"../utils/lib/remoteLinkBehavior.js";import{SimpleIconsetStore as n}from"../simple-icon/lib/simple-iconset.js";import{I18NMixin as s}from"../i18n-manager/lib/I18NMixin.js";import"../simple-icon/simple-icon.js";n.registerIconset("stopnoteicons",`${new URL("./stop-note.js",import.meta.url).href}/../lib/svgs/stopnoteicons/`);class StopNote extends(s(i(t))){static get styles(){return[o`
        :host {
          display: block;
          width: auto;
          --background-color: #f7f7f7;
          --accent-color: #d32f2f;
          margin-bottom: 20px;
        }

        simple-icon {
          --simple-icon-height: 100px;
          --simple-icon-width: 100px;
        }

        :host([icon="stopnoteicons:stop-icon"]) {
          --accent-color: #d8261c;
        }

        :host([icon="stopnoteicons:warning-icon"]) {
          --accent-color: #ffeb3b;
        }

        :host([icon="stopnoteicons:confirm-icon"]) {
          --accent-color: #81c784;
        }

        :host([icon="stopnoteicons:book-icon"]) {
          --accent-color: #21a3db;
        }

        .container {
          display: flex;
          width: auto;
        }

        .message_wrap {
          border-right: 7px solid var(--accent-color);
          padding: 10px 25px;
          flex: 1 1 auto;
          background-color: var(--background-color);
        }

        .main_message {
          font-size: 32px;
          margin-top: 10px;
        }

        .secondary_message {
          margin-top: 5px;
          font-size: 19.2px;
          width: 100%;
        }

        .link a {
          margin-top: 5px;
          font-size: 19.2px;
          float: left;
          clear: left;
          text-decoration: none;
        }

        .svg {
          display: flex;
          justify-content: center;
        }

        .svg_wrap {
          background-color: var(--accent-color);
          padding: 5px;
          width: auto;
        }
      `]}render(){return e`
      <div class="container">
        <div class="svg_wrap">
          <div class="svg">
            <simple-icon icon="${this.icon}" no-colorize></simple-icon>
          </div>
        </div>
        <div class="message_wrap">
          <div class="main_message" id="title">${this.title}</div>
          <div class="secondary_message">
            <slot></slot>
            <slot name="message"></slot>
          </div>
          ${this.url?e`
                <div class="link">
                  <a href="${this.url}" id="link">
                    ${this.t.moreInformation} &gt;
                  </a>
                </div>
              `:""}
        </div>
      </div>
    `}static get tag(){return"stop-note"}constructor(){super(),this.url=null,this.title="",this.icon="stopnoteicons:stop-icon",this.t={moreInformation:"More Information"},this.registerLocalization({context:this,basePath:import.meta.url,locales:["es"]})}static get properties(){return{...super.properties||{},title:{type:String,reflect:!0},url:{type:String},icon:{type:String,reflect:!0}}}updated(t){super.updated&&super.updated(t),t.forEach(((t,e)=>{"url"==e&&(this.remoteLinkURL=this[e])}))}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),this.remoteLinkTarget=this.shadowRoot.querySelector("#link")}haxHooks(){return{editModeChanged:"haxeditModeChanged",activeElementChanged:"haxactiveElementChanged"}}haxeditModeChanged(t){super.haxeditModeChanged&&super.haxeditModeChanged(t),this._haxstate=t}haxactiveElementChanged(t,e){super.haxactiveElementChanged&&super.haxactiveElementChanged(t,e);let o=this.shadowRoot.querySelector("#title");return e&&null===this.getAttribute("data-hax-lock")?o.setAttribute("contenteditable",!0):(o.removeAttribute("contenteditable"),this.title=o.innerText),!1}haxinlineContextMenu(t){t.ceButtons=[{icon:"image:style",callback:"haxtoggleIcon",label:"Toggle icon"}]}haxtoggleIcon(t){const e=["stopnoteicons:stop-icon","stopnoteicons:warning-icon","stopnoteicons:confirm-icon","stopnoteicons:book-icon"];let o=e[0];return e.lastIndexOf(this.icon)!=e.length-1&&(o=e[e.lastIndexOf(this.icon)+1]),this.icon=o,!0}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}}customElements.define(StopNote.tag,StopNote);export{StopNote};