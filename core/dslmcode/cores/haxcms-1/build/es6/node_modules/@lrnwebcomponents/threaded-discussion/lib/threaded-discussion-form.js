import{LitElement as t,html as e,css as o}from"../../../lit/index.js";import"../../simple-icon/lib/simple-icon-lite.js";import"../../simple-icon/lib/simple-icons.js";class ThreadedDiscussionForm extends t{static get styles(){return[o`
        :host {
          display: block;
          width: 100%;
          transition: all 0.5s ease-in-out;
        }
        :host([hidden]) {
          display: none;
        }
        label {
          flex: 0 0 0%;
          margin: 0;
          padding: 0;
          position: absolute;
          left: -99999px;
          width: 0;
          height: 0;
          overflow: hidden;
        }
        textarea {
          flex: 1 1 100%;
          height: var(--threaded-discussion-textarea-Height, 16px);
          opacity: var(--threaded-discussion-textarea-Opacity, 0);
          width: calc(
            100% - 2 * var(--threaded-discussion-comment-Padding, 10px)
          );
          padding: var(--threaded-discussion-comment-Padding, 10px);
          margin: 1px;
          border: none;
          resize: none;
          transition: all 0.5s ease-in-out;
          color: var(
            --threaded-discussion-textarea-Color,
            var(--threaded-discussion-Color, #4b4b4b)
          );
          line-height: var(
            --threaded-discussion-textarea-LineHeight,
            var(--threaded-discussion-LineHeight, 160%)
          );
          font-weight: var(--threaded-discussion-textarea-FontWeight);
          font-size: var(
            --threaded-discussion-textarea-FontSize,
            var(--threaded-discussion-FontSize, 14px)
          );
          font-family: var(
            --threaded-discussion-textarea-FontFamily,
            var(--threaded-discussion-FontFamily)
          );
        }
        textarea:focus,
        :host:focus-within textarea {
          height: var(--threaded-discussion-textarea-focus-Height, 100px);
          opacity: var(--threaded-discussion-textarea-focus-Opacity, 1);
        }
        form {
          display: flex;
          justify-content: space-between;
          align-items: flex-end;
        }
        .reply-form {
          margin: 1px;
        }
        button {
          flex: 0 0 auto;
          text-align: center;
          display: flex;
          align-items: center;
          justify-content: space-between;
          margin: 1px;
          min-height: 24px;
          color: var(--threaded-discussion-comment-button-Color, #fff);
          font-weight: var(--threaded-discussion-button-FontWeight);
          font-size: var(
            --threaded-discussion-button-FontSize,
            var(--threaded-discussion-FontSize, 14px)
          );
          font-family: var(--threaded-discussion-button-FontFamily);
          border-radius: var(--threaded-discussion-button-BorderRadius, 3px);
        }
        .reply-form button {
          color: var(--threaded-discussion-reply-button-Color, #4b4b4b);
          background-color: var(
            --threaded-discussion-reply-button-BackgroundColor,
            #fff
          );
          border: 1px solid
            var(--threaded-discussion-reply-button-BorderColor, #4b4b4b);
        }
        .reply-form button:focus,
        .reply-form button:hover {
          color: var(--threaded-discussion-reply-button-focus-Color, #222);
          background-color: var(
            --threaded-discussion-reply-button-focus-BackgroundColor,
            #fff
          );
          border: 1px solid
            var(--threaded-discussion-reply-button-focus-BorderColor, #222);
        }
        .comment-form button {
          font-weight: var(--threaded-discussion-comment-button-FontWeight);
          font-size: var(--threaded-discussion-comment-button-FontSize);
          font-family: var(--threaded-discussion-button-FontFamily);
          color: var(--threaded-discussion-comment-button-Color, #fff);
          background-color: var(
            --threaded-discussion-comment-button-BackgroundColor,
            #4b4b4b
          );
          border: 1px solid
            var(--threaded-discussion-comment-button-BorderColor, #4b4b4b);
        }
        .comment-form button:focus,
        .comment-form button:hover {
          color: var(--threaded-discussion-comment-button-focus-Color, #fff);
          background-color: var(
            --threaded-discussion-comment-button-focus-BackgroundColor,
            #222
          );
          border: 1px solid
            var(--threaded-discussion-comment-button-focus-BorderColor, #222);
        }
        button simple-icon-lite {
          margin-left: 5px;
        }
      `]}render(){return e`
      <form 
        action="${this.submit}"
        ?hidden=${this.hidden||this.disabled}
        class="${this.thread?"reply-form":"comment-form"}"
        @submit="${this._handleSubmit}">
        <label for="${this.field}">${this.textareaLabel}</label>
        <textarea
          id="${this.field}"
          name="${this.field}"
          aria-describedby="${this.thread}"
        ></textarea>
        <button type="submit">
          ${this.buttonLabel}
          <simple-icon-lite  
            aria-hidden="true" 
            ?hidden="${!this.icon}"
            icon="${this.icon}"></simple-icon-lite>
        </button>
      </div>
    `}static get tag(){return"threaded-discussion-form"}static get properties(){return{button:{type:String},buttonLabel:{type:String,attribute:"button-label",reflect:!0},demo:{type:Boolean},disabled:{type:Boolean,attribute:"disabled",reflect:!0},field:{type:String},hidden:{type:Boolean,attribute:"hidden",reflect:!0},icon:{type:String,attribute:"icon",reflect:!0},submit:{type:String},textareaLabel:{type:String,attribute:"textarea-label",reflect:!0},thread:{type:String}}}constructor(){super(),this.disabled=!1,this.hidden=!1}_handleSubmit(t){if(t.preventDefault(),this.demo)return this.dispatchEvent(new CustomEvent("comment-demo",{bubbles:!0,cancelable:!0,composed:!0,detail:{textarea:this.shadowRoot.querySelector("textarea"),thread:this.thread}})),!1;this.dispatchEvent(new CustomEvent("comment-submitted",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))}}customElements.define(ThreadedDiscussionForm.tag,ThreadedDiscussionForm);export{ThreadedDiscussionForm};