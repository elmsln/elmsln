import{LitElement as t,html as e,css as i}from"../../../lit/index.js";import{winEventsElement as a,camelCaseToDash as o,wipeSlot as s,normalizeEventPath as n,localStorageSet as l}from"../../utils/utils.js";import{HaxSchematizer as r,HaxElementizer as d}from"../../hax-body-behaviors/lib/HAXFields.js";import{SimpleTourFinder as c}from"../../simple-popover/lib/SimpleTourFinder.js";import{HAXStore as h}from"./hax-store.js";import{autorun as p,toJS as u}from"../../../mobx/dist/mobx.esm.js";import{HaxComponentStyles as m,HaxTrayDetail as g}from"./hax-ui-styles.js";import"../../simple-fields/simple-fields.js";import"../../simple-fields/lib/simple-fields-tab.js";import"../../simple-icon/lib/simple-icons.js";import"../../hax-iconset/lib/simple-hax-iconset.js";import"./hax-tray-upload.js";import"./hax-app-browser.js";import"./hax-gizmo-browser.js";import"./hax-gizmo-browser.js";import"./hax-view-source.js";import"./hax-stax-browser.js";import"./hax-map.js";import"./hax-preferences-dialog.js";import"./hax-tray-button.js";import"./hax-toolbar-menu.js";import{I18NMixin as v}from"../../i18n-manager/lib/I18NMixin.js";import{Undo as b}from"../../undo-manager/undo-manager.js";import"../../iframe-loader/lib/loading-indicator.js";import"../../simple-toolbar/lib/simple-toolbar-menu-item.js";class HaxTray extends(v(c(a(t)))){static get tag(){return"hax-tray"}constructor(){super(),this.tourName="hax",this.__winEvents={"can-redo-changed":"_redoChanged","can-undo-changed":"_undoChanged","hax-drop-focus-event":"_expandSettingsPanel"},this.t={structure:"Outline",structureTip:"View Page Structure",editSelected:"Edit selected",edit:"Edit",save:"Save",move:"Move",close:"Close",moveMenu:"Toggles Menu Aligmnent",menuAlignment:"Menu Alignment",menuLeft:"Move",menuRight:"Move",menuPosition:"Menu position",changeSideVisually:"Change which side of the screen the menu is affixed to visually.",expand:"Expand",collapse:"Collapse",menuSize:"Menu size",menuSizeDescription:"Expand or collapse the menu visually.",takeATour:"Help",settings:"Settings",source:"Source",undo:"Undo",redo:"Redo",media:"Media",blocks:"Blocks",cancel:"Cancel",cancelWithoutSaving:"Cancel without saving",configure:"Configure",advanced:"Advanced",layout:"Layout",alignment:"Alignment",left:"Left",center:"Center",right:"Right",search:"Search",templates:"Templates",width:"Width"},this.registerLocalization({context:this,namespace:"hax",updateCallback:"_updateTrayDetail"}),this._initial=!0,this.activeValue={settings:{layout:{__position:"hax-align-left",__scale:100},configure:{},advanced:{}}},this.collapsed=!0,this.activeTab="item-0",this.activeSchema=[],this.canUndo=!1,this.canRedo=!1,this.trayDetail="content-edit",this.activeTagName="",this.traySizeIcon="hax:arrow-expand-right",this.__setup=!1,setTimeout((()=>{this.addEventListener("hax-tray-button-click",this._processTrayEvent.bind(this))}),0),p((()=>{this.activeGizmo=u(h.activeGizmo)})),p((()=>{this.activeNode=u(h.activeNode)})),p((()=>{this.elementAlign=u(h.elementAlign)})),p((()=>{this.tourOpened=u(h.tourOpened)})),p((()=>{this.loading=!u(h.appStoreLoaded)})),p((()=>{this.globalPreferences=u(h.globalPreferences),this.haxUiTheme=(this.globalPreferences||{}).haxUiTheme||"hax",document.body.setAttribute("hax-ui-theme",this.haxUiTheme)})),p((()=>{this.editMode=u(h.editMode)}))}_expandSettingsPanel(t){this.shadowRoot.querySelector("#content-edit").click()}_redoChanged(t){this.canRedo=t.detail.value}_undoChanged(t){this.canUndo=t.detail.value}static get styles(){return[...super.styles||[],...g,...m,i`
        :host {
          z-index: var(--hax-ui-focus-z-index - 1);
          top: 0;
          font-family: var(--hax-ui-font-family);
          font-size: var(--hax-ui-font-size);
          color: var(--hax-ui-color);
          transition: 0s color linear 0s;
        }
        :host(:focus-within),
        :host(:hover) {
          z-index: var(--hax-ui-focus-z-index);
        }
        .wrapper {
          position: fixed;
          display: none;
          align-items: stretch;
          flex-direction: row-reverse;
          opacity: 0;
          visibility: visible;
          pointer-events: none;
          overflow: hidden;
          top: 0;
          bottom: 0;
          width: var(--hax-tray-width);
          height: calc(100vh - 48px);
          max-height: calc(100vh - 48px);
          transition: 0.2s opacity ease-in-out 0s;
          z-index: var(--hax-ui-focus-z-index);
        }
        :host([element-align="left"]) .wrapper {
          left: -1000px;
          flex-direction: row;
        }
        :host([edit-mode]) .wrapper {
          opacity: 1;
          visibility: visible;
          pointer-events: all;
          display: flex;
        }
        :host([edit-mode][element-align="left"]) .wrapper {
          left: 0px;
        }
        :host([edit-mode][element-align="right"]) .wrapper {
          right: 0px;
        }
        :host([edit-mode][collapsed]) .wrapper {
          width: unset;
        }
        :host([edit-mode]) .wrapper.full-panel {
          width: unset;
          left: 0;
          right: 0;
        }
        :host([edit-mode]) .wrapper.full-panel .detail {
          max-width: unset;
        }
        #menubar {
          display: inline-flex;
          flex-direction: column;
          align-items: stretch;
          width: var(--hax-tray-menubar-min-width);
          overflow: visible;
          flex: 0 0 auto;
          z-index: 6;
          background-color: var(--hax-ui-background-color);
        }
        :host([collapsed]) #menubar {
          width: unset;
        }
        #menubar > * {
          background-color: var(--hax-ui-background-color);
        }
        #menubar > *::part(button) {
          padding: var(--hax-ui-spacing-xs);
        }
        #menubar > *::part(label) {
          opacity: 0;
          margin: 0px;
          width: 0%;
          font-size: 10px;
          padding: 0px;
          visibility: hidden;
          overflow: hidden;
          display: inline-block;
          text-align: left;
          transition: 0.2s width ease-in-out 0s, 0.2s margin ease-in-out 0s,
            0.2s padding ease-in-out 0s, 0s opacity linear 0.2s,
            0s visibility linear 0.2s;
        }
        :host([collapsed]) #menubar > *::part(label) {
          opacity: 1;
          width: 100%;
          visibility: visible;
          padding: 0px var(--hax-ui-spacing-sm);
          overflow: unset;
          transition: 0.2s width ease-in-out 0s, 0.2s margin ease-in-out 0s,
            0.2s padding ease-in-out 0s, 0s opacity linear 0s,
            0s visibility linear 0s, 0s overflow linear 0.2s;
        }
        loading-indicator {
          --loading-indicator-background-color: var(
            --simple-colors-default-theme-accent-2,
            grey
          );
          --loading-indicator-color: var(
            --simple-colors-default-theme-accent-10,
            black
          );
        }
        .detail,
        #tray-detail {
          flex: 1 1 auto;
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
        .detail {
          opacity: 1;
          visibility: visible;
          pointer-events: all;
          transition: 0.2s opacity ease-in-out 0s, 0.2s width ease-in-out 0s,
            0.2s visibility ease-in-out 0s, 0s border linear;
          border: 1px solid var(--hax-ui-border-color);
          background-color: var(--hax-ui-background-color);
          transition: 0.2s width ease-in-out 0s;
          max-height: 100vh;
          max-width: calc(
            var(--hax-tray-width) - var(--hax-tray-menubar-min-width)
          );
          overflow-x: auto;
        }
        :host([collapsed]) .detail {
          width: 0px;
          overflow: hidden;
          opacity: 0;
          visibility: hidden;
          pointer-events: none;
          max-height: 100vh;
          overflow-y: auto;
        }
        #tray-detail {
          width: auto;
          padding: 0 var(--hax-ui-spacing) var(--hax-ui-spacing);
          overflow-y: auto;
        }
        #haxcancelbutton::part(dropdown-icon) {
          display: none;
        }
        .tray-detail-titlebar {
          background-color: var(--hax-ui-color-accent);
          padding: var(--hax-ui-spacing-sm) var(--hax-ui-spacing);
          margin: 0 calc(0px - var(--hax-ui-spacing)) var(--hax-ui-spacing);
          display: flex;
          align-items: center;
          justify-content: space-between;
          height: var(--simple-modal-titlebar-height, unset);
          line-height: var(--simple-modal-titlebar-line-height, unset);
          position: sticky;
          z-index: 2;
          top: 0;
        }
        .tray-detail-titlebar h4 {
          flex: 1 1 auto;
          font-size: var(--hax-ui-font-size);
          font-family: var(--hax-ui-font-family);
        }
        #toggle-tray-size {
          flex: 0 0 auto;
        }
        hax-tray-button,
        hax-app-browser,
        hax-gizmo-browser {
          transition: 0.2s all ease-in-out;
          transition: 0s color linear !important;
          transition: 0s background-color linear !important;
          transition: 0s border-color linear !important;
          visibility: visible;
        }
        hax-tray-button:not(:defined),
        hax-app-browser:not(:defined),
        hax-gizmo-browser:not(:defined) {
          visibility: hidden;
        }
        hax-tray-upload {
          flex: 0 0 auto;
        }
        *[hidden] {
          display: none;
        }
        :host([element-align="right"]) #button {
          right: 0;
        }
        :host([element-align="left"]) #button {
          left: 0;
        }

        #button {
          position: fixed;
          top: 0;
          visibility: visible;
          margin: var(--hax-ui-spacing-xs);
        }
        :host([edit-mode]) #button {
          visibility: hidden;
          opacity: 0;
        }
        #button:hover {
          opacity: 1;
        }
        /** This is mobile layout for controls */
        @media screen and (max-width: 800px) {
          :host {
            width: 100%;
            z-index: calc(var(--hax-ui-focus-z-index) + 3);
          }
          .wrapper {
            width: unset;
            top: -1000px;
            left: 0px;
            right: 0px;
            flex-direction: column;
          }
          :host([edit-mode]) .wrapper {
            top: 0;
          }
          :host([collapsed]) .wrapper {
            height: var(--hax-tray-menubar-min-height);
            overflow-y: visible;
          }
          :host([element-align="left"]) .wrapper {
            left: -1000px;
            flex-direction: column;
          }
          #menubar {
            position: sticky;
            flex-direction: row;
            left: 0;
            top: 0;
            height: auto;
            flex: 0 0 auto;
            width: 100%;
          }
          #menubar > * {
            flex: 1 0 auto;
            min-width: var(--hax-tray-menubar-min-width);
          }
          #menubar > *::part(button) {
            min-width: var(--hax-tray-menubar-min-width);
            justify-content: space-around;
          }
          #menubar > *::part(label) {
            display: none;
          }
          #haxMenuAlign {
            display: none;
          }
          .detail {
            width: 100%;
            position: relative;
            flex: 1 1 100%;
          }
          :host([collapsed]) .detail {
            flex: 0 0 0px;
          }
        }
        @media screen and (max-width: 600px) {
          :host([edit-mode]) .hide-small {
            display: none;
          }
        }
      `]}get trayStatus(){let t=this.collapsed?"collapsed":"view-source"==this.trayDetail?"full-panel":"side-panel";return h.trayStatus=t,h.trayDetail=this.trayDetail,t}render(){return e`
      ${this.panelOpsTemplate}
      <div class="wrapper ${this.trayStatus}">
        ${this.menuToolbarTemplate}
        <div class="detail">
          <loading-indicator
            ?loading="${this.loading}"
          ></loading-indicator>
          ${this.trayDetailTemplate}
        </div>
      </div>
    `}get panelOpsTemplate(){return this.hidePanelOps?"":e`
          <hax-tray-button
            large
            voice-command="edit page"
            .data-opened="${this.editMode}"
            @click="${this._clickEditButton}"
            icon="create"
            id="button"
            feature
            show-text-label
            show-tooltip
            label="${this.editMode?this.t.save:this.t.edit}"
          ></hax-tray-button>
        `}get toolbarsTemplate(){return e`${this.opsToolbarTemplate}${this.trayToolbarTemplate}`}get menuToolbarTemplate(){return e` <div id="menubar" class="collapse-menu">
      ${this.saveButtons} ${this.doButtons} ${this.contentButtons}
      <slot name="tray-buttons-pre"></slot>
      ${this.moreButtons}${this.menuButtons}
    </div>`}get menuButtons(){return e`
        <hax-tray-button
          show-text-label
          show-tooltip
          align-horizontal="${this.collapsed?"left":"center"}"
          id="haxMenuAlign"
          event-name="toggle-element-align"
          icon="arrow-${"left"==this.elementAlign?"forward":"back"}"
          label="${"left"==this.elementAlign?this.t.menuRight:this.t.menuLeft}"
          index="${"left"==this.elementAlign?"1":"0"}"
          tooltip="${this.t.moveMenu} ${"left"==this.elementAlign?this.t.right:this.t.left}"
        >
        </hax-tray-button>
    </div>
    `}get saveButtons(){return this.hidePanelOps?"":e`
          <hax-tray-button
            @click="${this._clickSaveButton}"
            icon="save"
            icon-position="left"
            id="haxsavebutton"
            label="${this.editMode?this.t.save:this.t.edit}"
            event-name="save"
            voice-command="save page"
            show-text-label
            show-tooltip
            align-horizontal="${this.collapsed?"left":"center"}"
          ></hax-tray-button>
          <hax-tray-button
            icon="cancel"
            id="haxcancelbutton"
            label="${this.t.cancel}"
            icon-position="left"
            show-text-label
            show-tooltip
            align-horizontal="${this.collapsed?"left":"center"}"
          ></hax-tray-button>
        `}get doButtons(){return e` <hax-tray-button
        icon="icons:undo"
        ?disabled="${!this.canUndo}"
        label="${this.t.undo}"
        event-name="undo"
        voice-command="undo"
        data-simple-tour-stop
        data-stop-title="label"
        icon-position="left"
        show-text-label
        show-tooltip
        align-horizontal="${this.collapsed?"left":"center"}"
      >
        <div slot="tour" data-stop-content>
          Undo the previous operation in the content, whether typing or adding a
          widget.
        </div>
      </hax-tray-button>
      <hax-tray-button
        icon="icons:redo"
        ?disabled="${!this.canRedo}"
        label="${this.t.redo}"
        event-name="redo"
        voice-command="redo"
        data-simple-tour-stop
        data-stop-title="label"
        icon-position="left"
        show-text-label
        show-tooltip
        align-horizontal="${this.collapsed?"left":"center"}"
      >
        <div slot="tour" data-stop-content>
          Redo the last action that you hit Undo on.
        </div>
      </hax-tray-button>`}get contentButtons(){return e` <hax-tray-button
        event-name="content-add"
        icon="add-box"
        id="content-add"
        label="${this.t.blocks}"
        voice-command="select blocks (menu)"
        data-simple-tour-stop
        data-stop-title="label"
        controls="tray-detail"
        toggles
        ?toggled="${!this.collapsed&&"content-add"===this.trayDetail}"
        icon-position="left"
        show-text-label
        show-tooltip
        align-horizontal="${this.collapsed?"left":"center"}"
      >
        <div slot="tour" data-stop-content>
          When you want to add any content to the page from text, to images, to
          anything more advanced; you can always find items to add under the Add
          content menu. Click to expand, then either drag and drop items into
          the page or click and have them placed near whatever you are actively
          working on.
        </div>
      </hax-tray-button>
      <hax-tray-button
        event-name="media-add"
        icon="image:collections"
        id="media-add"
        label="${this.t.media}"
        voice-command="select media (menu)"
        data-simple-tour-stop
        data-stop-title="label"
        controls="tray-detail"
        toggles
        ?toggled="${!this.collapsed&&"media-add"===this.trayDetail}"
        icon-position="left"
        show-text-label
        show-tooltip
        align-horizontal="${this.collapsed?"left":"center"}"
      >
        <div slot="tour" data-stop-content>
          Search for media and content anywhere that your copy of HAX has access
          to. Pick what to search, perform the search and then click or drag the
          item into the contnet.
        </div>
      </hax-tray-button>
      <hax-tray-button
        event-name="content-edit"
        icon="build"
        id="content-edit"
        label="${this.t.edit}"
        ?disabled="${!this.activeTagName||""==this.activeTagName||!this.activeNode||!this.activeNode.tagName}"
        voice-command="(modify)(configure)(edit) selected"
        data-simple-tour-stop
        data-stop-title="label"
        controls="tray-detail"
        tooltip="${this.t.editSelected} ${this.activeTagName}"
        toggles
        ?toggled="${!this.collapsed&&"content-edit"===this.trayDetail}"
        icon-position="left"
        show-text-label
        show-tooltip
        align-horizontal="${this.collapsed?"left":"center"}"
      >
        <div slot="tour" data-stop-content>
          When you want to add any content to the page from text, to images, to
          anything more advanced; you can always find items to add under the Add
          content menu. Click to expand, then either drag and drop items into
          the page or click and have them placed near whatever you are actively
          working on.
        </div>
      </hax-tray-button>
      <hax-tray-button
        event-name="content-map"
        icon="icons:toc"
        id="content-map"
        label="${this.t.structure}"
        voice-command="select structure (menu)"
        data-simple-tour-stop
        data-stop-title="label"
        controls="tray-detail"
        toggles
        ?toggled="${!this.collapsed&&"content-map"===this.trayDetail}"
        icon-position="left"
        show-text-label
        show-tooltip
        align-horizontal="${this.collapsed?"left":"center"}"
      >
        <div data-stop-content>
          This is a simple list of all the block areas of the page that are
          clickable to jump through items quickly as well as review some simple
          overview stats.
        </div>
      </hax-tray-button>`}get moreButtons(){return e`<hax-tray-button
        id="exportbtn"
        icon="code"
        label="${this.t.source}"
        event-name="view-source"
        voice-command="view (page) source"
        data-simple-tour-stop
        data-stop-title="label"
        icon-position="left"
        show-text-label
        show-tooltip
        align-horizontal="${this.collapsed?"left":"center"}"
      >
        <div data-stop-content>
          Every change you make in HAX is ultimately writing HTML. Know HTML?
          Awesome, pop open the source view and make any changes you like. HTML
          is always behind the scenes ensuring that content is portable, well
          formatted and easy to read.
        </div>
      </hax-tray-button>
      <hax-tray-button
        ?hidden="${this.hidePreferencesButton}"
        id="advanced-settings"
        event-name="advanced-settings"
        icon="settings"
        label="${this.t.settings}"
        voice-command="select settings (menu)"
        data-simple-tour-stop
        data-stop-title="label"
        controls="tray-detail"
        toggles
        ?toggled="${!this.collapsed&&"advanced-settings"===this.trayDetail}"
        icon-position="left"
        show-text-label
        show-tooltip
        align-horizontal="${this.collapsed?"left":"center"}"
      >
        <div data-stop-content>User preferences for customizing HAX</div>
      </hax-tray-button>
      <hax-tray-button
        event-name="${this.tourOpened?"stop-tour":"start-tour"}"
        icon="help"
        label="${this.t.takeATour}"
        voice-command="start tour"
        toggles
        ?toggled="${!this.collapsed&&this.tourOpened}"
        icon-position="left"
        show-text-label
        show-tooltip
        align-horizontal="${this.collapsed?"left":"center"}"
      ></hax-tray-button> `}get trayDetailTemplate(){return e` <div
      id="tray-detail"
      aria-live="polite"
      aria-disabled="${this.collapsed?"true":"false"}"
      tabindex="${this.collapsed?"-1":"0"}"
      selected-detail="${this.trayDetail}"
    >
      <div class="tray-detail-titlebar">
        <h4>
          ${this.trayLabel||`${this.t.editSelected} ${this.activeTagName}`}
        </h4>
        <hax-tray-button
          voice-command="collapse menu"
          id="toggle-tray-size"
          event-name="toggle-tray-size"
          icon="close"
          label="${this.t.close}"
        >
        </hax-tray-button>
      </div>
      ${this.viewSourceTemplate} ${this.advancedSettingsTemplate}
      ${this.contentMapTemplate} ${this.contentEditTemplate}
      ${this.contentAddTemplate} ${this.mediaTemplate}
    </div>`}get viewSourceTemplate(){return e` <hax-view-source
      id="view-source"
      ?hidden="${"view-source"!==this.trayDetail}"
    ></hax-view-source>`}get advancedSettingsTemplate(){return e` <hax-preferences-dialog
      ?hidden="${"advanced-settings"!==this.trayDetail}"
    ></hax-preferences-dialog>`}get contentEditTemplate(){return e` <simple-fields
      id="settingsform"
      disable-responsive
      code-theme="${"system"==this.haxUiTheme?"auto":"haxdark"==this.haxUiTheme?"vs-dark":"vs"}"
      ?hidden="${"content-edit"!==this.trayDetail}"
    ></simple-fields>`}get contentAddTemplate(){let t="content-add"!==this.trayDetail;return e` <hax-gizmo-browser
        id="gizmobrowser"
        ?hidden="${t}"
      ></hax-gizmo-browser>
      <h5 ?hidden="${t}">${this.t.templates}</h5>
      <hax-stax-browser
        id="staxbrowser"
        ?hidden="${t}"
      ></hax-stax-browser>`}get contentMapTemplate(){return e`<hax-map
      controls="content-map"
      ?hidden="${"content-map"!==this.trayDetail}"
    ></hax-map>`}get mediaTemplate(){let t="media-add"!==this.trayDetail;return e` <hax-tray-upload ?hidden="${t}"></hax-tray-upload>
      <h5 ?hidden="${t}">${this.t.search}</h5>
      <hax-app-browser id="appbrowser" ?hidden="${t}"></hax-app-browser>`}__simpleFieldsClick(t){try{this.activeTab=this.shadowRoot.querySelector("#settingsform").shadowRoot.querySelector("simple-fields").activeTab}catch(t){this.activeTab="item-0"}}_refreshAddData(){this.shadowRoot.querySelector("#gizmobrowser").resetList(u(h.gizmoList)),this.shadowRoot.querySelector("#staxbrowser").staxList=[...u(h.staxList)]}_processTrayEvent(t){var e=n(t)[0],i=t.detail.eventName;switch(this.collapsed||this.trayDetail!==i||(i="toggle-tray-size"),i){case"insert-stax":this.dispatchEvent(new CustomEvent("hax-insert-content-array",{bubbles:!0,cancelable:!0,composed:!0,detail:e.stax}));break;case"insert-tag":let i,a={tag:t.detail.value},o=h.haxSchemaFromTag(t.detail.value);if(e.getAttribute("data-demo-schema")&&o&&o.demoSchema&&o.demoSchema[0])i=o.demoSchema[0];else{let t=JSON.parse(e.getAttribute("event-properties")),o=e.getAttribute("event-content");null==t&&(t={}),null==o&&(o=""),i=h.haxElementPrototype(a,t,o)}this.dispatchEvent(new CustomEvent("hax-insert-content",{bubbles:!0,cancelable:!0,composed:!0,detail:i}));break;case"advanced-settings":case"content-map":case"content-edit":case"content-add":case"media-add":this.trayDetail=t.detail.eventName,this.collapsed=!1;break;case"toggle-element-align":let s=["left","right"],n=s[t.detail.index]?s[t.detail.index]:"right";t.detail.index>1&&(this.collapsed=!0),this.style.setProperty("--hax-tray-custom-y",null),this.style.setProperty("--hax-tray-custom-x",null),h.elementAlign=n,l("hax-tray-elementAlign",n);break;case"toggle-tray-size":this.collapsed=!this.collapsed;break;case"start-tour":this.startTour();break;case"stop-tour":window.SimpleTourManager.requestAvailability().stopTour("hax");break;case"undo":h.activeHaxBody.undo();break;case"redo":h.activeHaxBody.redo();break;case"view-source":this.trayDetail=t.detail.eventName,this.shadowRoot.querySelector("#view-source").openSource(),this.collapsed=!1}}startTour(){this.__tour=this.__tour||window.SimpleTourManager.requestAvailability(),window.addEventListener("tour-changed",this._handleTourChanged.bind(this)),this.__tour.startTour("hax")}stopTour(){this.__tour=this.__tour||window.SimpleTourManager.requestAvailability(),this.__tour.stopTour("hax"),window.removeEventListener("tour-changed",this._handleTourChanged.bind(this))}_handleTourChanged(t){this.tourOpened=t.detail.active==this.tourName}static get properties(){return{...super.properties,offsetMargin:{type:String,attribute:"offset-margin"},collapsed:{type:Boolean,reflect:!0},traySizeIcon:{type:String},loading:{type:Boolean,reflect:!0},activeValue:{type:Object},activeSchema:{type:Object},elementAlign:{type:String,reflect:!0,attribute:"element-align"},light:{type:Boolean,reflect:!0},canUndo:{type:Boolean,attribute:"can-undo"},canRedo:{type:Boolean,attribute:"can-redo"},haxUiTheme:{type:String},hidePreferencesButton:{type:Boolean,reflect:!0,attribute:"hide-preferences-button"},hidePanelOps:{type:Boolean,reflect:!0,attribute:"hide-panel-ops"},globalPreferences:{type:Object},activeNode:{type:Object},activeTagName:{type:String},activeGizmo:{type:Object},editMode:{type:Boolean,reflect:!0,attribute:"edit-mode"},trayDetail:{type:String,reflect:!0,attribute:"tray-detail"},trayLabel:{type:String},tourOpened:{type:String},__tour:{type:Object}}}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),this.__setup||(this.shadowRoot.querySelector("#settingsform").schematizer=r,this.shadowRoot.querySelector("#settingsform").elementizer=d,setTimeout((()=>{this.shadowRoot.querySelector(".wrapper").style.margin=this.offsetMargin}),1e3),this.__setup=!0,this.shadowRoot.querySelector("#settingsform").addEventListener("click",this.__simpleFieldsClick.bind(this)),this.shadowRoot.querySelector("#settingsform").addEventListener("value-changed",this.__valueChangedEvent.bind(this)),this.dispatchEvent(new CustomEvent("hax-register-core-piece",{bubbles:!0,cancelable:!0,composed:!0,detail:{piece:"haxTray",object:this}})),this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: (collapse)(open)(expand)(toggle) Blocks (menu)",context:this.shadowRoot.querySelector("#content-add"),callback:"click"}})),this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: (collapse)(open)(expand)(toggle) element settings (menu)",context:this.shadowRoot.querySelector("#advanced-settings"),callback:"click"}})),this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: (collapse)(open)(expand)(toggle) search (menu)",context:this.shadowRoot.querySelector("#media-add"),callback:"click"}})))}async updated(t){super.updated&&super.updated(t),t.forEach((async(t,e)=>{"editMode"==e&&(this.editMode&&await h.refreshActiveNodeForm(),this._editModeChanged(this.editMode)),"offsetMargin"==e&&setTimeout((()=>{this.shadowRoot.querySelector(".wrapper").style.margin=this.offsetMargin}),0),"trayDetail"==e&&this._updateTrayDetail(this[e]),"collapsed"==e&&this[e]&&this._editModeChanged(this.editMode),"activeGizmo"==e&&"view-source"!==this.trayDetail&&(this.activeGizmo?(this.activeTagName=this.activeGizmo.title,t&&"content-edit"===this.trayDetail||"content-map"===this.trayDetail||(this.trayDetail="content-edit")):["content-add","content-map"].includes(this.trayDetail)||(this.trayDetail="content-add")),"activeNode"==e&&this.activeNode&&this.activeNode.tagName&&this.editMode&&await h.refreshActiveNodeForm()}))}async _setupForm(){this.loading=!0;let t=this.activeNode;if(this._initial=!0,this.activeValue={settings:{layout:{__position:"hax-align-left",__scale:100},configure:{},advanced:{}}},this.shadowRoot.querySelector("#settingsform").fields=[],this.shadowRoot.querySelector("#settingsform").value={},t&&t.tagName&&h.elementList[t.tagName.toLowerCase()]){let i={...h.elementList[t.tagName.toLowerCase()]};for(var e in void 0===i.gizmo.title?this.humanName=t.tagName.replace("-"," ").toLowerCase():this.humanName=i.gizmo.title,this.activeHaxElement.properties)i.settings.configure.forEach((t=>{t.property===e&&(this.activeValue.settings.configure[e]=this.activeHaxElement.properties[e]),t.attribute===e&&(this.activeValue.settings.configure[e]=this.activeHaxElement.properties[e]),t.slot===e&&(this.activeValue.settings.configure[e]=this.activeHaxElement.properties[e])})),i.settings.advanced.forEach((t=>{t.property===e&&(this.activeValue.settings.advanced[e]=this.activeHaxElement.properties[e]),t.attribute===e&&(this.activeValue.settings.advanced[e]=this.activeHaxElement.properties[e]),t.slot===e&&(this.activeValue.settings.advanced[e]=this.activeHaxElement.properties[e])}));let a=document.createElement("div");a.innerHTML=this.activeHaxElement.content,a.childNodes.forEach((t=>{1===t.nodeType&&"undefined"!==t.innerHTML&&(i.settings.configure.forEach((e=>{e.slot===t.getAttribute("slot")?this.activeValue.settings.configure[e.slot]=t.innerHTML:""!=e.slot||null!=t.getAttribute("slot")&&"null"!=t.getAttribute("slot")||(this.activeValue.settings.configure[e.slot]=t.innerHTML)})),i.settings.advanced.forEach((e=>{e.slot===t.getAttribute("slot")?this.activeValue.settings.advanced[e.slot]=t.innerHTML:""!=e.slot||null!=t.getAttribute("slot")&&"null"!=t.getAttribute("slot")||(this.activeValue.settings.advanced[e.slot]=t.innerHTML)})))})),""!=t.style.width?this.activeValue.settings.layout.__scale=t.style.width.replace("%",""):this.activeValue.settings.layout.__scale=100,"block"==t.style.display&&"0px auto"==t.style.margin&&"right"==t.style.float?this.activeValue.settings.layout.__position="hax-align-right":"block"==t.style.display&&"0px auto"==t.style.margin?this.activeValue.settings.layout.__position="hax-align-center":this.activeValue.settings.layout.__position="hax-align-left",this.activeHaxElement.properties.__scale=this.activeValue.settings.layout.__scale,this.activeHaxElement.properties.__position=this.activeValue.settings.layout.__position;let o=!!i.type&&"grid"===i.type;i.settings.configure.forEach(((t,e)=>{i.settings.configure[e].attribute&&(i.settings.configure[e].property=i.settings.configure[e].attribute),i.settings.configure[e].slot&&(i.settings.configure[e].property=i.settings.configure[e].slot)})),i.settings.advanced.forEach(((t,e)=>{i.settings.advanced[e].attribute&&(i.settings.advanced[e].property=i.settings.advanced[e].attribute),i.settings.advanced[e].slot&&(i.settings.advanced[e].property=i.settings.advanced[e].slot)})),i.settings.layout=[],i.canPosition&&i.settings.layout.push({property:"__position",title:this.t.alignment,inputMethod:"select",value:this.activeValue.settings.layout.__position,options:{"hax-align-left":this.t.left,"hax-align-center":this.t.center,"hax-align-right":this.t.right}}),i.canScale&&i.settings.layout.push({property:"__scale",title:this.t.width,inputMethod:"slider",value:this.activeValue.settings.layout.__scale,min:i.canScale.min?i.canScale.min:12.5,max:i.canScale.max?i.canScale.max:100,step:i.canScale.step?i.canScale.step:12.5}),this.activeSchema=[{property:"settings",inputMethod:"tabs",properties:[]}];let setProps=(t,e,i=[])=>{let a=o?i.filter((t=>!(""===t.slot||t.slot||t.attribute&&"slot"==t.attribute))):i;this.activeSchema[0].properties.push({property:t,title:e,properties:a.length>0?a:void 0,disabled:a.length<1})};h.testHook(t,"setupActiveElementForm")&&await h.runHook(t,"setupActiveElementForm",[i]),setProps("configure",this.t.configure,i.settings.configure),setProps("layout",this.t.layout,i.settings.layout),setProps("advanced",this.t.advanced,i.settings.advanced),this.__activePropSchema=i,this.shadowRoot.querySelector("#settingsform").fields=this.activeSchema,this.shadowRoot.querySelector("#settingsform").value=this.activeValue,this.loading=!1}}_toArray(t){return null==t?[]:Object.keys(t).map((function(e){return t[e]}))}updateMap(){this.shadowRoot&&this.shadowRoot.querySelector("hax-map")&&"content-map"==this.trayDetail&&this.shadowRoot.querySelector("hax-map").updateHAXMap()}_updateTrayDetail(t){"content-add"==t?(this.trayLabel=this.t.blocks,this._refreshAddData()):"media-add"==t?this.trayLabel=this.t.media:"content-map"==t?(this.trayLabel=this.t.structure,this.shadowRoot.querySelector("hax-map").updateHAXMap()):"advanced-settings"==t?(this.trayLabel=this.t.settings,this.shadowRoot.querySelector("hax-preferences-dialog").reloadPreferencesForm()):"content-edit"!=t||this.activeTagName&&""!=this.activeTagName&&this.activeNode&&this.activeNode.tagName?t&&""!=t?this.trayLabel=void 0:this.trayDetail="content-edit":this.trayDetail="content-add",this.requestUpdate()}__valueChangedEvent(t){if(this.editMode&&t.detail.value&&t.detail.value.settings){let i=t.detail.value.settings,a="grid"=={...h.elementList[this.activeNode.tagName.toLowerCase()]}.type,n={advanced:"advanced",configure:"configure",layout:"layout"};var e;clearTimeout(this.__contextPropDebounce),this.__contextPropDebounce=setTimeout((()=>{for(let d in n)for(let n in i[d])if(e=!1,null==i[d][n]||i[d][n].readOnly)"data-hax-lock"===n&&(this.dispatchEvent(new CustomEvent("hax-toggle-active-node-lock",{bubbles:!0,composed:!0,cancelable:!0,detail:{lock:!1,node:this.activeNode}})),this.__lockAllSettings(!1)),this.activeNode.removeAttribute(o(n));else{if("prefix"===n&&""!=i[d][n])this.activeNode.setAttribute("prefix",i[d][n]),e=!0;else if("data-hax-lock"===n)this.dispatchEvent(new CustomEvent("hax-toggle-active-node-lock",{bubbles:!0,composed:!0,cancelable:!0,detail:{lock:i[d][n],node:this.activeNode}})),this.__lockAllSettings(i[d][n]);else if("innerText"===n)this.activeNode.innerText=i[d][n],e=!0;else if("layout"===d&&"__position"===n)e=!0,this._initial||(clearTimeout(this.__contextValueDebounce),this.__contextValueDebounce=setTimeout((()=>{this.dispatchEvent(new CustomEvent("hax-context-item-selected",{bubbles:!0,composed:!0,detail:{eventName:i[d][n],value:i[d][n]}}))}),50));else if("layout"===d&&"__scale"===n)e=!0,this._initial||(clearTimeout(this.__contextSizeDebounce),this.__contextSizeDebounce=setTimeout((()=>{this.dispatchEvent(new CustomEvent("hax-context-item-selected",{bubbles:!0,composed:!0,detail:{eventName:"hax-size-change",value:i[d][n]}}))}),50));else if(this.activeNode.hasOwnProperty(n)||this.activeNode.properties&&this.activeNode.properties.hasOwnProperty(n)||null!=i[d][n]&&i[d][n].constructor===Array||null!=i[d][n]&&i[d][n].constructor===Object)try{i[d][n].constructor===Array?this.activeNode[n]=[...i[d][n]]:i[d][n].constructor===Object?this.activeNode[n]={...i[d][n]}:this.activeNode[n]=i[d][n],e=!0}catch(t){console.warn(t),e=!1}else if(!a)for(var t in this.__activePropSchema.settings[d])if(this.__activePropSchema.settings[d][t].slot==n){let a="span";if(this.__activePropSchema.settings[d][t].slotWrapper)a=this.__activePropSchema.settings[d][t].slotWrapper;else if(this.__activePropSchema.settings[d][t].allowedSlotWrappers&&this.__activePropSchema.settings[d][t].allowedSlotWrappers[0])a=this.__activePropSchema.settings[d][t].allowedSlotWrappers[0];else if("code-editor"===this.activeNode.tagName.toLowerCase())a="template";else{let e=["span","div","p"],i=this.__activePropSchema.settings[d][t].excludedSlotWrappers||[];i&&(e=e.filter((t=>!i.includes(t))))}var l=document.createElement(a);if(this.__activePropSchema.settings[d][t].slotAttributes)for(var r in this.__activePropSchema.settings[d][t].slotAttributes)l.setAttribute(r,this.__activePropSchema.settings[d][t].slotAttributes[r]);""!==this.__activePropSchema.settings[d][t].slot&&(l.slot=this.__activePropSchema.settings[d][t].slot),l.innerHTML=i[d][n];const o=l.cloneNode(!0);e=!0,h.isTextElement(this.activeNode)?this.activeNode.innerHTML=l.innerHTML:(s(this.activeNode,this.__activePropSchema.settings[d][t].slot),this.activeNode.appendChild(o))}if(!e&&""!=o(n))try{!0===i[d][n]?this.activeNode.setAttribute(o(n),o(n)):!1===i[d][n]||""===i[d][n]?this.activeNode.removeAttribute(o(n)):this.activeNode.setAttribute(o(n),i[d][n])}catch(t){console.warn(t),console.warn(n,i[d][n])}}}),100)}setTimeout((()=>{this._initial&&(this._initial=!1)}),51)}__lockAllSettings(t){this.shadowRoot.querySelectorAll("simple-fields-tab *[is-simple-field-type]:not([name='settings.advanced.data-hax-lock'])").forEach((e=>{e.disabled=t}))}_editModeChanged(t){!this.hidePanelOps&&this.shadowRoot&&this.shadowRoot.querySelector("#button")&&(this.shadowRoot.querySelector("#button").icon=t?"save":"create")}_clickEditButton(t){h.editMode=!0,window.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,cancelable:!0,detail:{}}))}_clickSaveButton(t){h.editMode=!1,this.dispatchEvent(new CustomEvent("hax-save",{bubbles:!0,cancelable:!0,composed:!0,detail:t.detail})),window.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,cancelable:!0,detail:{}}))}}customElements.define(HaxTray.tag,HaxTray);export{HaxTray};