import{LitElement as e,html as t,css as i}from"../../../lit/index.js";import{SimpleFilterMixin as o}from"../../simple-filter/simple-filter.js";import{haxElementToNode as a}from"../../utils/utils.js";import{HAXStore as r}from"./hax-store.js";import"./hax-element-demo.js";import{autorun as s,toJS as l}from"../../../mobx/dist/mobx.esm.js";import"../../simple-fields/lib/simple-fields-field.js";import"../../simple-toolbar/lib/simple-button-grid.js";import"../../simple-popover/lib/simple-popover-selection.js";import{I18NMixin as n}from"../../i18n-manager/lib/I18NMixin.js";class HaxGizmoBrowser extends(n(o(e))){static get styles(){return[i`
        :host {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          flex: 0 1 auto;
          overflow-y: auto;
        }
        :host > * {
          max-width: 100%;
        }
        simple-popover-selection {
          display: flex;
        }
        hax-tray-button {
          flex: auto;
          font-size: 10px;
          --hax-ui-font-size-sm: 10px;
        }
        .toolbar-inner {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          width: 100%;
          flex: 0 0 auto;
        }
        hax-tray-button::part(button) {
          font-size: var(hax-ui-font-size-xs);
        }
        simple-fields-field {
          margin-top: 0;
        }
      `]}constructor(){super(),this.where="title",this.t={filterContentTypes:"Filter Content Types"},this.registerLocalization({context:this,namespace:"hax"}),this.addEventListener("mouseleave",this.closePopover.bind(this)),this.addEventListener("mouseout",this.closePopover.bind(this))}closePopover(){window.SimplePopoverManager.requestAvailability().opened=!1}render(){return t`
      <div class="toolbar-inner" part="toolbar">
        <simple-fields-field
          id="inputfilter"
          @value-changed="${this.inputfilterChanged}"
          aria-controls="filter"
          label="${this.t.filterContentTypes}"
          type="text"
          auto-validate=""
          part="filter"
        ></simple-fields-field>
      </div>
      <simple-button-grid columns="4" always-expanded part="grid">
        ${this.filtered.map(((e,i)=>t`
            <simple-popover-selection event="hover">
              <hax-tray-button
                show-text-label
                voice-command="insert ${e.title}"
                draggable="true"
                @dragstart="${this._dragStart}"
                index="${i}"
                label="${e.title}"
                event-name="insert-tag"
                event-data="${e.tag}"
                data-demo-schema="true"
                icon-position="top"
                icon="${e.icon}"
                part="grid-button"
                slot="button"
              ></hax-tray-button>
              <hax-element-demo
                tag-name="${e.tag}"
                slot="options"
              ></hax-element-demo>
            </simple-popover-selection>
          `))}
      </simple-button-grid>
    `}static get tag(){return"hax-gizmo-browser"}_dragStart(e){let t=r.haxSchemaFromTag(e.target.eventData);var i;i=t.gizmo.tag&&t.demoSchema&&t.demoSchema[0]?a(t.demoSchema[0]):document.createElement(e.target.eventData),r.__dragTarget=i,e.dataTransfer&&(e.dataTransfer.effectAllowed="move",e.dataTransfer.dropEffect="move"),e.stopPropagation(),e.stopImmediatePropagation()}inputfilterChanged(e){this.like=e.target.value}updated(e){e.forEach(((e,t)=>{"activeApp"==t&&this._activeAppChanged(this[t],e),"filtered"==t&&this.requestUpdate()}))}firstUpdated(e){super.firstUpdated&&super.firstUpdated(e),s((()=>{this.resetList(l(r.gizmoList))}))}resetList(e){super.resetList(e),e&&(this.items=[...e.filter(((e,t)=>!(e&&e.meta&&(e.meta.inlineOnly||e.meta.hidden||e.requiresParent))))])}}customElements.define(HaxGizmoBrowser.tag,HaxGizmoBrowser);export{HaxGizmoBrowser};