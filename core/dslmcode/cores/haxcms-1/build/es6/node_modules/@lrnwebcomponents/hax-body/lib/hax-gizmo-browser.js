import{LitElement as t,html as e,css as i}from"../../../lit/index.js";import{SimpleFilterMixin as a}from"../../simple-filter/simple-filter.js";import{haxElementToNode as o}from"../../utils/utils.js";import{HAXStore as s}from"./hax-store.js";import"./hax-element-demo.js";import"./hax-tray-button.js";import{autorun as r,toJS as l}from"../../../mobx/dist/mobx.esm.js";import"../../simple-fields/lib/simple-fields-field.js";import"../../simple-toolbar/lib/simple-button-grid.js";import"../../simple-popover/lib/simple-popover-selection.js";import"../../a11y-collapse/a11y-collapse.js";import{I18NMixin as n}from"../../i18n-manager/lib/I18NMixin.js";class HaxGizmoBrowser extends(n(a(t))){static get styles(){return[i`
        :host {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          flex: 0 1 auto;
          overflow-y: auto;
        }
        :host > * {
          max-width: 100%;
        }
        simple-popover-selection {
          display: flex;
        }
        hax-tray-button {
          flex: auto;
          font-size: 12px;
          --hax-ui-font-size-sm: 12px;
          --simple-toolbar-button-height: 22px;
          --simple-toolbar-button-width: 22px;
        }
        hax-tray-button[small] {
          font-size: 8px;
          --hax-ui-font-size-sm: 8px;
          --simple-toolbar-button-height: 16px;
          --simple-toolbar-button-width: 16px;
        }
        .toolbar-inner {
          max-width: 96%;
        }
        hax-tray-button::part(button) {
          font-size: var(hax-ui-font-size-xs);
        }
        simple-button-grid {
          --simple-button-grid-margin: 2px;
        }
        simple-fields-field {
          margin-top: 0;
          margin-bottom: 8px;
        }
        simple-fields-field::part(option-input) {
          padding: 0px 2px;
          font-size: 12px;
        }
        a11y-collapse {
          margin: 0;
          --a11y-collapse-margin: 0;
          --a11y-collapse-vertical-padding: 8px;
          --a11y-collapse-horizontal-padding: 4px;
        }
        a11y-collapse::part(heading) {
          margin: 8px 0px;
        }
      `]}constructor(){super(),this.daemonKeyCombo=null,r((()=>{this.daemonKeyCombo=l(s.daemonKeyCombo)})),this.items=[],this.categories=[],this.like="",this.value="",this.where="index",this.recentGizmoList=[],this.t={filterContentTypes:"Filter Content Types"},this.registerLocalization({context:this,namespace:"hax"}),this.addEventListener("mouseleave",this.closePopover.bind(this)),this.addEventListener("mouseout",this.closePopover.bind(this)),r((()=>{if(s.editMode){const t=l(s.recentGizmoList);let e=[],i=[];t.forEach((t=>{t&&t.tag&&(i.includes(t.tag)||(i.push(t.tag),e.push(t),e.length>5&&(i.shift(),e.shift())))})),this.recentGizmoList=e}}))}static get properties(){return{...super.properties,categories:{type:Array},recentGizmoList:{type:Array}}}closePopover(){window.SimplePopoverManager.requestAvailability().opened=!1}render(){return e` <div class="toolbar-inner" part="toolbar">
        <simple-fields-field
          id="inputfilter"
          @value-changed="${this.inputfilterChanged}"
          aria-controls="filter"
          label="${this.t.filterContentTypes}"
          type="text"
          auto-validate=""
          part="filter"
        ></simple-fields-field>
      </div>
      <a11y-collapse id="recent" heading="Recent" heading-button expanded>
        <simple-button-grid columns="5" always-expanded part="grid">
          ${this.recentGizmoList.map(((t,i)=>e` <simple-popover-selection event="hover">
              <hax-tray-button
                small
                show-text-label
                voice-command="insert ${t.title}"
                draggable="true"
                @dragstart="${this._dragStart}"
                index="${i}"
                is-current-item
                label="${t.title}"
                event-name="insert-tag"
                event-data="${t.tag}"
                data-demo-schema="true"
                icon-position="top"
                icon="${t.icon}"
                part="grid-button"
                slot="button"
              ></hax-tray-button>
              <hax-element-demo
                render-tag="${t.tag}"
                slot="options"
              ></hax-element-demo>
            </simple-popover-selection>`))}
        </simple-button-grid>
      </a11y-collapse>
      ${this.categories.map((t=>e` <a11y-collapse
          heading="${this.ucfirst(t)}"
          heading-button
        >
          <simple-button-grid columns="3" always-expanded part="grid">
            ${this.filtered.map(((i,a)=>e`${i&&i.tags&&i.tags.includes(t)?e` <simple-popover-selection event="hover">
                      <hax-tray-button
                        show-text-label
                        is-current-item
                        voice-command="insert ${i.title}"
                        draggable="true"
                        @dragstart="${this._dragStart}"
                        index="${a}"
                        label="${i.title}"
                        event-name="insert-tag"
                        event-data="${i.tag}"
                        data-demo-schema="true"
                        icon-position="top"
                        icon="${i.icon}"
                        part="grid-button"
                        slot="button"
                      ></hax-tray-button>
                      <hax-element-demo
                        render-tag="${i.tag}"
                        slot="options"
                      ></hax-element-demo>
                    </simple-popover-selection>`:""}`))}
          </simple-button-grid>
        </a11y-collapse>`))}`}static get tag(){return"hax-gizmo-browser"}_dragStart(t){let e=s.haxSchemaFromTag(t.target.eventData);var i;i=e.gizmo.tag&&e.demoSchema&&e.demoSchema[0]?o(e.demoSchema[0]):document.createElement(t.target.eventData),s.recentGizmoList.push(e.gizmo),s.__dragTarget=i,t.dataTransfer&&(t.dataTransfer.effectAllowed="move",t.dataTransfer.dropEffect="move"),t.stopPropagation(),t.stopImmediatePropagation()}inputfilterChanged(t){this.like=t.target.value,""==this.like?this.collapseAll():this.expandAll()}expandAll(){this.shadowRoot.querySelectorAll("a11y-collapse").forEach((t=>{t.expanded=!0}))}collapseAll(){this.shadowRoot.querySelectorAll("a11y-collapse:not(#recent)").forEach((t=>{t.expanded=!1}))}updated(t){super.updated&&super.updated(t),t.forEach(((t,e)=>{"filtered"==e&&this.requestUpdate(),"items"==e&&this[e]&&this[e].length>0&&(this.categories=[...this.updateCategories(this.items)])}))}ucfirst(t){return t.charAt(0).toUpperCase()+t.slice(1)}updateCategories(t){let e=[];return t.forEach((t=>{t.tags&&t.tags[0]&&(e.includes(t.tags[0])||e.push(t.tags[0]))})),e.sort(),e}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),r((()=>{s.editMode&&this.resetList(l(s.gizmoList))}))}resetList(t){if(t){this.like="",this.value="";const e=t.filter(((t,e)=>!(t&&t.meta&&(t.meta.inlineOnly||t.meta.hidden||t.requiresParent))));e.map(((t,i)=>{e[i].index=t.title+" "+t.tag,t.tags&&(e[i].index+=" "+t.tags.join(" ")),t.meta&&t.meta.author&&(e[i].index+=" "+t.meta.author)})),this.items=[...e]}}}customElements.define(HaxGizmoBrowser.tag,HaxGizmoBrowser);export{HaxGizmoBrowser};