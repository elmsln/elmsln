/**
 * Copyright 2019 PSU
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as t,html as e,css as a}from"../../lit/index.js";import{unsafeHTML as r}from"../../lit/directives/unsafe-html.js";import"../../@polymer/paper-input/paper-input.js";class PunnettSquare extends t{static get tag(){return"punnett-square"}static get properties(){return{variant1:{type:String},variant2:{type:String},editable:{type:Boolean},__results:{type:Array}}}constructor(){super(),this.variant1="",this.variant2="",this.editable=!1;const t=this.querySelectorAll("[data-variant]");let e=[];for(let a of t){let t=a.getAttribute("data-variant");t=this.__sortVariant(t);let r={variant:t,ref:a};e=[...e,r]}this.__results=e}__sortVariant(t){return t.split("").sort().join("")}__ensureArray(t){return("string"==typeof t?t.split(",").map((t=>t.trim())):[]).map((t=>"string"==typeof t?t.split("").map((t=>t.trim())):[]))}render(){let t=this.__ensureArray(this.variant1),a=this.__ensureArray(this.variant2);const r=t[0].length<1&&a[0].length<1;return console.log("asdf:",r),e`
      <style>
        :host {
          display: block;
          --punnett-square-table-border: 1px solid black;
          --punnett-square-table-padding: 1em;
          --punnett-square-input-font-size: 2em;
          --punnett-square-input-text-align: center;
        }

        table {
          border-collapse: var(
            --punnett-square-table-border-collapse,
            collapse
          );
          width: var(--punnett-square-table-width, 100%);
          border: var(--punnett-square-table-border);
        }

        th {
          border: var(
            --punnett-square-th-border,
            var(--punnett-square-table-border)
          );
          padding: var(
            --punnett-square-th-padding,
            var(--punnett-square-table-padding)
          );
        }

        td {
          border: var(
            --punnett-square-td-border,
            var(--punnett-square-table-border)
          );
          text-align: var(--punnett-square-table-text-align, center);
          padding: var(
            --punnett-square-td-padding,
            var(--punnett-square-table-padding)
          );
        }

        #inputs {
          display: var(--punnett-square-inputs-display, flex);
          align-items: var(--punnett-square-inputs-align-items, center);
        }

        .input {
          font-size: var(--punnett-square-input-font-size);
          text-align: var(--punnett-square-input-text-align);
        }

        paper-input {
          --paper-input-container-input: {
            font-size: var(
              --punnett-square-paper-input-font-size,
              --punnett-square-input-font-size
            );
            text-align: var(
              --punnett-square-paper-input-text-align,
              --punnett-square-input-text-align
            );
          }
        }
      </style>
      <div id="inputs">
        Variant1:
        <div class="input">
          ${this.editable?e`
                <paper-input
                  value="${this.variant1}"
                  @value-changed=${t=>this.variant1=t.detail.value}
                ></paper-input>
              `:e` ${this.variant1} `}
        </div>
        Variant2:
        <div class="input">
          ${this.editable?e`
                <paper-input
                  value="${this.variant2}"
                  @value-changed=${t=>this.variant2=t.detail.value}
                ></paper-input>
              `:e` ${this.variant2} `}
        </div>
      </div>

      <table>
        <thead>
          <tr>
            ${t.map((t=>e` ${t.map((t=>e` <th>${t}</th> `))} `))}
          </tr>
        </thead>
        <tbody>
          ${a.map(((a,r)=>a.map((a=>e`
                  <tr>
                    <th>${a}</th>
                    ${t.map((t=>t.map((t=>e`
                            <td>
                              ${this.renderVariant(`${t}${a}`)}
                            </td>
                          `))))}
                  </tr>
                `))))}
        </tbody>
      </table>
    `}renderVariant(t){const a=this.__sortVariant(t),n=this.__results.find((t=>t.variant===a));return n?e` ${r(n.ref.outerHTML)} `:e` ${a} `}}customElements.define(PunnettSquare.tag,PunnettSquare);export{PunnettSquare};