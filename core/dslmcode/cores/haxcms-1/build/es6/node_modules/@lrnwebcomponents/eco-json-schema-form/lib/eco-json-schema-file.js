import{html as e,PolymerElement as t}from"../../../@polymer/polymer/polymer-element.js";import{microTask as i}from"../../../@polymer/polymer/lib/utils/async.js";import"../../../@polymer/iron-flex-layout/iron-flex-layout-classes.js";import{AppLocalizeBehavior as r}from"../../../@polymer/app-localize-behavior/app-localize-behavior.js";import{mixinBehaviors as o}from"../../../@polymer/polymer/lib/legacy/class.js";import"../../../@polymer/paper-input/paper-input.js";import"../../simple-icon/simple-icon.js";import"../../simple-icon/lib/simple-icons.js";import"../../simple-progress/simple-progress.js";import"../../../@polymer/polymer/lib/elements/dom-repeat.js";class EcoJsonSchemaFile extends(o([r],t)){static get tag(){return"eco-json-schema-file"}static get template(){return e`
      <style is="custom-style" include="iron-flex iron-flex-alignment">
        :host ([hidden]) {
          display: none;
        }
        paper-input {
          padding: 2px;
          --paper-input-container-label: {
            white-space: normal;
            position: static;
            font-size: 22px;
            color: #212121;
          }
        }

        :host {
          display: inline-block;
        }

        .enabled {
          border: 1px dashed #555;
          @apply --file-upload-upload-border-enabled;
        }

        .hover {
          opacity: 0.7;
          border: 1px dashed #111;
          @apply --file-upload-upload-border-hover;
        }

        #UploadBorder {
          vertical-align: middle;
          color: #555;
          padding: 20px;
          max-height: 300px;
          overflow-y: auto;
          display: inline-block;
          @apply --file-upload-upload-border;
        }

        #dropArea {
          text-align: center;
          @apply --file-upload-drop-area;
        }

        button#button {
          margin-bottom: 20px;
          @apply --file-upload-button;
        }

        .file {
          padding: 10px 0px;
          @apply --file-upload-file;
        }

        .commands {
          float: right;
          @apply --file-upload-commands;
        }

        .commands iron-icon:not([icon="check-circle"]) {
          cursor: pointer;
          opacity: 0.9;
          @apply --file-upload-commands-faded;
        }

        .commands iron-icon:hover {
          opacity: 1;
          @apply --file-upload-commands-hovered;
        }

        [hidden] {
          display: none;
        }

        .error {
          color: #f40303;
          font-size: 11px;
          margin-top: 2px;
          @apply --file-upload-error;
        }

        .progress-bar {
          margin-top: 2px;
        }

        simple-progress {
          --simple-progress-color: #03a9f4;
        }

        simple-progress[error] {
          --simple-progress-color: #f40303;
        }
      </style>

      <div class="layout horizontal nowrap">
        <div>
          <button
            id="button"
            on-click="_fileClick"
            alt="{{paperButtonAlt}}"
            raised=""
          >
            <simple-icon icon="editor:attach-file"></simple-icon
            >{{paperButtonTitle}}
          </button>
          <div id="UploadBorder">
            <div id="dropArea" hidden$="{{!_shownDropText}}">{{dropText}}</div>
            <template is="dom-repeat" items="{{files}}">
              <div class="file">
                <div class="name">
                  <span>{{item.name}}</span>
                  <div class="commands">
                    <simple-icon
                      icon="autorenew"
                      title="{{retryText}}"
                      on-click="_retryUpload"
                      hidden$="{{!item.error}}"
                    ></simple-icon>
                    <simple-icon
                      icon="cancel"
                      title="{{removeText}}"
                      on-click="_cancelUpload"
                      hidden$="{{item.complete}}"
                    ></simple-icon>
                    <simple-icon
                      icon="check-circle"
                      title="{{successText}}"
                      hidden$="{{!item.complete}}"
                    ></simple-icon>
                  </div>
                </div>
                <div class="error" hidden$="{{!item.error}}">{{errorText}}</div>
              </div>
            </template>
          </div>
        </div>
        <input
          type="file"
          id="fileInput"
          on-change="_fileChange"
          hidden=""
          multiple="{{multi}}"
          accept="{{accept}}"
        />
      </div>
    `}static get properties(){return{language:{value:"en",notify:!0},resources:{value:()=>({}),notify:!0},schema:{type:Object,observer:"_schemaChanged"},value:{type:Object,notify:!0,value:()=>({}),observer:"_valueChanged"},target:{type:String,value:""},accept:{type:String,value:""},droppable:{type:Boolean,value:!1},dropText:{type:String,value:"Drop Files Here"},multi:{type:Boolean,value:!0},files:{type:Array,notify:!0,value:()=>[]},raised:{type:Boolean,value:!0},noink:{type:Boolean,value:!1},headers:{type:Object,value:{}},retryText:{type:String,value:"Retry Upload"},removeText:{type:String,value:"Remove"},successText:{type:String,value:"Success"},errorText:{type:String,value:"Error uploading file..."},_shownDropText:{type:Boolean,value:!1},additional:{type:Object,value:{}},fileDataName:{type:String,value:"file"},paperButtonAlt:{type:String,value:""},paperButtonTitle:{type:String,value:""}}}clear(){this.set("files",[]),this.shadowRoot.querySelector("#fileInput").value="",this._showDropText()}ready(){super.ready(),this.raised&&this.toggleAttribute("raised",!0,this.shadowRoot.querySelector("#button")),this.noink&&this.toggleAttribute("noink",!0,this.shadowRoot.querySelector("#button")),this.droppable&&(this._showDropText(),this.setupDrop())}setupDrop(){var e=this.shadowRoot.querySelector("#UploadBorder");this.toggleClass("enabled",!0,e),this.ondragover=function(t){t.stopPropagation(),this.toggleClass("hover",!0,e);var i=t.dataTransfer&&t.dataTransfer.dropEffect,r=t.dataTransfer&&t.dataTransfer.effectAllowed;return"none"===i&&"none"!==r&&(t.dataTransfer.dropEffect="move"===r?"move":"copy"),!1},this.ondragleave=function(){return this.toggleClass("hover",!1,e),!1},this.ondrop=function(t){if(this.toggleClass("hover",!1,e),t.preventDefault(),this.multi||0===this.files.length)for(var i=t.dataTransfer.files.length,r=0;r<i;r++){var o=t.dataTransfer.files[r],a=""!==o.type?o.type.match(/^[^\/]*\//)[0]:null,l=o.name.match(/\.[^\.]*$/)[0];(""===this.accept||this.accept.indexOf(a)>-1||this.accept.indexOf(l)>-1)&&(o.progress=0,o.error=!1,o.complete=!1,this.push("files",o),this.uploadFile(o))}}}_fileClick(){var e=this.shadowRoot.querySelector("#fileInput");if(e&&document.createEvent){var t=document.createEvent("MouseEvents");t.initEvent("click",!0,!1),e.dispatchEvent(t)}}_fileChange(e){for(var t=e.target.files.length,i=0;i<t;i++){var r=e.target.files[i];r.progress=0,r.error=!1,r.complete=!1,this.push("files",r),this.multi||0===this.files.length||(this.set("files",[]),this.set("value",{})),this.uploadFile(r)}}cancel(e){e&&(e.xhr&&e.xhr.abort(),this.splice("files",this.files.indexOf(e),1),this._showDropText())}_cancelUpload(e){this.cancel(e.model.__data__.item)}_retryUpload(e){e.model.set("item.error",!1),e.model.set("item.progress",0);var t=this;i.run((()=>{t.uploadFile(e.model.__data__.item)}))}_showDropText(){this.set("_shownDropText",!this.files.length&&this.droppable)}uploadFile(e){if(e){this.dispatchEvent(new CustomEvent("before-upload",{bubbles:!0,cancelable:!0,composed:!0,detail:!0})),this._showDropText();this.files.indexOf(e);var t=this,i=new FileReader;i.addEventListener("load",(function(){var r=i.result;t.set("value."+t.attributes.name.value+"."+t.files.indexOf(e),r)}),!1),t.value.hasOwnProperty(t.attributes.name.value)||this.set("value."+t.attributes.name.value,{}),i.readAsDataURL(e)}}_valueChanged(){console.log("this.value: "+JSON.stringify(this.value))}_schemaChanged(){this.schema}_isSchemaValue(e){return this._isSchemaFile(e)}_isSchemaFile(e){return Array.isArray(e)?-1!==e.indexOf("file"):"file"===e}_isSchemaBoolean(e){return Array.isArray(e)?-1!==e.indexOf("boolean"):"boolean"===e}_isSchemaNumber(e){return Array.isArray(e)?-1!==e.indexOf("number")||-1!==e.indexOf("integer"):"number"===e||"integer"===e}_isSchemaString(e){return Array.isArray(e)?-1!==e.indexOf("string"):"string"===e}_isSchemaObject(e){return"object"===e}_isSchemaArray(e){return"array"===e}stringify(e){return JSON.stringify(e)}}customElements.define(EcoJsonSchemaFile.tag,EcoJsonSchemaFile);export{EcoJsonSchemaFile};