/**
 * Copyright 2020 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as t,html as i,css as e}from"../../../lit/index.js";import{ElmslnStudioStyles as s}from"./elmsln-studio-styles.js";import{ElmslnStudioUtilities as n}from"./elmsln-studio-utilities.js";import"./elmsln-studio-submission-card.js";import"../../simple-fields/lib/simple-fields-field.js";import"../../accent-card/accent-card.js";class ElmslnStudioSubmissions extends(n(s(t))){static get tag(){return"elmsln-studio-submissions"}static get styles(){return[super.styles,e`
        :host {
          flex-wrap: wrap;
        }
        .filters {
          flex: 1 0 100%;
        }
        #layout {
          display: flex;
          align-items: flex-end;
          justify-content: space-between;
        }
        #layout > button {
          background-color: transparent;
          opacity: 0.25;
          transform: opacity 0.5s ease-in-out;
          height: calc(2 * var(--elmsln-studio-FontSize, 16px));
          width: calc(2 * var(--elmsln-studio-FontSize, 16px));
          flex: 1 0 auto;
          border: 1px solid #ddd;
          margin: 0;
          padding: 0;
        }
        #layout button:focus,
        #layout button:hover {
          opacity: 0.75;
        }
        #layout button[aria-pressed="true"] {
          opacity: 1;
        }
        #cards {
          margin: var(--elmsln-studio-margin, 20px)
            calc(-0.5 * var(--elmsln-studio-margin, 20px));
          display: flex;
          align-items: stretch;
          justify-content: flex-start;
          flex-wrap: wrap;
        }
        .no-submissions {
          font-weight: var(--elmsln-studio-FontWeightLight, 300);
          font-size: 22px;
          margin: calc(0.5 * var(--elmsln-studio-margin, 20px));
          padding: var(--elmsln-studio-margin, 20px);
          width: calc(100% - 2 * var(--elmsln-studio-margin, 20px));
          background-color: #e8e8e8;
          text-align: center;
        }
        accent-card {
          line-height: 160%;
          display: flex;
          flex-direction: column;
          align-items: stretch;
          justify-content: stretch;
          width: auto;
          cursor: pointer;
          margin: calc(0.5 * var(--elmsln-studio-margin, 20px))
            calc(0.5 * var(--elmsln-studio-margin, 20px));
          flex: 1 1 calc(100% - var(--elmsln-studio-margin, 20px));
          --accent-card-box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.28),
            0 1px 5px 0 rgba(0, 0, 0, 0.24), 0 3px 1px -2px rgba(0, 0, 0, 0.4);
          --accent-card-padding: 0;
          --accent-card-image-width: 33.33333%;
          --accent-card-image-height: 200px;
          --accent-card-heading-min-height: 30px;
          --accent-card-heading-padding-top: calc(
            0.5 * var(--elmsln-studio-margin, 20px)
          );
          --accent-card-heading-padding-left: calc(
            0.5 * var(--elmsln-studio-margin, 20px)
          );
          --accent-card-heading-padding-right: calc(
            0.5 * var(--elmsln-studio-margin, 20px)
          );
          --accent-card-subheading-padding-left: calc(
            0.5 * var(--elmsln-studio-margin, 20px)
          );
          --accent-card-subheading-padding-right: calc(
            0.5 * var(--elmsln-studio-margin, 20px)
          );
          --accent-card-content-padding-left: calc(
            0.5 * var(--elmsln-studio-margin, 20px)
          );
          --accent-card-content-padding-right: calc(
            0.5 * var(--elmsln-studio-margin, 20px)
          );
          --accent-card-content-padding-bottom: calc(
            0.5 * var(--elmsln-studio-margin, 20px)
          );
          --accent-card-footer-padding-left: calc(
            0.25 * var(--elmsln-studio-margin, 20px)
          );
          --accent-card-footer-padding-right: calc(
            0.25 * var(--elmsln-studio-margin, 20px)
          );
          --accent-card-footer-padding-top: calc(
            0.5 * var(--elmsln-studio-margin, 20px)
          );
          --accent-card-footer-padding-bottom: calc(
            0.5 * var(--elmsln-studio-margin, 20px)
          );
          --accent-card-image-padding-bottom: 5px;
          --accent-card-image-padding-right: calc(
            0.5 * var(--elmsln-studio-margin, 20px)
          );
        }
        accent-card:hover {
          --accent-card-box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.14),
            0 1px 3px 0 rgba(0, 0, 0, 0.12), 0 1.5px 1px -1px rgba(0, 0, 0, 0.2);
        }
        accent-card [slot="heading"] {
          font-weight: var(--elmsln-studio-FontWeightLight, 300);
          font-size: 22px;
        }
        accent-card [slot="corner"] {
          font-weight: var(--elmsln-studio-FontWeightNormal, 400);
          font-size: 12px;
        }
        accent-card [slot="subheading"] {
          font-weight: var(--elmsln-studio-FontWeightBold, 500);
          font-size: 18px;
          font-style: normal;
          color: #5d5e5f;
        }
        accent-card [slot="content"] {
          font-weight: var(--elmsln-studio-FontWeightNormal, 400);
          font-size: 14px;
          color: #7e7e7e;
        }
        accent-card [slot="content"] .feature {
          margin-top: var(--elmsln-studio-margin, 20px);
          height: calc(
            var(--accent-card-image-height, 200px) - var(
                --elmsln-studio-margin,
                20px
              )
          );
          overflow: auto;
        }
        accent-card [slot="footer"] {
          font-weight: var(--elmsln-studio-FontWeightNormal, 400);
          font-size: 12px;
          text-transform: uppercase;
          text-align: right;
          color: #95989a;
          --elmsln-studio-link-Color: currentColor;
        }
        accent-card [slot="footer"] elmsln-studio-link {
          margin: 0 calc(0.5 * var(--elmsln-studio-margin, 20px));
          text-align: right;
        }
        accent-card elmsln-studio-link {
          --elmsln-studio-link-TextDecoration: none !important;
        }
        accent-card elmsln-studio-link:focus,
        accent-card elmsln-studio-link:hover,
        accent-card elmsln-studio-link:focus-within {
          --elmsln-studio-link-TextDecoration: underline !important;
        }
        .feature {
          margin-top: var(--elmsln-studio-margin, 20px);
          height: calc(
            var(--accent-card-image-height, 200px) - var(
                --elmsln-studio-margin,
                20px
              )
          );
          overflow: auto;
        }
        #secondary {
          margin-top: 0;
          --nav-card-linklist-margin-top: 0;
          --nav-card-linklist-left-size: 36px;
          --paper-avatar-width: var(--nav-card-linklist-left-size, 36px);
        }
        #secondary .filters {
          justify-content: flex-start;
        }
        .comments {
          color: #95989a;
        }
        nav-card {
          margin: calc(1.5 * var(--elmsln-studio-margin, 20px)) 0 0;
          --accent-card-footer-padding-left: 0;
          --accent-card-footer-padding-right: 0;
        }

        @media screen and (min-width: 500px) {
          accent-card {
            --accent-card-image-width: 50%;
          }
          .grid accent-card:not([horizontal]) {
            flex: 0 0 calc(50% - var(--elmsln-studio-margin, 20px));
          }
        }
        @media screen and (min-width: 900px) {
          :host {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
          }
          .grid accent-card:not([horizontal]) {
            flex: 0 0 calc(50% - var(--elmsln-studio-margin, 20px));
          }
          .filters > *,
          #layout > * {
            flex: 0 1 auto;
            margin: 0 calc(0.5 * var(--elmsln-studio-margin, 20px));
          }
          #layout > button {
            padding: 1px 6px;
            margin: 0 5px;
            border: 0px solid rgba(0, 0, 0, 0);
          }
        }
        @media screen and (min-width: 1200px) {
          .grid accent-card[horizontal] {
            flex: 0 0 calc(66.66666667% - var(--elmsln-studio-margin, 20px));
          }
          .grid accent-card:not([horizontal]) {
            flex: 0 0 calc(33.3333333333% - var(--elmsln-studio-margin, 20px));
          }
        }
        @media screen and (min-width: 1600px) {
          accent-card[horizontal] {
            --accent-card-image-width: 33.33333%;
            flex: 0 0 calc(75% - var(--elmsln-studio-margin, 20px));
          }
          accent-card:not([horizontal]) {
            flex: 0 0 calc(25% - var(--elmsln-studio-margin, 20px));
          }
          accent-card {
            --accent-card-image-width: 50%;
          }
        }
      `]}render(){return i`
      <h1 class="sr-only">Submissions</h1>
      <div class="filters">
        <simple-fields-field
          inline
          label="Project:"
          .options="${this.projectOptions}"
          value="${this.projectFilter||""}"
          @value-changed="${t=>this.projectFilter=t.detail.value}"
        >
        </simple-fields-field>
        <simple-fields-field
          inline
          label="Assignment:"
          .options="${this.assignmentOptions}"
          value="${this.assignmentFilter||""}"
          @value-changed="${t=>this.assignmentFilter=t.detail.value}"
        >
        </simple-fields-field>
        <simple-fields-field
          inline
          label="Student:"
          .options="${this.studentOptions}"
          value="${this.studentFilter||""}"
          @value-changed="${t=>this.studentFilter=t.detail.value}"
        >
        </simple-fields-field>
        <div id="layout">
          <button
            aria-pressed="${this.list?"true":"false"}"
            @click="${t=>this.list=!0}"
          >
            <simple-icon-lite icon="icons:view-list"></simple-icon-lite>
            <span class="sr-only">display as list</span>
          </button>
          <button
            aria-pressed="${this.list?"false":"true"}"
            @click="${t=>this.list=!1}"
          >
            <simple-icon-lite icon="icons:view-module"></simple-icon-lite>
            <span class="sr-only">display as grid</span>
          </button>
        </div>
      </div>
      <div id="primary">
        ${this.submissions?i`
              <div id="cards" class="${this.list?"list":"grid"}">
                <div
                  class="no-submissions"
                  ?hidden="${this.filteredSubmissions.length>0}"
                >
                  No submissions for applied filters.
                </div>
                ${this.filteredSubmissions.map(((t,e)=>i`
                    <accent-card
                      id="accent-${e}"
                      href="${this.getActivityLink(t,!0)}"
                      class="card submission-card"
                      image-src="${this.getCoverImage(t)}"
                      .image-alt="${t.imageAlt||void 0}"
                      ?horizontal="${!(!t.feature&&!this.list)}"
                      .image-align="${this._getAlign(t.imageGravity||void 0)}"
                      .image-valign="${this._getValign(t.imageGravity||void 0)}"
                      .gravity="${t.imageGravity||void 0}"
                      no-border
                    >
                      <elmsln-studio-link
                        data-clickable
                        href="${this.getActivityLink(t,!0)}"
                        id="assignment-${t.id}"
                        slot="heading"
                      >
                        ${t.assignment}
                      </elmsln-studio-link>
                      <elmsln-studio-link
                        id="student-${t.id}"
                        href="submissions${t.userId?`?student=${t.userId}`:""}"
                        slot="subheading"
                      >
                        ${[t.firstName,t.lastName].join(" ")}
                      </elmsln-studio-link>
                      <local-time
                        slot="corner"
                        id="date-${t.id}"
                        .datetime="${t.date}"
                        month="long"
                        day="numeric"
                        year="${this.list?"numeric":void 0}"
                      >
                        ${this.dateFormat(t.date,"short")}
                      </local-time>
                      <div slot="content" id="project-${t.id}">
                        ${t.project}
                        ${t.feature?i`<div class="feature">${t.feature}</div>`:""}
                      </div>
                      <elmsln-studio-link
                        slot="footer"
                        href="${this.getActivityLink(t)}"
                      >
                        Feedback
                        <span class="sr-only">(${t.feedback.length})</span>
                        <simple-icon-lite
                          icon="${this.getFeedbackIcon(t.feedback.length)}"
                        ></simple-icon-lite>
                      </elmsln-studio-link>
                    </accent-card>
                  `))}
              </div>
            `:this.loading("grey")}
      </div>
      <div id="secondary">
        <nav-card flat no-border class="card">
          <span slot="heading">
            ${this.isFiltered?"Related Comments":"Recent Comments"}
          </span>
          ${this.comments?i`
                <div slot="body" ?hidden="${this.filteredComments.length>0}">
                  ${this.isFiltered?"No comments for applied filters.":"No comments."}
                </div>
                <div slot="linklist">
                  ${(this.filteredComments||[]).slice(0,this.commentLoad).map((t=>i`
                        <nav-card-item
                          accent-color="${this.accentColor(this.fullName(t))}"
                          .avatar="${t.avatar}"
                          initials="${this.fullName(t)}"
                        >
                          <elmsln-studio-link
                            id="comment-${t.id}"
                            aria-describedby="comment-${t.id}-desc"
                            slot="label"
                            href="${this.getActivityLink(t)}"
                          >
                            ${this.getActivityTitle(t)}
                          </elmsln-studio-link>

                          <relative-time
                            id="comment-${t.id}"
                            slot="description"
                            .datetime="${t.date}"
                          >
                            ${this.dateFormat(t.date,"long")}
                          </relative-time>
                        </nav-card-item>
                      `))}
                </div>
                <button
                  class="load-more"
                  slot="footer"
                  ?disabled="${this.commentLoad>=this.filteredComments.length}"
                  ?hidden="${this.commentLoad>=this.filteredComments.length}"
                  @click="${t=>this.commentLoad+=10}"
                >
                  Load More ${this.commentLoad} /
                  ${this.filteredComments.length}
                </button>
              `:this.loading("grey","body")}
        </nav-card>
      </div>
    `}static get properties(){return{...super.properties,assignmentFilter:{type:String,attribute:"assignment-filter"},comments:{type:Array},commentLoad:{type:Number,attribute:"comment-load"},list:{type:Boolean,attribute:"list"},projectFilter:{type:String,attribute:"project-filter"},studentFilter:{type:String,attribute:"student-filter"},submissions:{type:Array}}}constructor(){super(),this.list=!1,this.commentLoad=15}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),this.fetchData("submissions"),this.fetchData("discussion")}updated(t){super.updated&&super.updated(t),t.forEach(((t,i)=>{["comments","assignmentFilter","studentFilter","projectFilter"].includes(i)&&(this.commentLoad=15)}))}get filteredComments(){return(this.comments||[]).filter((t=>this._isFilteredStudent(t.creatorId)&&this._isFilteredAssignment(t.assignmentId)&&this._isFilteredProject(t.projectId)))}getCoverImage(t){let i=["ai","css","csv","doc","eps","html","js","pdf","ppt","rtf","url","xls"],e=["png","jpg","jpeg","gif","svg"],s=[...t.sources||[],...t.links||[]],n=s.filter((t=>e.includes(t.type||"file"))),a=s.filter((t=>i.includes(t.type||"file"))),l=new URL("svgs/file.svg",import.meta.url).pathname;return n&&n[0]?l=n[0].src:a&&a[0]&&(l=new URL(`svgs/${a[0].type}.svg`,import.meta.url).pathname),l}get isFiltered(){return""!==this.assignmentFilter||""!==this.studentFilter||""!==this.projectFilter}get studentOptions(){let t={"":"All"};return(this.submissions||[]).forEach((i=>t[i.userId]=this.fullName(i))),t}get assignmentOptions(){let t={"":"All"};return(this.submissions||[]).filter((t=>this._isFilteredProject(t.projectId))).forEach((i=>t[i.assignmentId]=i.assignment)),t}get projectOptions(){let t={"":"All"};return(this.submissions||[]).filter((t=>t.project)).forEach((i=>t[i.projectId]=i.project)),t}get filteredSubmissions(){return(this.submissions||[]).filter((t=>this._isFilteredStudent(t.userId)&&this._isFilteredAssignment(t.assignmentId)&&this._isFilteredProject(t.projectId)))}get modalTitle(){let t=[[this.projectOptions[this.projectFilter],this.assignmentOptions[this.assignmentFilter]].filter((t=>!!t&&"All"!==t)).join(":"),this.studentOptions[this.studentFilter]].filter((t=>!!t&&"All"!==t&&""!==t)).join(" by ");return t&&""!=t?t:"All Submissions"}loadMoreComments(t){this.commentLoad+=10}_isFilteredAssignment(t=""){return""===this.assignmentFilter||t===this.assignmentFilter}_isFilteredProject(t=""){return""===this.projectFilter||t===this.projectFilter}_isFilteredStudent(t=""){return""===this.studentFilter||t===this.studentFilter}}customElements.define("elmsln-studio-submissions",ElmslnStudioSubmissions);export{ElmslnStudioSubmissions};