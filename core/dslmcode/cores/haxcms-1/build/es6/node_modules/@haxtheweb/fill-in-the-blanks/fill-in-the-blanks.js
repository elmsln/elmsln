/**
 * Copyright 2024
 * @license Apache-2.0, see License.md for full text.
 */
import{html as e,css as t}from"../../lit/index.js";import{MarkTheWords as s}from"../mark-the-words/mark-the-words.js";class FillInTheBlanks extends s{static get tag(){return"fill-in-the-blanks"}renderDirections(){return e`<p>
      Read the sentance and type or select the answer at each input. Once you
      set all your answers you can press
      <strong>${this.t.checkAnswer}</strong> to test your answers. You will get
      feedback just below here indicating correctness of your answer.
    </p>`}static get styles(){return[super.styles,t`
        simple-fields-field {
          display: inline-block;
          margin-bottom: 0;
          vertical-align: middle;
        }
        simple-fields-field[type="textfield"] {
          width: 140px;
          padding: var(--ddd-spacing-1) var(--ddd-spacing-2);
        }
      `]}isCorrect(){let e=!0;for(var t in this.numberCorrect=0,this.numberGuessed=0,this.answers){let e=this.shadowRoot.querySelector(`[data-answer-index="${t}"]`);if("object"==typeof this.answers[t].answer&&e&&void 0!==e.value&&""!==e.value)for(var s in this.numberGuessed++,this.answers[t].answer)e.value.toLowerCase().trim()===this.answers[t].answer[s].toLowerCase().trim()&&this.numberCorrect++;else e&&void 0!==e.value&&""!==e.value&&(this.numberGuessed++,e.value.toLowerCase().trim()===this.answers[t].answer.toLowerCase().trim()&&this.numberCorrect++)}return this.numberCorrect!==this.answers.length&&(e=!1),e}resetAnswer(e){if(this.isCorrect()){this.rebuildWordList(this.statement);let e=Array.from(this.shadowRoot.querySelectorAll("[data-answer-index]"));for(var t in e)e[t].value="",e[t].selectedIndex&&(e[t].selectedIndex=0)}super.resetAnswer(e)}rebuildWordList(e){this.answers=[],this.wordList=[];const t=e.trim().split(/\s+/g),s=t.filter((e=>e.startsWith("[")&&e.endsWith("]")));for(var r in s){let e={text:s[r],correct:!0},t=s[r].replace("[","").replace("]","");t.split("~").length>1?e.answer=t.split("~"):(e.answer=t.split("|")[0],e.possible=t.split("|"),this.shuffleArray(e.possible)),this.answers.push(e)}for(var r in t)this.wordList.push({text:t[r]});this.requestUpdate()}constructor(){super(),this.question="Fill in the blanks"}renderInteraction(){return e`<div class="text-wrap">
      <div class="text">
        ${this.wordList.map((t=>e`
            ${t.text.startsWith("[")&&t.text.endsWith("]")?this.renderFillInBlankField(t):e`${t.text} `}
          `))}
      </div>
    </div>`}shuffleArray(e){for(let t=e.length-1;t>0;t--){const s=Math.floor(Math.random()*(t+1));[e[t],e[s]]=[e[s],e[t]]}}renderFillInBlankField(t){const s=this.answers.findIndex((e=>t.text===e.text));if(this.answers[s].possible){let t=[{text:"",value:""},...this.answers[s].possible.map((e=>({text:e,value:e})))];return e`<simple-fields-field
        data-answer-index="${s}"
        type="select"
        .itemsList="${t}"
      ></simple-fields-field>`}return e` <simple-fields-field
        type="textfield"
        data-answer-index="${s}"
      ></simple-fields-field>`}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}}globalThis.customElements.define(FillInTheBlanks.tag,FillInTheBlanks);export{FillInTheBlanks};