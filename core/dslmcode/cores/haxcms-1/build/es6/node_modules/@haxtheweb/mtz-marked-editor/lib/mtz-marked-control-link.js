import{html as t,PolymerElement as e}from"../../../@polymer/polymer/polymer-element.js";import"../../../@polymer/iron-a11y-keys/iron-a11y-keys.js";import"../../simple-icon/simple-icon.js";import"../../simple-icon/lib/simple-icons.js";import"../../simple-icon/lib/simple-icon-button.js";import{mtzMarkedControlBehavior as i}from"./mtz-marked-control-behavior.js";class MtzMarkedControlLink extends(i(e)){static get template(){return t`
      <style>
        :host {
          display: inline-block;
        }
      </style>

      <simple-icon-button
        icon="[[icon]]"
        noink="[[noink]]"
        on-click="_handleCommand"
        alt="[[title]]"
      ></simple-icon-button>

      <iron-a11y-keys
        keys="[[keys]]"
        on-keys-pressed="_handleCommand"
        target="[[__editor]]"
      ></iron-a11y-keys>
    `}static get tag(){return"mtz-marked-control-link"}static get properties(){return{...super.properties,title:String,icon:String,keys:String,noink:Boolean}}_handleCommand(t){t.preventDefault(),t.stopPropagation();const e=this.__editor,i=e.getSelection(),o=new RegExp("\\[(.*)\\]\\((.*)\\)"),n=i.text.match(o);let r,s;if(n){r=n[1],s=n[2];const t=s||r;e.replaceSelection(t),e.setSelection(i.start,i.end-(i.length-t.length))}else{if(this._isLink(i)){if(r=prompt("What text would you like to display?"),!r)return;s=i.text}else{if(s=prompt("What link would you like to use?"),!s)return;r=i.text}if(s.startsWith("http://"))return void alert("Links must be https://");const t=o[Symbol.replace]("[]()",`[${r}](${s})`);e.replaceSelection(t),e.setSelection(i.start,i.end+(t.length-i.length))}}_isLink(t){return t.text.startsWith("https://")}}customElements.define(MtzMarkedControlLink.tag,MtzMarkedControlLink);export{MtzMarkedControlLink};