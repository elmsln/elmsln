var e=require("assert"),t=require("../test")(module),n=require("../../lib/writers/markdown-writer");t("special markdown characters are escaped",(function(){var t=n.writer();return t.text("\\*"),e.equal(t.asString(),"\\\\\\*")})),t("unrecognised elements are treated as normal text",(function(){var t=n.writer();return t.open("blah"),t.text("Hello"),t.close("blah"),e.equal(t.asString(),"Hello")})),t("paragraphs are terminated with double new line",(function(){var t=n.writer();return t.open("p"),t.text("Hello"),t.close("p"),e.equal(t.asString(),"Hello\n\n")})),t("h1 elements are converted to heading with leading hash",(function(){var t=n.writer();return t.open("h1"),t.text("Hello"),t.close("h1"),e.equal(t.asString(),"# Hello\n\n")})),t("h6 elements are converted to heading with six leading hashes",(function(){var t=n.writer();return t.open("h6"),t.text("Hello"),t.close("h6"),e.equal(t.asString(),"###### Hello\n\n")})),t("br is written as two spaces followed by new line",(function(){var t=n.writer();return t.text("Hello World"),t.selfClosing("br"),e.equal(t.asString(),"Hello World  \n")})),t("strong text is surrounded by two underscores",(function(){var t=n.writer();return t.text("Hello "),t.open("strong"),t.text("World"),t.close("strong"),e.equal(t.asString(),"Hello __World__")})),t("emphasised text is surrounded by one asterix",(function(){var t=n.writer();return t.text("Hello "),t.open("em"),t.text("World"),t.close("em"),e.equal(t.asString(),"Hello *World*")})),t("anchor tags are written as hyperlinks",(function(){var t=n.writer();return t.open("a",{href:"http://example.com"}),t.text("Hello"),t.close("a"),e.equal(t.asString(),"[Hello](http://example.com)")})),t("anchor tags without href attribute are treated as ordinary text",(function(){var t=n.writer();return t.open("a"),t.text("Hello"),t.close("a"),e.equal(t.asString(),"Hello")})),t("elements with IDs have anchor tags with IDs appended to start of markdown element",(function(){var t=n.writer();return t.open("h1",{id:"start"}),t.text("Hello"),t.close("h1"),e.equal(t.asString(),'# <a id="start"></a>Hello\n\n')})),t("links have anchors before opening square bracket",(function(){var t=n.writer();return t.open("a",{href:"http://example.com",id:"start"}),t.text("Hello"),t.close("a"),e.equal(t.asString(),'<a id="start"></a>[Hello](http://example.com)')})),t("can generate images",(function(){var t=n.writer();return t.selfClosing("img",{src:"http://example.com/image.jpg",alt:"Alt Text"}),e.equal(t.asString(),"![Alt Text](http://example.com/image.jpg)")})),t("can generate images with missing alt attribute",(function(){var t=n.writer();return t.selfClosing("img",{src:"http://example.com/image.jpg"}),e.equal(t.asString(),"![](http://example.com/image.jpg)")})),t("can generate images with missing src attribute",(function(){var t=n.writer();return t.selfClosing("img",{alt:"Alt Text"}),e.equal(t.asString(),"![Alt Text]()")})),t("doesn't display empty images",(function(){var t=n.writer();return t.selfClosing("img"),e.equal(t.asString(),"")})),t("list item outside of list is treated as unordered list",(function(){var t=n.writer();return t.open("li"),t.text("Hello"),t.close("li"),e.equal(t.asString(),"- Hello\n")})),t("can generate an ordered list",(function(){var t=n.writer();return t.open("ol"),t.open("li"),t.text("Hello"),t.close("li"),t.open("li"),t.text("World"),t.close("li"),t.close("ol"),e.equal(t.asString(),"1. Hello\n2. World\n\n")})),t("can generate an unordered list",(function(){var t=n.writer();return t.open("ul"),t.open("li"),t.text("Hello"),t.close("li"),t.open("li"),t.text("World"),t.close("li"),t.close("ul"),e.equal(t.asString(),"- Hello\n- World\n\n")})),t("can generate a nested ordered list with correct numbering",(function(){var t=n.writer();return t.open("ol"),t.open("li"),t.text("Outer One"),t.open("ol"),t.open("li"),t.text("Nested One"),t.close("li"),t.open("li"),t.text("Nested Two"),t.close("li"),t.close("ol"),t.close("li"),t.open("li"),t.text("Outer Two"),t.close("li"),t.close("ol"),e.equal(t.asString(),"1. Outer One\n\t1. Nested One\n\t2. Nested Two\n2. Outer Two\n\n")})),t("can generate a multi-level nested ordered list",(function(){var t=n.writer();return t.open("ol"),t.open("li"),t.text("Outer One"),t.open("ol"),t.open("li"),t.text("Nested One"),t.open("ol"),t.open("li"),t.text("Inner One"),t.close("li"),t.close("ol"),t.close("li"),t.close("ol"),t.close("li"),t.close("ol"),e.equal(t.asString(),"1. Outer One\n\t1. Nested One\n\t\t1. Inner One\n\n")})),t("new ordered list resets numbering",(function(){var t=n.writer();return t.open("ol"),t.open("li"),t.text("First"),t.close("li"),t.close("ol"),t.open("p"),t.text("Hello"),t.close("p"),t.open("ol"),t.open("li"),t.text("Second"),t.close("li"),t.close("ol"),e.equal(t.asString(),"1. First\n\nHello\n\n1. Second\n\n")})),t("can generate a nested unordered list",(function(){var t=n.writer();return t.open("ul"),t.open("li"),t.text("Outer One"),t.open("ul"),t.open("li"),t.text("Nested One"),t.close("li"),t.open("li"),t.text("Nested Two"),t.close("li"),t.close("ul"),t.close("li"),t.open("li"),t.text("Outer Two"),t.close("li"),t.close("ul"),e.equal(t.asString(),"- Outer One\n\t- Nested One\n\t- Nested Two\n- Outer Two\n\n")})),t("can nest inline elements",(function(){var t=n.writer();return t.open("p"),t.text("Lorem "),t.open("strong"),t.text("ipsum "),t.open("em"),t.text("dolor"),t.close("em"),t.text(" sit"),t.close("strong"),t.text(" amet"),t.close("p"),e.equal(t.asString(),"Lorem __ipsum *dolor* sit__ amet\n\n")})),t("can emphasise list text",(function(){var t=n.writer();return t.open("ol"),t.open("li"),t.text("Hello "),t.open("strong"),t.text("Strong"),t.close("strong"),t.text(" World"),t.close("li"),t.open("li"),t.text("Hello "),t.open("em"),t.text("Emphasis"),t.close("em"),t.text(" World"),t.close("li"),t.close("ol"),e.equal(t.asString(),"1. Hello __Strong__ World\n2. Hello *Emphasis* World\n\n")})),t("generates correct spacing between paragraphs and lists",(function(){var t=n.writer();return t.open("p"),t.text("Hello World"),t.close("p"),t.open("ul"),t.open("li"),t.text("First Item"),t.close("li"),t.open("li"),t.text("Second Item"),t.close("li"),t.close("ul"),t.open("p"),t.text("Hello World"),t.close("p"),e.equal(t.asString(),"Hello World\n\n- First Item\n- Second Item\n\nHello World\n\n")}));