import{html as e,PolymerElement as t}from"../../../@polymer/polymer/polymer-element.js";import"../../../@polymer/iron-ajax/iron-ajax.js";import"../../../@polymer/iron-form-element-behavior/iron-form-element-behavior.js";import"../../../@polymer/app-layout/app-layout.js";import"../../../@polymer/app-layout/app-toolbar/app-toolbar.js";import"../../simple-toast/simple-toast.js";import"../../simple-modal/simple-modal.js";import"../../../@polymer/paper-input/paper-input.js";import"../../../@polymer/paper-listbox/paper-listbox.js";import"../../lrnsys-button/lrnsys-button.js";import"../../grafitto-filter/grafitto-filter.js";import"../../simple-fields/lib/simple-fields-container.js";import"../lrnsys-comment.js";class LrnsysCommentList extends t{static get template(){return e`
      <style>
        :host {
          display: block;
        }
        app-toolbar {
          padding: 0;
        }
        app-toolbar > *:not(:last-child) {
          margin-right: 10px;
        }
        lrnsys-button {
          font-size: 12px;
        }
        .comment-button {
          --lrnsys-button-height: unset;
        }
        .comment-button::part(lrnsys-button-inner-div) {
          padding: 0;
        }
      </style>
      <!-- Load all comments on load of element -->
      <iron-ajax
        auto
        url="[[sourcePath]]"
        handle-as="json"
        method="[[opsRequestMethod.list]]"
        last-response="{{comments}}"
      ></iron-ajax>
      <!-- Create stub-comment -->
      <iron-ajax
        id="ajaxcreatestub"
        url="[[createStubUrl]]"
        method="[[opsRequestMethod.create]]"
        body="[[activeComment.id]]"
        on-response="_updateReply"
        handle-as="json"
        last-response="{{newComment}}"
      ></iron-ajax>
      <!-- Update comment -->
      <iron-ajax
        id="ajaxupdaterequest"
        url="[[reqUrl]]"
        method="[[opsRequestMethod.update]]"
        body="[[activeComment]]"
        content-type="application/json"
        handle-as="json"
        on-response="_handleUpdateResponse"
      ></iron-ajax>
      <!-- Delete comment -->
      <iron-ajax
        id="ajaxdeleterequest"
        url="[[reqUrl]]"
        method="[[opsRequestMethod.delete]]"
        body="[[activeComment]]"
        content-type="application/json"
        handle-as="json"
        on-response="_handleDeleteResponse"
      ></iron-ajax>
      <!-- Like comment -->
      <iron-ajax
        id="ajaxlikerequest"
        url="[[reqUrl]]"
        method="[[opsRequestMethod.like]]"
        body="[[activeComment]]"
        content-type="application/json"
        handle-as="json"
        on-response="_handleLikeResponse"
      ></iron-ajax>
      <app-toolbar>
        <lrnsys-button
          icon="add"
          class="comment-button"
          raised
          on-click="handleTopReply"
          id="leavecomment"
          hover-class="blue white-text"
          label="Add Comment"
        ></lrnsys-button>
        <paper-input
          label="Filter comments by text"
          id="filtercomments"
          aria-controls="filteredcomments"
          value=""
          always-float-label=""
        ></paper-input>
      </app-toolbar>
      <grafitto-filter
        id="filteredcomments"
        items$="[[_toArray(comments.data)]]"
        where="attributes.body"
        as="filtered"
        like=""
      >
        <template>
          <template
            is="dom-repeat"
            id="commentlist"
            items="[[filtered]]"
            as="item"
          >
            <lrnsys-comment
              comment="{{item}}"
              hover-class="blue white-text"
            ></lrnsys-comment>
          </template>
        </template>
      </grafitto-filter>
    `}static get tag(){return"lrnsys-comment-list"}static get properties(){return{csrfToken:{type:String},opsRequestMethod:{type:Object,value:{list:"GET",create:"POST",update:"PUT",delete:"DELETE",like:"PATCH"}},activeComment:{type:Object,notify:!0},newComment:{type:Object,notify:!0},comments:{type:Object,notify:!0},sourcePath:{type:String,notify:!0},commentOpsBase:{type:String,notify:!0},createStubUrl:{type:String,notify:!0},reqUrl:{type:String,notify:!0,computed:"_computeCommentOpsUrl(activeComment, commentOpsBase, csrfToken)"}}}connectedCallback(){super.connectedCallback(),this.shadowRoot.querySelector("#filtercomments").addEventListener("value-changed",(e=>{this.shadowRoot.querySelector("#filteredcomments").like=e.target.value}))}disconnectedCallback(){this.shadowRoot.querySelector("#filtercomments").removeEventListener("value-changed",(e=>{this.shadowRoot.querySelector("#filteredcomments").like=e.target.value})),super.disconnectedCallback()}_computeCommentOpsUrl(e,t,o){if(void 0!==e)return t+"/"+e.id+"?token="+o}handleLike(e){this.activeComment=e.detail.comment,this.shadowRoot.querySelector("#ajaxlikerequest").generateRequest()}constructor(){super(),globalThis.SimpleModal.requestAvailability(),setTimeout((()=>{this.addEventListener("comment-save",this.handleSave.bind(this)),this.addEventListener("comment-editing",this.handleEditing.bind(this)),this.addEventListener("comment-reply",this.handleReply.bind(this)),this.addEventListener("comment-like",this.handleLike.bind(this)),this.addEventListener("comment-delete-dialog",this.handleDeleteDialog.bind(this))}),0)}_handleLikeResponse(e){}handleDeleteDialog(e){this.activeComment=e.detail.comment;let t=globalThis.document.createElement("p"),o=globalThis.document.createTextNode("Are you sure you want to delete your comment? This cannot be undone.");t.appendChild(o);let s=globalThis.document.createElement("div");s.classList.add("buttons");let n=globalThis.document.createElement("button");n.setAttribute("dialog-dismiss","dialog-dismiss"),n.style.padding="16px",n.style.margin="16px",o=globalThis.document.createTextNode("Keep comment"),n.appendChild(o);let a=globalThis.document.createElement("button");a.setAttribute("dialog-confirm","dialog-confirm"),a.setAttribute("autofocus","autofocus"),a.addEventListener("click",this._handleDeleteConfirm.bind(this)),a.style.color="white",a.style.backgroundColor="red",a.style.padding="16px",a.style.margin="16px",o=globalThis.document.createTextNode("Delete the comment"),a.appendChild(o),s.appendChild(a),s.appendChild(n);const i=new CustomEvent("simple-modal-show",{bubbles:!0,composed:!0,cancelable:!0,detail:{title:"Delete comment",elements:{content:t,buttons:s},styles:{"--simple-modal-width":"15vw","--simple-modal-max-width":"15vw","--simple-modal-z-index":"100000000","--simple-modal-min-height":"10vh"},invokedBy:e.detail.target,clone:!1}});this.dispatchEvent(i)}handleEditing(e){const t=new CustomEvent("simple-toast-show",{bubbles:!0,composed:!0,cancelable:!0,detail:{text:"Be awesome to each other",duration:4e3}});this.dispatchEvent(t)}handleTopReply(e){this.set("newComment",[]),this.set("activeComment",[]),this.shadowRoot.querySelector("#ajaxcreatestub").generateRequest()}handleReply(e){this.set("newComment",[]),this.activeComment=e.detail.comment,this.shadowRoot.querySelector("#ajaxcreatestub").generateRequest()}_updateReply(e){var t=this.activeComment,o=this.comments.data;if(this.newComment=this.newComment.data,0==o.length)o.push(this.newComment);else if(void 0===t.id)o.push(this.newComment);else for(var s=0;s<o.length;s++)o[s].id==t.id&&o.splice(s+1,0,this.newComment);this.activeComment=this.newComment,this.set("comments.data",[]),this.set("comments.data",o),this.notifyPath("comments.data")}_handleDeleteConfirm(e){this.shadowRoot.querySelector("#ajaxdeleterequest").generateRequest()}_handleDeleteResponse(e){for(var t=this.activeComment,o=this.comments.data,s=0;s<o.length;s++)if(o[s].id==t.id){o.splice(s,1),this.set("activeComment",[]),this.set("comments.data",[]),this.set("comments.data",o),this.notifyPath("comments.data");const e=new CustomEvent("simple-toast-show",{bubbles:!0,composed:!0,cancelable:!0,detail:{text:"Comment deleted",duration:4e3}});return this.dispatchEvent(e),!0}}handleSave(e){this.activeComment=e.detail.comment,this.shadowRoot.querySelector("#ajaxupdaterequest").generateRequest()}_handleUpdateResponse(e){const t=new CustomEvent("simple-toast-show",{bubbles:!0,composed:!0,cancelable:!0,detail:{text:"Comment saved!",duration:4e3}});this.dispatchEvent(t)}_toArray(e){return null==e?[]:Object.keys(e).map((function(t){return e[t]}))}}customElements.define(LrnsysCommentList.tag,LrnsysCommentList);export{LrnsysCommentList};