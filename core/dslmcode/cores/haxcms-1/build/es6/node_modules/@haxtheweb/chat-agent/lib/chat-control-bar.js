/**
 * Copyright 2024 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{ChatAgentModalStore as e}from"../chat-agent.js";import{DDD as t}from"../../d-d-d/d-d-d.js";import{autorun as o,toJS as i}from"../../../mobx/dist/mobx.esm.js";import{html as l,css as n}from"../../../lit/index.js";class ChatControlBar extends t{static get tag(){return"chat-control-bar"}constructor(){super(),this.isFullView=null,this.isInterfaceHidden=null,this.dataCollectionEnabled=null,o((()=>{this.isFullView=i(e.isFullView),this.isInterfaceHidden=i(e.isInterfaceHidden),this.dataCollectionEnabled=i(e.dataCollectionEnabled)}))}static get styles(){return[super.styles,n`
        /* https://oer.hax.psu.edu/bto108/sites/haxcellence/documentation/ddd */

        :host {
          display: block;
          container-type: inline-size;
        }

        .chat-control-bar-wrapper {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: var(--ddd-spacing-2) var(--ddd-spacing-0);
        }

        button {
          background-color: #2b2a33;
          color: var(--ddd-theme-default-white);
          border-radius: var(--ddd-radius-sm);
        }

        button:hover,
        button:focus-visible {
          background-color: #52525e;
        }

        button > simple-icon-lite {
          --simple-icon-color: var(--ddd-theme-default-white);
        }

        .data-collection-icon {
          --simple-icon-color: var(--ddd-theme-default-original87Pink);
        }

        :host([data-collection-enabled]) .data-collection-icon {
          --simple-icon-color: var(--ddd-theme-default-futureLime);
        }

        /* Phones */
        @media only screen and (max-width: 425px),
          only screen and (max-height: 616px) {
          #view-button {
            display: none;
          }
        }

        /* TODO Does not work */
        @container (max-width: 330px) {
          .data-collection-label {
            display: none;
          }
        }
      `]}render(){return l`
      <!-- https://open-apis.hax.cloud/?path=/story/media-icons--hax-iconset-story -->

      <div class="chat-control-bar-wrapper">
        <div class="left-side">
          <!-- https://stackoverflow.com/questions/72654466/how-do-i-make-a-button-that-will-download-a-file -->
          <button
            id="download-button"
            @click=${this.handleDownloadLogButton}
            aria-label="Download Log as txt"
          >
            <simple-icon-lite icon="icons:file-download"></simple-icon-lite>
          </button>
          <simple-tooltip for="download-button" position="right"
            >Download Chat Log</simple-tooltip
          >

          <button
            id="reset-button"
            @click=${this.handleResetButton}
            aria-label="Reset Chat"
          >
            <simple-icon-lite icon="icons:refresh"></simple-icon-lite>
          </button>
          <simple-tooltip for="reset-button" position="right"
            >Reset Chat</simple-tooltip
          >

          <button
            id="data-collection-button"
            @click=${this.handleDataCollectionButton}
            aria-label="Toggle Data Collection"
          >
            <simple-icon-lite
              icon="lrn:data_usage"
              class="data-collection-icon"
            ></simple-icon-lite>
            <span class="data-collection-label">Data Collection</span>
          </button>
          <simple-tooltip for="data-collection-button" position="right"
            >Toggle Data Collection</simple-tooltip
          >

          <button
            id="dev-mode-button"
            @click=${this.handleDevModeButton}
            aria-label="Toggle Developer Mode"
          >
            <simple-icon-lite icon="hax:console-line"></simple-icon-lite>
          </button>
          <simple-tooltip for="dev-mode-button" position="right"
            >Toggle Developer Mode</simple-tooltip
          >
        </div>
        <div class="right-side">
          <button
            id="view-button"
            @click=${this.handleViewButton}
            aria-label="${this.isFullView?"Exit Full View":"Enter Full View"}"
          >
            <simple-icon-lite
              icon="${this.isFullView?"icons:fullscreen-exit":"icons:fullscreen"}"
            ></simple-icon-lite>
          </button>
          <simple-tooltip for="view-button" position="left"
            >${this.isFullView?"Exit Full View":"Enter Full View"}</simple-tooltip
          >

          ${this.isFullView?l`
                <button
                  id="hide-button"
                  @click=${this.handleHideButton}
                  aria-label="Hide Interface"
                >
                  <simple-icon-lite icon="remove"></simple-icon-lite>
                </button>
                <simple-tooltip for="hide-button" position="left"
                  >Hide Interface</simple-tooltip
                >
              `:""}
        </div>
      </div>
    `}handleDownloadLogButton(){e.developerModeEnabled&&console.info("HAX-DEV-MODE: Download log button pressed."),this.downloadChatLog()}handleResetButton(){e.developerModeEnabled&&console.info("HAX-DEV-MODE: Reset button pressed."),confirm("Reset the chat?")&&(confirm("Download the chat log before you reset?")?(e.developerModeEnabled&&console.info("HAX-DEV-MODE: Download chat log before reset confirmed."),this.downloadChatLog()):e.developerModeEnabled&&console.info("HAX-DEV-MODE: Download chat log before reset denied."),this.resetChat())}handleDataCollectionButton(){e.dataCollectionEnabled=!e.dataCollectionEnabled,this.dataCollectionEnabled?alert("Your conversations will be used to train our AI models"):alert("Your conversations will not be used to train our AI models")}handleDevModeButton(){e.developerModeEnabled=!e.developerModeEnabled}handleViewButton(){e.developerModeEnabled&&console.info("HAX-DEV-MODE: View switch button pressed."),e.isFullView=!this.isFullView,this.requestUpdate(),e.developerModeEnabled&&console.info("HAX-DEV-MODE: View switched to: "+(e.isFullView?"full":"standard"))}handleHideButton(){e.developerModeEnabled&&console.info("HAX-DEV-MODE: Hide button pressed."),this.isInterfaceHidden||(e.isInterfaceHidden=!0)}downloadChatLog(){e.developerModeEnabled&&console.info("HAX-DEV-MODE: Downloading chat log..."),e.handleDownload("txt")}resetChat(){e.developerModeEnabled&&console.info("HAX-DEV-MODE: Resetting chat..."),e.chatLog=[],e.merlinIndex=0,e.messageIndex=0,e.userIndex=0,e.startAI()}static get properties(){return{...super.properties,dataCollectionEnabled:{type:Boolean,attribute:"data-collection-enabled",reflect:!0}}}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}}globalThis.customElements.define(ChatControlBar.tag,ChatControlBar);export{ChatControlBar};