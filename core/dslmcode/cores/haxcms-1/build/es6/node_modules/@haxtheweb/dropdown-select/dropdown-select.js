import{LitElement as e,html as t,css as s}from"../../lit/index.js";import"../simple-picker/simple-picker.js";class DropdownSelect extends e{static get styles(){return[s`
        :host {
          display: block;
          --simple-picker-border-width: 0;
          --simple-picker-options-border-width: 1px;
          --simple-picker-options-border-color: var(
            --simple-fields-accent-color
          );
          --simple-picker-background-color: rgba(255, 255, 255, 0);
        }
        :host([hidden]) {
          display: none;
        }
      `]}render(){return t`
      <simple-fields-container
        id="menu"
        .error-message="${this.errorMessage}"
        .label="${this.label}"
      >
        <simple-picker
          id="picker"
          slot="field"
          value="${this.value}"
          @expand="${this._onOpen}"
          @collapse="${this.onClose}"
          @changed="${this._dropDownChanged}"
        >
        </simple-picker>
      </simple-fields-container>
      <slot id="content" hidden></slot>
    `}static get tag(){return"dropdown-select"}constructor(){super(),this.label="Select an option.",this.options=[[]],this.opened=!1,this.setOptions(),this.observer.observe(this,{attributes:!1,childList:!0,subtree:!1}),import("../simple-fields/lib/simple-fields-container.js")}disconnectedCallback(){this.observer.disconnect(),super.disconnectedCallback()}static get properties(){return{errorMessage:{attribute:"error-message",type:String},label:{type:String},opened:{type:Boolean},options:{type:Array},selectedItem:{attribute:"selected-item",type:Object},selectedItemIndex:{attribute:"selected-item-index",type:Number},selectedItemLabel:{attribute:"selected-item-label",type:String},value:{type:String,reflect:!0}}}get observer(){return new MutationObserver((()=>this.setOptions()))}setOptions(){let e=[];this.querySelectorAll("paper-item").forEach(((t,s)=>{e.push([{alt:t.innerHTML,style:t.getAttribute("style")||void 0,icon:t.querySelector("[icon]")?t.querySelector("[icon]").getAttribute("icon"):void 0,value:t.getAttribute("value")||t.getAttribute("id")||s}])})),e===[]&&(e=[[]]),this.options=e}updated(e){let t=this.shadowRoot&&this.shadowRoot.querySelector("#picker")?this.shadowRoot.querySelector("#picker"):void 0;e.forEach(((e,s)=>{"value"===s&&this._valueChanged(this.value,e),"options"===s&&this.options!==e&&(t.options=this.options)})),this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))}_onOpen(){this.opened=!0,this.dispatchEvent(new CustomEvent("open",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))}_onClose(){this.opened=!1,this.dispatchEvent(new CustomEvent("close",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))}_dropDownChanged(e){let t=this.shadowRoot&&this.shadowRoot.querySelector("#picker")?this.shadowRoot.querySelector("#picker"):void 0;this.value=t.value}_valueChanged(e,t){let s=null,i=null,o=-1;this.selectedItem=this.value,this.options.forEach((e=>e.forEach((e=>{this.value===e.value&&(s=e.alt||e.value,i=o++)})))),this.selectedItemLabel=s,this.selectedItemIndex=i,void 0!==t&&(this.dispatchEvent(new CustomEvent("value-changed",{bubbles:!0,cancelable:!0,composed:!0,target:this,detail:{value:e,oldValue:t}})),this.dispatchEvent(new CustomEvent("dropdown-select-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:this})))}}customElements.define(DropdownSelect.tag,DropdownSelect);export{DropdownSelect};