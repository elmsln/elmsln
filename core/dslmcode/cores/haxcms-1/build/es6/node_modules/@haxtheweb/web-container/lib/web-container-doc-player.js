import"../web-container.js";import{LitElement as e,html as t,css as n}from"../../../lit/index.js";import{DDDSuper as i}from"../../d-d-d/d-d-d.js";import{haxElementToNode as r}from"../../utils/utils.js";export class WebContainerDocPlayer extends(i(e)){static get tag(){return"web-container-doc-player"}constructor(){super(),this.element=null,this.project=null,this.importpath=null,this.version="latest",this.rebuilding=!1,globalThis.addEventListener("message",(e=>{let t=JSON.parse(e.data);"frameResize"===t.subject&&t.height&&this.shadowRoot.querySelector("web-container").style.setProperty("--web-container-iframe-height",parseInt(t.height)+40+"px")}))}updated(e){super.updated(e),e.forEach(((e,t)=>{["element","project","version"].includes(t)&&this.shadowRoot&&(this.rebuilding||this.rebuildwebcontainerdocs())}))}async rebuildwebcontainerdocs(){this.rebuilding=!0;let e=this.shadowRoot.querySelector("#webcontainer");await globalThis.WebContainerManager.requestAvailability();let t=globalThis.document.createElement("web-container");t.hideTerminal=!0,t.hideEditor=!0,t.files={"index.html":{file:{contents:`\n<!doctype html>\n<html lang="en">\n  <head>\n    <base href="/">\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />\n    <meta name="Description" content="Demonstration for web-container">\n    <style>\n      :root, html, body {\n        margin: 0;\n        padding: 0;\n      }\n    </style>\n    <title>Demo of ${this.importpath?this.importpath:this.project} : ${this.version}</title>\n  </head>\n  <body>\n      <h1>Demo of ${this.importpath?this.importpath:this.project} : ${this.version}</h1>\n      <div id="codesample"></div>\n      <div id="demo"></div>\n  </body>\n  <script>\n    window.process = window.process || {\n      env: {\n        NODE_ENV: "production"\n      }\n    };\n  <\/script>\n  <script type="module" async defer>\n    import "${this.importpath?this.importpath:this.project}";\n    import "@haxtheweb/code-sample/code-sample.js";\n    import "@haxtheweb/code-editor/lib/code-pen-button.js";\n    import { haxElementToNode } from "@haxtheweb/utils/utils.js";\n    // take tag and convert it to a demo implementation\n    async function getExample() {\n      let el = globalThis.document.createElement("${this.element}");\n      let CEClass = globalThis.customElements.get("${this.element}");\n      if (CEClass && typeof CEClass.haxProperties !== undefined) {\n        let schema = CEClass.haxProperties;\n        // resolve direct setting vs loading file\n        if (typeof schema === "string") {\n          schema = await fetch(schema).then((response) => {\n            if (response && response.json) return response.json();\n            return false;\n          });\n        }\n        if (schema && schema.demoSchema && schema.demoSchema[0]) {\n          el = haxElementToNode(schema.demoSchema[0]);        \n        }\n      }\n      let demo = globalThis.document.querySelector('#demo');\n      demo.innerHTML = '';\n      demo.appendChild(el);\n      let sample = globalThis.document.createElement('code-sample');\n      sample.innerHTML = '<template>' + el.outerHTML + '</template>';\n      let sampleWrapper = globalThis.document.querySelector('#codesample');\n      sampleWrapper.innerHTML = '';\n      sampleWrapper.appendChild(sample);\n      const bodyObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target === globalThis.document.body) {\n            const newHeight = entry.contentRect.height;\n            parent.postMessage(\n              '{"subject":"frameResize", "height":"' + entry.contentRect.height + '" }',\n              "*",\n            );\n          }\n        }\n      });\n      bodyObserver.observe(globalThis.document.body);\n    }\n    // generate example dynamically so we can use HAXProps if it exists\n    getExample();\n  <\/script>\n</html>\n`}},"package.json":{file:{contents:`\n            {\n              "name": "${this.element} doc example",\n              "type": "module",\n              "dependencies": {\n                "@haxtheweb/utils": "^9.0.2",\n                "@haxtheweb/code-sample": "^9.0.6",\n                "@haxtheweb/code-editor": "^9.0.6",\n                "${this.project}": "${this.version}"\n              },\n              "devDependencies": {\n                "@web/dev-server": "0.4.6"\n              },\n              "scripts": {\n                "start": "npm run web-dev-server",\n                "web-dev-server": "web-dev-server"\n              }\n            }`}},"web-dev-server.config.mjs":{file:{contents:"\nconst hmr = process.argv.includes('--hmr');\nexport default ({\n  open: '/',\n  watch: !hmr,\n  https: true,\n  dedupe: true,\n  nodeResolve: {\n    exportConditions: ['browser', 'development'],\n  },\n  appIndex: 'index.html',\n});\n"}}},t.innerHTML="",e.innerHTML="",e.appendChild(t),this.rebuilding=!1}static get properties(){return{...super.properties,project:{type:String,reflect:!0},importpath:{type:String,reflect:!0},version:{type:String,reflect:!0},element:{type:String,reflect:!0},rebuilding:{type:Boolean,reflect:!0}}}static get styles(){return[super.styles,n`
        :host {
          display: block;
        }
      `]}async getExample(e,t=!0){let n=globalThis.document.createElement(e);if("function"==typeof n.haxProperties){let e=n.haxProperties();"string"==typeof e&&(e=await fetch(e).then((e=>!(!e||!e.json)&&e.json())),n=r(e.demoSchema[0]))}return t?n.outerHTML:n}render(){return t`
      <div id="webcontainer"></div>
    `}_getDataString(e){return JSON.stringify(e).replace(/"/g,"&quot;").replace(/'/g,"&apos;")}async codePenData(){let e=this._getDataString({title:`Demo of ${this.project} : ${this.version}`,html:await this.getExample(this.element),head:'<script>globalThis.WCGlobalCDNPath="https://cdn.hax.cloud/cdn/";<\/script><script src="https://cdn.hax.cloud/cdn/build.js"><\/script>'});this.shadowRoot.querySelector("code-pen-button").setAttribute("data-string",e)}static get haxProperties(){return new URL(`./${this.tag}.haxProperties.json`,import.meta.url).href}}globalThis.customElements.define(WebContainerDocPlayer.tag,WebContainerDocPlayer);