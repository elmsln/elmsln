/**
 * Copyright 2024 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import"./lib/chat-button.js";import"./lib/chat-control-bar.js";import"./lib/chat-developer-panel.js";import"./lib/chat-input.js";import"./lib/chat-interface.js";import"./lib/chat-message.js";import"./lib/chat-suggestion.js";import"../rpg-character/rpg-character.js";import"../simple-icon/simple-icon.js";import"../simple-cta/simple-cta.js";import"../simple-tooltip/simple-tooltip.js";import{DDD as e}from"../d-d-d/d-d-d.js";import{html as t,css as s}from"../../lit/index.js";import{HAXCMSSiteEditorUI as i}from"../haxcms-elements/lib/core/haxcms-site-editor-ui.js";import{store as o}from"../haxcms-elements/lib/core/haxcms-site-store.js";import{observable as a,makeObservable as n,computed as r,configure as h,autorun as c,toJS as d}from"../../mobx/dist/mobx.esm.js";h({enforceActions:!1});import{MicroFrontendRegistry as l}from"../micro-frontend-registry/micro-frontend-registry.js";import{enableServices as u}from"../micro-frontend-registry/lib/microServices.js";u(["haxcms"]),l.add({endpoint:"/api/apps/haxcms/aiChat",name:"@haxcms/aiChat",title:"AI Chat",description:"AI based chat agent that can answer questions about a site",params:{site:"location of the HAXcms site OR site.json data",type:"site for site.json or link for remote loading",question:"Question to ask of the AI",engine:"which engine to use as we test multiple",context:"context to query based on. Course typical"}});class ChatAgent extends e{static get tag(){return"chat-agent"}constructor(){super(),this.chatLog=[],this.engine="alfred",void 0!==o.userData.userName?this.userName=o.userData.userName:this.userName="guest",this.context="phys211",this.isLoading=null,this.dataCollectionEnabled=!0,this.darkMode=o.darkMode,this.editMode=!0,this.buttonIcon="hax:wizard-hat",this.buttonLabel="Merlin-AI",this.developerModeEnabled=!1,this.promptCharacterLimit,this.promptPlaceholder="Enter your prompt here...",this.isFullView=!1,this.isInterfaceHidden=!1,this.merlinIndex=0,this.messageIndex=0,this.userIndex=0,this.userTypeWriterSpeed=0,this.merlinTypeWriterSpeed=2,this.currentSuggestions=[],this.isSiteEditorOpen=i.userMenuOpen,console.log(this.isSiteEditorOpen),n(this,{buttonIcon:a,chatLog:a,darkMode:a,dataCollectionEnabled:a,developerModeEnabled:a,editMode:a,engine:a,isFullView:a,isInterfaceHidden:a,isLoading:a,merlinIndex:a,messageIndex:a,userIndex:a}),c((()=>{d(this.buttonIcon),d(this.chatLog),d(o.darkMode),d(this.dataCollectionEnabled),d(this.developerModeEnabled),d(this.editMode),d(this.engine);const e=d(this.isFullView),t=d(this.isInterfaceHidden),s=d(this.isLoading);d(this.merlinIndex),d(this.messageIndex),d(this.userIndex);e?this.setAttribute("is-full-view",""):this.hasAttribute("is-full-view")&&this.removeAttribute("is-full-view"),t?this.setAttribute("is-interface-hidden",""):this.hasAttribute("is-interface-hidden")&&this.removeAttribute("is-interface-hidden"),this.buttonIcon=s?"hax:loading":"hax:wizard-hat",this.requestUpdate()}))}static get styles(){return[super.styles,s`
        /* https://oer.hax.psu.edu/bto108/sites/haxcellence/documentation/ddd */

        :host {
          container-type: normal;
          display: block;
        }

        .chat-agent-wrapper {
          bottom: var(--ddd-spacing-2);
          display: flex;
          flex-direction: column;
          gap: var(--ddd-spacing-2);
          position: fixed;
          right: var(--ddd-spacing-2);
          width: 35%;        
        }

        :host([is-full-view]) .chat-agent-wrapper {
          bottom: var(--ddd-spacing-0);
          gap: var(--ddd-spacing-0);
          right: var(--ddd-spacing-0);
          width: 25%;
          @media only screen and (min-height: 1000px) {
            width: 35%;
          }
        }

        :host([is-full-view]:host([is-interface-hidden])) .chat-agent-wrapper {
          bottom: var(--ddd-spacing-2);
          gap: var(--ddd-spacing-2);
          right: var(--ddd-spacing-2);
        }

        .agent-interface-wrapper {
          display: flex;
          justify-content: right;
        }

        .agent-button-wrapper {
          display: flex;
          justify-content: right;
        }

        @container (max-width: 600px) {
          .chat-agent-wrapper {
            width: 30%;
          }
        }

        @media only screen and (max-width: 425px) {
          .chat-agent-wrapper {
            width: 90%;
          }
        }
      `]}render(){return t`
      <div class="chat-agent-wrapper">
        <div class="agent-interface-wrapper">
          <chat-interface></chat-interface>
        </div>
        <div class="agent-button-wrapper">
          <chat-button>
            <span slot="label">${this.buttonLabel}</span>
          </chat-button>
        </div>
      </div>
    `}firstUpdated(e){super.firstUpdated&&super.firstUpdated(e),this.startAI()}startAI(){this.handleMessage("merlin","Hello! My name is Merlin. I am currently in beta, and may not yet be feature complete, so you may encounter some bugs. I can currently only answer questions related to physics. How can I assist you today?"),this.currentSuggestions=[{suggestion:"Who are you?",type:"hax"},{suggestion:"What can you do for me?",type:"help"},{suggestion:"How do I use you?",type:"help"}],this.shadowRoot.querySelector("chat-interface").shadowRoot.querySelector("chat-message").shadowRoot.querySelectorAll("chat-suggestion").forEach((e=>{e.hasAttribute("disabled")&&e.removeAttribute("disabled"),e.hasAttribute("chosen-prompt")&&e.removeAttribute("chosen-prompt")}))}handleMessage(e,t){let s;switch(this.devStatement(`Writing message "${t}" by ${e} to chatLog.`,"info"),this.messageIndex++,e){case"merlin":this.merlinIndex++,s=this.merlinIndex;break;case this.userName:this.userIndex++,s=this.userIndex}let i=new Date;const o={messageID:this.messageIndex,author:e,message:t,authorMessageIndex:s,timestamp:i.toString().replace(/\s/g,"-")};this.chatLog.push(o),e===this.userName&&this.handleInteraction(t)}handleInteraction(e){switch(this.devStatement(`Prompt sent to: ${this.engine}. Prompt sent: ${e}`,"info"),this.currentSuggestions=[],e){case"Who are you?":this.currentSuggestions=[{suggestion:"What can you do for me?",type:"help"},{suggestion:"How do I use you?",type:"help"}],this.handleMessage("merlin","I am Merlin. I was created for use within HAX websites as an assistant to help you with your questions. How may I help you today?");break;case"What can you do for me?":this.currentSuggestions=[{suggestion:"Who are you?",type:"hax"},{suggestion:"How do I use you?",type:"help"}],this.handleMessage("merlin","I can answer questions and chat with you about information relevant to the website you are navigating. How can I help you?");break;case"How do I use you?":this.currentSuggestions=[{suggestion:"Who are you?",type:"hax"},{suggestion:"What can you do for me?",type:"help"}],this.handleMessage("merlin","I support numerous functions. You can ask me questions, as well as download our chat log and reset our chat. You can start asking me questions by clicking on one of the suggested prompts, or by typing a prompt in the input box below and pressing the send button or pressing the enter key on your keyboard. Here are some of the keyboard controls you can utilize: \n 1. Tab Key - Navigates you through the numerous usable buttons. \n 2. Enter Key (in text area) - Will submit the prompt you wrote. \n 3. Enter key (When focusing on a button) - Will act in the same way as clicking the button. \n 4. Up & Down Arrow Keys (in text area) - will navigate you through previously sent prompts so you can send them again.");break;case"Why can't you connect?":this.currentSuggestions=[{suggestion:"How do I fix this connection issue?",type:"network"}],this.handleMessage("merlin","I am either unable to connect to the internet, or a service I connect to is not available, meaning I cannot research how to respond to your prompt.");break;case"How do I fix this connection issue?":this.currentSuggestions=[{suggestion:"Why can't you connect?",type:"network"}],this.handleMessage("merlin","Please ensure you are connected to the internet. I cannot respond to (most of) your questions if you are not connected to the internet. If you are connected, it is likely one of my connected services is having an issue, I will try to fix that and be back to help you soon.");break;default:globalThis.document.querySelector("base")&&globalThis.document.querySelector("base").href;const t={site:{file:"https://haxtheweb.org/site.json"},type:"site",question:e,engine:this.engine,context:this.context};this.isLoading=!0,l.call("@haxcms/aiChat",t).then((e=>{200==e.status&&(this.answers=[e.data.answers],this.question=e.data.question,this.currentSuggestions=[]),this.isLoading=!1,this.handleMessage("merlin",e.data.answers)})).catch((e=>{this.isLoading=!1,this.currentSuggestions=[{suggestion:"Why can't you connect?",type:"network"},{suggestion:"How do I fix this connection issue?",type:"network"}],this.handleMessage("merlin","I'm sorry, I'm having trouble connecting right now. Please try again soon. If you'd like to learn more, please click on one of the suggested prompts."),console.error(e)}))}}handleDownload(e){if(this.devStatement(`Downloading chatlog as ${e}.`,"info"),0!==this.chatLog.length){const t=JSON.stringify(this.chatLog,void 0,2);let s=new Date;const i=`${this.userName}-chat-log-${s.toString().replace(/\s/g,"-")}.${e}`;let o=document.createElement("a");o.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(t)),o.setAttribute("download",i),o.click(),o.remove()}}devStatement(e,t){if(this.developerModeEnabled)switch(t){case"log":console.log(`CHAT-AGENT-DEV-MODE: ${e}`);break;case"info":console.info(`CHAT-AGENT-DEV-MODE: ${e}`);break;case"warn":console.warn(`CHAT-AGENT-DEV-MODE: ${e}`);break;case"error":console.error(`CHAT-AGENT-DEV-MODE: ${e}`);break;default:console.error("No devStatement type specified")}}static get properties(){return{...super.properties,userName:{type:String,attribute:"user-name"},userPicture:{type:String,attribute:"user-picture"},promptCharacterLimit:{type:Number,attribute:"maxlength"},promptPlaceholder:{type:String,attribute:"placeholder"},merlinTypeWriterSpeed:{type:Number,attribute:"merlin-type-writer-speed"},userTypeWriterSpeed:{type:Number,attribute:"user-type-writer-speed"}}}}customElements.define(ChatAgent.tag,ChatAgent);export{ChatAgent};globalThis.ChatAgentModal=globalThis.ChatAgentModal||{},globalThis.ChatAgentModal.requestAvailability=()=>(globalThis.ChatAgentModal.instance||(globalThis.ChatAgentModal.instance=document.createElement("chat-agent"),document.body.appendChild(globalThis.ChatAgentModal.instance)),globalThis.ChatAgentModal.instance);export const ChatAgentModalStore=globalThis.ChatAgentModal.requestAvailability();