/**
 * Copyright 2024 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import"../../type-writer/type-writer.js";import{ChatAgentModalStore as e}from"../chat-agent.js";import{DDD as t}from"../../d-d-d/d-d-d.js";import{autorun as s,toJS as r}from"../../../mobx/dist/mobx.esm.js";import{html as a,css as d}from"../../../lit/index.js";class ChatMessage extends t{static get tag(){return"chat-message"}constructor(){super(),this.hasSuggestedPrompts=!1,this.isSentPrompt=!1,this.message="",this.messageWasSuggestedPrompt=!1,this.suggestedPrompts=e.currentSuggestions}static get styles(){return[super.styles,d`
        /* https://oer.hax.psu.edu/bto108/sites/haxcellence/documentation/ddd */

        :host {
          display: block;
          container-type: inline-size;
        }

        .chat-message-wrapper {
          padding: var(--ddd-spacing-2) var(--ddd-spacing-3);
          border-bottom: var(--ddd-border-md);
          border-bottom-style: dashed;
        }

        .sent-chat-message,
        .message {
          display: flex;
          flex-direction: row;
          gap: var(--ddd-spacing-3);
          align-items: center;
        }

        .received-chat-message {
          display: flex;
          flex-direction: column;
          /* gap: var(--ddd-spacing-1); */
        }

        .author-icon {
          display: flex;
          align-items: center;
          justify-content: center;
          border: var(--ddd-border-md);
          border-color: var(--ddd-theme-default-potentialMidnight);
          border-radius: var(--ddd-radius-circle);
          width: var(--ddd-spacing-18);
          height: var(--ddd-spacing-18);
        }

        .received-chat-message .author-icon {
          border-radius: var(--ddd-radius-xl);
        }

        simple-icon-lite {
          color: var(--data-theme-primary, var(--ddd-primary-13));
          --simple-icon-height: var(--ddd-icon-md);
          --simple-icon-width: var(--ddd-icon-md);
        }

        rpg-character {
          width: var(--ddd-spacing-12);
          height: var(--ddd-spacing-12);
          margin-bottom: var(--ddd-spacing-3);
        }

        .message-content {
          color: #000;
          border: var(--ddd-border-md);
          border-color: var(--ddd-theme-default-potentialMidnight);
          border-radius: var(--ddd-radius-sm);
          padding: var(--ddd-spacing-2);
          margin: var(--ddd-spacing-0);
          width: 80%;
          font-family: var(--ddd-font-primary);
          font-size: var(--ddd-font-size-4xs);
        }

        .suggested-prompts {
          display: flex;
          flex-direction: column;
          justify-content: center;
          padding-top: var(--ddd-spacing-3);
          gap: var(--ddd-spacing-2);
        }

        @container (max-width: 190px) {
          .author-icon {
            display: none;
          }

          .received-chat-message .message-content {
            background: rgba(73, 29, 112, 0.1);
          }

          .message {
            display: flex;
            justify-content: center;
            align-items: center;
          }
        }
      `]}render(){return a`
      <div class="chat-message-wrapper">
        ${this.isSentPrompt?this.renderSentMessage():this.renderReceivedMessage()}
      </div>
    `}renderReceivedMessage(){return a`
      <div class="received-chat-message">
        <div class="message">
          <div class="author-icon">
            <simple-icon-lite icon="hax:wizard-hat"></simple-icon-lite>
          </div>
          <type-writer
            class="message-content"
            text="${this.message}"
            speed="${e.merlinTypeWriterSpeed}"
          ></type-writer>
        </div>
        <div class="suggested-prompts">
          ${this.suggestedPrompts.map((e=>a`
              <chat-suggestion
                suggestion="${e.suggestion}"
                prompt-type="${e.type}"
                @click=${this.disableSuggestions}
                @keypress=${this.disableSuggestions}
              ></chat-suggestion>
            `))}
        </div>
      </div>
    `}renderSentMessage(){return a`
      <div class="sent-chat-message">
        <!-- <type-writer class="message-content" speed="${e.userTypeWriterSpeed}" text="${this.message}"></type-writer> -->
        <p class="message-content">${this.message}</p>
        <div class="author-icon">
          <rpg-character seed="${e.userName}"></rpg-character>
        </div>
      </div>
    `}disableSuggestions(e){const t=this.shadowRoot.querySelectorAll("chat-suggestion");if(t.forEach((e=>{e.hasAttribute("disabled")||e.setAttribute("disabled","")})),!e.currentTarget.hasAttribute("chosen-prompt")){let s=!1;t.forEach((e=>{e.hasAttribute("chosen-prompt")&&(s=!0)})),s||e.currentTarget.setAttribute("chosen-prompt","")}}static get properties(){return{...super.properties,hasSuggestedPrompts:{type:Boolean,attribute:"suggested-prompts"},isSentPrompt:{type:Boolean,attribute:"sent-prompt"},message:{type:String},messageWasSuggestedPrompt:{type:Boolean,attribute:"suggested-message"},suggestedPrompts:{type:Array}}}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}}globalThis.customElements.define(ChatMessage.tag,ChatMessage);export{ChatMessage};