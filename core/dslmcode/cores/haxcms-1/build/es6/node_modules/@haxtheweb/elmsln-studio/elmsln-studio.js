/**
 * Copyright 2020 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as s,html as t,css as i}from"../../lit/index.js";import{router as e}from"../../lit-element-router/lit-element-router.js";import{ElmslnStudioUtilities as o}from"./lib/elmsln-studio-utilities.js";import{ElmslnStudioStyles as n}from"./lib/elmsln-studio-styles.js";import"./lib/elmsln-studio-main.js";import"./lib/elmsln-studio-link.js";import"./lib/elmsln-studio-button.js";import"./lib/elmsln-studio-dashboard.js";class ElmslnStudio extends(e(o(n(s)))){static get tag(){return"elmsln-studio"}render(){return t`
      <div id="studio-nav">
        <elmsln-studio-link
          ?active="${"dashboard"===this.route}"
          href="${this.basePath}"
          >Dashboard</elmsln-studio-link
        >
        <elmsln-studio-link
          ?active="${"submissions"===this.route||"project"===this.route}"
          href="${this.basePath}submissions"
          >Submissions</elmsln-studio-link
        >
        <elmsln-studio-link
          ?active="${"assignments"===this.route||"assignment"===this.route}"
          href="${this.basePath}assignments"
          >Assignments</elmsln-studio-link
        >
        <elmsln-studio-link
          ?active="${"activity"===this.route}"
          href="${this.basePath}activity"
          >Activity Index</elmsln-studio-link
        >
      </div>
      <br />
      <elmsln-studio-main active-route="${this.route}">
        <elmsln-studio-dashboard
          ?demo-mode="${this.demoMode}"
          .discussion="${this.recentDiscussions}"
          @fetch-data="${this._handleFetch}"
          route="dashboard"
          .profile="${this.profile}"
          .submissions="${this.recentSubmissions}"
        >
        </elmsln-studio-dashboard>
        <elmsln-studio-submissions
          assignment-filter="${this.query.assignment||""}"
          .comments="${this.discussion?Object.keys(this.discussion||{}).map((s=>this.discussion[s])):void 0}"
          ?demo-mode="${this.demoMode}"
          @fetch-data="${this._handleFetch}"
          ?grid="${this.query.grid||!1}"
          route="submissions"
          project-filter="${this.query.project||""}"
          student-filter="${this.query.student||""}"
          .submissions="${this.completedSubmissions}"
        >
        </elmsln-studio-submissions>
        <elmsln-studio-portfolio
          comment="${this.query.comment||""}"
          ?demo-mode="${this.demoMode}"
          .feedback="${this.submissionFeedback}"
          @fetch-data="${this._handleFetch}"
          .portfolio="${this.portfolio}"
          route="project"
          ?sort-latest="${"latest"===this.query.sort}"
          submission-filter="${this.query.submission||""}"
          .navigation="${this.prevNextSubmission}"
        >
        </elmsln-studio-portfolio>
        <elmsln-studio-assignments
          ?demo-mode="${this.demoMode}"
          @fetch-data="${this._handleFetch}"
          .lessons="${this.lessons}"
          .profile="${this.profile}"
          route="assignments"
        >
        </elmsln-studio-assignments>
        <elmsln-studio-assignment
          .assignment="${this.assignment}"
          .assignments="${this.assignments}"
          ?demo-mode="${this.demoMode}"
          @fetch-data="${this._handleFetch}"
          route="assignment"
          .submission="${this.submission}"
        >
        </elmsln-studio-assignment>
      </elmsln-studio-main>
    `}static get properties(){return{...super.properties,assignments:{type:Object},assignmentsSource:{type:String,reflect:!0,attribute:"assignments-source"},discussion:{type:Object},discussionSource:{type:String,reflect:!0,attribute:"discussion-source"},lessons:{type:Object},lessonsSource:{type:String,reflect:!0,attribute:"lessons-source"},portfolios:{type:Object},portfoliosSource:{type:String,reflect:!0,attribute:"portfolios-source"},profile:{type:Object},profileSource:{type:String,reflect:!0,attribute:"profile-source"},profiles:{type:Object},profilesSource:{type:String,reflect:!0,attribute:"profiles-source"},sourcePath:{type:String,reflect:!0,attribute:"source-path"},submissions:{type:Object},submissionsSource:{type:String,reflect:!0,attribute:"submissions-source"},users:{type:Object},usersSource:{type:String,reflect:!0,attribute:"users-source"},route:{type:String},params:{type:Object},query:{type:Object},data:{type:Object}}}static get routes(){return[{name:"assignments",pattern:"assignments"},{name:"assignment",pattern:"assignments/:assignment"},{name:"submissions",pattern:"submissions"},{name:"project",pattern:"project/:portfolio"},{name:"dashboard",pattern:"*",data:{title:"Home"}}]}constructor(){super(),this.route="",this.params={},this.query={},this.data={},this.refreshDates={}}router(s,t,i,e){console.log(s,t,i,e),this.route=s,this.params=t,this.query=i,this.data=e}firstUpdated(s){super.firstUpdated&&super.firstUpdated(s),import("./lib/elmsln-studio-portfolio.js"),this.fetchData(this.usersSource,"users")}updated(s){super.updated&&super.updated(s),s.forEach(((s,t)=>{if("route"===t){switch(this[t]){case"assignments":import("./lib/elmsln-studio-assignments.js"),import("./lib/elmsln-studio-assignment.js");break;case"submissions":import("./lib/elmsln-studio-submissions.js")}console.log(this[t])}}))}get assignment(){return this.assignments&&this.params.assignment?this.assignments[this.params.assignment]:void 0}get lesson(){let s=(this.assignment||{}).lessonId;return this.getLesson(s)}get project(){let s=(this.assignment||{}).projectId,t=(this.assignment||{}).lessonId;return this.getProject(t,s)}getLesson(s){return s?this.lessons[s]||{assignments:[]}:void 0}getProject(s,t){let i=this.getLesson(s),e=i&&t?(i.assignments||[]).filter((s=>s.id===t)):[];return e?e[0]:void 0}get feedbackPercentile(){let s=this.profile&&this.profile.given?this.profile.length:void 0,t=this.profiles?this.profiles.map((s=>s.given?s.given.length:void 0)).filter((s=>!!s)):void 0;return console.log("feedbackPercentile",s,t),!s||t.length<2?void 0:this.getPercentile(t,s)}get recentDiscussions(){if(this.discussion){let s=[];return s=Object.keys(this.discussion||{}).map((s=>this.discussion[s])),s.forEach((t=>(t.replies||[]).forEach((t=>s.push(t))))),this.sortDates(s).slice(0,10)}}get filteredPortfolios(){let s,t={},getPrefix=s=>s?s.replace(/-\w+$/,""):void 0,i=this.params.portfolio?getPrefix(this.params.portfolio):void 0,e=this.query.submission?getPrefix(this.query.submission):void 0;return i&&this.portfolios?(Object.keys(this.portfolios||{}).forEach((o=>{let n=this.portfolios[o],r=getPrefix(o)===i,u=r&&e&&n.userId?`${e}-${n.userId}`:void 0;(r||this.portfolios[o].submissions&&u&&this.portfolios[o].submissions.includes(u))&&(t[o]=n,t[o].prev=s,s&&(s.next=t[o]),s=t[o])})),t):void 0}get recentSubmissions(){return this.completedSubmissions?this.sortDates(Object.keys(this.completedSubmissions||{}).map((s=>this.completedSubmissions[s]))).slice(0,5):void 0}get completedSubmissions(){return this.submissions?Object.keys(this.submissions||{}).filter((s=>!!this.submissions[s].date)).map((s=>this.submissions[s])):void 0}get peerSubmissions(){return this.completedSubmissions&&this.query.submission?this.completedSubmissions.filter((s=>s.assignmentId===this.query.submission.replace(/\-\w+$/,""))):void 0}get prevNextSubmission(){let s={};for(let t=0;t<(this.peerSubmissions||[]).length;t++)console.log(this.peerSubmissions[t],this.query.submission),this.peerSubmissions[t].id===this.query.submission&&(s.prev=this.peerSubmissions[t-1]?{...this.peerSubmissions[t-1],activity:"submission"}:void 0,s.next=this.peerSubmissions[t+1]?{...this.peerSubmissions[t+1],activity:"submission"}:void 0,t=this.peerSubmissions.length);return s!={}?s:void 0}get submission(){let s=this.profile&&this.profile.submissions&&this.params.assignment?this.profile.submissions.filter((s=>s.assignmentId===this.params.assignment)):void 0;return s&&s[0]?s[0]:void 0}get portfolio(){return this.params.portfolio&&this.filteredPortfolios?this.filteredPortfolios[this.params.portfolio]:void 0}get submissionFeedback(){return console.log("submissionFeedback",this.query.submission,this.query.submission&&this.discussion?Object.keys(this.discussion||{}).filter((s=>this.discussion[s].submissionId==this.query.submission)).map((s=>this.discussion[s])):void 0),this.query.submission&&this.discussion?Object.keys(this.discussion||{}).filter((s=>this.discussion[s].submissionId==this.query.submission)).map((s=>this.discussion[s])):void 0}_filterBy(s,t,i=""){return s&&t&&s[`${i}${t}`]?s[`${i}${t}`]:{}}fetchData(s,t,i){fetch(this._getPath(s,i)).then((s=>!(!s||!s.json)&&s.json())).then((i=>{200===i.status&&(this[t]=i.data,this.refreshDates[t]=new Date,console.log(`${t} Loaded`,s,i,this[t],this.refreshDates))}))}_handleFetch(s={detail:{}}){let t=s.detail.type,i=`${t}Source`;!s.detail.refresh&&this.refreshDates[t]||this.fetchData(this[i],t)}_getPath(s,t){let i=Object.keys(t||{}).map((s=>`${encodeURI(s)}=${encodeURI(t[s])}`)).join("&");return i?`${s}?${i}`:s}}customElements.define(ElmslnStudio.tag,ElmslnStudio);export{ElmslnStudio};