/**
 * Copyright 2024 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{ChatAgentModalStore as e}from"../chat-agent.js";import{DDD as t}from"../../d-d-d/d-d-d.js";import{autorun as s,toJS as r}from"../../../mobx/dist/mobx.esm.js";import{html as a,css as i}from"../../../lit/index.js";class ChatInput extends t{static get tag(){return"chat-input"}constructor(){super(),this.chatLog=[],this.darkMode=null,this.messageIndex=null,this.userIndex=null,this.previousMessagesIndex=null,this.userName=null,s((()=>{this.chatLog=r(e.chatLog),this.darkMode=r(e.darkMode),this.messageIndex=r(e.messageIndex),this.userIndex=r(e.userIndex),this.previousMessagesIndex=r(this.messageIndex),this.userName=r(e.userName)}))}static get styles(){return[super.styles,i`
        /* https://oer.hax.psu.edu/bto108/sites/haxcellence/documentation/ddd */
        
        :host {
          display: block;
          font-family: var(--ddd-font-primary);
        }

        .chat-input-wrapper {
          align-items: center;
          display: flex;
          gap: var(--ddd-spacing-3);
          justify-content: center;
          padding: var(--ddd-spacing-2) var(--ddd-spacing-3);
          border-radius: var(--ddd-radius-lg);
        }

        :host([dark-mode]) .chat-input-wrapper {
          background-color: var(--ddd-theme-default-coalyGray);
          color: var(--ddd-theme-default-white);
        }

        #user-input {
          background-color: var(--ddd-theme-default-white);
          border-radius: var(--ddd-radius-lg);
          color: var(--ddd-theme-default-coalyGray);
          padding: var(--ddd-spacing-2) var(--ddd-spacing-3);
          resize: none;
          scrollbar-width: none;
          width: 85%;
        }

        :host([dark-mode]) #user-input {
          background-color: var(--ddd-theme-default-coalyGray);
          color: var(--ddd-theme-default-white);
        }

        button {
          align-items: center;
          background-color: #2b2a33;
          border-radius: var(--ddd-radius-sm);
          color: var(--ddd-theme-default-white);
          cursor: pointer;
          display: flex;
          gap: var(--ddd-spacing-1);
          justify-content: center;
        }
        
        button:hover, button:focus-visible {
          background-color: #52525e;
        }

        .send-button {
          align-items: center;
          background-color: var(--data-theme-primary, var(--ddd-primary-1));
          border-radius: var(--ddd-radius-circle);
          box-shadow: 0 4px rgba(0, 3, 33, 0.2);
          cursor: pointer;
          display: flex;
          height: 52px;
          justify-content: center;
          width: 52px;
        }

        .send-button:hover, .send-button:focus-visible {
          box-shadow: 0 6px rgba(0, 3, 33, 0.2);
          transform: translateY(-2px);
        }

        .send-button:active {
          box-shadow: 0 1px rgba(0, 3, 33, 0.2);
          transform: translateY(3px);
        }

        simple-icon-lite {
          color: var(
            --lowContrast-override,
            var(--ddd-theme-bgContrast, white)
          );
        }

        simple-tooltip {
          --simple-tooltip-delay-in: 1000ms;
        }
      `]}render(){return a`
      <div class="chat-input-wrapper">
        <textarea name="prompt-input" id="user-input" placeholder="${e.promptPlaceholder}" @keydown=${this.handleKeyPress}></textarea>
        <div class="up-down-btns">
          <button id="input-up-btn" @click=${this.handleDirectionButtons}><simple-icon-lite icon="hardware:keyboard-arrow-up"></simple-icon-lite></button>
          <button id="input-down-btn" @click=${this.handleDirectionButtons}><simple-icon-lite icon="hardware:keyboard-arrow-down"></simple-icon-lite></button>
        </div>
        <div class="send-button" id="send-button" @click=${this.handleSendButton} tabindex="0" aria-label="Send Prompt">
          <simple-icon-lite icon="icons:send"></simple-icon-lite>
        </div>
        <simple-tooltip for="send-button" position="left">Send Prompt to Merlin</simple-tooltip>
      </div>
    `}handleKeyPress(e){switch(e.key){case"Enter":e.preventDefault(),this.handleSendButton();break;case"ArrowUp":e.preventDefault(),this.displayPreviousMessages("up");break;case"ArrowDown":e.preventDefault(),this.displayPreviousMessages("down")}}handleDirectionButtons(t){const s=t.currentTarget.id;switch(e.devStatement(`${s} button pressed.`,"info"),s){case"input-up-btn":this.displayPreviousMessages("up");break;case"input-down-btn":this.displayPreviousMessages("down")}}handleSendButton(){const t=this.shadowRoot.querySelector("#user-input").value;e.promptCharacterLimit>0&&t.length>e.promptCharacterLimit&&alert(`Please shorten your prompt to no more than ${e.promptCharacterLimit} characters.`),""!==t?(e.devStatement(`Send function activated. "${t}" sent to Merlin.`,"info"),e.handleMessage(e.userName,t),this.shadowRoot.querySelector("#user-input").value=""):e.devStatement("Send button activated. No prompt to send.","warn")}displayPreviousMessages(t){let s=this.shadowRoot.querySelector("#user-input");switch(t){case"up":if(this.previousMessagesIndex>1){for(this.previousMessagesIndex--,e.devStatement(`Arrow Up pressed. Previous message index = ${this.previousMessagesIndex} and message index = ${this.messageIndex}`,"info");this.chatLog[this.previousMessagesIndex].author!==this.userName&&this.previousMessagesIndex>=1;)if(this.previousMessagesIndex--,this.previousMessagesIndex<1){this.previousMessagesIndex++;break}s.value=this.chatLog[this.previousMessagesIndex].message}break;case"down":if(this.previousMessagesIndex<this.messageIndex){for(this.previousMessagesIndex++;this.chatLog[this.previousMessagesIndex].author!==this.userName&&this.previousMessagesIndex<this.messageIndex;)if(this.previousMessagesIndex++,this.previousMessagesIndex>this.messageIndex){this.previousMessagesIndex=this.messageIndex;break}this.previousMessagesIndex>=this.messageIndex?s.value="":s.value=this.chatLog[this.previousMessagesIndex].message}else s.value="";e.devStatement(`Arrow Down pressed. Previous message index = ${this.previousMessagesIndex} and message index = ${this.messageIndex}`,"info");break;default:e.devStatement(`Unknown direction: ${t}.`,"error")}}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),e.promptCharacterLimit>0&&this.shadowRoot.querySelector("#user-input").setAttribute("maxlength",`${e.promptCharacterLimit}`)}static get properties(){return{...super.properties,darkMode:{type:Boolean,attribute:"dark-mode",reflect:!0}}}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}}globalThis.customElements.define(ChatInput.tag,ChatInput);export{ChatInput};