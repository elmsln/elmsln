/**
 * Copyright 2024 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{ChatAgentModalStore as e}from"../chat-agent.js";import{DDD as t}from"../../d-d-d/d-d-d.js";import{autorun as s,toJS as r}from"../../../mobx/dist/mobx.esm.js";import{html as o,css as a}from"../../../lit/index.js";class ChatInput extends t{static get tag(){return"chat-input"}constructor(){super(),this.chatLog=[],this.messageIndex=null,this.userIndex=null,this.previousMessageIndex=null,this.userName=null,s((()=>{this.chatLog=r(e.chatLog),this.messageIndex=r(e.messageIndex),this.userIndex=r(e.userIndex),this.previousMessageIndex=r(this.messageIndex-1),this.userName=r(e.userName)}))}static get styles(){return[super.styles,a`
        /* https://oer.hax.psu.edu/bto108/sites/haxcellence/documentation/ddd */

        :host {
          display: block;
          font-family: var(--ddd-font-primary);
        }

        .chat-input-wrapper {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: var(--ddd-spacing-3);
          padding: var(--ddd-spacing-2) var(--ddd-spacing-3);
        }

        #user-input {
          border-radius: var(--ddd-radius-lg);
          padding: var(--ddd-spacing-2) var(--ddd-spacing-3);
          background-color: var(--ddd-theme-default-white);
          color: #000;
          resize: none;
          scrollbar-width: none;
          width: 85%;
        }

        /* TODO icon shifts slightly when doing the click sequence */
        .send-button {
          width: 52px;
          height: 52px;
          border-radius: var(--ddd-radius-circle);
          background-color: var(--data-theme-primary, var(--ddd-primary-1));
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          box-shadow: 0 4px red;
        }

        .send-button:hover,
        .send-button:focus-visible {
          box-shadow: 0 5px red;
          transform: translateY(-1px);
        }

        .send-button:active {
          box-shadow: 0 1px red;
          transform: translateY(3px);
        }

        simple-icon-lite {
          color: var(
            --lowContrast-override,
            var(--ddd-theme-bgContrast, white)
          );
        }
      `]}render(){return o`
      <div class="chat-input-wrapper">
        <textarea name="prompt-input" id="user-input" placeholder="${e.promptPlaceholder}" @keydown=${this.handleKeyPress}></textarea>
        <div class="send-button" id="send-button" @click=${this.handleSendButton} tabindex="0" aria-label="Send Prompt">
          <simple-icon-lite icon="icons:send"></simple-icon-lite>
        </div>
        <simple-tooltip for="send-button" position="top">Send Prompt to Merlin</simple-tooltip></simple-tooltip>
      </div>
    `}handleKeyPress(t){let s=this.shadowRoot.querySelector("#user-input");switch(t.key){case"Enter":e.developerModeEnabled&&console.info("HAX-DEV-MODE: Enter key pressed."),t.preventDefault(),this.handleSendButton();break;case"ArrowUp":if(e.developerModeEnabled&&console.info(`HAX-DEV-MODE: Arrow Up pressed. Previous message index = ${this.previousMessageIndex} and message index = ${this.messageIndex}`),t.preventDefault(),this.previousMessageIndex>0){for(;this.chatLog[this.previousMessageIndex].author!==this.userName&&(this.previousMessageIndex--,0!==this.previousMessageIndex););s.value=this.chatLog[this.previousMessageIndex].message}break;case"ArrowDown":if(e.developerModeEnabled&&console.info(`HAX-DEV-MODE: Arrow Down pressed. Previous message index = ${this.previousMessageIndex} and message index = ${this.messageIndex}`),t.preventDefault(),this.previousMessageIndex<this.messageIndex-1){for(;this.chatLog[this.previousMessageIndex].author!==this.userName;)this.previousMessageIndex++;s.value=this.chatLog[this.previousMessageIndex].message,this.previousMessageIndex++}else s.value=""}}handleSendButton(){const t=this.shadowRoot.querySelector("#user-input").value;e.promptCharacterLimit>0&&t.length>e.promptCharacterLimit&&alert(`Please shorten your prompt to no more than ${e.promptCharacterLimit} characters.`),""!==t?(e.developerModeEnabled&&console.info("HAX-DEV-MODE: Send button activated. Prompt to send: "+t),e.handleMessage(e.userName,t),this.shadowRoot.querySelector("#user-input").value=""):e.developerModeEnabled&&console.info("HAX-DEV-MODE: Send button activated. No prompt to send")}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),e.promptCharacterLimit>0&&this.shadowRoot.querySelector("#user-input").setAttribute("maxlength",`${e.promptCharacterLimit}`)}static get properties(){return{...super.properties}}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}}globalThis.customElements.define(ChatInput.tag,ChatInput);export{ChatInput};