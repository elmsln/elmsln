import{html as e,PolymerElement as t}from"../../../../../@polymer/polymer/polymer-element.js";import{store as i}from"../../core/haxcms-site-store.js";import{autorun as o,toJS as a}from"../../../../../mobx/dist/mobx.esm.js";import"../../../../../@polymer/polymer/lib/elements/dom-repeat.js";import"../query/site-query.js";class SiteRecentContentBlock extends t{static get tag(){return"site-recent-content-block"}static get template(){return e`
      <style>
        :host {
          display: block;
          background-color: #fff;
          box-shadow: 0 1px 2px #dcdcdc;
          padding: 10px;
          margin-top: 10px;
          --site-recent-content-block-header-color: #363533;
          --site-recent-content-block-item-link-color: #363533;
        }
        .header h3 {
          font-size: 26px;
          margin: 0 0 10px;
          color: var(--site-recent-content-block-header-color);
        }
        .item-wrap {
          display: flex;
          align-items: center;
          border-bottom: solid 1px #dcdcdc;
          padding-bottom: 8px;
          padding-top: 8px;
          @apply --site-recent-content-block-item-wrap;
        }
        .item-heading a {
          text-decoration: none;
          text-transform: none;
          color: var(--site-recent-content-block-item-link-color);
          font-size: 16px;
          @apply --site-recent-content-block-item-link;
        }
        .item-heading a:hover,
        .item-heading a:focus,
        .item-heading a:active {
          @apply --site-recent-content-block-item-link-hover;
        }
        .active {
          border-left: solid;
          border-left-width: 4px;
          border-left-color: var(--site-recent-content-block-active-color);
          background-color: whitesmoke;
          padding-left: 5px;
          @apply --site-recent-content-block-item-active;
        }
        .image-wrapper {
          display: flex;
          margin-right: 10px;
          @apply --site-recent-content-block-image-wrapper;
        }
        .image-wrapper img.image {
          height: 50px;
          width: 50px;
          @apply --site-recent-content-block-image;
        }
      </style>
      <aside>
        <div class="header">
          <h3>[[title]]</h3>
        </div>
        <site-query
          result="{{__items}}"
          sort="[[sort]]"
          conditions="[[conditions]]"
          limit="[[limit]]"
          start-index="[[startIndex]]"
        >
        </site-query>
        <dom-repeat items="[[__items]]" mutable-data>
          <template>
            <div class="item-wrap" data-id$="[[item.id]]">
              <div class="image-wrapper">
                <img
                  class="image"
                  loading="lazy"
                  src="[[item.metadata.fields.image]]"
                />
              </div>
              <div class="item-heading">
                <a href$="[[item.slug]]">[[item.title]]</a>
              </div>
            </div>
          </template>
        </dom-repeat>
      </aside>
    `}static get properties(){return{limit:{type:Number,value:10},startIndex:{type:Number,value:0},sort:{type:Object,value:{"metadata.created":"ASC"}},conditions:{type:Object,value:{}},title:{type:String,value:"Recent content"},activeId:{type:String,observer:"_activeIdChanged"}}}_activeIdChanged(e){if(e){let t=null;if(this.shadowRoot.querySelector('[data-id="'+e+'"]'))t=this.shadowRoot.querySelector('[data-id="'+e+'"]');else{let o=i.manifest.items.find((t=>t.id==e));for(;null===t&&o&&null!=o.parent;)o=i.manifest.items.find((e=>e.id==o.parent)),o&&this.shadowRoot.querySelector('[data-id="'+o.id+'"]')&&(t=this.shadowRoot.querySelector('[data-id="'+o.id+'"]'))}this._prevEl&&this._prevEl.classList.remove("active"),t&&(t.classList.add("active"),this._prevEl=t)}}connectedCallback(){super.connectedCallback(),setTimeout((()=>{this.__disposer=o((()=>{this.activeId=a(i.activeId)}))}),50)}disconnectedCallback(){this.__disposer&&this.__disposer(),super.disconnectedCallback()}}customElements.define(SiteRecentContentBlock.tag,SiteRecentContentBlock);export{SiteRecentContentBlock};