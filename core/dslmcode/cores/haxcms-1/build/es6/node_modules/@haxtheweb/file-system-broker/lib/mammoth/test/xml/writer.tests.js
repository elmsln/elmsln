var e=require("assert"),t=require("../../lib/xml"),n=require("../../lib/xml/writer"),m=require("../test")(module);function assertXmlString(t,m,r){e.equal(n.writeString(t,m),'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'+r)}m("writing empty root element writes out xml declaration and empty root element",(function(){assertXmlString(t.element("root"),{},"<root/>")})),m("can write empty child elements",(function(){assertXmlString(t.element("root",{},[t.element("album"),t.element("single")]),{},"<root><album/><single/></root>")})),m("can write empty descendant elements",(function(){assertXmlString(t.element("root",{},[t.element("album",{},[t.element("year"),t.element("song")])]),{},"<root><album><year/><song/></album></root>")})),m("can write element attributes",(function(){assertXmlString(t.element("root",{},[t.element("album",{title:"Everything in Transit"})]),{},'<root><album title="Everything in Transit"/></root>')})),m("can write text nodes",(function(){assertXmlString(t.element("root",{},[t.element("album",{},[t.text("Everything in Transit")])]),{},"<root><album>Everything in Transit</album></root>")})),m("can write root element with long-form prefix when URI is namespace",(function(){assertXmlString(t.element("{music}root"),{m:"music"},'<m:root xmlns:m="music"/>')})),m("can write child elements with long-form prefix when URI is namespace",(function(){assertXmlString(t.element("root",{},[t.element("{music}album")]),{m:"music"},'<root xmlns:m="music"><m:album/></root>')})),m("can write child elements with short-form prefix when URI is namespace",(function(){assertXmlString(t.element("root",{},[t.element("m:album")]),{m:"music"},'<root xmlns:m="music"><m:album/></root>')})),m("default namespace has key of empty string",(function(){assertXmlString(t.element("root",{},[t.element("{music}album")]),{"":"music"},'<root xmlns="music"><album/></root>')}));