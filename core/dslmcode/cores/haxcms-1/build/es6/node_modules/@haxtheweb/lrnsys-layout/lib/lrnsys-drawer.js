import{html as t,css as e}from"../../../lit/index.js";import{SimpleColors as s}from"../../simple-colors/simple-colors.js";import"../../simple-drawer/simple-drawer.js";import"./lrnsys-button-inner.js";import"../../simple-icon/simple-icon.js";import"../../simple-icon/lib/simple-icons.js";class LrnsysDrawer extends s{static get styles(){return[super.styles,e`
        :host {
          display: block;
          --lrnsys-drawer-color: var(--simple-colors-foreground1);
          --lrnsys-drawer-button-background-color: var(
            --simple-colors-background1
          );
        }
        :host([raised]) button {
          border: 2px solid black;
        }
        button {
          display: inline-block;
          min-width: unset;
          margin: var(--lrnsys-drawer-button-margin);
          padding: var(--lrnsys-drawer-button-padding);
          border: none;
          background: var(--lrnsys-drawer-button-background-color);
        }
        button:hover {
          cursor: pointer;
          background: var(
            --lrnsys-drawer-button-background-color-hover,
            --lrnsys-drawer-button-background-color
          );
        }
      `]}constructor(){super(),this.opened=!1,this.align="left",this.disabled=!1,this.focusState=!1,this.avatar="",this.icon="",this.text="",setTimeout((()=>{import("../../simple-tooltip/simple-tooltip.js")}),0),this.__modal=globalThis.SimpleDrawer.requestAvailability()}render(){return t`
      <button
        class="${this.class}"
        part="lrnsys-drawer-button"
        id="flyouttrigger"
        @click="${this.toggleDrawer}"
        ?raised="${this.raised}"
        ?disabled="${this.disabled}"
        title="${this.alt}"
      >
        <lrnsys-button-inner
          part="lrnsys-drawer-lrnsys-button-inner"
          avatar="${this.avatar}"
          icon="${this.icon}"
          text="${this.text}"
        >
          <slot name="button"></slot>
        </lrnsys-button-inner>
      </button>
      <simple-tooltip
        part="lrnsys-drawer-simple-tooltip"
        for="flyouttrigger"
        animation-delay="0"
        >${this.alt}</simple-tooltip
      >
    `}static get tag(){return"lrnsys-drawer"}static get properties(){return{...super.properties,opened:{type:Boolean,reflect:!0},raised:{type:Boolean,reflect:!0},icon:{type:String},avatar:{type:String},text:{type:String},align:{type:String},alt:{type:String,reflect:!0},header:{type:String},disabled:{type:Boolean,reflect:!0},hoverClass:{type:String,attribute:"hover-class"},focusState:{type:Boolean,attribute:"focus-state"}}}firstUpdated(){setTimeout((()=>{this.shadowRoot.querySelector("#flyouttrigger").addEventListener("mousedown",this.tapEventOn.bind(this)),this.shadowRoot.querySelector("#flyouttrigger").addEventListener("mouseover",this.tapEventOn.bind(this)),this.shadowRoot.querySelector("#flyouttrigger").addEventListener("mouseout",this.tapEventOff.bind(this)),this.shadowRoot.querySelector("#flyouttrigger").addEventListener("focused-changed",this.focusToggle.bind(this))}),0)}tapEventOn(t){void 0!==this.hoverClass&&this.hoverClass.split(" ").forEach(((t,e)=>{""!=t&&this.shadowRoot.querySelector("#flyouttrigger").classList.add(t)}))}tapEventOff(t){void 0!==this.hoverClass&&this.hoverClass.split(" ").forEach(((t,e)=>{""!=t&&this.shadowRoot.querySelector("#flyouttrigger").classList.remove(t)}))}toggleDrawer(){let t=this.children,e=globalThis.document.createElement("span"),s=globalThis.document.createElement("span");for(var r in t)if(void 0!==t[r].tagName)switch(t[r].getAttribute("slot")){case"header":let o=t[r].cloneNode(!0);o.removeAttribute("slot"),e.appendChild(o);break;case"button":break;default:let i=t[r].cloneNode(!0);i.removeAttribute("slot"),s.appendChild(i)}const o=new CustomEvent("simple-drawer-show",{bubbles:!0,cancelable:!0,detail:{title:this.header,elements:{content:s,header:e},invokedBy:this.shadowRoot.querySelector("#flyouttrigger"),align:this.align,size:"30%",clone:!0}});this.dispatchEvent(o)}focusToggle(t){(this.dispatchEvent(new CustomEvent("focus-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:{focus:this.focusState}})),void 0!==this.hoverClass)&&this.hoverClass.split(" ").forEach(((t,e)=>{""!=t&&(this.focusState?this.shadowRoot.querySelector("#flyouttrigger").classList.add(t):this.shadowRoot.querySelector("#flyouttrigger").classList.remove(t))}));this.focusState=!this.focusState}_getTextLabelClass(){return this.avatar||this.icon?"text-label":"text-label-only"}}customElements.define(LrnsysDrawer.tag,LrnsysDrawer);export{LrnsysDrawer};