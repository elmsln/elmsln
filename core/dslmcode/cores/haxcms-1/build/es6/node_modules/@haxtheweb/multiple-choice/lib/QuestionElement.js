import{LitElement as e,html as t,css as s,nothing as i}from"../../../lit/index.js";import{SchemaBehaviors as r}from"../../schema-behaviors/schema-behaviors.js";import{DDDSuper as a}from"../../d-d-d/d-d-d.js";import{I18NMixin as o}from"../../i18n-manager/lib/I18NMixin.js";import"../../simple-icon/simple-icon.js";import"../../simple-icon/lib/simple-icons.js";import"../../simple-fields/lib/simple-fields-field.js";import"../../simple-toolbar/lib/simple-toolbar-button.js";import"../../simple-toast/simple-toast.js";import"../../grid-plate/grid-plate.js";export class QuestionElement extends(r(o(a(e)))){constructor(){super(),this.guessDataValue="display",this.shadowRootOptions={...e.shadowRootOptions,delegatesFocus:!0},this.maxAttempts=0,this.attempts=0,this.showAnswer=!1,this.randomize=!1,this.hideButtons=!1,this.disabled=!1,this.singleOption=!1,this.media=null,this.question="",this.answers=[],this.displayedAnswers=[],this.correctText="Great job!",this.incorrectText="Better luck next time!",this.incorrectIcon="icons:thumb-down",this.quizName="default",this.t={numCorrectLeft:"You have",numCorrectRight:"correct",checkAnswer:"Check answer",tryAgain:"Try again"}}updated(e){super.updated&&super.updated(e),e.forEach(((e,t)=>{if(["answers","displayedAnswers"].includes(t)){let e=`${t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}-changed`;this.dispatchEvent(new CustomEvent(e,{detail:{value:this[t]}}))}"answers"==t&&this.answers&&this.answers.length>0&&(this.displayedAnswers=[...this._computeDisplayedAnswers([...this.answers],this.randomize)])}))}getGuess(){return"display"==this.guessDataValue?this.displayedAnswers.filter((e=>!0===e.userGuess)):this[this.guessDataValue]?this[this.guessDataValue]:void 0}guessCount(){return this.getGuess().length}checkedEvent(e){this.displayedAnswers[e.target.name].userGuess=e.detail.value,this.requestUpdate()}resetAnswer(e){this.showAnswer=!1,globalThis.dispatchEvent(new CustomEvent("simple-toast-hide",{bubbles:!0,composed:!0,cancelable:!1,detail:!1})),this.displayedAnswers=[],this.answers.forEach((e=>{e.userGuess=""}));const t=JSON.parse(JSON.stringify(this.answers));this.answers=[...t]}isCorrect(){let e=!0;for(var t in this.displayedAnswers)0!=e&&this.displayedAnswers[t].correct&&this.displayedAnswers[t].userGuess?e=!0:(this.displayedAnswers[t].correct&&!this.displayedAnswers[t].userGuess||!this.displayedAnswers[t].correct&&this.displayedAnswers[t].userGuess)&&(e=!1);return e}makeItRain(){import("./confetti-container.js").then((e=>{setTimeout((()=>{this.shadowRoot.querySelector("#confetti").setAttribute("popped","")}),0)}))}checkAnswer(e){globalThis.dispatchEvent(new CustomEvent("simple-toast-hide",{bubbles:!0,composed:!0,cancelable:!1,detail:!1}));let t,s,i,r=document.createElement("simple-icon-lite"),a={},o="simple-toast-show";globalThis.HAXCMSToast&&(o="haxcms-toast-show",r.style.setProperty("--simple-icon-height","40px"),r.style.setProperty("--simple-icon-width","40px"),r.style.height="150px",r.style.marginLeft="8px"),this.showAnswer=!0,this.shadowRoot.querySelector("#feedback").focus();let d=this.isCorrect();d?(t="green",s="icons:thumb-up",i=this.correctText,this.makeItRain(),this.playSound("success"),a.hat="party"):(t="red",s="icons:thumb-down",i=this.incorrectText,a.fire=!0,this.playSound("error")),r.icon=s,r.style.marginLeft="16px",r.accentColor=t,r.dark=!0,globalThis.dispatchEvent(new CustomEvent(o,{bubbles:!0,composed:!0,cancelable:!0,detail:{text:i,accentColor:t,duration:3e3,slot:r,...a}}));let n={activityDisplay:"answered",objectName:this.quizName,resultSuccess:d};this.dispatchEvent(new CustomEvent("user-engagement",{bubbles:!0,composed:!0,cancelable:!1,detail:n})),this.attempts++}_computeDisplayedAnswers(e,t){if(void 0!==e&&null!=e&&e.length>0&&t&&!this._haxstate){let t=e;for(var s,i,r=t.length;0!==r;)i=Math.floor(Math.random()*r),s=t[r-=1],t[r]=t[i],t[i]=s;return t}return e}static get properties(){return{...super.properties,showAnswer:{type:Boolean,reflect:!0,attribute:"show-answer"},hasHint:{type:Boolean},hasContent:{type:Boolean},hasFeedbackIncorrect:{type:Boolean},hasFeedbackCorrect:{type:Boolean},hasEvidence:{type:Boolean},media:{type:String},maxAttempts:{type:Number,reflect:!0,attribute:"max-attempts"},attempts:{type:Number,reflect:!0},disabled:{type:Boolean,reflect:!0},singleOption:{type:Boolean,attribute:"single-option"},relatedResource:{type:String,attribute:"related-resource"},question:{type:String},answers:{type:Array},displayedAnswers:{type:Array},correctText:{type:String,attribute:"correct-text"},incorrectText:{type:String,attribute:"incorrect-text"},quizName:{type:String,attribute:"quiz-name"},randomize:{type:Boolean,reflect:!0},hideButtons:{type:Boolean,attribute:"hide-buttons"}}}static get styles(){return[super.styles,s`
        :host {
          display: block;
          min-width: 160px;
          padding: var(--ddd-spacing-8);
          border: var(--ddd-border-md);
          border-radius: var(--ddd-radius-sm);
          box-shadow: var(--ddd-boxShadow-sm);
          background-color: light-dark(var(--ddd-theme-accent), transparent);
          transition: all 0.3s ease-in-out;
          --simple-toolbar-button-border-color: var(
            --simple-colors-default-theme-grey-4
          );
          --simple-fields-field-color: var(
            --simple-colors-default-theme-grey-12
          );
          --simple-fields-field-ink-color: var(
            --simple-colors-default-theme-grey-12
          );
          --simple-fields-field-checked-color: var(
            --simple-colors-default-theme-accent-8
          );
          --simple-fields-field-checked-ink-color: var(
            --simple-colors-default-theme-accent-8
          );
          --simple-fields-field-checkmark-color: var(
            --simple-colors-default-theme-grey-1
          );
          --simple-fields-field-label-color: var(
            --simple-colors-default-theme-grey-12
          );
          --simple-fields-field-error-color: var(
            --simple-colors-default-theme-red-8
          );
          --simple-fields-border-bottom-size: 0px;
          --simple-fields-border-bottom-focus-size: 0px;
        }

        :host(:focus),
        :host(:focus-within),
        :host(:hover) {
          border-color: var(--simple-colors-default-theme-accent-12);
        }

        :host button {
          background-color: var(--simple-colors-default-theme-grey-1);
          color: var(--simple-colors-default-theme-grey-12);
        }
        :host simple-fields-field:hover,
        :host simple-fields-field:focus,
        :host simple-fields-field:focus-within,
        :host simple-fields-field:active {
          cursor: pointer;
          background-color: var(--simple-colors-default-theme-accent-3);
          color: var(--simple-colors-default-theme-accent-12);
          box-shadow: var(--ddd-boxShadow-sm);
          border-color: black;
        }
        p {
          padding: 0;
          margin: 0;
        }
        details p {
          padding: var(--ddd-spacing-4);
        }
        ul {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        h3 {
          padding: 0;
          margin: 0 0 var(--ddd-spacing-8) 0;
          font-family: var(--ddd-font-navigation);
        }
        ul li {
          padding: 0;
        }
        simple-icon {
          display: inline-flex;
        }
        #buttons {
          display: flex;
          align-items: center;
          justify-content: flex-end;
          margin: var(--ddd-spacing-4) 0 0 0;
        }
        #check {
          margin-right: var(--ddd-spacing-4);
        }
        simple-fields-field {
          transition: all 0.3s ease-in-out;
          border-radius: var(--ddd-radius-xs);
          margin-bottom: var(--ddd-spacing-6);
          border: var(--ddd-border-xs);
          color: var(--simple-colors-default-theme-accent-12);
          background-color: var(--simple-colors-default-theme-accent-2);
          --simple-fields-font-family: var(--ddd-font-navigation);
          --simple-fields-font-size: var(--ddd-font-size-xs);
          --simple-fields-line-height: var(--ddd-font-size-xs);
          --simple-icon-height: var(--ddd-icon-xs);
          --simple-icon-width: var(--ddd-icon-xs);
        }
        simple-fields-field[type="textfield"] {
          padding: var(--ddd-spacing-4);
          min-height: var(--ddd-spacing-8);
        }
        simple-fields-field::part(select) {
          padding-top: var(--ddd-spacing-1);
          padding-bottom: var(--ddd-spacing-1);
          padding-left: var(--ddd-spacing-1);
          min-height: var(--ddd-spacing-8);
          line-height: 1.1;
        }
        simple-toolbar-button {
          font-size: var(--ddd-font-size-xs);
          font-family: var(--ddd-font-navigation);
          transition: all 0.3s ease-in-out;
          border: none;
          border-radius: var(--ddd-radius-xs);
        }
        simple-toolbar-button {
          background-color: var(
            --ddd-theme-primary,
            var(--ddd-theme-default-link)
          );
          color: var(
            --lowContrast-override,
            var(--ddd-theme-bgContrast, white)
          );
        }
        simple-toolbar-button[disabled] {
          background-color: light-dark(
            var(--ddd-theme-default-limestoneLight),
            var(--ddd-theme-default-slateGray)
          );
          color: light-dark(black, white);
          opacity: 0.5;
        }
        :host simple-toolbar-button:hover::part(button),
        :host simple-toolbar-button:focus::part(button),
        :host simple-toolbar-button:focus-within::part(button),
        :host simple-toolbar-button:active::part(button) {
          cursor: pointer;
          box-shadow: var(--ddd-boxShadow-sm);
          border-color: black;
        }
        simple-toolbar-button::part(button) {
          border: var(--ddd-border-sm);
          border-radius: var(--ddd-radius-xs);
          padding: var(--ddd-spacing-2);
        }
        simple-toolbar-button::part(label) {
          font-size: var(--ddd-font-size-s);
          font-family: var(--ddd-font-navigation);
          padding: 0;
          margin: 0;
        }
        simple-fields-field:not([type="textfield"])::part(option-inner) {
          position: absolute;
          right: 0px;
          color: light-dark(
            var(--ddd-theme-primary, var(--ddd-theme-default-link)),
            var(--ddd-theme-default-link)
          );
          font-family: var(--ddd-font-navigation);
          font-size: var(--ddd-font-size-xs);
          bottom: 50%;
          top: 50%;
          padding: 0px;
          margin: 0px;
        }
        button[disabled] {
          opacity: 0.5;
        }

        h4 {
          color: light-dark(
            var(
              --lowContrast-override,
              var(--ddd-theme-primary, var(--ddd-theme-default-nittanyNavy))
            ),
            var(--ddd-theme-default-linkLight)
          );
        }
        simple-icon {
          display: inline-flex;
        }
        .feedback {
          margin: var(--ddd-spacing-3) 0;
          font-size: var(--ddd-font-size-sm);
          font-weight: bold;
          text-align: center;
        }
      `]}playSound(e){globalThis.dispatchEvent(new CustomEvent("playaudio",{detail:{sound:e}}))}async haxpreProcessNodeToContent(e){if(e.answers){let s=Array.from(this.querySelectorAll("input:not([slot])"));for(var t in s)s[t].remove();for(var t in e.answers)if(e.answers[t]){let s=document.createElement("input");s.setAttribute("type","checkbox"),s.value=e.answers[t].label,e.answers[t].correct&&s.setAttribute("correct","correct"),e.answers[t].image&&s.setAttribute("data-image",e.answers[t].image),e.answers[t].alt&&s.setAttribute("data-image-alt",e.answers[t].alt),e.answers[t].selectedFeedback&&s.setAttribute("data-selected",e.answers[t].selectedFeedback),e.answers[t].unselectedFeedback&&s.setAttribute("data-unselected",e.answers[t].unselectedFeedback),e.appendChild(s)}}return e}haxpreProcessInsertContent(e,t){return e.properties.answers&&(e.properties.answers=e.properties.answers.map((function(e){return e.userGuess&&delete e.userGuess,e}))),e}firstUpdated(e){super.firstUpdated&&super.firstUpdated(e),this.setAttribute("typeof","oer:Assessment"),this.loadLightDomData()}render(){return t`
      <meta property="oer:assessing" content="${this.relatedResource}" />
      <confetti-container id="confetti">
        <grid-plate layout="1-1">
          <div slot="col-1">
            <h3 property="oer:name">${this.question}</h3>
            ${this.renderInteraction()}
            ${this.hideButtons?i:this.renderButtons()}
          </div>
          <div slot="col-2">
            <details ?open="${!this.hasContent}" id="directions">
              <summary>Directions</summary>
              <div>${this.renderDirections()}</div>
            </details>
            ${this.hasContent?t` <details ?open="${!this.showAnswer}" id="related">
                  <summary>Related content</summary>
                  <div>
                    <slot name="content"></slot>
                  </div>
                </details>`:i}
            <details
              tabindex="${this.showAnswer?"":"-1"}"
              ?disabled="${!this.showAnswer}"
              ?open="${this.showAnswer}"
            >
              <summary id="feedback">Feedback</summary>
              <div>${this.renderFeedback()}</div>
            </details>
          </div>
        </grid-plate>
      </confetti-container>
    `}renderInteraction(){return t`
      <fieldset class="options">
        ${this.displayedAnswers.map(((e,s)=>t`
            <simple-fields-field
              type="${this.singleOption?"radio":"checkbox"}"
              ?disabled="${this.disabled}"
              property="oer:answer"
              name="${s}"
              @mousedown="${this.clickSingle}"
              @keydown="${this.clickSingle}"
              .value="${e?e.userGuess:""}"
              @value-changed="${this.checkedEvent}"
              label="${e&&e.label?e.label:""}"
            ></simple-fields-field>
          `))}
      </fieldset>
    `}inactiveCase(){return 0!==this.guessCount()}renderButtons(){return t`
      <div id="buttons">
        <simple-toolbar-button
          id="check"
          ?disabled="${this.disabled||!this.inactiveCase()||this.showAnswer}"
          @click="${this.checkAnswer}"
          label="${this.t.checkAnswer}"
        >
        </simple-toolbar-button>
        <simple-toolbar-button
          id="reset"
          ?disabled="${this.disabled||!this.inactiveCase()||this.inactiveCase()&&!this.showAnswer}"
          @click="${this.resetAnswer}"
          label="${this.t.tryAgain}"
        >
        </simple-toolbar-button>
      </div>
    `}renderDirections(){return t`<p>
      Select the answers you feel satsisfy the question. When you are done,
      select <strong>${this.t.checkAnswer}</strong>. You will get feedback just
      below here indicating correctness of your answer and how to proceed.
    </p>`}renderFeedback(){return t`
      ${this.showAnswer&&!this.isCorrect()?t` <p class="feedback">${this.incorrectText}</p>
            ${this.hasFeedbackIncorrect?t`<slot name="feedbackIncorrect"></slot>`:i}`:i}
      ${this.showAnswer&&this.isCorrect()?t` <p class="feedback">${this.correctText}</p>
            ${this.hasFeedbackCorrect?t`<slot name="feedbackCorrect"></slot>`:i}`:i}
      ${this.hasHint&&this.showAnswer&&!this.isCorrect()?t`
            <h4>Need a hint?</h4>
            <div>
              <slot name="hint"></slot>
            </div>
          `:i}
      ${this.hasEvidence&&this.showAnswer&&this.isCorrect()?t`
            <h4>Evidence</h4>
            <div>
              <slot name="evidence"></slot>
            </div>
          `:i}
      <simple-toolbar-button
        ?disabled="${this.disabled||!this.showAnswer}"
        @click="${this.resetAnswer}"
        label="${this.t.tryAgain}"
      >
      </simple-toolbar-button>
    `}clickSingle(e){if(this.singleOption){let t=!1;if(e.key?" "===e.key||"Enter"===e.key?t=!0:"ArrowUp"===e.key?(e.preventDefault(),e.target.previousElementSibling?e.target.previousElementSibling.focus():e.target.parentNode.lastElementChild.focus()):"ArrowDown"===e.key&&(e.preventDefault(),e.target.nextElementSibling?e.target.nextElementSibling.focus():e.target.parentNode.firstElementChild.focus()):t=!0,t)for(let t in this.displayedAnswers)t===e.target.name?e.key&&(this.displayedAnswers[t].userGuess?this.displayedAnswers[t].userGuess="":this.displayedAnswers[t].userGuess=!0):this.displayedAnswers[t].userGuess=t===e.target.name||""}else e.key&&("ArrowUp"===e.key?(e.preventDefault(),e.target.previousElementSibling?e.target.previousElementSibling.focus():e.target.parentNode.lastElementChild.focus()):"ArrowDown"===e.key?(e.preventDefault(),e.target.nextElementSibling?e.target.nextElementSibling.focus():e.target.parentNode.firstElementChild.focus()):"Enter"===e.key&&(this.displayedAnswers[e.target.name].userGuess=!this.displayedAnswers[e.target.name].userGuess||""));this.requestUpdate()}processInput(e,t,s){let i=t[e];return{order:parseInt(e),label:i.value,correct:null!=i.getAttribute("correct"),image:i.getAttribute("data-image")||null,alt:i.getAttribute("data-image-alt")||"",selectedFeedback:i.getAttribute("data-selected")||null,unselectedFeedback:i.getAttribute("data-unselected")||null}}loadLightDomData(){if(this.children.length>0){let t=Array.from(this.querySelectorAll("input:not([slot])")),s=[];for(var e in t){let i=this.processInput(e,t,s);s.push(i)}for(var e in this.answers=s,this.hasHint=this.querySelector('[slot="hint"]'),this.hasContent=this.querySelector('[slot="content"]'),this.hasFeedbackCorrect=this.querySelector('[slot="feedbackCorrect"]'),this.hasFeedbackIncorrect=this.querySelector('[slot="feedbackIncorrect"]'),this.hasEvidence=this.querySelector('[slot="evidence"]'),t)t[e].remove()}}haxactiveElementChanged(e,t){t&&(this._haxstate=t)}haxeditModeChanged(e){this._haxstate=e}haxHooks(){return{editModeChanged:"haxeditModeChanged",activeElementChanged:"haxactiveElementChanged",preProcessNodeToContent:"haxpreProcessNodeToContent",preProcessInsertContent:"haxpreProcessInsertContent"}}}