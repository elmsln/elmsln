import{LitElement as t,html as i,css as o,unsafeCSS as e}from"../../../../../lit/index.js";import"../../../../simple-icon/lib/simple-icon-button.js";import"../../../../simple-icon/lib/simple-icons.js";import"../../../../hax-iconset/lib/simple-hax-iconset.js";import"../../../../simple-tooltip/simple-tooltip.js";import{HAXCMSI18NMixin as s}from"./HAXCMSI18NMixin.js";import{HAXCMSThemeParts as n}from"./HAXCMSThemeParts.js";new URL("../../../../app-hax/lib/assets/images/ButtonBGLM.svg",import.meta.url).href,new URL("../../../../app-hax/lib/assets/images/ButtonBGDM.svg",import.meta.url).href;export class HAXCMSButton extends(n(s(t))){constructor(){super(),this.icon="mdextra:hexagon-multiple",this.label="button",this.voiceCommand=""}static get properties(){return{...super.properties,icon:{type:String},label:{type:String},voiceCommand:{type:String},accentColor:{type:String,attribute:"accent-color"}}}HAXCMSFireButtonEvent(t,i,o){const e=new CustomEvent(t,{bubbles:!0,composed:!0,cancelable:!0,detail:{originalTarget:i,values:o}});this.dispatchEvent(e)}HAXCMSButtonClick(t){}renderButton(t,o){return i`
      <simple-icon-button
        .part="${this.editMode?"edit-mode-active":""}"
        tabindex="${this.editMode?"-1":""}"
        id="button"
        label="${t}"
        @click="${this.HAXCMSButtonClick}"
        ?dark="${!this.darkMode}"
        icon="${this.icon}"
        accent-color="${this.accentColor}"
        voice-command="${this.voiceCommand}"
      ></simple-icon-button>
      <simple-tooltip for="button" position="bottom" offset="14">
        ${o}
      </simple-tooltip>
    `}}